#!/bin/bash

# Unofficial Bash Strict Mode (http://redsymbol.net/articles/unofficial-bash-strict-mode/)
set -euo pipefail
IFS=$'\n\t'


function print_usage()
{
    echo "USAGE: $PROGRAM [-novxh] <path:db|dam> <mask>"
} >&2

function print_help()
{
    print_usage
    echo
    echo "Positional arguments:"
    echo "  <path:db|dam>   Path to database"
    echo "  <mask>          Name of mask to convert to BED format"
    echo
    echo "Optional arguments:"
    echo "  -n              No tips: skip intervals at the tips of contigs"
    echo "  -o <file>       Output BED to <file>; default print to standard output"
    echo "  -v              Invert mask"
    echo "  -x <bps>        Ignore masked region with less than <bps> bp"
    echo "  -h              Print this help"
} >&2

function cli_error()
{
    echo "$PROGRAM:" "$@"
    echo
    print_usage

    exit 1
} >&2

function error()
{
    echo "$PROGRAM:" "$@"

    exit 1
} >&2

function assert_can_write()
{
    [[ ! -e "$1" ]] || cli_error "refusing to overwrite file '$1'"

    echo test > "$1" || cli_error "cannot write to file '$1'"
    rm -f "$1"
}

function assert_positive()
{
    (( "$1" )) || cli_error "-$2 must be an integer"
    (( "$1" > 0 )) || cli_error "-$2 must be greater than zero"
}

function parse_opts()
{
    OUT=/dev/stdout

    while getopts "no:vx:h" OPTION; do
        case "$OPTION" in
            n)
                NO_TIPS=1
                ;;
            o)
                OUT="$OPTARG"

                assert_can_write "$OUT"
                ;;
            v)
                INVERT=1
                ;;
            x)
                CUTOFF="$OPTARG"

                assert_positive "$CUTOFF" "$OPTION"
                ;;
            h)
                print_help
                exit
                ;;
            *)
                cli_error "unkown option $OPTION"
                ;;
        esac
    done
    shift $((OPTIND - 1))

    (( $# > 0 )) || cli_error "missing positional argument <path:db|dam>"
    DATABASE="$1"
    [[ -f "$DATABASE" ]] || cli_error "database '$DATABASE' does not exist"
    DATABASE_NAME="$(basename "$DATABASE")"
    DATABASE_NAME="${DATABASE_NAME%.dam}"
    DATABASE_NAME="${DATABASE_NAME%.db}"
    shift

    (( $# > 0 )) || cli_error "missing positional argument <mask>"
    MASK="$1"
    local MASK_FILES=( "$(dirname "$DATABASE")/.$DATABASE_NAME.$MASK".{anno,data} )
    for MASK_FILE in ${MASK_FILES[*]};
    do
        [[ -f "$MASK_FILE" ]] || cli_error "mask file '$MASK_FILE' does not exist"
    done
    shift

    (( $# == 0 )) || cli_error "too many positional arguments"
} >&2

function make_bed()
{
    export MASK
    export DATABASE
    export CUTOFF
    [[ -v INVERT ]] && export INVERT
    [[ -v NO_TIPS ]] && export NO_TIPS

    DBdump -h -m"$MASK" "$DATABASE" | \
        awk '
            BEGIN {
                cutoff = "CUTOFF" in ENVIRON ? ENVIRON["CUTOFF"] : 1;
                invert = "INVERT" in ENVIRON;
                noTips = "NO_TIPS" in ENVIRON;
            }

            function printInterval(scaffold, scaffold_begin, mask_begin, mask_end, scaffold_end)
            {
                mask_length = mask_end - mask_begin;

                if (mask_length >= cutoff && (!noTips || (scaffold_begin < mask_begin && mask_end < scaffold_end)))
                    printf "%s\t%d\t%d\n", scaffold, mask_begin, mask_end

                if (mask_end > scaffold_end) {
                    printf "Invalid mask in `DBdump -h -m%s %s` line %d col %d: masked interval is out of bounds: %d > %d\n", ENVIRON["MASK"], ENVIRON["DATABASE"], FNR, i, mask_end, scaffold_end > "/dev/stderr"
                    exit 1
                }
            }

            ($1 == "H") { scaffold = substr($3, 2) }
            ($1 == "L") { scaffold_begin = $3; scaffold_end = $4; }

            ($1 == "T0" && !invert) {
                for (i = 3; i <= NF; i += 2)
                {
                    mask_begin = scaffold_begin + $(i);
                    mask_end = scaffold_begin + $(i + 1);
                    printInterval(scaffold, scaffold_begin, mask_begin, mask_end, scaffold_end);
                }
            }

            ($1 == "T0" && invert) {
                for (i = 2; i <= NF + 1; i += 2)
                {
                    mask_begin = i > 3 ? scaffold_begin + $(i) : scaffold_begin;
                    mask_end = i < NF ? scaffold_begin + $(i + 1) : scaffold_end;
                    printInterval(scaffold, scaffold_begin, mask_begin, mask_end, scaffold_end);
                }
            }
        '
}

function main()
{
    PROGRAM="$(basename "$0")"

    parse_opts "$@"

    make_bed > "$OUT"
}

main "$@"
