[
	{
		"kind": "module",
		"file": "source/app.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "AAya",
						"name": "args"
					}
				],
				"line": 22,
				"kind": "function",
				"char": 13,
				"name": "main",
				"deco": "FAAyaZi",
				"protection": "public",
				"endchar": 9,
				"endline": 27,
				"comment": "Start `dentist` with the given set of arguments.\n\nSee_also: `dentist.commandline.run()`\n"
			},
			{
				"kind": "mixin",
				"protection": "public",
				"char": 13,
				"line": 22,
				"name": "_d_cmain!()"
			}
		],
		"comment": "    Application entry point.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "app"
	},
	{
		"kind": "module",
		"file": "source/dentist/commandline.d",
		"members": [
			{
				"line": 187,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 189,
						"kind": "enum member",
						"char": 5,
						"name": "ok",
						"protection": "public",
						"value": "0"
					},
					{
						"line": 190,
						"kind": "enum member",
						"char": 5,
						"name": "commandlineError",
						"protection": "public",
						"value": "1"
					},
					{
						"line": 191,
						"kind": "enum member",
						"char": 5,
						"name": "runtimeError",
						"protection": "public",
						"value": "2"
					}
				],
				"name": "ReturnCode",
				"protection": "public",
				"baseDeco": "i",
				"comment": "Possible returns codes of the command line execution.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAAya",
						"storageClass": [
							"in"
						],
						"name": "args"
					}
				],
				"line": 195,
				"kind": "function",
				"char": 12,
				"name": "run",
				"deco": "FIAAyaZE7dentist11commandline10ReturnCode",
				"protection": "public",
				"endchar": 1,
				"endline": 288,
				"comment": "Start DENTIST with the given set of arguments.\n"
			},
			{
				"line": 313,
				"kind": "function",
				"char": 16,
				"name": "printExternalDependencies",
				"deco": "FZv",
				"protection": "protected",
				"endchar": 1,
				"endline": 324,
				"comment": "Print a list of all external dependencies and their availability to\nstandard output (called by `dentist --dependencies`).\n"
			},
			{
				"line": 331,
				"kind": "function",
				"char": 6,
				"name": "assertExternalToolsAvailable",
				"deco": "FZv",
				"protection": "public",
				"endchar": 1,
				"endline": 345,
				"comment": "Assert availability of all external dependencies. This is called before\nany command is executed.\n\nThrows: `CLIException` if one or more external dependencies are not found.\n"
			},
			{
				"line": 350,
				"kind": "function",
				"char": 6,
				"name": "printListOfAllOptions",
				"deco": "FZv",
				"protection": "public",
				"endchar": 1,
				"endline": 461,
				"comment": "Print a list of all CLI options formatted using Markdown (called by\n`dentist --list-options`).\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "E7dentist6common8commands14DentistCommand",
						"name": "_command"
					}
				],
				"line": 552,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 552,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 554,
								"kind": "variable",
								"char": 10,
								"name": "command",
								"init": "_command"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 555,
								"kind": "variable",
								"char": 10,
								"name": "commandName",
								"init": "dentistCommands[_command]"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 557,
								"kind": "variable",
								"char": 17,
								"name": "needTmpdir",
								"init": "command.among(DentistCommand.collectPileUps, DentistCommand.processPileUps, TestingCommand.checkResults)"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 563,
								"kind": "variable",
								"char": 17,
								"name": "needChainingOptions",
								"init": "command.among(DentistCommand.chainLocalAlignments, DentistCommand.processPileUps, TestingCommand.checkResults)"
							},
							{
								"line": 570,
								"kind": "variable",
								"char": 12,
								"name": "executableVersion",
								"init": "version_",
								"type": "string"
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "const(string)[]",
										"name": "leftOver"
									}
								],
								"line": 579,
								"kind": "function",
								"char": 14,
								"name": "parseArguments",
								"type": "(const(string)[] leftOver)",
								"endchar": 9,
								"endline": 616
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 629,
								"name": "trueAssemblyDb"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 651,
								"name": "refDb"
							},
							{
								"line": 654,
								"kind": "function",
								"char": 24,
								"name": "numReferenceContigs",
								"type": "inout @property id_t()",
								"endchar": 9,
								"endline": 662
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 665,
								"kind": "variable",
								"char": 14,
								"name": "contigsExtraName",
								"init": "\"contigs\""
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 666,
								"kind": "variable",
								"char": 14,
								"name": "readsExtraName",
								"init": "\"reads\""
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 683,
								"kind": "variable",
								"char": 18,
								"name": "argReadsMultiplicity",
								"init": "Multiplicity.optional"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 690,
								"name": "readsDb"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "string",
										"name": "readsDb"
									}
								],
								"line": 692,
								"kind": "function",
								"char": 21,
								"name": "validateReadsDb",
								"type": "void(string readsDb)",
								"endchar": 9,
								"endline": 696
							},
							{
								"line": 698,
								"kind": "function",
								"char": 24,
								"name": "hasReadsDb",
								"type": "const pure nothrow @property bool()",
								"endchar": 9,
								"endline": 701
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 712,
								"name": "resultDb"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 724,
								"name": "dbAlignmentFile"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 737,
								"name": "readsAlignmentFile"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 752,
								"name": "readsAlignmentFile"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 763,
								"name": "pileUpsFile"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 773,
								"name": "regions"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 783,
								"name": "inMask"
							},
							{
								"kind": "variable",
								"type": "string[]",
								"char": 18,
								"line": 793,
								"name": "masks"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 806,
								"name": "mappedRegionsMask"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 816,
								"name": "contigAlignmentsCache"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 829,
								"name": "readsMap"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 840,
								"name": "insertionsFile"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 854,
								"name": "assemblyGraphFile"
							},
							{
								"kind": "variable",
								"type": "string[]",
								"char": 18,
								"line": 870,
								"name": "coordStrings"
							},
							{
								"kind": "variable",
								"type": "OutputCoordinate[]",
								"char": 28,
								"line": 872,
								"name": "outputCoordinates"
							},
							{
								"line": 875,
								"kind": "function",
								"char": 14,
								"name": "hookParseCoordStrings",
								"type": "void()",
								"endchar": 9,
								"endline": 880
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 890,
								"name": "outMask"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 900,
								"name": "outMask"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 910,
								"name": "pileUpsFile"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 921,
								"name": "repeatMask"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 931,
								"name": "chainedAlignments"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 941,
								"name": "insertionsFile"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 951,
								"name": "mergedInsertionsFile"
							},
							{
								"kind": "variable",
								"type": "string[]",
								"char": 18,
								"line": 957,
								"name": "insertionsFiles"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 967,
								"name": "outMask"
							},
							{
								"kind": "variable",
								"type": "string[]",
								"char": 18,
								"line": 972,
								"name": "inMasks"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 982,
								"name": "resultFile"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 992,
								"name": "resultFile"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 999,
								"kind": "variable",
								"char": 14,
								"name": "agpVersion",
								"init": "\"2.1\""
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 1003,
								"name": "agpFile"
							},
							{
								"kind": "variable",
								"type": "OptionFlag",
								"char": 20,
								"line": 1012,
								"name": "allowSingleReads"
							},
							{
								"kind": "variable",
								"deco": "k",
								"char": 14,
								"line": 1027,
								"name": "numAuxiliaryThreads"
							},
							{
								"line": 1030,
								"kind": "function",
								"char": 14,
								"name": "hookInitDaccordThreads",
								"type": "void()",
								"endchar": 9,
								"endline": 1036
							},
							{
								"line": 1043,
								"kind": "variable",
								"char": 16,
								"name": "numAuxiliaryThreads",
								"init": "\"{threads}\"",
								"type": "string"
							},
							{
								"line": 1060,
								"kind": "variable",
								"char": 16,
								"name": "badFraction",
								"deco": "d",
								"init": "0.08"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "batchString"
									}
								],
								"line": 1076,
								"kind": "function",
								"char": 14,
								"name": "parseReferenceContigBatch",
								"type": "pure void(string batchString)",
								"endchar": 9,
								"endline": 1094
							},
							{
								"kind": "variable",
								"type": "id_t[2]",
								"char": 17,
								"line": 1098,
								"name": "referenceContigBatch"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "id_t[2]",
										"name": "referenceContigBatch"
									},
									{
										"type": "OptionsFor!command",
										"name": "options"
									}
								],
								"line": 1100,
								"kind": "function",
								"char": 21,
								"name": "validateReferenceContigBatchRange",
								"type": "void(id_t[2] referenceContigBatch, OptionsFor!command options)",
								"endchar": 9,
								"endline": 1111
							},
							{
								"line": 1114,
								"kind": "function",
								"char": 14,
								"name": "hookEnsurePresenceOfBatchRange",
								"type": "void()",
								"endchar": 9,
								"endline": 1120
							},
							{
								"line": 1122,
								"kind": "function",
								"char": 24,
								"name": "referenceContigBatchSize",
								"type": "const pure nothrow @property id_t()",
								"endchar": 9,
								"endline": 1125
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "batchString"
									}
								],
								"line": 1144,
								"kind": "function",
								"char": 14,
								"name": "parsePileUpBatch",
								"type": "pure void(string batchString)",
								"endchar": 9,
								"endline": 1151
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "string",
										"name": "idxSpec"
									}
								],
								"line": 1153,
								"kind": "function",
								"char": 24,
								"name": "parsePileUpIdxSpec",
								"type": "pure id_t[2](string idxSpec)",
								"endchar": 9,
								"endline": 1173
							},
							{
								"line": 1175,
								"kind": "function",
								"char": 24,
								"name": "pileUpLength",
								"type": "inout @property id_t()",
								"endchar": 9,
								"endline": 1185
							},
							{
								"kind": "variable",
								"type": "id_t[2][]",
								"char": 19,
								"line": 1190,
								"name": "pileUpBatches"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "id_t[2][]",
										"name": "pileUpBatches"
									},
									{
										"type": "OptionsFor!command",
										"name": "options"
									}
								],
								"line": 1192,
								"kind": "function",
								"char": 21,
								"name": "validatePileUpBatches",
								"type": "void(id_t[2][] pileUpBatches, OptionsFor!command options)",
								"endchar": 9,
								"endline": 1198
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "id_t[2]",
										"name": "pileUpBatch"
									},
									{
										"type": "OptionsFor!command",
										"name": "options"
									}
								],
								"line": 1200,
								"kind": "function",
								"char": 21,
								"name": "validatePileUpBatchRange",
								"type": "void(id_t[2] pileUpBatch, OptionsFor!command options)",
								"endchar": 9,
								"endline": 1211
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "id_t[2][]",
										"name": "pileUpBatches"
									},
									{
										"type": "OptionsFor!command",
										"name": "options"
									}
								],
								"line": 1213,
								"kind": "function",
								"char": 21,
								"name": "validatePileUpBatchesDontIntersect",
								"type": "void(id_t[2][] pileUpBatches, OptionsFor!command options)",
								"endchar": 9,
								"endline": 1229
							},
							{
								"line": 1232,
								"kind": "function",
								"char": 14,
								"name": "hookEnsurePresenceOfBatchRanges",
								"type": "void()",
								"endchar": 9,
								"endline": 1237
							},
							{
								"line": 1240,
								"kind": "function",
								"char": 14,
								"name": "hookOptimizeBatchRanges",
								"type": "void()",
								"endchar": 9,
								"endline": 1254
							},
							{
								"line": 1256,
								"kind": "function",
								"char": 24,
								"name": "numPileUps",
								"type": "const pure nothrow @property id_t()",
								"endchar": 9,
								"endline": 1261
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 1271,
								"name": "bedFile"
							},
							{
								"line": 1273,
								"kind": "function",
								"char": 14,
								"name": "openBedFile",
								"type": "const File()",
								"endchar": 9,
								"endline": 1279
							},
							{
								"line": 1281,
								"kind": "function",
								"char": 26,
								"name": "bedFileName",
								"type": "const @property string()",
								"endchar": 9,
								"endline": 1287
							},
							{
								"line": 1303,
								"kind": "variable",
								"char": 16,
								"name": "bestPileUpMargin",
								"deco": "d",
								"init": "3.0"
							},
							{
								"line": 1314,
								"kind": "variable",
								"char": 17,
								"name": "bucketSize",
								"init": "500",
								"type": "coord_t"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 1330,
								"name": "contigAlignmentsCache"
							},
							{
								"kind": "variable",
								"type": "OptionFlag",
								"char": 20,
								"line": 1343,
								"name": "cacheOnly"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 1352,
								"name": "closedGapsBedFile"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 1355,
								"kind": "variable",
								"char": 10,
								"name": "configHelpString",
								"init": "\"\\x0a        provide configuration values in a YAML or JSON file. See README.md for\\x0a        usage and examples.\\x0a    \""
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 1366,
								"name": "configFile"
							},
							{
								"line": 1399,
								"kind": "variable",
								"char": 17,
								"name": "contigCutoff",
								"init": "1000",
								"type": "coord_t"
							},
							{
								"line": 1415,
								"kind": "variable",
								"char": 17,
								"name": "cropAlignment",
								"init": "0",
								"type": "coord_t"
							},
							{
								"line": 1430,
								"kind": "variable",
								"char": 17,
								"name": "cropAmbiguous",
								"init": "100",
								"type": "coord_t"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "option"
									}
								],
								"line": 1441,
								"kind": "function",
								"char": 14,
								"name": "addAdditionalDaccordOptions",
								"type": "void(string option)",
								"endchar": 9,
								"endline": 1444
							},
							{
								"kind": "variable",
								"type": "string[]",
								"char": 18,
								"line": 1447,
								"name": "additionalDaccordOptions"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "option"
									}
								],
								"line": 1458,
								"kind": "function",
								"char": 14,
								"name": "addAdditionalConsensusAlignmentOptions",
								"type": "void(string option)",
								"endchar": 9,
								"endline": 1461
							},
							{
								"kind": "variable",
								"type": "string[]",
								"char": 18,
								"line": 1464,
								"name": "additionalConsensusAlignmentOptions"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "option"
									}
								],
								"line": 1475,
								"kind": "function",
								"char": 14,
								"name": "addAdditionalReadsVsReadsAlignmentOptions",
								"type": "void(string option)",
								"endchar": 9,
								"endline": 1478
							},
							{
								"kind": "variable",
								"type": "string[]",
								"char": 18,
								"line": 1481,
								"name": "additionalReadsVsReadsAlignmentOptions"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "option"
									}
								],
								"line": 1493,
								"kind": "function",
								"char": 14,
								"name": "addAdditionalSelfAlignmentOptions",
								"type": "void(string option)",
								"endchar": 9,
								"endline": 1496
							},
							{
								"kind": "variable",
								"type": "string[]",
								"char": 18,
								"line": 1499,
								"name": "additionalSelfAlignmentOptions"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "option"
									}
								],
								"line": 1511,
								"kind": "function",
								"char": 14,
								"name": "addAdditionalRefVsReadsAlignmentOptions",
								"type": "void(string option)",
								"endchar": 9,
								"endline": 1514
							},
							{
								"kind": "variable",
								"type": "string[]",
								"char": 18,
								"line": 1517,
								"name": "additionalRefVsReadsAlignmentOptions"
							},
							{
								"kind": "variable",
								"type": "OptionFlag",
								"char": 20,
								"line": 1529,
								"name": "dataComments"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "option"
									}
								],
								"line": 1541,
								"kind": "function",
								"char": 14,
								"name": "addAdditionalTandemAlignmentOptions",
								"type": "void(string option)",
								"endchar": 9,
								"endline": 1544
							},
							{
								"kind": "variable",
								"type": "string[]",
								"char": 18,
								"line": 1547,
								"name": "additionalTandemAlignmentOptions"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 1558,
								"name": "intermediatePileUpsStem"
							},
							{
								"kind": "variable",
								"type": "OptionFlag",
								"char": 20,
								"line": 1567,
								"name": "debugRepeatMasks"
							},
							{
								"line": 1581,
								"kind": "variable",
								"char": 16,
								"name": "dustMask",
								"init": "\"dust\"",
								"type": "string"
							},
							{
								"line": 1584,
								"kind": "function",
								"char": 14,
								"name": "fixDefaultDustMask",
								"type": "void()",
								"endchar": 9,
								"endline": 1597
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "option"
									}
								],
								"line": 1608,
								"kind": "function",
								"char": 14,
								"name": "addAdditionalReadsDustOptions",
								"type": "void(string option)",
								"endchar": 9,
								"endline": 1611
							},
							{
								"kind": "variable",
								"type": "string[]",
								"char": 18,
								"line": 1614,
								"name": "additionalReadsDustOptions"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "option"
									}
								],
								"line": 1625,
								"kind": "function",
								"char": 14,
								"name": "addAdditionalRefDustOptions",
								"type": "void(string option)",
								"endchar": 9,
								"endline": 1628
							},
							{
								"kind": "variable",
								"type": "string[]",
								"char": 18,
								"line": 1631,
								"name": "additionalRefDustOptions"
							},
							{
								"line": 1645,
								"kind": "variable",
								"char": 16,
								"name": "existingGapBonus",
								"deco": "d",
								"init": "6.0"
							},
							{
								"line": 1656,
								"kind": "variable",
								"char": 16,
								"name": "fastaLineWidth",
								"init": "50",
								"type": "size_t"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 1667,
								"name": "gapDetailsJson"
							},
							{
								"kind": "variable",
								"type": "coord_t",
								"char": 17,
								"line": 1677,
								"name": "gapDetailsContext"
							},
							{
								"kind": "variable",
								"type": "OptionFlag",
								"char": 16,
								"line": 1682,
								"name": "help"
							},
							{
								"line": 1698,
								"kind": "variable",
								"char": 20,
								"name": "joinPolicy",
								"init": "JoinPolicy.scaffoldGaps",
								"type": "JoinPolicy"
							},
							{
								"kind": "variable",
								"type": "OptionFlag",
								"char": 20,
								"line": 1711,
								"name": "useJson"
							},
							{
								"kind": "variable",
								"type": "OptionFlag",
								"char": 20,
								"line": 1718,
								"name": "keepTemp"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "mask"
									}
								],
								"line": 1734,
								"kind": "function",
								"char": 14,
								"name": "addMask",
								"type": "pure void(string mask)",
								"endchar": 9,
								"endline": 1737
							},
							{
								"kind": "variable",
								"type": "string[]",
								"char": 18,
								"line": 1746,
								"name": "repeatMasks"
							},
							{
								"line": 1764,
								"kind": "variable",
								"char": 16,
								"name": "maxAlignmentError",
								"deco": "d",
								"init": "1.0 - minAverageCorrelationRate"
							},
							{
								"line": 1775,
								"kind": "variable",
								"char": 17,
								"name": "maxChainGapBps",
								"init": "10000",
								"type": "coord_t"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 1782,
								"kind": "variable",
								"char": 14,
								"name": "numBubblesEscapeNodes",
								"init": "2"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 1783,
								"kind": "variable",
								"char": 14,
								"name": "nodePerContig",
								"init": "2"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 1784,
								"kind": "variable",
								"char": 14,
								"name": "numIntermediateContigs",
								"init": "3"
							},
							{
								"line": 1789,
								"kind": "variable",
								"char": 15,
								"name": "maxBubbleSize",
								"deco": "h",
								"init": "numBubblesEscapeNodes + nodePerContig * numIntermediateContigs",
								"comment": "Consider cyclic subgraphs of up to the size when detecting\n_bubbles_ aka. _skipping pile ups.\n"
							},
							{
								"line": 1793,
								"kind": "variable",
								"char": 15,
								"name": "maxBubbleResolverIterations",
								"deco": "h",
								"init": "1 + numIntermediateContigs",
								"comment": "Run the solver at most this number of times\n"
							},
							{
								"line": 1808,
								"kind": "variable",
								"char": 14,
								"name": "maxCoverageReads",
								"init": "id_t.max",
								"type": "id_t"
							},
							{
								"line": 1810,
								"kind": "function",
								"char": 24,
								"name": "hasMaxCoverageReads",
								"type": "const pure nothrow @property @safe bool()",
								"endchar": 9,
								"endline": 1813
							},
							{
								"kind": "variable",
								"type": "id_t[2]",
								"char": 17,
								"line": 1816,
								"name": "coverageBoundsReads"
							},
							{
								"line": 1819,
								"kind": "function",
								"char": 14,
								"name": "setCoverageBoundsReads",
								"type": "void()",
								"endchar": 9,
								"endline": 1846
							},
							{
								"line": 1861,
								"kind": "variable",
								"char": 14,
								"name": "maxCoverageSelf",
								"init": "4",
								"type": "id_t"
							},
							{
								"kind": "variable",
								"type": "id_t[2]",
								"char": 17,
								"line": 1864,
								"name": "coverageBoundsSelf"
							},
							{
								"line": 1867,
								"kind": "function",
								"char": 14,
								"name": "setCoverageBoundsSelf",
								"type": "void()",
								"endchar": 9,
								"endline": 1873
							},
							{
								"line": 1888,
								"kind": "variable",
								"char": 14,
								"name": "maxImproperCoverageReads",
								"init": "id_t.max",
								"type": "id_t"
							},
							{
								"line": 1890,
								"kind": "function",
								"char": 24,
								"name": "hasMaxImproperCoverageReads",
								"type": "const pure nothrow @property @safe bool()",
								"endchar": 9,
								"endline": 1893
							},
							{
								"kind": "variable",
								"type": "id_t[2]",
								"char": 17,
								"line": 1896,
								"name": "improperCoverageBoundsReads"
							},
							{
								"line": 1899,
								"kind": "function",
								"char": 14,
								"name": "setImproperCoverageBoundsReads",
								"type": "void()",
								"endchar": 9,
								"endline": 1927
							},
							{
								"line": 1938,
								"kind": "variable",
								"char": 17,
								"name": "maxIndelBps",
								"init": "1000",
								"type": "coord_t"
							},
							{
								"line": 1953,
								"kind": "variable",
								"char": 16,
								"name": "maxInsertionError",
								"deco": "d",
								"init": "0.1"
							},
							{
								"line": 1970,
								"kind": "variable",
								"char": 16,
								"name": "maxRelativeOverlap",
								"deco": "d",
								"init": "0.3"
							},
							{
								"line": 1992,
								"kind": "variable",
								"char": 17,
								"name": "minAnchorLength",
								"init": "500",
								"type": "coord_t"
							},
							{
								"line": 2006,
								"kind": "variable",
								"char": 14,
								"name": "minCoverageReads",
								"init": "id_t.max",
								"type": "id_t"
							},
							{
								"line": 2008,
								"kind": "function",
								"char": 24,
								"name": "hasMinCoverageReads",
								"type": "const pure nothrow @property @safe bool()",
								"endchar": 9,
								"endline": 2011
							},
							{
								"kind": "variable",
								"type": "id_t[2]",
								"char": 17,
								"line": 2014,
								"name": "coverageBoundsReads"
							},
							{
								"line": 2017,
								"kind": "function",
								"char": 14,
								"name": "setCoverageBoundsReads",
								"type": "void()",
								"endchar": 9,
								"endline": 2044
							},
							{
								"line": 2056,
								"kind": "variable",
								"char": 16,
								"name": "minExtensionLength",
								"init": "100",
								"type": "size_t"
							},
							{
								"kind": "variable",
								"type": "coord_t",
								"char": 17,
								"line": 2067,
								"name": "minGapSize"
							},
							{
								"kind": "variable",
								"type": "coord_t",
								"char": 17,
								"line": 2078,
								"name": "minIntervalSize"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 2081,
								"kind": "variable",
								"char": 17,
								"name": "defaultMinSpanningReads",
								"init": "3"
							},
							{
								"line": 2092,
								"kind": "variable",
								"char": 16,
								"name": "minReadsPerPileUp",
								"init": "defaultMinSpanningReads",
								"type": "size_t"
							},
							{
								"line": 2109,
								"kind": "variable",
								"char": 16,
								"name": "minRelativeScore",
								"deco": "d",
								"init": "1.0"
							},
							{
								"kind": "variable",
								"type": "arithmetic_t",
								"char": 22,
								"line": 2121,
								"name": "minScore"
							},
							{
								"line": 2124,
								"kind": "function",
								"char": 14,
								"name": "hookEnsurePresenceOfMinScore",
								"type": "void()",
								"endchar": 9,
								"endline": 2130
							},
							{
								"line": 2143,
								"kind": "variable",
								"char": 16,
								"name": "minSpanningReads",
								"init": "defaultMinSpanningReads",
								"type": "size_t"
							},
							{
								"kind": "variable",
								"type": "OptionFlag",
								"char": 20,
								"line": 2152,
								"name": "reportAll"
							},
							{
								"kind": "variable",
								"type": "OptionFlag",
								"char": 20,
								"line": 2164,
								"name": "noHighlightInsertions"
							},
							{
								"kind": "variable",
								"type": "OptionFlag",
								"char": 20,
								"line": 2173,
								"name": "noMergeExtensions"
							},
							{
								"line": 2175,
								"kind": "function",
								"char": 24,
								"name": "mergeExtensions",
								"type": "const pure nothrow @property bool()",
								"endchar": 9,
								"endline": 2178
							},
							{
								"kind": "variable",
								"type": "OnlyFlag",
								"char": 18,
								"line": 2192,
								"name": "onlyFlag"
							},
							{
								"line": 2194,
								"kind": "enum",
								"char": 9,
								"members": [
									{
										"kind": "enum member",
										"char": 13,
										"value": "1 << 0",
										"line": 2196,
										"name": "spanning"
									},
									{
										"kind": "enum member",
										"char": 13,
										"value": "1 << 1",
										"line": 2197,
										"name": "extending"
									},
									{
										"kind": "enum member",
										"char": 13,
										"value": "spanning | extending",
										"line": 2198,
										"name": "both"
									}
								],
								"name": "OnlyFlag",
								"baseDeco": "i"
							},
							{
								"kind": "alias",
								"type": "BitFlags!(OnlyFlag, Yes.unsafe)",
								"char": 9,
								"line": 2201,
								"name": "OnlyFlags"
							},
							{
								"kind": "variable",
								"type": "OnlyFlags",
								"char": 19,
								"line": 2203,
								"name": "onlyFlags"
							},
							{
								"line": 2206,
								"kind": "function",
								"char": 14,
								"name": "initOnlyFlags",
								"type": "pure nothrow void()",
								"endchar": 9,
								"endline": 2209
							},
							{
								"kind": "variable",
								"type": "id_t",
								"char": 14,
								"line": 2218,
								"name": "ploidy"
							},
							{
								"kind": "variable",
								"type": "OptionFlag",
								"char": 20,
								"line": 2227,
								"name": "printProgress"
							},
							{
								"line": 2234,
								"kind": "variable",
								"char": 14,
								"name": "printProgressEvery",
								"deco": "k",
								"init": "500"
							},
							{
								"line": 2244,
								"kind": "variable",
								"char": 30,
								"name": "progressFormat",
								"init": "ProgressMeter.Format.human",
								"type": "ProgressMeter.Format"
							},
							{
								"line": 2247,
								"kind": "function",
								"char": 23,
								"name": "createProgressMeter",
								"type": "const @safe ProgressMeter()",
								"endchar": 9,
								"endline": 2259
							},
							{
								"kind": "variable",
								"type": "coord_t",
								"char": 17,
								"line": 2276,
								"name": "properAlignmentAllowance"
							},
							{
								"line": 2279,
								"kind": "function",
								"char": 14,
								"name": "hookEnsurePresenceOfProperAlignmentAllowance",
								"type": "void()",
								"endchar": 9,
								"endline": 2285
							},
							{
								"kind": "variable",
								"type": "OptionFlag",
								"char": 16,
								"line": 2293,
								"name": "quiet"
							},
							{
								"kind": "variable",
								"deco": "d",
								"char": 16,
								"line": 2311,
								"name": "readCoverage"
							},
							{
								"line": 2314,
								"kind": "function",
								"char": 24,
								"name": "hasReadCoverage",
								"type": "const pure nothrow @property @safe bool()",
								"endchar": 9,
								"endline": 2319
							},
							{
								"kind": "variable",
								"type": "OptionFlag",
								"char": 20,
								"line": 2328,
								"name": "recoverImperfectContigs"
							},
							{
								"line": 2335,
								"kind": "variable",
								"char": 16,
								"name": "maxImperfectContigError",
								"deco": "d",
								"init": "0.015"
							},
							{
								"line": 2337,
								"kind": "function",
								"char": 28,
								"name": "recoverImperfectContigsAlignmentOptions",
								"type": "const @property string[]()",
								"endchar": 9,
								"endline": 2350
							},
							{
								"line": 2364,
								"kind": "variable",
								"char": 17,
								"name": "regionContext",
								"init": "1000",
								"type": "coord_t"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "optionName"
									}
								],
								"line": 2374,
								"kind": "function",
								"char": 10,
								"name": "addRevertOption",
								"type": "void(string optionName)",
								"endchar": 5,
								"endline": 2377
							},
							{
								"kind": "variable",
								"type": "string[]",
								"char": 14,
								"line": 2379,
								"name": "revertOptionNames"
							},
							{
								"line": 2382,
								"kind": "function",
								"char": 10,
								"name": "revertOptions",
								"type": "void()",
								"endchar": 5,
								"endline": 2386
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "optionName"
									}
								],
								"line": 2388,
								"kind": "function",
								"char": 10,
								"name": "revertOption",
								"type": "void(string optionName)",
								"endchar": 5,
								"endline": 2437
							},
							{
								"line": 2450,
								"kind": "variable",
								"char": 17,
								"name": "weakCoverageWindow",
								"init": "500",
								"type": "coord_t"
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 2461,
								"name": "assemblyGraphFile"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "skipGapsString"
									}
								],
								"line": 2477,
								"kind": "function",
								"char": 14,
								"name": "parseSkipGaps",
								"type": "pure void(string skipGapsString)",
								"endchar": 9,
								"endline": 2484
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 2493,
								"name": "skipGapsFile"
							},
							{
								"line": 2496,
								"kind": "function",
								"char": 14,
								"name": "hookReadSkipGapsFile",
								"type": "void()",
								"endchar": 9,
								"endline": 2509
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "string",
										"name": "gapSpec"
									}
								],
								"line": 2512,
								"kind": "function",
								"char": 24,
								"name": "parseGapSpec",
								"type": "pure id_t[2](string gapSpec)",
								"endchar": 9,
								"endline": 2519
							},
							{
								"kind": "variable",
								"type": "id_t[2][]",
								"char": 19,
								"line": 2523,
								"name": "skipGaps"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "id_t[2][]",
										"name": "skipGaps"
									},
									{
										"type": "OptionsFor!command",
										"name": "options"
									}
								],
								"line": 2525,
								"kind": "function",
								"char": 21,
								"name": "validateSkipGaps",
								"type": "void(id_t[2][] skipGaps, OptionsFor!command options)",
								"endchar": 9,
								"endline": 2529
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "id_t[2]",
										"name": "skipGap"
									},
									{
										"type": "OptionsFor!command",
										"name": "options"
									}
								],
								"line": 2531,
								"kind": "function",
								"char": 21,
								"name": "validatePileUpSkipGap",
								"type": "void(id_t[2] skipGap, OptionsFor!command options)",
								"endchar": 9,
								"endline": 2549
							},
							{
								"line": 2552,
								"kind": "function",
								"char": 14,
								"name": "hookSortSkipGaps",
								"type": "void()",
								"endchar": 9,
								"endline": 2559
							},
							{
								"kind": "variable",
								"type": "trace_point_t",
								"char": 23,
								"line": 2574,
								"name": "tracePointDistance"
							},
							{
								"line": 2577,
								"kind": "function",
								"char": 14,
								"name": "hookGetTracePointDistance",
								"type": "void()",
								"endchar": 9,
								"endline": 2599
							},
							{
								"kind": "variable",
								"deco": "k",
								"char": 14,
								"line": 2611,
								"name": "numThreads"
							},
							{
								"line": 2614,
								"kind": "function",
								"char": 14,
								"name": "hookInitThreads",
								"type": "void()",
								"endchar": 9,
								"endline": 2620
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 2630,
								"kind": "variable",
								"char": 14,
								"name": "tmpdirTemplate",
								"init": "format!\"dentist-%s-XXXXXX\"(command)",
								"comment": "            Last part of the working directory name. A directory in the temp\n            directory as returned by `std.file.tmpDir` with the naming scheme will\n            be created to hold all data for the computation.\n"
							},
							{
								"kind": "variable",
								"line": 2635,
								"char": 16,
								"type": "string",
								"comment": "This is a temporary directory to store all working data.\n",
								"name": "tmpdir"
							},
							{
								"line": 2638,
								"kind": "function",
								"char": 14,
								"name": "hookCreateTmpdir",
								"type": "void()",
								"endchar": 9,
								"endline": 2679
							},
							{
								"line": 2682,
								"kind": "function",
								"char": 14,
								"name": "hookCleanTmpdir",
								"type": "const void()",
								"endchar": 9,
								"endline": 2695
							},
							{
								"line": 2700,
								"kind": "function",
								"char": 10,
								"name": "requestUsage",
								"type": "pure void()",
								"endchar": 5,
								"endline": 2703
							},
							{
								"line": 2711,
								"kind": "function",
								"char": 10,
								"name": "increaseVerbosity",
								"type": "pure void()",
								"endchar": 5,
								"endline": 2714
							},
							{
								"line": 2721,
								"kind": "variable",
								"char": 12,
								"name": "verbosity",
								"init": "0",
								"type": "size_t"
							},
							{
								"line": 2724,
								"kind": "function",
								"char": 10,
								"name": "hookInitLogLevel",
								"type": "void()",
								"endchar": 5,
								"endline": 2748
							},
							{
								"kind": "variable",
								"type": "string",
								"char": 16,
								"line": 2762,
								"name": "weakCoverageMask"
							},
							{
								"line": 2768,
								"kind": "function",
								"char": 35,
								"name": "chainingOptions",
								"type": "const @property ChainingOptions()",
								"endchar": 9,
								"endline": 2777
							},
							{
								"line": 2788,
								"kind": "function",
								"char": 28,
								"name": "selfAlignmentOptions",
								"type": "const @property string[]()",
								"endchar": 9,
								"endline": 2802
							},
							{
								"line": 2813,
								"kind": "function",
								"char": 28,
								"name": "tandemAlignmentOptions",
								"type": "const @property string[]()",
								"endchar": 9,
								"endline": 2824
							},
							{
								"line": 2834,
								"kind": "function",
								"char": 28,
								"name": "pileUpAlignmentOptions",
								"type": "const @property string[]()",
								"endchar": 9,
								"endline": 2850
							},
							{
								"line": 2852,
								"kind": "function",
								"char": 28,
								"name": "pileUpDustOptions",
								"type": "const @property string[]()",
								"endchar": 9,
								"endline": 2855
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 2864,
								"kind": "variable",
								"char": 14,
								"name": "flankingContigsRepeatMaskName",
								"init": "\"rep\""
							},
							{
								"line": 2866,
								"kind": "function",
								"char": 28,
								"name": "postConsensusAlignmentOptions",
								"type": "const @property string[]()",
								"endchar": 9,
								"endline": 2883
							},
							{
								"line": 2891,
								"kind": "function",
								"char": 28,
								"name": "refVsReadsAlignmentOptions",
								"type": "const @property string[]()",
								"endchar": 9,
								"endline": 2903
							},
							{
								"line": 2908,
								"kind": "struct",
								"char": 20,
								"members": [
									{
										"kind": "variable",
										"type": "string[]",
										"char": 26,
										"line": 2910,
										"name": "damapperOptions"
									},
									{
										"kind": "variable",
										"type": "string[]",
										"char": 26,
										"line": 2911,
										"name": "dbsplitOptions"
									},
									{
										"kind": "variable",
										"type": "string",
										"char": 24,
										"line": 2912,
										"name": "tmpdir"
									}
								],
								"name": "AnchorSkippingPileUpsOptions",
								"protection": "public"
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 2915,
								"kind": "function",
								"char": 28,
								"name": "anchorSkippingPileUpsOptions",
								"type": "const @property ()",
								"endchar": 13,
								"endline": 2925
							},
							{
								"line": 2934,
								"kind": "struct",
								"char": 16,
								"members": [
									{
										"kind": "variable",
										"type": "string[]",
										"char": 22,
										"line": 2936,
										"name": "daccordOptions"
									},
									{
										"kind": "variable",
										"type": "string[]",
										"char": 22,
										"line": 2937,
										"name": "dalignerOptions"
									},
									{
										"kind": "variable",
										"type": "string[]",
										"char": 22,
										"line": 2938,
										"name": "dbsplitOptions"
									},
									{
										"kind": "variable",
										"type": "string[]",
										"char": 22,
										"line": 2939,
										"name": "dbdustOptions"
									},
									{
										"kind": "variable",
										"type": "string",
										"char": 20,
										"line": 2940,
										"name": "tmpdir"
									},
									{
										"kind": "variable",
										"type": "coord_t",
										"char": 21,
										"line": 2941,
										"name": "properAlignmentAllowance"
									}
								],
								"name": "ConsensusOptions",
								"protection": "public"
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 2944,
								"kind": "function",
								"char": 24,
								"name": "daccordOptions",
								"type": "const @property ()",
								"endchar": 9,
								"endline": 2957
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 2960,
								"kind": "function",
								"char": 24,
								"name": "consensusOptions",
								"type": "const @property ()",
								"endchar": 9,
								"endline": 2978
							},
							{
								"parameters": [
									{
										"kind": "alias",
										"name": "property"
									}
								],
								"line": 2981,
								"kind": "template",
								"char": 17,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"deco": "k",
												"storageClass": [
													"in"
												],
												"default": "2",
												"name": "precision"
											}
										],
										"line": 2981,
										"kind": "function",
										"char": 17,
										"name": "defaultValue",
										"type": "pure nothrow (in uint precision = 2)",
										"endchar": 5,
										"endline": 2991
									}
								],
								"name": "defaultValue"
							},
							{
								"storageClass": [
									"auto",
									"static"
								],
								"line": 2993,
								"kind": "function",
								"char": 17,
								"name": "numArguments",
								"type": "pure nothrow ()",
								"endchar": 5,
								"endline": 3012
							}
						],
						"name": "OptionsFor",
						"protection": "public"
					}
				],
				"name": "OptionsFor",
				"protection": "public",
				"comment": "Options for the different commands. See the source code,\n`dentist <command> --help` or `dentist --list-options` for\na description of the options.\n\nNote, due to a limitation of D's documentation generation the API doc\nis rather useless because it does not capture the decorators (`@Option`,\n`@Argument`, ...) that actually describe the CLI.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "E7dentist6common8commands14DentistCommand",
						"name": "command"
					}
				],
				"line": 3059,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 3059,
						"kind": "variable",
						"char": 6,
						"name": "commandSummary",
						"init": "makeCommandSummary!command"
					}
				],
				"name": "commandSummary",
				"protection": "public",
				"comment": "A short summary for each command to be output underneath the usage.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 3081,
				"kind": "variable",
				"char": 6,
				"name": "commandsSummary",
				"deco": "Aya",
				"init": "['A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', ' ', 'c', 'o', 'm', 'm', 'a', 'n', 'd', 's', ':', '\\x0a', 'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', '-', 'c', 'o', 'n', 'f', 'i', 'g', ' ', ' ', ' ', ' ', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', ' ', 'c', 'o', 'n', 'f', 'i', 'g', ' ', 'f', 'i', 'l', 'e', '.', '\\x0a', 'b', 'u', 'i', 'l', 'd', '-', 'p', 'a', 'r', 't', 'i', 'a', 'l', '-', 'a', 's', 's', 'e', 'm', 'b', 'l', 'y', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', 'u', 'i', 'l', 'd', ' ', 'a', ' ', 'p', 'a', 'r', 't', 'i', 'a', 'l', ' ', 'a', 's', 's', 'e', 'm', 'b', 'l', 'y', ' ', 'f', 'r', 'o', 'm', ' ', 'a', ' ', 'm', 'a', 's', 'k', '.', '\\x0a', 'f', 'i', 'n', 'd', '-', 'c', 'l', 'o', 's', 'a', 'b', 'l', 'e', '-', 'g', 'a', 'p', 's', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'i', 'n', 'd', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'g', 'a', 'p', 's', ' ', 'a', 'r', 'e', ' ', 'c', 'l', 'o', 's', 'a', 'b', 'l', 'e', ',', ' ', 'i', '.', 'e', '.', '\\x0a', 'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', '-', 'd', 'a', 'z', 'z', 'l', 'e', 'r', '-', 'o', 'p', 't', 'i', 'o', 'n', 's', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'O', 'u', 't', 'p', 'u', 't', 's', ' ', 'a', 'd', 'v', 'i', 'c', 'e', ' ', 'o', 'n', ' ', 'h', 'o', 'w', ' ', 't', 'o', ' ', 'c', 'a', 'l', 'l', ' ', 's', 'o', 'm', 'e', ' ', 'o', 'f', ' ', 't', 'h', 'e', ' ', 'D', 'a', 'z', 'z', 'l', 'e', 'r', ' ', 't', 'o', 'o', 'l', 's', '.', '\\x0a', 'm', 'a', 's', 'k', '-', 'r', 'e', 'p', 'e', 't', 'i', 't', 'i', 'v', 'e', '-', 'r', 'e', 'g', 'i', 'o', 'n', 's', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'M', 'a', 's', 'k', ' ', 'r', 'e', 'g', 'i', 'o', 'n', 's', ' ', 't', 'h', 'a', 't', ' ', 'h', 'a', 'v', 'e', ' ', 'a', ' ', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', ' ', 'c', 'o', 'v', 'e', 'r', 'a', 'g', 'e', ' ', 't', 'h', 'a', 't', ' ', 'i', 's', ' ', 'o', 'u', 't', ' ', 'o', 'f', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'o', 'u', 'n', 'd', 's', '.', '\\x0a', 'p', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'e', '-', 'm', 'a', 's', 'k', ' ', ' ', ' ', ' ', ' ', 'P', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'e', ' ', 'm', 'a', 's', 'k', 'e', 'd', ' ', 'r', 'e', 'g', 'i', 'o', 'n', 's', ' ', 't', 'h', 'r', 'o', 'u', 'g', 'h', ' ', 't', 'h', 'e', ' ', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'd', ' ', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', '.', '\\x0a', 'f', 'i', 'l', 't', 'e', 'r', '-', 'm', 'a', 's', 'k', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'i', 'l', 't', 'e', 'r', ' ', 'a', ' ', 'D', 'a', 'z', 'z', 'l', 'e', 'r', ' ', 'm', 'a', 's', 'k', '.', '\\x0a', 'm', 'e', 'r', 'g', 'e', '-', 'm', 'a', 's', 'k', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'M', 'e', 'r', 'g', 'e', ' ', 's', 'e', 'v', 'e', 'r', 'a', 'l', ' ', 'm', 'a', 's', 'k', 's', ' ', 'i', 'n', 't', 'o', ' ', 'a', ' ', 's', 'i', 'n', 'g', 'l', 'e', ' ', 'o', 'n', 'e', ' ', 'w', 'i', 't', 'h', ' ', 'n', 'o', 'n', '-', 'o', 'v', 'e', 'r', 'l', 'a', 'p', 'p', 'i', 'n', 'g', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'n', 't', 'e', 'r', 'v', 'a', 'l', 's', '.', '\\x0a', 's', 'h', 'o', 'w', '-', 'm', 'a', 's', 'k', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'S', 'h', 'o', 'w', ' ', 'a', ' ', 's', 'h', 'o', 'r', 't', ' ', 's', 'u', 'm', 'm', 'a', 'r', 'y', ' ', 'o', 'f', ' ', 'a', ' ', 'm', 'a', 's', 'k', '.', '\\x0a', 'b', 'e', 'd', '2', 'm', 'a', 's', 'k', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'v', 'e', 'r', 't', ' ', 'a', ' ', 'B', 'E', 'D', ' ', 'f', 'i', 'l', 'e', ' ', 't', 'o', ' ', 'a', ' ', 'D', 'a', 'z', 'z', 'l', 'e', 'r', ' ', 'm', 'a', 's', 'k', '.', '\\x0a', 'c', 'h', 'a', 'i', 'n', '-', 'l', 'o', 'c', 'a', 'l', '-', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 's', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'h', 'a', 'i', 'n', ' ', 'l', 'o', 'c', 'a', 'l', ' ', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 's', '.', '\\x0a', 'c', 'o', 'l', 'l', 'e', 'c', 't', '-', 'p', 'i', 'l', 'e', '-', 'u', 'p', 's', ' ', ' ', ' ', 'B', 'u', 'i', 'l', 'd', ' ', 'a', 'n', 'd', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', ' ', 'p', 'i', 'l', 'e', ' ', 'u', 'p', 's', ' ', 'o', 'f', ' ', 'r', 'e', 'a', 'd', 's', ' ', 't', 'h', 'a', 't', ' ', 'a', 'r', 'e', ' ', 'c', 'a', 'n', 'd', 'i', 'd', 'a', 't', 'e', 's', ' ', 'f', 'o', 'r', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', 'a', 'p', ' ', 'c', 'l', 'o', 's', 'i', 'n', 'g', '.', '\\x0a', 's', 'h', 'o', 'w', '-', 'p', 'i', 'l', 'e', '-', 'u', 'p', 's', ' ', ' ', ' ', ' ', ' ', ' ', 'S', 'h', 'o', 'w', ' ', 'a', ' ', 's', 'h', 'o', 'r', 't', ' ', 's', 'u', 'm', 'm', 'a', 'r', 'y', ' ', 'o', 'f', ' ', 't', 'h', 'e', ' ', 'p', 'i', 'l', 'e', ' ', 'u', 'p', 's', '.', '\\x0a', 'p', 'r', 'o', 'c', 'e', 's', 's', '-', 'p', 'i', 'l', 'e', '-', 'u', 'p', 's', ' ', ' ', ' ', 'F', 'i', 'l', 't', 'e', 'r', ' ', 'a', 'n', 'd', ' ', 'p', 'r', 'o', 'c', 'e', 's', 's', ' ', 'p', 'i', 'l', 'e', ' ', 'u', 'p', 's', ' ', 'i', 'n', 't', 'o', ' ', 'i', 'n', 's', 'e', 'r', 't', 'i', 'o', 'n', 's', ' ', 'f', 'o', 'r', ' ', 'g', 'a', 'p', ' ', 'c', 'l', 'o', 's', 'i', 'n', 'g', '.', '\\x0a', 's', 'h', 'o', 'w', '-', 'i', 'n', 's', 'e', 'r', 't', 'i', 'o', 'n', 's', ' ', ' ', ' ', ' ', 'S', 'h', 'o', 'w', ' ', 'a', ' ', 's', 'h', 'o', 'r', 't', ' ', 's', 'u', 'm', 'm', 'a', 'r', 'y', ' ', 'o', 'f', ' ', 't', 'h', 'e', ' ', 'i', 'n', 's', 'e', 'r', 't', 'i', 'o', 'n', 's', '.', '\\x0a', 'm', 'e', 'r', 'g', 'e', '-', 'i', 'n', 's', 'e', 'r', 't', 'i', 'o', 'n', 's', ' ', ' ', ' ', 'M', 'e', 'r', 'g', 'e', ' ', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'e', ' ', 'i', 'n', 's', 'e', 'r', 't', 'i', 'o', 'n', 's', ' ', 'f', 'i', 'l', 'e', 's', ' ', 'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'd', ' ', 'b', 'y', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '`', 'p', 'r', 'o', 'c', 'e', 's', 's', '-', 'p', 'i', 'l', 'e', '-', 'u', 'p', 's', '`', ' ', 'i', 'n', 't', 'o', ' ', 'a', ' ', 's', 'i', 'n', 'g', 'l', 'e', ' ', 'o', 'n', 'e', '.', '\\x0a', 'o', 'u', 't', 'p', 'u', 't', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'G', 'e', 'n', 'e', 'r', 'a', 't', 'e', ' ', 't', 'h', 'e', ' ', 'o', 'u', 't', 'p', 'u', 't', ' ', 'a', 's', 's', 'e', 'm', 'b', 'l', 'y', ' ', 'b', 'y', ' ', 'c', 'l', 'o', 's', 'i', 'n', 'g', ' ', 'g', 'a', 'p', 's', '.', '\\x0a', 't', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '-', 'c', 'o', 'o', 'r', 'd', 's', ' ', ' ', ' ', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', ' ', 'c', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 's', ' ', 'o', 'f', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', 'a', 's', 's', 'e', 'm', 'b', 'l', 'y', ' ', 't', 'o', ' ', 'c', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 's', ' ', 'o', 'f', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'n', 'p', 'u', 't', ' ', 'a', 's', 's', 'e', 'm', 'b', 'l', 'y', '.', '\\x0a', 'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', '-', 'r', 'e', 'g', 'i', 'o', 'n', 's', ' ', ' ', ' ', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', 's', ' ', 't', 'h', 'a', 't', ' ', 'g', 'i', 'v', 'e', 'n', ' ', 'r', 'e', 'g', 'i', 'o', 'n', 's', ' ', 'l', 'o', 'o', 'k', ' ', 'p', 'r', 'o', 'p', 'e', 'r', ',', ' ', 'i', 'n', ' ', 'p', 'a', 'r', 't', 'i', 'c', 'u', 'l', 'a', 'r', ',', ' ', 't', 'h', 'i', 's', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'a', 'y', ' ', 'b', 'e', ' ', 'u', 's', 'e', 'd', ' ', 't', 'o', ' ', 'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', ' ', 'c', 'l', 'o', 's', 'e', 'd', ' ', 'g', 'a', 'p', 's', '.', '\\x0a', 'c', 'h', 'e', 'c', 'k', '-', 'r', 'e', 's', 'u', 'l', 't', 's', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'h', 'e', 'c', 'k', ' ', 'r', 'e', 's', 'u', 'l', 't', 's', ' ', 'o', 'f', ' ', 's', 'o', 'm', 'e', ' ', 'g', 'a', 'p', ' ', 'c', 'l', 'o', 's', 'i', 'n', 'g', ' ', 'p', 'r', 'o', 'c', 'e', 'd', 'u', 'r', 'e', '.', '\\x0a', 'c', 'h', 'e', 'c', 'k', '-', 's', 'c', 'a', 'f', 'f', 'o', 'l', 'd', 'i', 'n', 'g', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'h', 'e', 'c', 'k', ' ', 'r', 'e', 's', 'u', 'l', 't', 's', ' ', 'o', 'f', ' ', 's', 'o', 'm', 'e', ' ', 's', 'c', 'a', 'f', 'f', 'o', 'l', 'd', 'i', 'n', 'g', ' ', '+', ' ', 'g', 'a', 'p', ' ', 'c', 'l', 'o', 's', 'i', 'n', 'g', ' ', 'p', 'r', 'o', 'c', 'e', 'd', 'u', 'r', 'e', '.', '\\x0a', '\\x0a', 'U', 's', 'e', ' ', '`', 'd', 'e', 'n', 't', 'i', 's', 't', ' ', '<', 'c', 'o', 'm', 'm', 'a', 'n', 'd', '>', ' ', '-', '-', 'h', 'e', 'l', 'p', '`', ' ', 'f', 'o', 'r', ' ', 'm', 'o', 'r', 'e', ' ', 'i', 'n', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', ' ', 'a', 'b', 'o', 'u', 't', ' ', 'a', ' ', 'c', 'o', 'm', 'm', 'a', 'n', 'd', '.']",
				"protection": "public",
				"comment": "A summary of all commands with a short description.\n"
			},
			{
				"line": 3117,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 3121,
						"kind": "variable",
						"char": 16,
						"name": "listCommands",
						"deco": "E4darg10OptionFlag",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 3128,
						"kind": "variable",
						"char": 16,
						"name": "listDependencies",
						"deco": "E4darg10OptionFlag",
						"protection": "public",
						"offset": 1
					},
					{
						"line": 3132,
						"kind": "variable",
						"char": 16,
						"name": "help",
						"deco": "E4darg10OptionFlag",
						"protection": "public",
						"offset": 2
					},
					{
						"line": 3136,
						"kind": "variable",
						"char": 16,
						"name": "listOptions",
						"deco": "E4darg10OptionFlag",
						"protection": "public",
						"offset": 3
					},
					{
						"line": 3140,
						"kind": "function",
						"char": 10,
						"name": "requestUsage",
						"deco": "FNaZv",
						"protection": "public",
						"endchar": 5,
						"endline": 3143
					},
					{
						"line": 3147,
						"kind": "variable",
						"char": 16,
						"name": "version_",
						"deco": "E4darg10OptionFlag",
						"protection": "public",
						"offset": 4
					},
					{
						"line": 3154,
						"kind": "variable",
						"char": 20,
						"name": "command",
						"deco": "E7dentist6common8commands14DentistCommand",
						"protection": "public",
						"offset": 8
					},
					{
						"line": 3158,
						"kind": "variable",
						"char": 12,
						"name": "commandOptions",
						"deco": "Aya",
						"protection": "public",
						"offset": 16
					}
				],
				"name": "BaseOptions",
				"protection": "public",
				"comment": "This describes the basic, ie. non-command-specific, options of DENTIST.\nSee source code or run `dentist --help` for a description of the fields.\n"
			},
			{
				"line": 3164,
				"kind": "class",
				"char": 5,
				"base": "object.Exception",
				"members": [
					{
						"kind": "mixin",
						"line": 3167,
						"protection": "public",
						"char": 9,
						"comment": "\n",
						"name": "basicExceptionCtors!()"
					}
				],
				"name": "CLIException",
				"protection": "protected",
				"comment": "Used to signal errors during the processing of CLI arguments.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "E7dentist6common8commands14DentistCommand",
						"name": "command"
					}
				],
				"line": 3172,
				"kind": "template",
				"char": 16,
				"members": [
					{
						"parameters": [
							{
								"type": "string[]",
								"storageClass": [
									"in"
								],
								"name": "args"
							}
						],
						"line": 3172,
						"kind": "function",
						"char": 16,
						"name": "runCommand",
						"type": "ReturnCode(in string[] args)",
						"endchar": 5,
						"endline": 3232
					}
				],
				"name": "runCommand",
				"protection": "protected",
				"comment": "Parse args of `command` and execute it.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "symbol"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 3234,
				"kind": "template",
				"char": 10,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 3234,
						"kind": "variable",
						"char": 10,
						"name": "getUDA",
						"init": "getUDAs!(symbol, T)[0]"
					}
				],
				"name": "getUDA",
				"protection": "protected"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "_validate"
					},
					{
						"kind": "value",
						"deco": "b",
						"defaultValue": "true",
						"name": "isEnabled"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "__FILE__",
						"name": "file"
					},
					{
						"kind": "value",
						"deco": "m",
						"defaultValue": "__LINE__",
						"name": "line"
					}
				],
				"line": 3238,
				"kind": "template",
				"char": 5,
				"members": [
					{
						"line": 3238,
						"kind": "struct",
						"char": 5,
						"members": [
							{
								"kind": "alias",
								"type": "_validate",
								"char": 13,
								"line": 3245,
								"name": "validate"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 3251,
								"kind": "variable",
								"char": 14,
								"name": "sourceLocation",
								"init": "format!\"%s:%d\"(file, line)"
							}
						],
						"name": "Validate",
						"protection": "public"
					}
				],
				"name": "Validate",
				"protection": "protected",
				"comment": "Decorate options with validations. Validations shall throw an\nexception if the option value is considered invalid.\n"
			},
			{
				"line": 3256,
				"kind": "enum",
				"char": 5,
				"members": [
					{
						"line": 3258,
						"kind": "enum member",
						"char": 9,
						"name": "low",
						"protection": "public",
						"value": "0"
					},
					{
						"line": 3259,
						"kind": "enum member",
						"char": 9,
						"name": "medium",
						"protection": "public",
						"value": "1"
					},
					{
						"line": 3260,
						"kind": "enum member",
						"char": 9,
						"name": "high",
						"protection": "public",
						"value": "2"
					}
				],
				"name": "Priority",
				"protection": "protected",
				"baseDeco": "i",
				"comment": "Used to determine execution order of `PreValidate`, `PostValidate` and\n`CleanUp` hooks.\n"
			},
			{
				"line": 3264,
				"kind": "struct",
				"char": 5,
				"members": [
					{
						"line": 3265,
						"kind": "variable",
						"char": 18,
						"name": "priority",
						"deco": "E7dentist11commandline8Priority",
						"protection": "public",
						"offset": 0
					}
				],
				"name": "PreValidate",
				"protection": "protected",
				"comment": "Mark method as hook that is executed before validations.\n"
			},
			{
				"line": 3269,
				"kind": "struct",
				"char": 5,
				"members": [
					{
						"line": 3270,
						"kind": "variable",
						"char": 18,
						"name": "priority",
						"deco": "E7dentist11commandline8Priority",
						"protection": "public",
						"offset": 0
					}
				],
				"name": "PostValidate",
				"protection": "protected",
				"comment": "Mark method as hook that is executed after validations.\n"
			},
			{
				"line": 3275,
				"kind": "struct",
				"char": 5,
				"members": [
					{
						"line": 3276,
						"kind": "variable",
						"char": 18,
						"name": "priority",
						"deco": "E7dentist11commandline8Priority",
						"protection": "public",
						"offset": 0
					}
				],
				"name": "CleanUp",
				"protection": "protected",
				"comment": "Mark method as hook that is executed before termination of the\nprogram.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 3279,
				"kind": "template",
				"char": 5,
				"members": [
					{
						"parameters": [
							{
								"kind": "alias",
								"name": "a"
							},
							{
								"kind": "alias",
								"name": "b"
							}
						],
						"line": 3281,
						"kind": "template",
						"char": 14,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 3281,
								"kind": "variable",
								"char": 14,
								"name": "cmpPriority",
								"init": "getUDA!(a, T).priority > getUDA!(b, T).priority"
							}
						],
						"name": "cmpPriority"
					}
				],
				"name": "cmpPriority",
				"protection": "protected"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Options"
					}
				],
				"line": 3317,
				"kind": "template",
				"char": 13,
				"members": [
					{
						"parameters": [
							{
								"type": "Options",
								"name": "options"
							}
						],
						"line": 3317,
						"kind": "function",
						"char": 13,
						"name": "processOptions",
						"type": "Options(Options options)",
						"endchar": 5,
						"endline": 3390
					}
				],
				"name": "processOptions",
				"protection": "protected",
				"comment": "Implementation of validations and hooks for options processing.\n\nSee_also: `Validate`, `Priority`, `PreValidate`, `PostValidate`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Options"
					}
				],
				"line": 3443,
				"kind": "template",
				"char": 13,
				"members": [
					{
						"parameters": [
							{
								"type": "Options",
								"name": "options"
							}
						],
						"line": 3443,
						"kind": "function",
						"char": 13,
						"name": "cleanUp",
						"type": "Options(Options options)",
						"endchar": 5,
						"endline": 3456
					}
				],
				"name": "cleanUp",
				"protection": "protected",
				"comment": "Run all `CleanUp` hooks of `options`. Use with `scope` statement:\n\n---\nscope(exit)\ncleanUp(options);\n---\n"
			},
			{
				"constraint": "isStaticArray!(typeof(dest)) && (dest.length == 2)",
				"parameters": [
					{
						"kind": "alias",
						"name": "dest"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "\"ill-formatted range\"",
						"name": "msg"
					}
				],
				"line": 3495,
				"kind": "template",
				"char": 10,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "rangeString"
							}
						],
						"line": 3495,
						"kind": "function",
						"char": 10,
						"name": "parseRange",
						"type": "pure void(in string rangeString)",
						"endchar": 5,
						"endline": 3506
					}
				],
				"name": "parseRange",
				"protection": "protected",
				"comment": "Parse integer range of form `from..to`. Result is written into `dest`\nor returned.\n"
			},
			{
				"constraint": "isStaticArray!DestType && (DestType.init.length == 2)",
				"parameters": [
					{
						"kind": "type",
						"name": "DestType"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "\"ill-formatted range\"",
						"name": "msg"
					}
				],
				"line": 3509,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "rangeString"
							}
						],
						"line": 3509,
						"kind": "function",
						"char": 14,
						"name": "parseRange",
						"type": "pure DestType(in string rangeString)",
						"endchar": 5,
						"endline": 3524
					}
				],
				"name": "parseRange",
				"protection": "protected",
				"comment": "ditto\n"
			},
			{
				"line": 3531,
				"kind": "alias",
				"originalType": "enforce!CLIException",
				"char": 5,
				"name": "validate",
				"protection": "protected",
				"comment": "Throw an exception unless the condition is met.\n\nThrows: `CLIException` if validation fails.\nSee_also: `std.exception.enforce`\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "option"
					},
					{
						"kind": "type",
						"name": "V"
					}
				],
				"line": 3535,
				"kind": "template",
				"char": 10,
				"members": [
					{
						"parameters": [
							{
								"type": "V",
								"name": "value"
							}
						],
						"line": 3535,
						"kind": "function",
						"char": 10,
						"name": "validatePositive",
						"type": "void(V value)",
						"endchar": 5,
						"endline": 3541
					}
				],
				"name": "validatePositive",
				"protection": "protected",
				"comment": "Validate `value > 0` or\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "null",
						"name": "msg"
					}
				],
				"line": 3545,
				"kind": "template",
				"char": 10,
				"members": [
					{
						"parameters": [
							{
								"type": "string[]",
								"storageClass": [
									"in"
								],
								"name": "files"
							}
						],
						"line": 3545,
						"kind": "function",
						"char": 10,
						"name": "validateFilesExist",
						"type": "void(in string[] files)",
						"endchar": 5,
						"endline": 3554
					}
				],
				"name": "validateFilesExist",
				"protection": "protected",
				"comment": "Validate that files exist.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "\"cannot open file `%s`\"",
						"name": "msg"
					}
				],
				"line": 3557,
				"kind": "template",
				"char": 10,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "file"
							}
						],
						"line": 3557,
						"kind": "function",
						"char": 10,
						"name": "validateFileExists",
						"type": "void(in string file)",
						"endchar": 5,
						"endline": 3560
					}
				],
				"name": "validateFileExists",
				"protection": "protected",
				"comment": "ditto\n"
			},
			{
				"constraint": "allSatisfy!(isSomeString, staticMap!(typeOf, extensions))",
				"parameters": [
					{
						"kind": "tuple",
						"name": "extensions"
					}
				],
				"line": 3567,
				"kind": "template",
				"char": 10,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "file"
							},
							{
								"type": "string",
								"default": "\"expected %-(%s or %) but got %s\"",
								"name": "msg"
							}
						],
						"line": 3567,
						"kind": "function",
						"char": 10,
						"name": "validateFileExtension",
						"type": "void(in string file, string msg = \"expected %-(%s or %) but got %s\")",
						"endchar": 5,
						"endline": 3577
					}
				],
				"name": "validateFileExtension",
				"protection": "protected",
				"comment": "Validate `file` ends with one of the given `extensions`.\n"
			},
			{
				"constraint": "extension is null || extension.among(\".dam\", \".db\")",
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "null",
						"name": "extension"
					}
				],
				"line": 3581,
				"kind": "template",
				"char": 10,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							}
						],
						"line": 3581,
						"kind": "function",
						"char": 10,
						"name": "validateDB",
						"type": "void(in string dbFile)",
						"endchar": 5,
						"endline": 3596
					}
				],
				"name": "validateDB",
				"protection": "protected",
				"comment": "Validate `dbFile` is the stub of a Dazzler DB or DAM.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "lasFile"
					},
					{
						"deco": "xE3std8typecons__T4FlagVAyaa10_616c6c6f77456d707479ZQBi",
						"storageClass": [
							"in"
						],
						"default": "Flag.no",
						"name": "allowEmpty"
					}
				],
				"line": 3601,
				"kind": "function",
				"originalType": "void(in string lasFile, in Flag!\"allowEmpty\" allowEmpty = No.allowEmpty)",
				"char": 10,
				"name": "validateLasFile",
				"deco": "FIAyaIE3std8typecons__T4FlagVAyaa10_616c6c6f77456d707479ZQBiZv",
				"protection": "protected",
				"endchar": 5,
				"endline": 3614,
				"comment": "Validate `lasFile` looks like a valid LAS file and is not empty unless\n`allowEmpty`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					},
					{
						"deco": "xAAya",
						"storageClass": [
							"in"
						],
						"name": "masks"
					},
					{
						"deco": "E3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBi",
						"default": "Flag.no",
						"name": "allowBlock"
					}
				],
				"line": 3618,
				"kind": "function",
				"originalType": "void(in string dbFile, in string[] masks, Flag!\"allowBlock\" allowBlock = No.allowBlock)",
				"char": 10,
				"name": "validateInputMasks",
				"deco": "FIAyaIAQfE3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBiZv",
				"protection": "protected",
				"endchar": 5,
				"endline": 3626,
				"comment": "Validate hidden mask files exist.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "mask"
					},
					{
						"deco": "E3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBi",
						"default": "Flag.no",
						"name": "allowBlock"
					}
				],
				"line": 3629,
				"kind": "function",
				"originalType": "void(in string dbFile, in string mask, Flag!\"allowBlock\" allowBlock = No.allowBlock)",
				"char": 10,
				"name": "validateInputMask",
				"deco": "FIAyaIQeE3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBiZv",
				"protection": "protected",
				"endchar": 5,
				"endline": 3637,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "maskDestination"
					},
					{
						"deco": "E3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBi",
						"default": "Flag.no",
						"name": "allowBlock"
					}
				],
				"line": 3641,
				"kind": "function",
				"originalType": "void(in string dbFile, in string maskDestination, Flag!\"allowBlock\" allowBlock = No.allowBlock)",
				"char": 10,
				"name": "validateOutputMask",
				"deco": "FIAyaIQeE3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBiZv",
				"protection": "protected",
				"endchar": 5,
				"endline": 3649,
				"comment": "Validate hidden mask files can be opened for writing.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "\"cannot open file `%s` for writing: %s\"",
						"name": "msg"
					}
				],
				"line": 3653,
				"kind": "template",
				"char": 10,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "fileName"
							}
						],
						"line": 3653,
						"kind": "function",
						"char": 10,
						"name": "validateFileWritable",
						"type": "void(string fileName)",
						"endchar": 5,
						"endline": 3681
					}
				],
				"name": "validateFileWritable",
				"protection": "protected",
				"comment": "Validate file can be opened for writing.\n"
			},
			{
				"parameters": [
					{
						"deco": "AAya",
						"name": "coordStrings"
					}
				],
				"line": 3687,
				"kind": "function",
				"char": 10,
				"name": "validateCoordStrings",
				"deco": "FAAyaZv",
				"protection": "protected",
				"endchar": 5,
				"endline": 3691,
				"comment": "Validate `coordString` has the expected format.\n\nSee_also: `parseCoordString`\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "coordString"
					}
				],
				"line": 3699,
				"kind": "function",
				"char": 22,
				"name": "parseCoordString",
				"deco": "FAyaZS7dentist6common16OutputCoordinate",
				"protection": "protected",
				"endchar": 5,
				"endline": 3730,
				"comment": "Parse a string of form `[scaffold/<scaff>/][contig/<contig>/]<coord>`\ninto an `OutputCoordinate`.\n\nThrows: `CLIException` if the string is ill-formatted or one of\n<scaff>, <contig> or <coord> is less than or equal to zero.\n"
			}
		],
		"comment": "    Defines the behavior of the DENTIST command line client. The central\n    component of this file is `OptionsFor` which encapsulates the complete\n    CLI interface.\n\n    See_also: `dentist.commands`\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commandline"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/bed2mask.d",
		"members": [
			{
				"line": 66,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.bed2mask)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi9ZQCa",
				"protection": "public",
				"comment": "Options for the `bed2mask` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi9ZQCa",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 70,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi9ZQCaZv",
				"protection": "public",
				"endchar": 1,
				"endline": 87,
				"comment": "Execute the `bed2mask` command with `options`.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "refDb"
					}
				],
				"line": 92,
				"kind": "function",
				"char": 25,
				"name": "getContigsByScaffold",
				"deco": "FAyaZHQfAS7dentist7dazzler13ContigSegment",
				"protection": "public",
				"endchar": 1,
				"endline": 105,
				"comment": "Returns an associative array containing an array of `ContigSegment`s for\neach scaffold identified by its FASTA header (without leading `>`).\n"
			},
			{
				"line": 111,
				"kind": "alias",
				"originalType": "Tuple!(ReferenceInterval, \"interval\", id_t[], \"contigIds\", id_t[], \"readIds\")",
				"char": 1,
				"name": "AugmentedReferenceInterval",
				"deco": "S3std8typecons__T5TupleTS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalVQBva8_696e74657276616cTAkVQCva9_636f6e746967496473TQBcVQDya7_72656164496473ZQGk",
				"protection": "public",
				"comment": "`ReferenceInterval` with optional supplementary data.\n\nSee_also: `parseDataComment`\n"
			},
			{
				"parameters": [
					{
						"deco": "S3std5stdio4File",
						"name": "bedFile"
					},
					{
						"deco": "Aya",
						"name": "bedFileName"
					},
					{
						"deco": "HAyaAS7dentist7dazzler13ContigSegment",
						"name": "contigsByScaffold"
					},
					{
						"deco": "b",
						"name": "parseDataComments"
					}
				],
				"line": 129,
				"kind": "function",
				"originalType": "AugmentedReferenceInterval[](File bedFile, string bedFileName, ContigSegment[][string] contigsByScaffold, bool parseDataComments)",
				"char": 30,
				"name": "readBedFile",
				"deco": "FS3std5stdio4FileAyaHQeAS7dentist7dazzler13ContigSegmentbZASQCg8typecons__T5TupleTSQCg4util6region__T6RegionTmTmVQDsa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalVQFna8_696e74657276616cTAkVQGna9_636f6e746967496473TQBcVQHqa7_72656164496473ZQGf",
				"protection": "public",
				"endchar": 1,
				"endline": 182,
				"comment": "Main procedure that converts BED entries into an array of\n`AugmentedReferenceInterval`s. The returned intervals have Dazzler\ncoordinates and contain data from the comment column if\n`parseDataComments`.\n\nParams:\nbedFile = `File` that contains the BED data.\nbedFileName = file name that is displayed in error messages\ncontigsByScaffold = index of Dazzler DB (see `getContigsByScaffold`)\nparseDataComments = expected 4th column in BED to be a data comment if true.\nSee_also: `getContigsByScaffold`, `parseDataComment`\n"
			},
			{
				"parameters": [
					{
						"deco": "HAyaAS7dentist7dazzler13ContigSegment",
						"storageClass": [
							"scope"
						],
						"name": "contigsByScaffold"
					},
					{
						"deco": "Aya",
						"storageClass": [
							"scope"
						],
						"name": "scaffoldName"
					},
					{
						"deco": "k",
						"name": "begin"
					},
					{
						"deco": "k",
						"name": "end"
					}
				],
				"line": 188,
				"kind": "function",
				"originalType": "ContigSegment[](scope ContigSegment[][string] contigsByScaffold, scope string scaffoldName, coord_t begin, coord_t end)",
				"char": 17,
				"name": "getOverlappingContigs",
				"deco": "FMHAyaAS7dentist7dazzler13ContigSegmentMQBlkkZQBo",
				"protection": "public",
				"endchar": 1,
				"endline": 203,
				"comment": "Find contigs that overlap with the interval `[begin, end]` on `scaffold`.\n\nSee_also: `getContigsByScaffold`\n"
			},
			{
				"parameters": [
					{
						"deco": "xAa",
						"name": "comment"
					},
					{
						"deco": "Aya",
						"name": "filename"
					},
					{
						"deco": "m",
						"name": "lineNumber"
					},
					{
						"deco": "Ak",
						"storageClass": [
							"ref"
						],
						"name": "contigIds"
					},
					{
						"deco": "Ak",
						"storageClass": [
							"ref"
						],
						"name": "readIds"
					}
				],
				"line": 229,
				"kind": "function",
				"originalType": "void(const char[] comment, string filename, size_t lineNumber, ref id_t[] contigIds, ref id_t[] readIds)",
				"char": 6,
				"name": "parseDataComment",
				"deco": "FxAaAyamKAkKQdZv",
				"protection": "public",
				"endchar": 1,
				"endline": 287,
				"comment": "Parse data from `comment` into `contigIds` and `readIds`, respectively.\nIf multiple parts of the same type are given later parts overwrite\nprevious parts.\n\nGrammar:\n---\n<data-comment>   ::== <part> | <part> \"|\" <data-comment>\n<part>           ::== <contigs-part> | <reads-part>\n<contigs-part>   ::== \"contigs-\" <id> \"-\" <id>\n<reads-part>     ::== \"reads\" <id-list>\n<id-list>        ::== \"-\" <id> | \"-\" <id> <id-list>\n<id>             ::== <positive-digit> | <positive-digit> <digits>\n<digits>         ::== <digit> | <digit> <digits>\n<positive-digit> ::== \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n<digit>          ::== \"0\" | <positive-digit>\n---\n\nParams:\ncomment = comment column (4th) from BED file\nfilename = filename to report in errors\nlineNumber = line number to report in errors\ncontigIds = destination for contig IDs\nreadIds = destination for read IDs\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "refDb"
					},
					{
						"deco": "Aya",
						"name": "maskName"
					},
					{
						"deco": "AS3std8typecons__T5TupleTS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalVQBva8_696e74657276616cTAkVQCva9_636f6e746967496473TQBcVQDya7_72656164496473ZQGk",
						"name": "augmentedMask"
					},
					{
						"deco": "b",
						"name": "hasDataComments"
					}
				],
				"line": 303,
				"kind": "function",
				"originalType": "void(string refDb, string maskName, AugmentedReferenceInterval[] augmentedMask, bool hasDataComments)",
				"char": 6,
				"name": "writeDazzlerMask",
				"deco": "FAyaQdAS3std8typecons__T5TupleTS7dentist4util6region__T6RegionTmTmVQCoa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalVQEja8_696e74657276616cTAkVQFja9_636f6e746967496473TQBcVQGma7_72656164496473ZQGkbZv",
				"protection": "public",
				"endchar": 1,
				"endline": 333,
				"comment": "Create Dazzler mask of intervals in `augmentedMask` adding extra tracks\nif `hasDataComments` is true.\n\nOverwrites existing mask without asking.\n\nParams:\nrefDb = Dazzler DB for which the track is created\nmaskName = name of the mask\naugmentedMask = mask data\nhasDataComments = create mask track extras for contig and read IDs\n\nSee_also: `dentist.dazzler.writeMask`, `dentist.dazzler.dazzExtra`,\n`dentist.dazzler.writeDazzExtra`\n"
			}
		],
		"comment": "    The `bed2mask` command creates a Dazzler mask from a BED file.\n\n    Command_Summary:\n\n    ---\n    Convert a BED file to a Dazzler mask. Implements 'data comments' -- a\n    special feature for DENTIST.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.bed2mask"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/buildPartialAssembly.d",
		"members": [
			{
				"line": 49,
				"kind": "alias",
				"originalType": "OptionsFor!(TestingCommand.buildPartialAssembly)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi1ZQCa",
				"protection": "public",
				"comment": "Options for the `buildPartialAssembly` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi1ZQCa",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 53,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi1ZQCaZv",
				"protection": "public",
				"endchar": 1,
				"endline": 58,
				"comment": "Execute the `buildPartialAssembly` command with `options`.\n"
			}
		],
		"comment": "    This is the `buildPartialAssembly` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Build a partial assembly from a mask.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.buildPartialAssembly"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/chainLocalAlignments.d",
		"members": [
			{
				"line": 41,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.chainLocalAlignments)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi10ZQCb",
				"protection": "public",
				"comment": "Options for the `chainLocalAlignments` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi10ZQCb",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 45,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi10ZQCbZv",
				"protection": "public",
				"endchar": 1,
				"endline": 50,
				"comment": "Execute the `chainLocalAlignments` command with `options`.\n"
			},
			{
				"line": 53,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"line": 55,
						"kind": "alias",
						"originalType": "typeof(getFlatLocalAlignments(\"\", \"\"))",
						"char": 5,
						"name": "FlatLocalAlignments",
						"deco": "C7dentist7dazzler20LocalAlignmentReader",
						"protection": "public"
					},
					{
						"storageClass": [
							"const"
						],
						"line": 57,
						"kind": "variable",
						"originalType": "Options",
						"char": 19,
						"name": "options",
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi10ZQCb",
						"protection": "public",
						"offset": 16
					},
					{
						"storageClass": [
							"const"
						],
						"line": 58,
						"kind": "variable",
						"originalType": "ChainingOptions",
						"char": 27,
						"name": "chainingOptions",
						"deco": "xS7dentist6common10alignments8chaining15ChainingOptions",
						"protection": "public",
						"offset": 192
					},
					{
						"line": 59,
						"kind": "variable",
						"originalType": "FlatLocalAlignments",
						"char": 25,
						"name": "alignments",
						"deco": "C7dentist7dazzler20LocalAlignmentReader",
						"protection": "public",
						"offset": 224
					},
					{
						"line": 60,
						"kind": "variable",
						"char": 19,
						"name": "progress",
						"deco": "S7dentist4util3log13ProgressMeter",
						"protection": "public",
						"offset": 232
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi10ZQCb",
								"name": "options"
							}
						],
						"line": 63,
						"kind": "constructor",
						"originalType": "(const Options options)",
						"char": 5,
						"name": "this",
						"deco": "FxS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi10ZQCbZCQDeQBl20chainLocalAlignments10CLIChainer",
						"protection": "public",
						"endchar": 5,
						"endline": 68
					},
					{
						"line": 71,
						"kind": "function",
						"char": 10,
						"name": "run",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 77
					},
					{
						"line": 80,
						"kind": "function",
						"char": 10,
						"name": "readAlignments",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 90
					},
					{
						"line": 93,
						"kind": "function",
						"char": 10,
						"name": "chainLocalAlignments",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 106
					},
					{
						"line": 53,
						"kind": "destructor",
						"char": 1,
						"name": "~this",
						"deco": "FNeZv",
						"protection": "public"
					}
				],
				"name": "CLIChainer",
				"protection": "public"
			}
		],
		"comment": "    This is the `chainLocalAlignments` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Chain local alignments. Right now this produces just the single\n    best chain per combination of A-read and B-read.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.chainLocalAlignments"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/checkResults.d",
		"members": [
			{
				"line": 170,
				"kind": "alias",
				"originalType": "OptionsFor!(TestingCommand.checkResults)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi19ZQCb",
				"protection": "public",
				"comment": "Options for the `checkResults` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi19ZQCb",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 173,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi19ZQCbZv",
				"protection": "public",
				"endchar": 1,
				"endline": 190,
				"comment": "Execute the `checkResults` command with `options`.\n"
			},
			{
				"line": 192,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"line": 194,
						"kind": "constructor",
						"originalType": "()",
						"char": 5,
						"name": "this",
						"deco": "FZC7dentist8commands12checkResults13StopExecution",
						"protection": "public",
						"endchar": 5,
						"endline": 196
					}
				],
				"name": "StopExecution",
				"protection": "public"
			},
			{
				"line": 199,
				"kind": "alias",
				"originalType": "Flag!\"complement\"",
				"char": 1,
				"name": "Complement",
				"deco": "E3std8typecons__T4FlagVAyaa10_636f6d706c656d656e74ZQBi",
				"protection": "public"
			},
			{
				"line": 200,
				"kind": "alias",
				"originalType": "Flag!\"duplicateQueryContig\"",
				"char": 1,
				"name": "DuplicateQueryContig",
				"deco": "E3std8typecons__T4FlagVAyaa20_6475706c69636174655175657279436f6e746967ZQCc",
				"protection": "public"
			},
			{
				"line": 202,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 204,
						"kind": "variable",
						"originalType": "ReferenceInterval",
						"char": 23,
						"name": "reference",
						"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 205,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "referenceContigLength",
						"deco": "k",
						"protection": "public",
						"offset": 24
					},
					{
						"line": 206,
						"kind": "variable",
						"originalType": "id_t",
						"char": 10,
						"name": "queryContigId",
						"deco": "k",
						"protection": "public",
						"offset": 28
					},
					{
						"line": 207,
						"kind": "variable",
						"originalType": "DuplicateQueryContig",
						"char": 26,
						"name": "duplicateQueryContig",
						"deco": "E3std8typecons__T4FlagVAyaa20_6475706c69636174655175657279436f6e746967ZQCc",
						"protection": "public",
						"offset": 32
					},
					{
						"line": 208,
						"kind": "variable",
						"originalType": "Complement",
						"char": 16,
						"name": "complement",
						"deco": "E3std8typecons__T4FlagVAyaa10_636f6d706c656d656e74ZQBi",
						"protection": "public",
						"offset": 33
					},
					{
						"line": 209,
						"kind": "variable",
						"char": 12,
						"name": "alignmentError",
						"deco": "d",
						"protection": "public",
						"offset": 40
					},
					{
						"constraint": "is(bool : T)",
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 211,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 211,
								"kind": "function",
								"char": 7,
								"name": "opCast",
								"type": "const pure nothrow T()",
								"endchar": 5,
								"endline": 214
							}
						],
						"name": "opCast",
						"protection": "public"
					}
				],
				"name": "ContigMapping",
				"protection": "public"
			},
			{
				"line": 217,
				"kind": "alias",
				"originalType": "orderLexicographically!(const(ContigMapping), (mapping) => mapping.queryContigId)",
				"char": 8,
				"name": "queryOrder",
				"protection": "public"
			},
			{
				"kind": "alias",
				"protection": "public",
				"char": 8,
				"line": 220,
				"name": "queryEquiv"
			},
			{
				"line": 1605,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 1607,
						"kind": "variable",
						"char": 12,
						"name": "contigAlignmentsCache",
						"deco": "Aya",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 1608,
						"kind": "variable",
						"char": 12,
						"name": "dbA",
						"deco": "Aya",
						"protection": "public",
						"offset": 16
					},
					{
						"line": 1609,
						"kind": "variable",
						"char": 12,
						"name": "dbB",
						"deco": "Aya",
						"protection": "public",
						"offset": 32
					},
					{
						"line": 1610,
						"kind": "variable",
						"char": 10,
						"name": "_cachedAlignments",
						"deco": "S4vibe4data4json4Json",
						"init": "Json([cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u], Type.undefined)",
						"align": 8,
						"protection": "public",
						"offset": 48
					},
					{
						"line": 1612,
						"kind": "function",
						"char": 20,
						"name": "isValid",
						"deco": "FNdZb",
						"protection": "public",
						"endchar": 5,
						"endline": 1618
					},
					{
						"line": 1620,
						"kind": "function",
						"char": 20,
						"name": "canWrite",
						"deco": "FNdZb",
						"protection": "public",
						"endchar": 5,
						"endline": 1623
					},
					{
						"line": 1625,
						"kind": "function",
						"char": 20,
						"name": "cachedAlignments",
						"deco": "FNdZS4vibe4data4json4Json",
						"protection": "public",
						"endchar": 5,
						"endline": 1645
					},
					{
						"parameters": [
							{
								"deco": "AS7dentist8commands12checkResults13ContigMapping",
								"name": "contigAlignments"
							},
							{
								"deco": "S7dentist4util4math16NaturalNumberSet",
								"name": "duplicateContigIds"
							},
							{
								"deco": "E3std8typecons__T4FlagVAyaa14_666f7263654f7665727772697465ZQBq",
								"default": "Flag.no",
								"name": "forceOverwrite"
							}
						],
						"line": 1647,
						"kind": "function",
						"originalType": "void(ContigMapping[] contigAlignments, NaturalNumberSet duplicateContigIds, Flag!\"forceOverwrite\" forceOverwrite = No.forceOverwrite)",
						"char": 10,
						"name": "write",
						"deco": "FAS7dentist8commands12checkResults13ContigMappingSQBv4util4math16NaturalNumberSetE3std8typecons__T4FlagVAyaa14_666f7263654f7665727772697465ZQBqZv",
						"protection": "public",
						"endchar": 5,
						"endline": 1671
					},
					{
						"line": 1673,
						"kind": "function",
						"char": 21,
						"name": "read",
						"deco": "FZAS7dentist8commands12checkResults13ContigMapping",
						"protection": "public",
						"endchar": 5,
						"endline": 1704
					},
					{
						"parameters": [
							{
								"deco": "S7dentist8commands12checkResults21ContigAlignmentsCache",
								"name": "p"
							}
						],
						"line": 1605,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNbNcNjNfS7dentist8commands12checkResults21ContigAlignmentsCacheZQCe",
						"protection": "public"
					}
				],
				"name": "ContigAlignmentsCache",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "value_t"
					}
				],
				"line": 1745,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "value_t",
								"storageClass": [
									"in"
								],
								"name": "bucketSize"
							},
							{
								"type": "value_t[]",
								"storageClass": [
									"in"
								],
								"name": "values"
							}
						],
						"line": 1745,
						"kind": "function",
						"char": 6,
						"name": "histogram",
						"type": "(in value_t bucketSize, in value_t[] values)",
						"endchar": 1,
						"endline": 1748
					}
				],
				"name": "histogram",
				"protection": "public"
			},
			{
				"line": 1937,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 1939,
						"kind": "enum",
						"char": 12,
						"members": [
							{
								"line": 1941,
								"kind": "enum member",
								"char": 9,
								"name": "match",
								"protection": "public",
								"value": "'|'"
							},
							{
								"line": 1942,
								"kind": "enum member",
								"char": 9,
								"name": "mismatch",
								"protection": "public",
								"value": "'.'"
							},
							{
								"line": 1943,
								"kind": "enum member",
								"char": 9,
								"name": "indel",
								"protection": "public",
								"value": "'-'"
							}
						],
						"name": "EditOp",
						"protection": "public",
						"baseDeco": "a"
					},
					{
						"line": 1946,
						"kind": "enum",
						"char": 12,
						"members": [
							{
								"line": 1948,
								"kind": "enum member",
								"char": 9,
								"name": "a",
								"protection": "public",
								"value": "'a'"
							},
							{
								"line": 1949,
								"kind": "enum member",
								"char": 9,
								"name": "c",
								"protection": "public",
								"value": "'c'"
							},
							{
								"line": 1950,
								"kind": "enum member",
								"char": 9,
								"name": "g",
								"protection": "public",
								"value": "'g'"
							},
							{
								"line": 1951,
								"kind": "enum member",
								"char": 9,
								"name": "t",
								"protection": "public",
								"value": "'t'"
							},
							{
								"line": 1952,
								"kind": "enum member",
								"char": 9,
								"name": "A",
								"protection": "public",
								"value": "'A'"
							},
							{
								"line": 1953,
								"kind": "enum member",
								"char": 9,
								"name": "C",
								"protection": "public",
								"value": "'C'"
							},
							{
								"line": 1954,
								"kind": "enum member",
								"char": 9,
								"name": "G",
								"protection": "public",
								"value": "'G'"
							},
							{
								"line": 1955,
								"kind": "enum member",
								"char": 9,
								"name": "T",
								"protection": "public",
								"value": "'T'"
							},
							{
								"line": 1956,
								"kind": "enum member",
								"char": 9,
								"name": "unkownBase",
								"protection": "public",
								"value": "'n'"
							},
							{
								"line": 1957,
								"kind": "enum member",
								"char": 9,
								"name": "indel",
								"protection": "public",
								"value": "'-'"
							}
						],
						"name": "SeqChar",
						"protection": "public",
						"baseDeco": "a"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "xE7dentist8commands12checkResults18StretcherAlignment7SeqChar",
								"storageClass": [
									"in"
								],
								"name": "c"
							}
						],
						"line": 1960,
						"kind": "function",
						"char": 17,
						"name": "isBase",
						"deco": "FIE7dentist8commands12checkResults18StretcherAlignment7SeqCharZb",
						"protection": "public",
						"endchar": 5,
						"endline": 1972
					},
					{
						"line": 1974,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "referenceLength",
						"deco": "k",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 1975,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "queryLength",
						"deco": "k",
						"protection": "public",
						"offset": 4
					},
					{
						"line": 1976,
						"kind": "variable",
						"originalType": "Complement",
						"char": 16,
						"name": "complement",
						"deco": "E3std8typecons__T4FlagVAyaa10_636f6d706c656d656e74ZQBi",
						"protection": "public",
						"offset": 8
					},
					{
						"line": 1977,
						"kind": "variable",
						"char": 12,
						"name": "percentIdentity",
						"deco": "d",
						"protection": "public",
						"offset": 16
					},
					{
						"line": 1978,
						"kind": "variable",
						"char": 22,
						"name": "referenceLine",
						"deco": "AxE7dentist8commands12checkResults18StretcherAlignment7SeqChar",
						"protection": "public",
						"offset": 24
					},
					{
						"line": 1979,
						"kind": "variable",
						"char": 21,
						"name": "editOps",
						"deco": "AxE7dentist8commands12checkResults18StretcherAlignment6EditOp",
						"protection": "public",
						"offset": 40
					},
					{
						"line": 1980,
						"kind": "variable",
						"char": 22,
						"name": "queryLine",
						"deco": "AxE7dentist8commands12checkResults18StretcherAlignment7SeqChar",
						"protection": "public",
						"offset": 56
					},
					{
						"parameters": [
							{
								"deco": "xk",
								"storageClass": [
									"in"
								],
								"name": "crop"
							}
						],
						"line": 1992,
						"kind": "function",
						"originalType": "const StretcherAlignment(in coord_t crop)",
						"char": 24,
						"name": "cropReference",
						"deco": "xFIkZS7dentist8commands12checkResults18StretcherAlignment",
						"protection": "public",
						"endchar": 5,
						"endline": 2017
					},
					{
						"line": 2044,
						"kind": "function",
						"originalType": "const pure nothrow @property size_t()",
						"char": 22,
						"name": "length",
						"deco": "xFNaNbNdZm",
						"protection": "public",
						"endchar": 5,
						"endline": 2047
					},
					{
						"parameters": [
							{
								"deco": "DFmE7dentist8commands12checkResults18StretcherAlignment7SeqCharEQCiQCdQBxQBm6EditOpQDcZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"line": 2049,
						"kind": "function",
						"originalType": "int(scope int delegate(size_t, SeqChar, EditOp, SeqChar) dg)",
						"char": 9,
						"name": "opApply",
						"deco": "FMDFmE7dentist8commands12checkResults18StretcherAlignment7SeqCharEQCiQCdQBxQBm6EditOpQDcZiZi",
						"protection": "public",
						"endchar": 5,
						"endline": 2062
					}
				],
				"name": "StretcherAlignment",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "refFasta"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "queryFasta"
					},
					{
						"deco": "E3std8typecons__T4FlagVAyaa10_636f6d706c656d656e74ZQBi",
						"name": "complement"
					}
				],
				"line": 2066,
				"kind": "function",
				"originalType": "StretcherAlignment(in string refFasta, in string queryFasta, Complement complement)",
				"char": 20,
				"name": "stretcher",
				"deco": "FIAyaIQeE3std8typecons__T4FlagVAyaa10_636f6d706c656d656e74ZQBiZS7dentist8commands12checkResults18StretcherAlignment",
				"protection": "public",
				"endchar": 1,
				"endline": 2117
			}
		],
		"comment": "    This is the `checkResults` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Check results of some gap closing procedure.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.checkResults"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/checkScaffolding.d",
		"members": [
			{
				"line": 93,
				"kind": "alias",
				"originalType": "OptionsFor!(TestingCommand.checkScaffolding)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi20ZQCb",
				"protection": "public",
				"comment": "Options for the `checkScaffolding` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi20ZQCb",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 96,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi20ZQCbZv",
				"protection": "public",
				"endchar": 1,
				"endline": 101,
				"comment": "Execute the `checkScaffolding` command with `options`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist8commands12checkResults13ContigMapping",
						"name": "lhs"
					},
					{
						"deco": "xS7dentist8commands12checkResults13ContigMapping",
						"name": "rhs"
					}
				],
				"line": 104,
				"kind": "function",
				"originalType": "pure nothrow @safe bool(const ContigMapping lhs, const ContigMapping rhs)",
				"char": 6,
				"name": "referenceOrder",
				"deco": "FNaNbNfxS7dentist8commands12checkResults13ContigMappingxQBwZb",
				"protection": "public",
				"endchar": 1,
				"endline": 107
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist8commands12checkResults13ContigMapping",
						"name": "lhs"
					},
					{
						"deco": "xS7dentist8commands12checkResults13ContigMapping",
						"name": "rhs"
					}
				],
				"line": 110,
				"kind": "function",
				"originalType": "pure nothrow @safe bool(const ContigMapping lhs, const ContigMapping rhs)",
				"char": 6,
				"name": "queryOrder",
				"deco": "FNaNbNfxS7dentist8commands12checkResults13ContigMappingxQBwZb",
				"protection": "public",
				"endchar": 1,
				"endline": 113
			}
		],
		"comment": "    This is the `checkScaffolding` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Check results of some scaffolding + gap closing procedure.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.checkScaffolding"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/collectPileUps/filter.d",
		"members": [
			{
				"line": 68,
				"kind": "interface",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "AS7dentist6common10alignments4base14AlignmentChain",
								"name": "alignmentChains"
							}
						],
						"line": 71,
						"kind": "function",
						"char": 22,
						"name": "opCall",
						"deco": "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
						"protection": "public",
						"comment": "Returns a filtered list of `alignmentChains`.\n"
					}
				],
				"name": "AlignmentChainFilter",
				"protection": "public",
				"comment": "Common interface for alignment chain filters.\n"
			},
			{
				"line": 82,
				"kind": "class",
				"char": 10,
				"members": [
					{
						"line": 84,
						"kind": "variable",
						"char": 23,
						"name": "unusedReads",
						"deco": "PS7dentist4util4math16NaturalNumberSet",
						"protection": "public",
						"offset": 24
					},
					{
						"parameters": [
							{
								"deco": "PS7dentist4util4math16NaturalNumberSet",
								"name": "unusedReads"
							}
						],
						"line": 88,
						"kind": "constructor",
						"originalType": "(NaturalNumberSet* unusedReads)",
						"char": 5,
						"name": "this",
						"deco": "FPS7dentist4util4math16NaturalNumberSetZCQBm8commands14collectPileUps6filter10ReadFilter",
						"protection": "public",
						"endchar": 5,
						"endline": 91,
						"comment": "Construct a read filter that keeps track of the read IDs that were\nnot removed.\n"
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "AS7dentist6common10alignments4base14AlignmentChain",
								"name": "alignmentChains"
							}
						],
						"overrides": [
							"dentist.commands.collectPileUps.filter.AlignmentChainFilter.opCall"
						],
						"line": 95,
						"kind": "function",
						"char": 31,
						"name": "opCall",
						"deco": "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
						"protection": "public",
						"endchar": 5,
						"endline": 115,
						"comment": "Default implementation that relies on `getDiscardedReadIds` to return\na list of read IDs that should be discarded.\n"
					},
					{
						"parameters": [
							{
								"deco": "AS7dentist6common10alignments4base14AlignmentChain",
								"name": "alignmentChains"
							}
						],
						"line": 117,
						"kind": "function",
						"originalType": "InputRange!AlignmentChain(AlignmentChain[] alignmentChains)",
						"char": 33,
						"name": "getDiscardedReadIds",
						"deco": "FAS7dentist6common10alignments4base14AlignmentChainZC3std5range10interfaces__T10InputRangeTQDlZQr",
						"protection": "public"
					}
				],
				"name": "ReadFilter",
				"interfaces": [
					"dentist.commands.collectPileUps.filter.AlignmentChainFilter"
				],
				"protection": "public",
				"comment": "Common interface for read filters, i.e. filters that remove all alignments\nassociated to a set of read IDs.\n\nThis comes at a greater cost because (1) another sort-order may be\nrequired and (2) the list of alignments must be passed twice: first\ndetermine read IDs that should be discarded and then remove associated\nalignments.\n"
			},
			{
				"line": 122,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"line": 124,
						"kind": "variable",
						"char": 12,
						"name": "maxAlignmentError",
						"deco": "d",
						"protection": "public",
						"offset": 24
					},
					{
						"parameters": [
							{
								"deco": "d",
								"name": "maxAlignmentError"
							}
						],
						"line": 126,
						"kind": "constructor",
						"originalType": "(double maxAlignmentError)",
						"char": 5,
						"name": "this",
						"deco": "FdZC7dentist8commands14collectPileUps6filter23LQAlignmentChainsFilter",
						"protection": "public",
						"endchar": 5,
						"endline": 129
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "AS7dentist6common10alignments4base14AlignmentChain",
								"name": "alignmentChains"
							}
						],
						"overrides": [
							"dentist.commands.collectPileUps.filter.AlignmentChainFilter.opCall"
						],
						"line": 131,
						"kind": "function",
						"char": 31,
						"name": "opCall",
						"deco": "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
						"protection": "public",
						"endchar": 5,
						"endline": 137
					}
				],
				"name": "LQAlignmentChainsFilter",
				"interfaces": [
					"dentist.commands.collectPileUps.filter.AlignmentChainFilter"
				],
				"protection": "public",
				"comment": "Discard alignments with low quality.\n"
			},
			{
				"line": 142,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"line": 144,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "properAlignmentAllowance",
						"deco": "k",
						"protection": "public",
						"offset": 24
					},
					{
						"parameters": [
							{
								"deco": "k",
								"name": "properAlignmentAllowance"
							}
						],
						"line": 146,
						"kind": "constructor",
						"originalType": "(coord_t properAlignmentAllowance)",
						"char": 5,
						"name": "this",
						"deco": "FkZC7dentist8commands14collectPileUps6filter29ImproperAlignmentChainsFilter",
						"protection": "public",
						"endchar": 5,
						"endline": 149
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "AS7dentist6common10alignments4base14AlignmentChain",
								"name": "alignmentChains"
							}
						],
						"overrides": [
							"dentist.commands.collectPileUps.filter.AlignmentChainFilter.opCall"
						],
						"line": 151,
						"kind": "function",
						"char": 31,
						"name": "opCall",
						"deco": "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
						"protection": "public",
						"endchar": 5,
						"endline": 159
					}
				],
				"name": "ImproperAlignmentChainsFilter",
				"interfaces": [
					"dentist.commands.collectPileUps.filter.AlignmentChainFilter"
				],
				"protection": "public",
				"comment": "Discard improper alignments.\n"
			},
			{
				"line": 166,
				"kind": "class",
				"char": 1,
				"base": "dentist.commands.collectPileUps.filter.ReadFilter",
				"members": [
					{
						"parameters": [
							{
								"deco": "PS7dentist4util4math16NaturalNumberSet",
								"name": "unusedReads"
							}
						],
						"line": 168,
						"kind": "constructor",
						"originalType": "(NaturalNumberSet* unusedReads)",
						"char": 5,
						"name": "this",
						"deco": "FPS7dentist4util4math16NaturalNumberSetZCQBm8commands14collectPileUps6filter30RedundantAlignmentChainsFilter",
						"protection": "public",
						"endchar": 5,
						"endline": 171
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "AS7dentist6common10alignments4base14AlignmentChain",
								"name": "alignmentChains"
							}
						],
						"overrides": [
							"dentist.commands.collectPileUps.filter.ReadFilter.getDiscardedReadIds"
						],
						"line": 173,
						"kind": "function",
						"originalType": "InputRange!AlignmentChain(AlignmentChain[] alignmentChains)",
						"char": 42,
						"name": "getDiscardedReadIds",
						"deco": "FAS7dentist6common10alignments4base14AlignmentChainZC3std5range10interfaces__T10InputRangeTQDlZQr",
						"protection": "public",
						"endchar": 5,
						"endline": 176
					}
				],
				"name": "RedundantAlignmentChainsFilter",
				"protection": "public",
				"comment": "Discard read if it has an alignment that â extended with the\nexceeding read sequence on either end â is fully contained in\na single contig.\n"
			},
			{
				"line": 181,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"line": 183,
						"kind": "constructor",
						"originalType": "()",
						"char": 5,
						"name": "this",
						"deco": "FZC7dentist8commands14collectPileUps6filter30ContainedAlignmentChainsFilter",
						"protection": "public",
						"endchar": 14,
						"endline": 183
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "AS7dentist6common10alignments4base14AlignmentChain",
								"name": "alignmentChains"
							}
						],
						"overrides": [
							"dentist.commands.collectPileUps.filter.AlignmentChainFilter.opCall"
						],
						"line": 185,
						"kind": "function",
						"char": 31,
						"name": "opCall",
						"deco": "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
						"protection": "public",
						"endchar": 5,
						"endline": 210
					}
				],
				"name": "ContainedAlignmentChainsFilter",
				"interfaces": [
					"dentist.commands.collectPileUps.filter.AlignmentChainFilter"
				],
				"protection": "public",
				"comment": "Discard alignments that are contained in other alignments.\n"
			},
			{
				"parameters": [
					{
						"deco": "AS7dentist6common10alignments4base14AlignmentChain",
						"name": "alignmentChains"
					}
				],
				"line": 214,
				"kind": "function",
				"char": 18,
				"name": "filterContainedAlignmentChains",
				"deco": "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
				"protection": "public",
				"endchar": 1,
				"endline": 219
			},
			{
				"line": 236,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"line": 238,
						"kind": "variable",
						"char": 23,
						"name": "unusedReads",
						"deco": "PS7dentist4util4math16NaturalNumberSet",
						"protection": "public",
						"offset": 24
					},
					{
						"parameters": [
							{
								"deco": "PS7dentist4util4math16NaturalNumberSet",
								"name": "unusedReads"
							}
						],
						"line": 240,
						"kind": "constructor",
						"originalType": "(NaturalNumberSet* unusedReads)",
						"char": 5,
						"name": "this",
						"deco": "FPS7dentist4util4math16NaturalNumberSetZCQBm8commands14collectPileUps6filter30AmbiguousAlignmentChainsFilter",
						"protection": "public",
						"endchar": 5,
						"endline": 243
					},
					{
						"storageClass": [
							"override"
						],
						"parameters": [
							{
								"deco": "AS7dentist6common10alignments4base14AlignmentChain",
								"name": "alignmentChains"
							}
						],
						"overrides": [
							"dentist.commands.collectPileUps.filter.AlignmentChainFilter.opCall"
						],
						"line": 245,
						"kind": "function",
						"char": 31,
						"name": "opCall",
						"deco": "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
						"protection": "public",
						"endchar": 5,
						"endline": 260
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "AS7dentist6common10alignments4base14AlignmentChain",
								"name": "readAlignments"
							}
						],
						"line": 263,
						"kind": "function",
						"char": 41,
						"name": "groupByReadLocus",
						"deco": "FAS7dentist6common10alignments4base14AlignmentChainZAQCa",
						"protection": "protected",
						"endchar": 5,
						"endline": 284,
						"comment": "Groups local alignments of one read into groups of overlapping alignments.\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"deco": "AAS7dentist6common10alignments4base14AlignmentChain",
								"name": "groupedByReadLocus"
							}
						],
						"line": 286,
						"kind": "function",
						"originalType": "(AlignmentChain[][] groupedByReadLocus)",
						"char": 20,
						"name": "getUniquelyAlignedRead",
						"deco": "FAAS7dentist6common10alignments4base14AlignmentChainZS3std9algorithm9iteration__T6joinerTQDkZQmFQDrZ6Result",
						"protection": "protected",
						"endchar": 5,
						"endline": 319
					}
				],
				"name": "AmbiguousAlignmentChainsFilter",
				"interfaces": [
					"dentist.commands.collectPileUps.filter.AlignmentChainFilter"
				],
				"protection": "public",
				"comment": "Discard read if part of it aligns to multiple loci in the reference.\n"
			},
			{
				"line": 326,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"line": 328,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "minAnchorLength",
						"deco": "m",
						"protection": "public",
						"offset": 24
					},
					{
						"storageClass": [
							"const"
						],
						"line": 329,
						"kind": "variable",
						"originalType": "const(ReferenceRegion)",
						"char": 28,
						"name": "repetitiveRegions",
						"deco": "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
						"protection": "public",
						"offset": 32
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
								"name": "repetitiveRegions"
							},
							{
								"deco": "m",
								"name": "minAnchorLength"
							}
						],
						"line": 331,
						"kind": "constructor",
						"originalType": "(const(ReferenceRegion) repetitiveRegions, size_t minAnchorLength)",
						"char": 5,
						"name": "this",
						"deco": "FxS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBnmZCQCq8commands14collectPileUps6filter35WeaklyAnchoredAlignmentChainsFilter",
						"protection": "public",
						"endchar": 5,
						"endline": 335
					},
					{
						"parameters": [
							{
								"deco": "AS7dentist6common10alignments4base14AlignmentChain",
								"name": "alignmentChains"
							}
						],
						"overrides": [
							"dentist.commands.collectPileUps.filter.AlignmentChainFilter.opCall"
						],
						"line": 337,
						"kind": "function",
						"char": 22,
						"name": "opCall",
						"deco": "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
						"protection": "public",
						"endchar": 5,
						"endline": 345
					},
					{
						"parameters": [
							{
								"deco": "S7dentist6common10alignments4base14AlignmentChain",
								"name": "alignment"
							}
						],
						"line": 347,
						"kind": "function",
						"char": 10,
						"name": "isWeaklyAnchored",
						"deco": "FS7dentist6common10alignments4base14AlignmentChainZb",
						"protection": "public",
						"endchar": 5,
						"endline": 355
					}
				],
				"name": "WeaklyAnchoredAlignmentChainsFilter",
				"interfaces": [
					"dentist.commands.collectPileUps.filter.AlignmentChainFilter"
				],
				"protection": "public",
				"comment": "Discard alignments that are insufficiently anchored, i.e. include less\nthan `minAnchorLength` unmasked reference base pairs.\n"
			}
		],
		"comment": "    This is a collection of helpers for the alignment filtering.\n\n    Filter_Pipeline:\n\n    See `dentist.commands.collectPileUps.PileUpCollector.filterAlignments`\n    for the definite implementation.\n\n    $(OL\n        $(LI `LQAlignmentChainsFilter`)\n        $(LI `ImproperAlignmentChainsFilter`)\n        $(LI `WeaklyAnchoredAlignmentChainsFilter`)\n        $(LI `ContainedAlignmentChainsFilter`)\n        $(LI `AmbiguousAlignmentChainsFilter`)\n        $(LI `RedundantAlignmentChainsFilter`)\n    )\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.collectPileUps.filter"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/collectPileUps/package.d",
		"members": [
			{
				"line": 61,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.collectPileUps)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCb",
				"protection": "public",
				"comment": "Options for the `collectPileUps` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCb",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 65,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCbZv",
				"protection": "public",
				"endchar": 1,
				"endline": 70,
				"comment": "Execute the `collectPileUps` command with `options`.\n"
			},
			{
				"line": 73,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"const"
						],
						"line": 75,
						"kind": "variable",
						"originalType": "Options",
						"char": 29,
						"name": "options",
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCb",
						"protection": "protected",
						"offset": 16
					},
					{
						"line": 76,
						"kind": "variable",
						"originalType": "size_t",
						"char": 22,
						"name": "numReferenceContigs",
						"deco": "m",
						"protection": "protected",
						"offset": 280
					},
					{
						"line": 77,
						"kind": "variable",
						"originalType": "size_t",
						"char": 22,
						"name": "numReads",
						"deco": "m",
						"protection": "protected",
						"offset": 288
					},
					{
						"line": 78,
						"kind": "variable",
						"char": 32,
						"name": "readsAlignment",
						"deco": "AS7dentist6common10alignments4base14AlignmentChain",
						"protection": "protected",
						"offset": 296
					},
					{
						"line": 79,
						"kind": "variable",
						"originalType": "ReferenceRegion",
						"char": 31,
						"name": "repetitiveRegions",
						"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
						"protection": "protected",
						"offset": 312
					},
					{
						"line": 80,
						"kind": "variable",
						"char": 28,
						"name": "inputGaps",
						"deco": "AS7dentist7dazzler10GapSegment",
						"protection": "protected",
						"offset": 328
					},
					{
						"line": 81,
						"kind": "variable",
						"char": 32,
						"name": "unusedReads",
						"deco": "S7dentist4util4math16NaturalNumberSet",
						"protection": "protected",
						"offset": 344
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCb",
								"storageClass": [
									"in",
									"ref"
								],
								"name": "options"
							}
						],
						"line": 83,
						"kind": "constructor",
						"originalType": "(in ref Options options)",
						"char": 5,
						"name": "this",
						"deco": "FIKS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCbZCQDeQBl14collectPileUps15PileUpCollector",
						"protection": "public",
						"endchar": 5,
						"endline": 86
					},
					{
						"line": 88,
						"kind": "function",
						"char": 10,
						"name": "run",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 96
					},
					{
						"line": 98,
						"kind": "function",
						"char": 20,
						"name": "readInputs",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 128
					},
					{
						"line": 130,
						"kind": "function",
						"char": 20,
						"name": "filterAlignments",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 157
					},
					{
						"parameters": [
							{
								"kind": "alias",
								"name": "Filter"
							}
						],
						"line": 159,
						"kind": "template",
						"char": 20,
						"members": [
							{
								"parameters": [
									{
										"type": "Filter",
										"name": "filter"
									}
								],
								"line": 159,
								"kind": "function",
								"char": 20,
								"name": "applyFilter",
								"type": "void(Filter filter)",
								"endchar": 5,
								"endline": 172
							}
						],
						"name": "applyFilter",
						"protection": "protected"
					},
					{
						"line": 174,
						"kind": "function",
						"originalType": "PileUp[]()",
						"char": 24,
						"name": "buildPileUps",
						"deco": "FZAAS7dentist6common10alignments4base13ReadAlignment",
						"protection": "protected",
						"endchar": 5,
						"endline": 199
					},
					{
						"parameters": [
							{
								"deco": "AAS7dentist6common10alignments4base13ReadAlignment",
								"name": "pileUps"
							}
						],
						"line": 201,
						"kind": "function",
						"originalType": "void(PileUp[] pileUps)",
						"char": 20,
						"name": "writePileUps",
						"deco": "FAAS7dentist6common10alignments4base13ReadAlignmentZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 206
					}
				],
				"name": "PileUpCollector",
				"protection": "public",
				"comment": "This class comprises the `collectPileUps` step of the DENTIST algorithm\n"
			}
		],
		"comment": "    This is the `collectPileUps` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Build and collect pile ups of reads that are candidates for gap closing.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.collectPileUps"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/collectPileUps/pileups.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "xm",
						"storageClass": [
							"in"
						],
						"name": "numReferenceContigs"
					},
					{
						"deco": "AS7dentist6common10alignments4base14AlignmentChain",
						"name": "candidates"
					},
					{
						"deco": "AS7dentist7dazzler10GapSegment",
						"name": "inputGaps"
					},
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCb",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 173,
				"kind": "function",
				"originalType": "PileUp[](in size_t numReferenceContigs, AlignmentChain[] candidates, GapSegment[] inputGaps, in Options options)",
				"char": 10,
				"name": "build",
				"deco": "FImAS7dentist6common10alignments4base14AlignmentChainASQBy7dazzler10GapSegmentISQCx11commandline__T10OptionsForVEQEeQDz8commands14DentistCommandi11ZQBxZAASQFuQFpQFlQFc13ReadAlignment",
				"protection": "public",
				"endchar": 1,
				"endline": 208,
				"comment": "Build and process a scaffold graph and collect the pile ups.\n\nParams:\nnumReferenceContigs = number of reference contigs used to construct\nthe base graph which has four nodes for each contig. Contigs are\nassumed to have IDs `1 .. numReferenceContigs + 1`.\ncandidates = alignment chains that are deemed reliable\ninputGaps = list of intra-scaffold gaps that connect contigs of the\ninput assembly\noptions = additional parameters (see CLI options for further information):\n$(UL\n$(LI `<in:reads>`)\n$(LI `<in:reference>`)\n$(LI `--best-pile-up-margin`)\n$(LI `--existing-gap-bonus`)\n$(LI `--debug-pile-ups`)\n$(LI `--no-merge-extension`)\n$(LI `--min-spanning-reads`)\n$(LI `--proper-alignment-allowance`)\n$(LI `--tmpdir`)\n)\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu",
						"name": "scaffold"
					}
				],
				"line": 435,
				"kind": "function",
				"originalType": "(Scaffold!ScaffoldPayload scaffold)",
				"char": 6,
				"name": "collectPileUps",
				"deco": "FNaNbNiNfS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIuZSQIr9algorithm9iteration__T12FilterResultSQLjQDwQDqQDdQDwFQMaZ9__lambda5TSQLmQCvQCo__TQChSQNfQFsQFmQEzQFsFQNwZ9__lambda4TSQNiQErQEk__T9MapResultSQPiQHvQHpQHcQHvFQPzZ9__lambda3TSQPlQGuQGn__TQGgSQReQJrQJlQIyQJrFQRvZ9__lambda2TSQRhQIqQIj__TQDzSQRx10functional__T8unaryFunVQSaa9_612e7061796c6f6164VQSza1_61ZQBsTASQVqQVlQVj__TQVhTQVeTvVQQyi0TQPgZQWb4EdgeZQIiZQMpZQIqZQMxZQNb",
				"protection": "public",
				"endchar": 1,
				"endline": 444,
				"comment": "Traverse the edges in `scaffold` and collect attached pile ups.\n\nReturns: range of valid, non-empty pile ups contained in `scaffold`.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "state"
					},
					{
						"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu",
						"name": "scaffold"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbStem"
					}
				],
				"line": 459,
				"kind": "function",
				"originalType": "void(string state, Scaffold!ScaffoldPayload scaffold, in string dbStem)",
				"char": 6,
				"name": "debugLogPileUps",
				"deco": "FAyaS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVQCga8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQEka10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQGia10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIuIAyaZv",
				"protection": "public",
				"endchar": 1,
				"endline": 479,
				"comment": "Handle debugging output for `scaffold`.\n\nWrites a pile ups DB for `scaffold` if `dbStem !is null` and issues\na `LogLevel.debug_` log message describing `scaffold`.\n\nParams:\nstate = a descriptive string used to identify the state in which the\nscaffold is, e.g. `\"raw\"` or `\"resolvedBubbles\"`. This string\nmay be part a file name.\nscaffold = the scaffold graph\ndbStem = write pile ups DB `{dbStem}.{state}.db` of the current pile\nups in `scaffold` unless `dbStem is null`.\n"
			},
			{
				"line": 485,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 489,
						"kind": "enum",
						"char": 12,
						"members": [
							{
								"line": 492,
								"kind": "enum member",
								"char": 9,
								"name": "pileUp",
								"protection": "public",
								"value": "cast(ubyte)1u",
								"comment": "Payload contains a list of `ReadAlignment`s â the pile up.\n"
							},
							{
								"line": 495,
								"kind": "enum member",
								"char": 9,
								"name": "inputGap",
								"protection": "public",
								"value": "cast(ubyte)2u",
								"comment": "The edge represents a gap in the input assembly.\n"
							}
						],
						"name": "Type",
						"protection": "public",
						"baseDeco": "h",
						"comment": "Possible type of a payload. A single payload may have several types a\nonce.\n"
					},
					{
						"line": 499,
						"kind": "variable",
						"originalType": "BitFlags!Type",
						"char": 19,
						"name": "types",
						"deco": "S3std8typecons__T8BitFlagsTE7dentist8commands14collectPileUps7pileups15ScaffoldPayload4TypeVEQDoQDn__T4FlagVAyaa6_756e73616665ZQzi0ZQEl",
						"protection": "public",
						"offset": 0,
						"comment": "Current types of this payload.\n"
					},
					{
						"line": 502,
						"kind": "variable",
						"char": 21,
						"name": "readAlignments",
						"deco": "AS7dentist6common10alignments4base13ReadAlignment",
						"protection": "public",
						"offset": 8,
						"comment": "Pile up associated with this payload.\n"
					},
					{
						"line": 521,
						"kind": "function",
						"char": 20,
						"name": "empty",
						"deco": "xFNaNbNdZb",
						"protection": "public",
						"endchar": 5,
						"endline": 524,
						"comment": "Returns true if no type is set.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "AS7dentist6common10alignments4base13ReadAlignment",
								"name": "readAlignments"
							}
						],
						"line": 528,
						"kind": "function",
						"char": 28,
						"name": "pileUp",
						"deco": "FNaNbAS7dentist6common10alignments4base13ReadAlignmentZSQBx8commands14collectPileUps7pileups15ScaffoldPayload",
						"protection": "public",
						"endchar": 5,
						"endline": 531,
						"comment": "Construct a payload of type `Type.pileUp` from `readAlignments.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"line": 535,
						"kind": "function",
						"char": 28,
						"name": "inputGap",
						"deco": "FNaNbZS7dentist8commands14collectPileUps7pileups15ScaffoldPayload",
						"protection": "public",
						"endchar": 5,
						"endline": 538,
						"comment": "Construct a payload of type `Type.inputGap`.\n"
					},
					{
						"constraint": "type == Type.pileUp",
						"parameters": [
							{
								"kind": "value",
								"deco": "E7dentist8commands14collectPileUps7pileups15ScaffoldPayload4Type",
								"name": "type"
							}
						],
						"line": 543,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"line": 543,
								"kind": "function",
								"char": 10,
								"name": "remove",
								"type": "pure nothrow void()",
								"endchar": 5,
								"endline": 547
							}
						],
						"name": "remove",
						"protection": "public",
						"comment": "Remove `type` from this payload's types and reset data fields\nappropriately.\n"
					},
					{
						"constraint": "type == Type.inputGap",
						"parameters": [
							{
								"kind": "value",
								"deco": "E7dentist8commands14collectPileUps7pileups15ScaffoldPayload4Type",
								"name": "type"
							}
						],
						"line": 550,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"line": 550,
								"kind": "function",
								"char": 10,
								"name": "remove",
								"type": "pure nothrow void()",
								"endchar": 5,
								"endline": 553
							}
						],
						"name": "remove",
						"protection": "public",
						"comment": "ditto\n"
					},
					{
						"constraint": "isForwardRange!R && is(ElementType!R == ScaffoldPayload)",
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"line": 560,
						"kind": "template",
						"char": 28,
						"members": [
							{
								"parameters": [
									{
										"type": "R",
										"name": "payloads"
									}
								],
								"line": 560,
								"kind": "function",
								"char": 28,
								"name": "merge",
								"type": "ScaffoldPayload(R payloads)",
								"endchar": 5,
								"endline": 591
							}
						],
						"name": "merge",
						"protection": "public",
						"comment": "Merge a range of payloads into one.\n\nReturns: payload with the union of all `types` in `payloads` and the\nconcatenation of all the `readAlignments`.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "AS7dentist8commands14collectPileUps7pileups15ScaffoldPayload",
								"name": "payloads"
							}
						],
						"line": 594,
						"kind": "function",
						"char": 28,
						"name": "merge",
						"deco": "FAS7dentist8commands14collectPileUps7pileups15ScaffoldPayloadXQCi",
						"protection": "public",
						"endchar": 5,
						"endline": 597,
						"comment": "ditto\n"
					},
					{
						"line": 601,
						"kind": "function",
						"originalType": "const pure nothrow size_t()",
						"char": 12,
						"name": "numTypes",
						"deco": "xFNaNbZm",
						"protection": "public",
						"endchar": 5,
						"endline": 604,
						"comment": "Return the number of set types in this payload.\n"
					},
					{
						"line": 608,
						"kind": "function",
						"char": 10,
						"name": "toJson",
						"deco": "xFZS4vibe4data4json4Json",
						"protection": "public",
						"endchar": 5,
						"endline": 619,
						"comment": "Convert to a `Json` object.\n"
					}
				],
				"name": "ScaffoldPayload",
				"protection": "public",
				"comment": "Struct to handle different types of payloads.\n\nSee_also: `ScaffoldPayload.Type`\n"
			},
			{
				"parameters": [
					{
						"deco": "AS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4Edge",
						"name": "joins"
					}
				],
				"line": 626,
				"kind": "function",
				"originalType": "Join!ScaffoldPayload(Join!ScaffoldPayload[] joins...)",
				"char": 22,
				"name": "mergeJoins",
				"deco": "FAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4EdgeXQJz",
				"protection": "public",
				"endchar": 1,
				"endline": 635,
				"comment": "Merge joins by creating a single join that has all payloads merged.\n\nSee_also: `ScaffoldPayload.merge`\n"
			},
			{
				"storageClass": [
					"static"
				],
				"parameters": [
					{
						"deco": "AS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4Edge",
						"name": "joins"
					}
				],
				"line": 641,
				"kind": "function",
				"originalType": "Join!ScaffoldPayload(Join!ScaffoldPayload[] joins...)",
				"char": 29,
				"name": "selectMeanest",
				"deco": "FAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4EdgeXQJz",
				"protection": "public",
				"endchar": 1,
				"endline": 644,
				"comment": "Select the (first) join with the smallest number of types.\n\nSee_also: `ScaffoldPayload.numTypes`\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "collect"
					}
				],
				"line": 650,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "AlignmentChain[]",
								"name": "alignments"
							}
						],
						"line": 650,
						"kind": "function",
						"char": 6,
						"name": "collectScaffoldJoins",
						"type": "(AlignmentChain[] alignments)",
						"endchar": 1,
						"endline": 666
					}
				],
				"name": "collectScaffoldJoins",
				"protection": "public",
				"comment": "Group alignments by read ID and deduce graph edges using `collect`.\n\nSee_also: `makeScaffoldJoin`\n"
			},
			{
				"parameters": [
					{
						"deco": "S7dentist6common10alignments4base13ReadAlignment",
						"name": "readAlignment"
					}
				],
				"line": 670,
				"kind": "function",
				"originalType": "Join!ScaffoldPayload(ReadAlignment readAlignment)",
				"char": 22,
				"name": "makeScaffoldJoin",
				"deco": "FS7dentist6common10alignments4base13ReadAlignmentZSQBx4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQEsQEn8scaffold10ContigPartVQCaa10_636f6e74696750617274ZQDlTvVEQEiQEh__T4FlagVQDya10_69734469726563746564ZQBii0TSQJb8commands14collectPileUps7pileups15ScaffoldPayloadZQIq4Edge",
				"protection": "public",
				"endchar": 1,
				"endline": 676,
				"comment": "Generate join from `readAlignment`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L679_C1)\n---\nalias LocalAlignment = AlignmentChain.LocalAlignment;\nenum complement = AlignmentFlag.complement;\n\nauto frontExtension = ReadAlignment(\n    SeededAlignment.from(AlignmentChain(\n        3,\n        Contig(1, 100),\n        Contig(1, 10),\n        AlignmentFlags(),\n        [\n            LocalAlignment(\n                Locus(2, 3),\n                Locus(5, 6),\n                0,\n            ),\n            LocalAlignment(\n                Locus(5, 6),\n                Locus(9, 10),\n                0,\n            ),\n        ],\n    )).front,\n);\nauto backExtension = ReadAlignment(\n    SeededAlignment.from(AlignmentChain(\n        5,\n        Contig(1, 100),\n        Contig(1, 10),\n        AlignmentFlags(),\n        [\n            LocalAlignment(\n                Locus(94, 95),\n                Locus(0, 1),\n                0,\n            ),\n            LocalAlignment(\n                Locus(97, 98),\n                Locus(4, 5),\n                0,\n            ),\n        ],\n    )).front,\n);\nauto gap = ReadAlignment(\n    SeededAlignment.from(AlignmentChain(\n        11,\n        Contig(1, 100),\n        Contig(1, 10),\n        AlignmentFlags(complement),\n        [\n            LocalAlignment(\n                Locus(94, 95),\n                Locus(0, 1),\n                0,\n            ),\n            LocalAlignment(\n                Locus(97, 98),\n                Locus(4, 5),\n                0,\n            ),\n        ],\n    )).front,\n    SeededAlignment.from(AlignmentChain(\n        12,\n        Contig(2, 100),\n        Contig(1, 10),\n        AlignmentFlags(),\n        [\n            LocalAlignment(\n                Locus(94, 95),\n                Locus(0, 1),\n                0,\n            ),\n            LocalAlignment(\n                Locus(97, 98),\n                Locus(4, 5),\n                0,\n            ),\n        ],\n    )).front,\n);\nauto inputGap = GapSegment(\n    1, // beginGlobalContigId\n    2, // endGlobalContigId\n    0,  // scaffoldId\n    0,  // beginContigId\n    1,  // endContigId\n    15, // begin\n    25, // end\n);\n\nauto join1 = makeScaffoldJoin(frontExtension);\nauto join2 = makeScaffoldJoin(backExtension);\nauto join3 = makeScaffoldJoin(gap);\nauto join4 = makeScaffoldJoin(inputGap);\n\nassert(join1.start == ContigNode(1, ContigPart.pre));\nassert(join1.end == ContigNode(1, ContigPart.begin));\nassert(join1.payload == ScaffoldPayload.pileUp([frontExtension]));\n\nassert(join2.start == ContigNode(1, ContigPart.end));\nassert(join2.end == ContigNode(1, ContigPart.post));\nassert(join2.payload == ScaffoldPayload.pileUp([backExtension]));\n\nassert(join3.start == ContigNode(1, ContigPart.end));\nassert(join3.end == ContigNode(2, ContigPart.end));\nassert(join3.payload == ScaffoldPayload.pileUp([gap]));\n\nassert(join4.start == ContigNode(1, ContigPart.end));\nassert(join4.end == ContigNode(2, ContigPart.begin));\nassert(join4.payload == ScaffoldPayload.inputGap());\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L679_C1)\n"
			},
			{
				"parameters": [
					{
						"deco": "S7dentist7dazzler10GapSegment",
						"name": "inputGap"
					}
				],
				"line": 796,
				"kind": "function",
				"originalType": "Join!ScaffoldPayload(GapSegment inputGap)",
				"char": 22,
				"name": "makeScaffoldJoin",
				"deco": "FS7dentist7dazzler10GapSegmentZSQBe4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDz6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQIm8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4Edge",
				"protection": "public",
				"endchar": 1,
				"endline": 809,
				"comment": "Generate join from `inputGap`.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Chunk"
					}
				],
				"line": 821,
				"kind": "template",
				"char": 17,
				"members": [
					{
						"parameters": [
							{
								"type": "Chunk",
								"name": "sameReadAlignments"
							},
							{
								"type": "string*",
								"default": "null",
								"name": "reasonForEmpty"
							}
						],
						"line": 821,
						"kind": "function",
						"char": 17,
						"name": "collectReadAlignments",
						"type": "ReadAlignment[](Chunk sameReadAlignments, string* reasonForEmpty = null)",
						"endchar": 1,
						"endline": 888
					}
				],
				"name": "collectReadAlignments",
				"protection": "public",
				"comment": "Create `ReadAlignment`s from the all alignments of a single read.\n\nNot meant for public usage but must be public or the compiler would\ncomplain.\n\nParams:\nsameReadAlignments = input range of all alignments of a single read\nreasonForEmpty = set to a human-readable reason for an empty return\nvalue unless `reasonForEmpty is null`\n"
			},
			{
				"parameters": [
					{
						"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu",
						"name": "scaffold"
					},
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCb",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 1124,
				"kind": "function",
				"originalType": "Scaffold!ScaffoldPayload(Scaffold!ScaffoldPayload scaffold, in Options options)",
				"char": 26,
				"name": "resolveBubbles",
				"deco": "FS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIuISQJu11commandline__T10OptionsForVEQLbQIbQDr14DentistCommandi11ZQBrZQMj",
				"protection": "public",
				"endchar": 1,
				"endline": 1129,
				"comment": "This find bubbles in the graph and tries to linearize them. Bubbles are\ncyclic subgraphs of at most `options.maxBubbleSize` nodes and can be\nsqueezed into a linear subgraph iff they comprise two linear subgraphs\nbeing parallel wrt. the underlying genome.\n\nExample:\n---\nâââââ = reference contigs\nâââââ = pile ups\n\n\ncontig A         contig B         contig C\nââââââââââââ     ââââââââââââ     ââââââââââââ\nââââ´Xâ¶ââ          âââ´Yâ¶âââ\nâââââââââââââ´Zâ¶âââââââââââ\n\nPile up Z can be combined with X and Y by aligning the skipping reads to\ncontig B without repeat mask:\n\ncontig A          contig B          contig C\nââââââââââââ      ââââââââââââ      ââââââââââââ\nââ´X+Z'â¶â          ââ´Y+Z\"â¶â\n---\n"
			},
			{
				"parameters": [
					{
						"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu",
						"name": "scaffold"
					},
					{
						"deco": "xd",
						"storageClass": [
							"in"
						],
						"name": "bestPileUpMargin"
					},
					{
						"deco": "xd",
						"storageClass": [
							"in"
						],
						"name": "existingGapBonus"
					}
				],
				"line": 1592,
				"kind": "function",
				"originalType": "Scaffold!ScaffoldPayload(Scaffold!ScaffoldPayload scaffold, in double bestPileUpMargin, in double existingGapBonus)",
				"char": 26,
				"name": "discardAmbiguousJoins",
				"deco": "FS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIuIdIdZQJy",
				"protection": "public",
				"endchar": 1,
				"endline": 1656,
				"comment": "This removes ambiguous gap insertions, i.e. forks in the graph.\n\nSee_also: `findCorrectGapJoin`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1659_C1)\n---\nScaffoldPayload getDummyPayload(in size_t length, Flag!\"hasInputGap\" hasInputGap = No.hasInputGap)\n{\n    auto payload = ScaffoldPayload.pileUp(new ReadAlignment[length]);\n\n    if (hasInputGap)\n        payload.types.inputGap = true;\n\n    return payload;\n}\n\n//             contig 1      contig 2\n//\n//            o        o     o        o\n//                    / e1 e2 \\      / e4\n//              o -> o ------- o -> o\n//               \\        e3         \\\n//                \\                   \\ e5 (strong evidence)\n// (input gap) e10 \\   ____________   /\n//                  \\ /   e6       \\ /\n//    o <- o         o <- o         o <- o\n//                         \\ e7 e8 /      \\ e9\n//  o        o     o        o     o        o\n//\n//   contig 5       contig 4      contig 3\n//\nalias J = Join!ScaffoldPayload;\nalias S = Scaffold!ScaffoldPayload;\nalias CN = ContigNode;\nalias CP = ContigPart;\nauto scaffold = buildScaffold!(mergeJoins, ScaffoldPayload)(5, [\n    J(CN(1, CP.end), CN(1, CP.post ), getDummyPayload(1)), // e1\n    J(CN(1, CP.end), CN(1, CP.post ), getDummyPayload(1)), // e1\n    J(CN(2, CP.pre), CN(2, CP.begin), getDummyPayload(1)), // e2\n    J(CN(1, CP.end), CN(2, CP.begin), getDummyPayload(1)), // e3\n    J(CN(2, CP.end), CN(2, CP.post ), getDummyPayload(1)), // e4\n    J(CN(2, CP.end), CN(3, CP.end  ), getDummyPayload(2)), // e5\n    J(CN(4, CP.end), CN(3, CP.end  ), getDummyPayload(1)), // e6\n    J(CN(4, CP.end), CN(4, CP.post ), getDummyPayload(1)), // e7\n    J(CN(3, CP.pre), CN(3, CP.begin), getDummyPayload(1)), // e8\n    J(CN(3, CP.end), CN(3, CP.post ), getDummyPayload(1)), // e9\n    J(CN(4, CP.end), CN(1, CP.begin), getDummyPayload(1, Yes.hasInputGap)), // e10\n]).discardAmbiguousJoins(1.5, 2.0);\n//\n//   contig 1      contig 2\n//\n//            o        o     o        o\n//                    / e1 e2 \\      / e4\n//              o -- o ------- o -- o\n//               \\        e3         \\ e5\n//            e10 \\                  /\n//    o -- o       o -- o           o -- o\n//                       \\ e7   e8 /      \\ e9\n//  o        o   o        o       o        o\n//\n//   contig 5       contig 4      contig 3\n\nassert(J(CN(1, CP.end), CN(1, CP.post)) in scaffold); // e1\nassert(J(CN(2, CP.pre), CN(2, CP.begin)) in scaffold); // e2\nassert(J(CN(1, CP.end), CN(2, CP.begin)) in scaffold); // e3\nassert(J(CN(2, CP.end), CN(2, CP.post)) in scaffold); // e4\nassert(J(CN(2, CP.end), CN(3, CP.end)) in scaffold); // e5\nassert(J(CN(4, CP.end), CN(3, CP.end)) !in scaffold); // e6\nassert(J(CN(4, CP.end), CN(4, CP.post)) in scaffold); // e7\nassert(J(CN(3, CP.pre), CN(3, CP.begin)) in scaffold); // e8\nassert(J(CN(3, CP.end), CN(3, CP.post)) in scaffold); // e9\nassert(J(CN(4, CP.end), CN(1, CP.begin)) in scaffold); // e10\n\nassert(scaffold.get(J(CN(1, CP.end), CN(1, CP.post))).payload == getDummyPayload(2)); // e1\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1659_C1)\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4Edge",
						"storageClass": [
							"in"
						],
						"name": "join"
					}
				],
				"line": 1733,
				"kind": "function",
				"originalType": "Json(in Join!ScaffoldPayload join)",
				"char": 6,
				"name": "joinToJson",
				"deco": "FIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4EdgeZS4vibe4data4json4Json",
				"protection": "public",
				"endchar": 1,
				"endline": 1740,
				"comment": "Convert `join` to `Json`.\n"
			},
			{
				"parameters": [
					{
						"deco": "AS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4Edge",
						"name": "incidentGapJoins"
					},
					{
						"deco": "xd",
						"storageClass": [
							"in"
						],
						"name": "bestPileUpMargin"
					},
					{
						"deco": "xd",
						"storageClass": [
							"in"
						],
						"name": "existingGapBonus"
					}
				],
				"line": 1754,
				"kind": "function",
				"originalType": "size_t(Join!ScaffoldPayload[] incidentGapJoins, in double bestPileUpMargin, in double existingGapBonus)",
				"char": 8,
				"name": "findCorrectGapJoin",
				"deco": "FAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4EdgeIdIdZm",
				"protection": "public",
				"endchar": 1,
				"endline": 1803,
				"comment": "This selects the outstanding best pile up or none at all.\n\nIf the join with the most reads supporting it if it has significantly\nmore reads (`bestPileUpMargin`) than all other joins it is deemed \"best\";\notherwise there is no \"correct\" gap join.\n\nJoins that are supported by an existing gap in the input assembly get a\nmultiplicative bonus of `existingGapBonus`. This reflects the assumption\nthat the input scaffolding is reliable to a certain extent.\n\nReturns: index of \"correct\" gap join or `size_t.max` if none was found.\n"
			},
			{
				"parameters": [
					{
						"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu",
						"name": "scaffold"
					},
					{
						"deco": "m",
						"name": "minSpanningReads"
					}
				],
				"line": 1807,
				"kind": "function",
				"originalType": "Scaffold!ScaffoldPayload(Scaffold!ScaffoldPayload scaffold, size_t minSpanningReads)",
				"char": 26,
				"name": "enforceMinSpanningReads",
				"deco": "FS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIumZQJv",
				"protection": "public",
				"endchar": 1,
				"endline": 1836,
				"comment": "Remove joins with an insufficient number of spanning reads for removal.\n"
			},
			{
				"parameters": [
					{
						"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu",
						"name": "scaffold"
					}
				],
				"line": 1840,
				"kind": "function",
				"originalType": "Scaffold!ScaffoldPayload(Scaffold!ScaffoldPayload scaffold)",
				"char": 26,
				"name": "removeInputGaps",
				"deco": "FS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIuZQJu",
				"protection": "public",
				"endchar": 1,
				"endline": 1852,
				"comment": "Remove the information on input gaps from the graph.\n"
			}
		],
		"comment": "    This is the algorithm for building pile ups.\n\n    Pipeline:\n\n    See `build` for the implementation.\n\n    $(OL\n        $(LI Group alignments by read ID and deduce graph edges\n            $(SEE_ALSO `collectScaffoldJoins!collectReadAlignments(candidates)`))\n        $(LI Create edges for `inputGaps` (`makeScaffoldJoin!GapSegment`))\n        $(LI $(STAGE raw) Build the scaffold graph from previously created\n            edges and the \"default\" edges for the contigs\n            $(SEE_ALSO `buildScaffold`))\n        $(LI $(STAGE resolvedBubbles) Detect small cycles (bubbles) and try to\n            resolve them by identifying \"skipping\" edges\n            $(SEE_ALSO `resolveBubbles`, `options.maxBubbleResolverIterations`,\n                `options.maxBubbleSize`))\n        $(LI $(STAGE unambiguous) Resolve forks in the graph by selecting\n            either one edge that has a significantly larger pile up than all\n            others or remove all conflicting edges.\n            $(SEE_ALSO `options.bestPileUpMargin`, `options.existingGapBonus`))\n        $(LI $(STAGE minSpanningEnforced) Removes edges with insufficient\n            number of spanning reads\n            $(SEE_ALSO `enforceMinSpanningReads`, `options.minSpanningReads`))\n        $(LI $(STAGE inputGapsRemoved) Remove input gaps from the graph as\n            they are no longer required\n            $(SEE_ALSO `removeInputGaps`))\n        $(LI $(STAGE extensionsMerged) Merge extending pile ups with adjacent\n            spanning pile ups if requested\n            $(SEE_ALSO `options.mergeExtensions`, `mergeExtensionsWithGaps`))\n        $(LI Collect the pile ups from the scaffold graph and return them.\n            $(SEE_ALSO `collectPileUps`))\n    )\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n    Macros:\n        STAGE = $(I Stage `\"$0\"`:)\n        SEE_ALSO = $(BR)See also: $0\n",
		"name": "dentist.commands.collectPileUps.pileups"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/filterMask.d",
		"members": [
			{
				"line": 63,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.filterMask)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi6ZQCa",
				"protection": "public",
				"comment": "Options for the `filterMask` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi6ZQCa",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 67,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi6ZQCaZv",
				"protection": "public",
				"endchar": 1,
				"endline": 72,
				"comment": "Execute the `filterMask` command with `options`.\n"
			}
		],
		"comment": "    This is the `filterMask` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Filter a Dazzler mask. See `dentist filter-mask --help` for a list of\n    available filters.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.filterMask"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/findClosableGaps.d",
		"members": [
			{
				"line": 67,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.findClosableGaps)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi2ZQCa",
				"protection": "public",
				"comment": "Options for the `findClosableGaps` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi2ZQCa",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 70,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi2ZQCaZv",
				"protection": "public",
				"endchar": 1,
				"endline": 75,
				"comment": "Execute the `findClosableGaps` command with `options`.\n"
			},
			{
				"line": 77,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"const"
						],
						"line": 79,
						"kind": "variable",
						"originalType": "const(Options)",
						"char": 20,
						"name": "options",
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi2ZQCa",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 81,
						"kind": "variable",
						"char": 16,
						"name": "baseContigs",
						"deco": "AS7dentist7dazzler8DbRecord",
						"protection": "public",
						"offset": 136,
						"comment": "Contig locations of the base assembly (trueAssembly)\n"
					},
					{
						"line": 82,
						"kind": "variable",
						"originalType": "ReferenceInterval[]",
						"char": 25,
						"name": "mappedContigs",
						"deco": "AS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
						"protection": "public",
						"offset": 152
					},
					{
						"line": 83,
						"kind": "variable",
						"char": 18,
						"name": "readSamples",
						"deco": "AS7dentist8commands16findClosableGaps10ReadSample",
						"protection": "public",
						"offset": 168
					},
					{
						"line": 84,
						"kind": "variable",
						"char": 19,
						"name": "closableGaps",
						"deco": "AS7dentist8commands16findClosableGaps11ClosableGap",
						"protection": "public",
						"offset": 184
					},
					{
						"line": 86,
						"kind": "function",
						"char": 10,
						"name": "run",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 92
					},
					{
						"line": 94,
						"kind": "function",
						"char": 10,
						"name": "init",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 113
					},
					{
						"line": 115,
						"kind": "function",
						"char": 10,
						"name": "findClosableGaps",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 175
					}
				],
				"name": "ClosableGapsFinder",
				"protection": "public"
			},
			{
				"line": 178,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 180,
						"kind": "variable",
						"originalType": "id_t",
						"char": 10,
						"name": "fromContig",
						"deco": "k",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 181,
						"kind": "variable",
						"originalType": "id_t",
						"char": 10,
						"name": "toContig",
						"deco": "k",
						"protection": "public",
						"offset": 4
					},
					{
						"line": 182,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "gapSize",
						"deco": "k",
						"protection": "public",
						"offset": 8
					},
					{
						"line": 183,
						"kind": "variable",
						"originalType": "ReferenceInterval",
						"char": 23,
						"name": "mappedInterval",
						"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
						"protection": "public",
						"offset": 16
					},
					{
						"line": 184,
						"kind": "variable",
						"originalType": "id_t[]",
						"char": 12,
						"name": "spanningReads",
						"deco": "Ak",
						"protection": "public",
						"offset": 40
					}
				],
				"name": "ClosableGap",
				"protection": "public"
			},
			{
				"line": 187,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 189,
						"kind": "variable",
						"originalType": "id_t",
						"char": 10,
						"name": "scaffoldId",
						"deco": "k",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 190,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "begin",
						"deco": "k",
						"protection": "public",
						"offset": 4
					},
					{
						"line": 191,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "end",
						"deco": "k",
						"protection": "public",
						"offset": 8
					},
					{
						"line": 192,
						"kind": "variable",
						"char": 10,
						"name": "complement",
						"deco": "b",
						"protection": "public",
						"offset": 12
					},
					{
						"line": 193,
						"kind": "variable",
						"originalType": "id_t",
						"char": 10,
						"name": "readId",
						"deco": "k",
						"protection": "public",
						"offset": 16
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist8commands16findClosableGaps10ReadSample",
								"storageClass": [
									"in"
								],
								"name": "other"
							}
						],
						"line": 195,
						"kind": "function",
						"char": 9,
						"name": "opCmp",
						"deco": "xFNaNbIS7dentist8commands16findClosableGaps10ReadSampleZi",
						"protection": "public",
						"endchar": 5,
						"endline": 204
					}
				],
				"name": "ReadSample",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "readsMap"
					}
				],
				"line": 207,
				"kind": "function",
				"char": 14,
				"name": "readReadSamples",
				"deco": "FIAyaZAS7dentist8commands16findClosableGaps10ReadSample",
				"protection": "public",
				"endchar": 1,
				"endline": 217
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "EnumLine"
					}
				],
				"line": 220,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "EnumLine",
								"name": "enumLine"
							}
						],
						"line": 220,
						"kind": "function",
						"char": 12,
						"name": "parseReadSample",
						"type": "ReadSample(EnumLine enumLine)",
						"endchar": 1,
						"endline": 239
					}
				],
				"name": "parseReadSample",
				"protection": "public"
			}
		],
		"comment": "    This is the `findClosableGaps` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Find which gaps are closable, i.e. the true alignment of the reads\n    provides a sufficient number spanning reads including some amount of\n    anchor sequence.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.findClosableGaps"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/generateDazzlerOptions.d",
		"members": [
			{
				"line": 30,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.generateDazzlerOptions)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi3ZQCa",
				"protection": "public",
				"comment": "Options for the `generateDazzlerOptions` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi3ZQCa",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 34,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi3ZQCaZv",
				"protection": "public",
				"endchar": 1,
				"endline": 44,
				"comment": "Execute the `generateDazzlerOptions` command with `options`.\n"
			}
		],
		"comment": "    This is the `generateDazzlerOptions` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Outputs advice on how to call some of the Dazzler tools. The output is\n    used by the Snakemake workflow to generate the correct commands.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.generateDazzlerOptions"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/maskRepetitiveRegions.d",
		"members": [
			{
				"line": 63,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.maskRepetitiveRegions)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi4ZQCa",
				"protection": "public",
				"comment": "Options for the `maskRepetitiveRegions` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi4ZQCa",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 67,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi4ZQCaZv",
				"protection": "public",
				"endchar": 1,
				"endline": 72,
				"comment": "Execute the `maskRepetitiveRegions` command with `options`.\n"
			},
			{
				"line": 74,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 76,
						"kind": "enum member",
						"char": 5,
						"name": "self",
						"protection": "public",
						"value": "cast(ubyte)0u"
					},
					{
						"line": 77,
						"kind": "enum member",
						"char": 5,
						"name": "reads",
						"protection": "public",
						"value": "1"
					}
				],
				"name": "AlignmentType",
				"protection": "public",
				"baseDeco": "h"
			},
			{
				"line": 81,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"const"
						],
						"line": 83,
						"kind": "variable",
						"originalType": "Options",
						"char": 29,
						"name": "options",
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi4ZQCa",
						"protection": "protected",
						"offset": 16
					},
					{
						"line": 84,
						"kind": "variable",
						"char": 29,
						"name": "alignmentType",
						"deco": "E7dentist8commands21maskRepetitiveRegions13AlignmentType",
						"protection": "protected",
						"offset": 200
					},
					{
						"line": 85,
						"kind": "variable",
						"char": 31,
						"name": "alignmentHeader",
						"deco": "S7dentist7dazzler15AlignmentHeader",
						"protection": "protected",
						"offset": 208
					},
					{
						"line": 86,
						"kind": "variable",
						"originalType": "LocalAlignmentReader",
						"char": 36,
						"name": "alignment",
						"deco": "C7dentist7dazzler20LocalAlignmentReader",
						"protection": "protected",
						"offset": 272
					},
					{
						"line": 87,
						"kind": "variable",
						"originalType": "ReferenceRegion",
						"char": 31,
						"name": "repetitiveRegions",
						"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
						"protection": "protected",
						"offset": 280
					},
					{
						"line": 88,
						"kind": "variable",
						"originalType": "ReferenceRegion",
						"char": 31,
						"name": "repetitiveRegionsImproper",
						"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
						"protection": "protected",
						"offset": 296
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi4ZQCa",
								"storageClass": [
									"in",
									"ref"
								],
								"name": "options"
							}
						],
						"line": 90,
						"kind": "constructor",
						"originalType": "(in ref Options options)",
						"char": 5,
						"name": "this",
						"deco": "FIKS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi4ZQCaZCQDdQBk21maskRepetitiveRegions18RepeatMaskAssessor",
						"protection": "public",
						"endchar": 5,
						"endline": 93
					},
					{
						"line": 95,
						"kind": "function",
						"char": 10,
						"name": "run",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 102
					},
					{
						"line": 104,
						"kind": "function",
						"char": 20,
						"name": "readInputs",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 132
					},
					{
						"line": 134,
						"kind": "function",
						"char": 10,
						"name": "assessRepeatStructure",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 181
					},
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"deco": "E3std8typecons__T4FlagVAyaa12_696d70726f7065724f6e6c79ZQBm",
								"default": "Flag.no",
								"name": "improperOnly"
							}
						],
						"line": 183,
						"kind": "function",
						"originalType": "(Flag!\"improperOnly\" improperOnly = No.improperOnly)",
						"char": 20,
						"name": "alignmentIntervals",
						"deco": "FE3std8typecons__T4FlagVAyaa12_696d70726f7065724f6e6c79ZQBmZSQCh9algorithm9iteration__T9MapResultS7dentist8commands21maskRepetitiveRegions18RepeatMaskAssessor18alignmentIntervalsMFQGxZ9__lambda4TSQHmQFfQEy__T12FilterResultSQEvQEqQEkQDqQCzMFQJfZ9__lambda3TSQGc7dazzler__T20AlignmentChainPackerTCQHoQBm20LocalAlignmentReaderZQCbZQEpZQJk",
						"protection": "protected",
						"endchar": 5,
						"endline": 201
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 203,
						"kind": "function",
						"originalType": "()",
						"char": 20,
						"name": "contigIntervals",
						"deco": "FZS3std9algorithm9iteration__T9MapResultS7dentist8commands21maskRepetitiveRegions18RepeatMaskAssessor15contigIntervalsMFZ9__lambda1TSQDo7dazzler__T12DbDumpReaderTCQEs4util7process__T9LinesPipeTSQFxQBfQBd11ProcessInfoVEQIh8typecons__T4FlagVAyaa10_69734275666665726564ZQBii0ZQDnZQFaZQJr",
						"protection": "protected",
						"endchar": 5,
						"endline": 211
					},
					{
						"line": 213,
						"kind": "function",
						"char": 20,
						"name": "writeRepeatMask",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 238
					}
				],
				"name": "RepeatMaskAssessor",
				"protection": "public",
				"comment": "This class comprises the `maskRepetitiveRegions` step of the DENTIST algorithm\n"
			},
			{
				"line": 246,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"line": 248,
						"kind": "variable",
						"char": 12,
						"name": "lowerLimit",
						"deco": "d",
						"protection": "public",
						"offset": 16
					},
					{
						"line": 249,
						"kind": "variable",
						"char": 12,
						"name": "upperLimit",
						"deco": "d",
						"protection": "public",
						"offset": 24
					},
					{
						"parameters": [
							{
								"deco": "d",
								"name": "lowerLimit"
							},
							{
								"deco": "d",
								"name": "upperLimit"
							}
						],
						"line": 252,
						"kind": "constructor",
						"originalType": "(double lowerLimit, double upperLimit)",
						"char": 5,
						"name": "this",
						"deco": "FddZC7dentist8commands21maskRepetitiveRegions28BadAlignmentCoverageAssessor",
						"protection": "public",
						"endchar": 5,
						"endline": 256,
						"comment": "Create an assessor with these limits.\n"
					},
					{
						"constraint": "isInputRange!R1 && is(ElementType!R1 == ReferenceInterval) && isInputRange!R2 && is(ElementType!R2 == ReferenceInterval)",
						"parameters": [
							{
								"kind": "type",
								"name": "R1"
							},
							{
								"kind": "type",
								"name": "R2"
							}
						],
						"line": 344,
						"kind": "template",
						"char": 21,
						"members": [
							{
								"parameters": [
									{
										"type": "R1",
										"name": "alignmentIntervals"
									},
									{
										"type": "R2",
										"name": "contigIntervals"
									}
								],
								"line": 344,
								"kind": "function",
								"char": 21,
								"name": "opCall",
								"type": "ReferenceRegion(R1 alignmentIntervals, R2 contigIntervals)",
								"endchar": 5,
								"endline": 391
							}
						],
						"name": "opCall",
						"protection": "public",
						"comment": "Apply the assessor to the given set of alignment.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L394_C5)\n---\nauto alignmentIntervals = getTestAlignmentIntervals();\nauto contigIntervals = getTestContigIntervals();\nalias CoverageChange = CoverageChangeRange.CoverageChange;\n\nauto assessor = new BadAlignmentCoverageAssessor(3, 5);\n\nassert(assessor(alignmentIntervals, contigIntervals) == ReferenceRegion([\n    ReferenceInterval(1,  0,  5),\n    ReferenceInterval(1, 10, 18),\n    ReferenceInterval(1, 20, 30),\n    ReferenceInterval(2,  0,  3),\n    ReferenceInterval(2,  5, 15),\n    ReferenceInterval(3,  0,  3),\n    ReferenceInterval(3, 12, 15),\n]));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L394_C5)\n"
					}
				],
				"name": "BadAlignmentCoverageAssessor",
				"protection": "public",
				"comment": "    Mask reference regions where the alignment coverage is not within set\n    limits. This helps to identify repetitive or bad quality regions.\n"
			},
			{
				"line": 423,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 425,
						"kind": "enum member",
						"char": 5,
						"name": "low",
						"protection": "public",
						"value": "0"
					},
					{
						"line": 426,
						"kind": "enum member",
						"char": 5,
						"name": "ok",
						"protection": "public",
						"value": "1"
					},
					{
						"line": 427,
						"kind": "enum member",
						"char": 5,
						"name": "high",
						"protection": "public",
						"value": "2"
					}
				],
				"name": "CoverageZone",
				"protection": "public",
				"baseDeco": "i"
			},
			{
				"line": 430,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "xm",
								"storageClass": [
									"in"
								],
								"name": "contigId"
							},
							{
								"deco": "xm",
								"storageClass": [
									"in"
								],
								"name": "maskStart"
							}
						],
						"line": 436,
						"kind": "function",
						"originalType": "pure nothrow void(in size_t contigId, in size_t maskStart)",
						"char": 10,
						"name": "start",
						"deco": "FNaNbImImZv",
						"protection": "public",
						"endchar": 5,
						"endline": 441
					},
					{
						"parameters": [
							{
								"deco": "xm",
								"storageClass": [
									"in"
								],
								"name": "maskEnd"
							}
						],
						"line": 443,
						"kind": "function",
						"originalType": "pure nothrow ReferenceInterval(in size_t maskEnd)",
						"char": 23,
						"name": "finish",
						"deco": "FNaNbImZS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
						"protection": "public",
						"endchar": 5,
						"endline": 452
					},
					{
						"line": 454,
						"kind": "function",
						"char": 20,
						"name": "isMasking",
						"deco": "xFNaNbNdZb",
						"protection": "public",
						"endchar": 5,
						"endline": 457
					}
				],
				"name": "Masker",
				"protection": "public"
			},
			{
				"line": 462,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 464,
						"kind": "alias",
						"originalType": "Tuple!(size_t, \"contigId\", size_t, \"position\", int, \"diff\")",
						"char": 12,
						"name": "AlignmentEvent",
						"deco": "S3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TmVQza8_706f736974696f6eTiVQBxa4_64696666ZQCv",
						"protection": "public"
					},
					{
						"line": 471,
						"kind": "struct",
						"char": 12,
						"members": [
							{
								"line": 473,
								"kind": "variable",
								"originalType": "size_t",
								"char": 16,
								"name": "contigId",
								"deco": "m",
								"protection": "public",
								"offset": 0
							},
							{
								"line": 474,
								"kind": "variable",
								"originalType": "size_t",
								"char": 16,
								"name": "position",
								"deco": "m",
								"protection": "public",
								"offset": 8
							},
							{
								"line": 475,
								"kind": "variable",
								"char": 13,
								"name": "currentCoverage",
								"deco": "i",
								"protection": "public",
								"offset": 16
							},
							{
								"line": 476,
								"kind": "variable",
								"char": 13,
								"name": "newCoverage",
								"deco": "i",
								"protection": "public",
								"offset": 20
							},
							{
								"line": 478,
								"kind": "function",
								"char": 14,
								"name": "hasChanged",
								"deco": "xFNaNbZb",
								"protection": "public",
								"endchar": 9,
								"endline": 481
							}
						],
						"name": "CoverageChange",
						"protection": "public"
					},
					{
						"line": 484,
						"kind": "variable",
						"originalType": "AlignmentEvent[]",
						"char": 22,
						"name": "alignmentEvents",
						"deco": "AS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TmVQza8_706f736974696f6eTiVQBxa4_64696666ZQCv",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 485,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "currentEventIdx",
						"deco": "m",
						"init": "0LU",
						"protection": "public",
						"offset": 16
					},
					{
						"line": 486,
						"kind": "variable",
						"char": 20,
						"name": "_front",
						"deco": "S7dentist8commands21maskRepetitiveRegions19CoverageChangeRange14CoverageChange",
						"protection": "public",
						"offset": 24
					},
					{
						"line": 525,
						"kind": "function",
						"char": 10,
						"name": "popFront",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 563
					},
					{
						"line": 565,
						"kind": "function",
						"char": 20,
						"name": "empty",
						"deco": "FNdZb",
						"protection": "public",
						"endchar": 5,
						"endline": 568
					},
					{
						"line": 570,
						"kind": "function",
						"char": 30,
						"name": "front",
						"deco": "FNdZS7dentist8commands21maskRepetitiveRegions19CoverageChangeRange14CoverageChange",
						"protection": "public",
						"endchar": 5,
						"endline": 573
					},
					{
						"line": 575,
						"kind": "function",
						"char": 35,
						"name": "save",
						"deco": "FNaNbNdNfZS7dentist8commands21maskRepetitiveRegions19CoverageChangeRange",
						"protection": "public",
						"endchar": 5,
						"endline": 579
					}
				],
				"name": "CoverageChangeRange",
				"protection": "public",
				"comment": "Transforms a range of alignment chains into a range of coverage\nchange events.\n"
			},
			{
				"constraint": "isInputRange!R1 && is(ElementType!R1 == ReferenceInterval) && isInputRange!R2 && is(ElementType!R2 == ReferenceInterval)",
				"parameters": [
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"line": 582,
				"kind": "template",
				"char": 21,
				"members": [
					{
						"parameters": [
							{
								"type": "R1",
								"name": "alignmentIntervals"
							},
							{
								"type": "R2",
								"name": "contigIntervals"
							}
						],
						"line": 582,
						"kind": "function",
						"char": 21,
						"name": "coverageChanges",
						"type": "CoverageChangeRange(R1 alignmentIntervals, R2 contigIntervals)",
						"endchar": 1,
						"endline": 589
					}
				],
				"name": "coverageChanges",
				"protection": "public"
			}
		],
		"comment": "    This is the `maskRepetitiveRegions` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Mask regions that have a alignment coverage that is out of bounds.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.maskRepetitiveRegions"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/mergeInsertions.d",
		"members": [
			{
				"line": 38,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.mergeInsertions)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi15ZQCb",
				"protection": "public",
				"comment": "Options for the `mergeInsertions` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi15ZQCb",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 42,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi15ZQCbZv",
				"protection": "public",
				"endchar": 1,
				"endline": 59,
				"comment": "Execute the `mergeInsertions` command with `options`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "fileName"
					}
				],
				"line": 61,
				"kind": "function",
				"originalType": "Insertion[](in string fileName)",
				"char": 13,
				"name": "readFromFile",
				"deco": "FIAyaZAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
				"protection": "public",
				"endchar": 1,
				"endline": 66
			},
			{
				"parameters": [
					{
						"deco": "AS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"name": "insertions"
					}
				],
				"line": 68,
				"kind": "function",
				"originalType": "Insertion[](Insertion[] insertions)",
				"char": 13,
				"name": "ensureSorted",
				"deco": "FAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZQJg",
				"protection": "public",
				"endchar": 1,
				"endline": 74
			}
		],
		"comment": "    This is the `mergeInsertions` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Merge multiple insertions files generated by `process-pile-ups` into a\n    single one. This allows for process-level parallelization, e.g. on a\n    compute cluster.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.mergeInsertions"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/mergeMasks.d",
		"members": [
			{
				"line": 39,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.mergeMasks)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi7ZQCa",
				"protection": "public",
				"comment": "Options for the `mergeMasks` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi7ZQCa",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 43,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi7ZQCaZv",
				"protection": "public",
				"endchar": 1,
				"endline": 56,
				"comment": "Execute the `mergeMasks` command with `options`.\n"
			}
		],
		"comment": "    This is the `mergeMasks` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Merge several masks into a single one with non-overlapping intervals. This\n    can also be used to merge overlapping intervals in a single mask.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.mergeMasks"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/output.d",
		"members": [
			{
				"line": 129,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.output)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi16ZQCb",
				"protection": "public",
				"comment": "Options for the `output` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi16ZQCb",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 133,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi16ZQCbZv",
				"protection": "public",
				"endchar": 1,
				"endline": 138,
				"comment": "Execute the `output` command with `options`.\n"
			},
			{
				"line": 141,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 144,
						"kind": "enum member",
						"char": 5,
						"name": "activeFinishing",
						"protection": "public",
						"value": "\"A\"",
						"comment": "Active Finishing\n"
					},
					{
						"line": 146,
						"kind": "enum member",
						"char": 5,
						"name": "draftHTG",
						"protection": "public",
						"value": "\"D\"",
						"comment": "Draft HTG (often phase1 and phase2 are called Draft, whether or not they have the draft keyword).\n"
					},
					{
						"line": 148,
						"kind": "enum member",
						"char": 5,
						"name": "finishedHTG",
						"protection": "public",
						"value": "\"F\"",
						"comment": "Finished HTG (phase3)\n"
					},
					{
						"line": 150,
						"kind": "enum member",
						"char": 5,
						"name": "wholeGenomeFinishing",
						"protection": "public",
						"value": "\"G\"",
						"comment": "Whole Genome Finishing\n"
					},
					{
						"line": 152,
						"kind": "enum member",
						"char": 5,
						"name": "otherSequence",
						"protection": "public",
						"value": "\"O\"",
						"comment": "Other sequence (typically means no HTG keyword)\n"
					},
					{
						"line": 154,
						"kind": "enum member",
						"char": 5,
						"name": "preDraft",
						"protection": "public",
						"value": "\"P\"",
						"comment": "Pre Draft\n"
					},
					{
						"line": 156,
						"kind": "enum member",
						"char": 5,
						"name": "wgsContig",
						"protection": "public",
						"value": "\"W\"",
						"comment": "WGS contig\n"
					},
					{
						"line": 158,
						"kind": "enum member",
						"char": 5,
						"name": "gapWithSpecifiedSize",
						"protection": "public",
						"value": "\"N\"",
						"comment": "gap with specified size\n"
					},
					{
						"line": 160,
						"kind": "enum member",
						"char": 5,
						"name": "gapOfUnknownSize",
						"protection": "public",
						"value": "\"U\"",
						"comment": "gap of unknown size, defaulting to 100 bases.\n"
					}
				],
				"name": "AGPComponentType",
				"protection": "public",
				"baseDeco": "Aya"
			},
			{
				"line": 164,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 167,
						"kind": "enum member",
						"char": 5,
						"name": "na",
						"protection": "public",
						"value": "\"na\"",
						"comment": "used when no linkage is being asserted (column 8b is ânoâ)\n"
					},
					{
						"line": 169,
						"kind": "enum member",
						"char": 5,
						"name": "pairedEnds",
						"protection": "public",
						"value": "\"paired-ends\"",
						"comment": "paired sequences from the two ends of a DNA fragment, mate-pairs and molecular-barcoding.\n"
					},
					{
						"line": 171,
						"kind": "enum member",
						"char": 5,
						"name": "alignGenus",
						"protection": "public",
						"value": "\"align_genus\"",
						"comment": "alignment to a reference genome within the same genus.\n"
					},
					{
						"line": 173,
						"kind": "enum member",
						"char": 5,
						"name": "alignXgenus",
						"protection": "public",
						"value": "\"align_xgenus\"",
						"comment": "alignment to a reference genome within another genus.\n"
					},
					{
						"line": 175,
						"kind": "enum member",
						"char": 5,
						"name": "alignTrnscpt",
						"protection": "public",
						"value": "\"align_trnscpt\"",
						"comment": "alignment to a transcript from the same species.\n"
					},
					{
						"line": 177,
						"kind": "enum member",
						"char": 5,
						"name": "withinClone",
						"protection": "public",
						"value": "\"within_clone\"",
						"comment": "sequence on both sides of the gap is derived from the same clone, but the gap is not spanned by paired-ends. The adjacent sequence contigs have unknown order and orientation.\n"
					},
					{
						"line": 179,
						"kind": "enum member",
						"char": 5,
						"name": "cloneContig",
						"protection": "public",
						"value": "\"clone_contig\"",
						"comment": "linkage is provided by a clone contig in the tiling path (TPF). For example, a gap where there is a known clone, but there is not yet sequence for that clone.\n"
					},
					{
						"line": 181,
						"kind": "enum member",
						"char": 5,
						"name": "map",
						"protection": "public",
						"value": "\"map\"",
						"comment": "linkage asserted using a non-sequence based map such as RH, linkage, fingerprint or optical.\n"
					},
					{
						"line": 183,
						"kind": "enum member",
						"char": 5,
						"name": "pcr",
						"protection": "public",
						"value": "\"pcr\"",
						"comment": "PCR using primers on both sides of the gap.\n"
					},
					{
						"line": 185,
						"kind": "enum member",
						"char": 5,
						"name": "proximityLigation",
						"protection": "public",
						"value": "\"proximity_ligation\"",
						"comment": "ligation of segments of DNA that were brought into proximity in chromatin (Hi-C and related technologies).\n"
					},
					{
						"line": 187,
						"kind": "enum member",
						"char": 5,
						"name": "strobe",
						"protection": "public",
						"value": "\"strobe\"",
						"comment": "strobe sequencing.\n"
					},
					{
						"line": 189,
						"kind": "enum member",
						"char": 5,
						"name": "unspecified",
						"protection": "public",
						"value": "\"unspecified\"",
						"comment": "used only for gaps of type contamination and when converting old AGPs that lack a field for linkage evidence into the new format.\n"
					}
				],
				"name": "AGPLinkageEvidence",
				"protection": "public",
				"baseDeco": "Aya"
			},
			{
				"line": 193,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"line": 195,
						"kind": "alias",
						"originalType": "typeof(wrapLines(stdout.lockingTextWriter, 0))",
						"char": 5,
						"name": "FastaWriter",
						"deco": "C7dentist4util5range__T13WrapLinesImplTS3std5stdio4File17LockingTextWriterZQCa",
						"protection": "public"
					},
					{
						"storageClass": [
							"const"
						],
						"line": 197,
						"kind": "variable",
						"originalType": "Options",
						"char": 29,
						"name": "options",
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi16ZQCb",
						"protection": "protected",
						"offset": 16
					},
					{
						"line": 198,
						"kind": "variable",
						"originalType": "const(ScaffoldSegment)[]",
						"char": 40,
						"name": "scaffoldStructure",
						"deco": "AxS3std7variant__T8VariantNVmi56TS7dentist7dazzler13ContigSegmentTSQBhQBc10GapSegmentZQCq",
						"protection": "protected",
						"offset": 264
					},
					{
						"line": 199,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numReferenceContigs",
						"deco": "m",
						"protection": "public",
						"offset": 280
					},
					{
						"line": 200,
						"kind": "variable",
						"originalType": "size_t[]",
						"char": 14,
						"name": "contigLengths",
						"deco": "Am",
						"protection": "public",
						"offset": 288
					},
					{
						"line": 201,
						"kind": "variable",
						"originalType": "bool[size_t[2]]",
						"char": 21,
						"name": "skipGaps",
						"deco": "HG2mb",
						"protection": "public",
						"offset": 304
					},
					{
						"line": 202,
						"kind": "variable",
						"originalType": "OutputScaffold",
						"char": 20,
						"name": "assemblyGraph",
						"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa",
						"protection": "public",
						"offset": 312
					},
					{
						"line": 203,
						"kind": "variable",
						"originalType": "OutputScaffold.IncidentEdgesCache",
						"char": 39,
						"name": "incidentEdgesCache",
						"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa18IncidentEdgesCache",
						"protection": "public",
						"offset": 336
					},
					{
						"line": 204,
						"kind": "variable",
						"originalType": "ContigNode[]",
						"char": 18,
						"name": "scaffoldStartNodes",
						"deco": "AS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
						"protection": "public",
						"offset": 376
					},
					{
						"line": 205,
						"kind": "variable",
						"char": 10,
						"name": "resultFile",
						"deco": "S3std5stdio4File",
						"protection": "public",
						"offset": 392
					},
					{
						"line": 206,
						"kind": "variable",
						"originalType": "FastaWriter",
						"char": 17,
						"name": "writer",
						"deco": "C7dentist4util5range__T13WrapLinesImplTS3std5stdio4File17LockingTextWriterZQCa",
						"protection": "public",
						"offset": 416
					},
					{
						"line": 207,
						"kind": "variable",
						"char": 10,
						"name": "agpFile",
						"deco": "S3std5stdio4File",
						"protection": "public",
						"offset": 424
					},
					{
						"line": 208,
						"kind": "variable",
						"char": 10,
						"name": "closedGapsBedFile",
						"deco": "S3std5stdio4File",
						"protection": "public",
						"offset": 448
					},
					{
						"line": 209,
						"kind": "variable",
						"char": 12,
						"name": "currentScaffold",
						"deco": "Aya",
						"protection": "public",
						"offset": 472
					},
					{
						"line": 210,
						"kind": "variable",
						"originalType": "id_t",
						"char": 10,
						"name": "currentScaffoldPartId",
						"deco": "k",
						"protection": "public",
						"offset": 488
					},
					{
						"line": 211,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "currentScaffoldCoord",
						"deco": "k",
						"protection": "public",
						"offset": 492
					},
					{
						"line": 212,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "nextScaffoldCoord",
						"deco": "k",
						"protection": "public",
						"offset": 496
					},
					{
						"line": 213,
						"kind": "variable",
						"originalType": "id_t",
						"char": 10,
						"name": "currentContigId",
						"deco": "k",
						"protection": "public",
						"offset": 500
					},
					{
						"line": 214,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "currentContigCoord",
						"deco": "k",
						"protection": "public",
						"offset": 504
					},
					{
						"line": 215,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "nextContigCoord",
						"deco": "k",
						"protection": "public",
						"offset": 508
					},
					{
						"line": 218,
						"kind": "variable",
						"char": 31,
						"name": "contigAlignmentsCache",
						"deco": "S7dentist8commands12checkResults21ContigAlignmentsCache",
						"protection": "public",
						"offset": 512
					},
					{
						"line": 219,
						"kind": "variable",
						"char": 25,
						"name": "contigAlignments",
						"deco": "AS7dentist8commands12checkResults13ContigMapping",
						"protection": "public",
						"offset": 600
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi16ZQCb",
								"storageClass": [
									"in",
									"ref"
								],
								"name": "options"
							}
						],
						"line": 222,
						"kind": "constructor",
						"originalType": "(in ref Options options)",
						"char": 5,
						"name": "this",
						"deco": "FIKS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi16ZQCbZCQDeQBl6output14AssemblyWriter",
						"protection": "public",
						"endchar": 5,
						"endline": 243
					},
					{
						"line": 245,
						"kind": "function",
						"char": 10,
						"name": "run",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 268
					},
					{
						"line": 270,
						"kind": "function",
						"char": 20,
						"name": "init",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 291
					},
					{
						"line": 294,
						"kind": "function",
						"char": 20,
						"name": "buildAssemblyGraph",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 337
					},
					{
						"line": 339,
						"kind": "function",
						"char": 20,
						"name": "appendUnkownJoins",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 350
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "insertionId"
							},
							{
								"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
								"name": "insertion"
							}
						],
						"line": 352,
						"kind": "function",
						"originalType": "const Flag!\"keepInsertion\"(size_t insertionId, Insertion insertion)",
						"char": 36,
						"name": "skipShortExtension",
						"deco": "xFmS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZEQIcQIb__TQDqVQHqa13_6b656570496e73657274696f6eZQFc",
						"protection": "protected",
						"endchar": 5,
						"endline": 375
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "insertionId"
							},
							{
								"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
								"name": "insertion"
							}
						],
						"line": 377,
						"kind": "function",
						"originalType": "const Flag!\"keepInsertion\"(size_t insertionId, Insertion insertion)",
						"char": 36,
						"name": "ensureHighQualityConsensus",
						"deco": "xFmS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZEQIcQIb__TQDqVQHqa13_6b656570496e73657274696f6eZQFc",
						"protection": "protected",
						"endchar": 5,
						"endline": 399
					},
					{
						"line": 401,
						"kind": "function",
						"char": 10,
						"name": "logStatistics",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 441
					},
					{
						"line": 443,
						"kind": "function",
						"char": 10,
						"name": "writeAGPHeader",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 452
					},
					{
						"line": 454,
						"kind": "function",
						"char": 10,
						"name": "logSparseInsertionWalks",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 540
					},
					{
						"parameters": [
							{
								"deco": "S3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
								"name": "startNode"
							}
						],
						"line": 542,
						"kind": "function",
						"originalType": "void(ContigNode startNode)",
						"char": 10,
						"name": "writeNewScaffold",
						"deco": "FS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuZv",
						"protection": "public",
						"endchar": 5,
						"endline": 575
					},
					{
						"line": 577,
						"kind": "function",
						"char": 10,
						"name": "gotoNextContig",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 591
					},
					{
						"parameters": [
							{
								"deco": "AS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
								"name": "insertionsChunk"
							}
						],
						"line": 593,
						"kind": "function",
						"originalType": "Insertion(Insertion[] insertionsChunk)",
						"char": 15,
						"name": "mergeInsertions",
						"deco": "FAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZQJf",
						"protection": "public",
						"endchar": 5,
						"endline": 620
					},
					{
						"parameters": [
							{
								"deco": "xS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
								"storageClass": [
									"in"
								],
								"name": "begin"
							},
							{
								"deco": "xE3std8typecons__T4FlagVAyaa8_69734379636c6963ZQBd",
								"storageClass": [
									"in"
								],
								"name": "isCyclic"
							}
						],
						"line": 622,
						"kind": "function",
						"originalType": "string(in ContigNode begin, in Flag!\"isCyclic\" isCyclic)",
						"char": 22,
						"name": "scaffoldHeader",
						"deco": "FIS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuIEQEpQEo__T4FlagVQEfa8_69734379636c6963ZQBdZQFg",
						"protection": "protected",
						"endchar": 5,
						"endline": 628
					},
					{
						"line": 630,
						"kind": "function",
						"char": 20,
						"name": "writeHeader",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 633
					},
					{
						"parameters": [
							{
								"deco": "xS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
								"storageClass": [
									"in"
								],
								"name": "begin"
							},
							{
								"deco": "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
								"storageClass": [
									"in"
								],
								"name": "insertion"
							},
							{
								"deco": "xb",
								"storageClass": [
									"in"
								],
								"name": "globalComplement"
							}
						],
						"line": 635,
						"kind": "function",
						"originalType": "void(in ContigNode begin, in Insertion insertion, in bool globalComplement)",
						"char": 20,
						"name": "writeInsertion",
						"deco": "FIS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuISQCs4util4math__T5GraphTSQFnQFm__TQFgTmVQFda8_636f6e7469674964TQFdVQGea10_636f6e74696750617274ZQHpTvVEQImQIl__T4FlagVQIca10_69734469726563746564ZQBii0TSQInQIi10insertions13InsertionInfoZQGn4EdgeIbZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 649
					},
					{
						"parameters": [
							{
								"deco": "xS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
								"storageClass": [
									"in"
								],
								"name": "begin"
							},
							{
								"deco": "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
								"storageClass": [
									"in"
								],
								"name": "insertion"
							},
							{
								"deco": "xb",
								"storageClass": [
									"in"
								],
								"name": "globalComplement"
							}
						],
						"line": 651,
						"kind": "function",
						"originalType": "void(in ContigNode begin, in Insertion insertion, in bool globalComplement)",
						"char": 20,
						"name": "writeExistingContig",
						"deco": "FIS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuISQCs4util4math__T5GraphTSQFnQFm__TQFgTmVQFda8_636f6e7469674964TQFdVQGea10_636f6e74696750617274ZQHpTvVEQImQIl__T4FlagVQIca10_69734469726563746564ZQBii0TSQInQIi10insertions13InsertionInfoZQGn4EdgeIbZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 705
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
								"storageClass": [
									"in"
								],
								"name": "insertion"
							}
						],
						"line": 707,
						"kind": "function",
						"originalType": "void(in Insertion insertion)",
						"char": 20,
						"name": "writeGap",
						"deco": "FIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 743
					},
					{
						"parameters": [
							{
								"deco": "xS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
								"storageClass": [
									"in"
								],
								"name": "begin"
							},
							{
								"deco": "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
								"storageClass": [
									"in"
								],
								"name": "insertion"
							},
							{
								"deco": "xb",
								"storageClass": [
									"in"
								],
								"name": "globalComplement"
							}
						],
						"line": 745,
						"kind": "function",
						"originalType": "void(in ContigNode begin, in Insertion insertion, in bool globalComplement)",
						"char": 20,
						"name": "writeNewSequenceInsertion",
						"deco": "FIS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuISQCs4util4math__T5GraphTSQFnQFm__TQFgTmVQFda8_636f6e7469674964TQFdVQGea10_636f6e74696750617274ZQHpTvVEQImQIl__T4FlagVQIca10_69734469726563746564ZQBii0TSQInQIi10insertions13InsertionInfoZQGn4EdgeIbZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 817
					},
					{
						"line": 193,
						"kind": "destructor",
						"char": 1,
						"name": "~this",
						"deco": "FNeZv",
						"protection": "public"
					}
				],
				"name": "AssemblyWriter",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa",
						"name": "scaffold"
					}
				],
				"line": 823,
				"kind": "function",
				"originalType": "OutputScaffold(OutputScaffold scaffold)",
				"char": 16,
				"name": "fixCropping",
				"deco": "FS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIaZQJa",
				"protection": "public",
				"endchar": 1,
				"endline": 860,
				"comment": "Remove contig cropping where no new sequence is to be inserted and adjust\ncropping where cropped regions overlap.\n"
			},
			{
				"parameters": [
					{
						"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"storageClass": [
							"ref"
						],
						"name": "contigJoin"
					},
					{
						"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa18IncidentEdgesCache",
						"name": "incidentEdgesCache"
					}
				],
				"line": 862,
				"kind": "function",
				"originalType": "Flag!\"insertionUpdated\"(ref Insertion contigJoin, OutputScaffold.IncidentEdgesCache incidentEdgesCache)",
				"char": 25,
				"name": "transferCroppingFromIncidentJoins",
				"deco": "FKS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeSQJeQIzQIx__TQIvTQIsTvVQEmi0TQCuZQJp18IncidentEdgesCacheZEQKgQKf__TQFuVQJua16_696e73657274696f6e55706461746564ZQHm",
				"protection": "public",
				"endchar": 1,
				"endline": 895
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"storageClass": [
							"in"
						],
						"name": "insertion"
					}
				],
				"line": 898,
				"kind": "function",
				"originalType": "Json(in Insertion insertion)",
				"char": 6,
				"name": "insertionToSimpleJson",
				"deco": "FIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZS4vibe4data4json4Json",
				"protection": "public",
				"endchar": 1,
				"endline": 912,
				"comment": "Converts the pileup into a simple JSON object for diagnostic purposes.\n"
			}
		],
		"comment": "    This is the `output` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Generate the output assembly by closing gaps.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.output"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/package.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"bed2mask": "execute"
				},
				"line": 47,
				"name": "dentist.commands.bed2mask"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"chainLocalAlignments": "execute"
				},
				"line": 48,
				"name": "dentist.commands.chainLocalAlignments"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"collectPileUps": "execute"
				},
				"line": 49,
				"name": "dentist.commands.collectPileUps"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"filterMask": "execute"
				},
				"line": 50,
				"name": "dentist.commands.filterMask"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"generateDazzlerOptions": "execute"
				},
				"line": 51,
				"name": "dentist.commands.generateDazzlerOptions"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"maskRepetitiveRegions": "execute"
				},
				"line": 52,
				"name": "dentist.commands.maskRepetitiveRegions"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"mergeInsertions": "execute"
				},
				"line": 53,
				"name": "dentist.commands.mergeInsertions"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"mergeMasks": "execute"
				},
				"line": 54,
				"name": "dentist.commands.mergeMasks"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"output": "execute"
				},
				"line": 55,
				"name": "dentist.commands.output"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"processPileUps": "execute"
				},
				"line": 56,
				"name": "dentist.commands.processPileUps"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"propagateMask": "execute"
				},
				"line": 57,
				"name": "dentist.commands.propagateMask"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"showInsertions": "execute"
				},
				"line": 58,
				"name": "dentist.commands.showInsertions"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"showMask": "execute"
				},
				"line": 59,
				"name": "dentist.commands.showMask"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"showPileUps": "execute"
				},
				"line": 60,
				"name": "dentist.commands.showPileUps"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"translateCoords": "execute"
				},
				"line": 61,
				"name": "dentist.commands.translateCoords"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"validateConfig": "execute"
				},
				"line": 62,
				"name": "dentist.commands.validateConfig"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"validateRegions": "execute"
				},
				"line": 63,
				"name": "dentist.commands.validateRegions"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"buildPartialAssembly": "execute"
				},
				"line": 68,
				"name": "dentist.commands.buildPartialAssembly"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"checkResults": "execute"
				},
				"line": 69,
				"name": "dentist.commands.checkResults"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"checkScaffolding": "execute"
				},
				"line": 70,
				"name": "dentist.commands.checkScaffolding"
			},
			{
				"kind": "import",
				"char": 15,
				"renamed": {
					"findClosableGaps": "execute"
				},
				"line": 71,
				"name": "dentist.commands.findClosableGaps"
			}
		],
		"comment": "    Exposes the `execute` function from each command. The functions are\n    accessed by the command name, for example,\n    `dentist.commands.collectPileUps.execute` is available as `collectPileUps`.\n\n\n    $(UL\n        $(LI `dentist.commands.bed2mask`)\n        $(LI `dentist.commands.chainLocalAlignments`)\n        $(LI `dentist.commands.collectPileUps`)\n        $(LI `dentist.commands.filterMask`)\n        $(LI `dentist.commands.generateDazzlerOptions`)\n        $(LI `dentist.commands.maskRepetitiveRegions`)\n        $(LI `dentist.commands.mergeInsertions`)\n        $(LI `dentist.commands.mergeMasks`)\n        $(LI `dentist.commands.output`)\n        $(LI `dentist.commands.processPileUps`)\n        $(LI `dentist.commands.propagateMask`)\n        $(LI `dentist.commands.showInsertions`)\n        $(LI `dentist.commands.showMask`)\n        $(LI `dentist.commands.showPileUps`)\n        $(LI `dentist.commands.translateCoords`)\n        $(LI `dentist.commands.validateConfig`)\n        $(LI `dentist.commands.validateRegions`)\n    )\n\n    If DENTIST is compiled with `--config=testing` the following additional\n    commands will be available:\n\n    $(UL\n        $(LI `dentist.commands.buildPartialAssembly`)\n        $(LI `dentist.commands.checkResults`)\n        $(LI `dentist.commands.checkScaffolding`)\n        $(LI `dentist.commands.findClosableGaps`)\n    )\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/processPileUps/cropper.d",
		"members": [
			{
				"line": 90,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 93,
						"kind": "variable",
						"char": 12,
						"name": "refDb",
						"deco": "Aya",
						"protection": "public",
						"offset": 0,
						"comment": "Reference assembly.\n"
					},
					{
						"line": 96,
						"kind": "variable",
						"char": 12,
						"name": "readsDb",
						"deco": "Aya",
						"protection": "public",
						"offset": 16,
						"comment": "Reads database with all reads.\n"
					},
					{
						"line": 104,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "minAnchorLength",
						"deco": "k",
						"protection": "public",
						"offset": 32,
						"comment": "Minimum number of base pairs required for successful alignment of the\ncropped reads.\n\nIn order to ensure the minimum overlap, the algorithm will insert\nsequence from the reference contig to the end(s) of the cropped read\nif the overlap after cropping is too small. (see `fetchSupportPatches`)\n"
					},
					{
						"line": 107,
						"kind": "variable",
						"char": 12,
						"name": "outputDir",
						"deco": "Aya",
						"protection": "public",
						"offset": 40,
						"comment": "Output directory where the DB of cropped reads is placed.\n"
					}
				],
				"name": "CropOptions",
				"protection": "public",
				"comment": "Options for the cropping algorithm.\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "AS7dentist6common10alignments4base13ReadAlignment",
						"name": "pileUp"
					},
					{
						"deco": "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
						"storageClass": [
							"in"
						],
						"name": "repeatMask"
					},
					{
						"deco": "xS7dentist8commands14processPileUps7cropper11CropOptions",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 113,
				"kind": "function",
				"originalType": "(PileUp pileUp, in ReferenceRegion repeatMask, in CropOptions options)",
				"char": 6,
				"name": "cropPileUp",
				"deco": "FAS7dentist6common10alignments4base13ReadAlignmentISQBx4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBnISQEh8commands14processPileUps7cropper11CropOptionsZS3std8typecons__T5TupleTQEcVQEga2_6462TASQHuQFxQFv__TQFrTmTmVQFna8_636f6e7469674964Vmi0ZQHa11TaggedPointVQHfa18_7265666572656e6365506f736974696f6e73TAEQMaQLvQLrQLi21AlignmentLocationSeedVQKja5_7365656473ZQHf",
				"protection": "public",
				"endchar": 1,
				"endline": 119,
				"comment": "Crop the reads in `pileUp` to a common trace point on the reference\ncontig(s) which is not covered by `repeatMask`.\n"
			}
		],
		"comment": "    This package contains methods for cropping a pile up.\n\n    Example:\n\n    ---\n    âââââ = repeat mask\n    âââââ¯ = reference contigs with trace points (top row)\n    âââ¾ââ = aligned reads with removed (thin) and kept (thick) parts\n    â     = cropping positions\n\n\n                 â ââââââââââââââ                ââââââââââââ    â\n    ââââ¯âââââ¯âââââ¯âââââ¯âââââ¯âââââ            ââââââ¯âââââ¯âââââ¯âââââ¯âââââ¯âââ\n       â    â    â    â    â    â            â    â    â    â    â    â\n       â    â    â    â    â    â            â    â    â    â    â    â\n       â ââââ¬âââââ¾âââââ¯âââââ¯âââââ¯âââââââââââââ¯âââââ¯âââââ¯âââââ¯âââââ½âââââ¬â\n     âââ¬âââââ¬âââââ¾âââââ¯âââââ¯âââââ¯âââââââââââââ¯âââââ¯âââââ¯âââââ¯âââââ½ââ  â\n       â   ââ¬âââââ¾âââââ¯âââââ¯âââââ¯âââ         â    â    â    â    â    â\n       â    â    â    â    â    â        âââââ¯âââââ¯âââââ¯âââââ¯âââââ½â   â\n       â    â    â    â    â    â  âââââââââââ¯âââââ¯âââââ¯âââââ¯âââââ¥    â\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.processPileUps.cropper"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/processPileUps/package.d",
		"members": [
			{
				"line": 121,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.processPileUps)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCb",
				"protection": "public",
				"comment": "Options for the `processPileUps` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCb",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 124,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCbZv",
				"protection": "public",
				"endchar": 1,
				"endline": 129,
				"comment": "Execute the `processPileUps` command with `options`.\n"
			},
			{
				"line": 132,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"const"
						],
						"line": 134,
						"kind": "variable",
						"originalType": "Options",
						"char": 29,
						"name": "options",
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCb",
						"protection": "protected",
						"offset": 16
					},
					{
						"line": 135,
						"kind": "variable",
						"originalType": "PileUp[]",
						"char": 24,
						"name": "pileUps",
						"deco": "AAS7dentist6common10alignments4base13ReadAlignment",
						"protection": "protected",
						"offset": 384
					},
					{
						"line": 136,
						"kind": "variable",
						"originalType": "ReferenceRegion",
						"char": 21,
						"name": "repeatMask",
						"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
						"protection": "public",
						"offset": 400
					},
					{
						"line": 137,
						"kind": "variable",
						"originalType": "Insertion[]",
						"char": 17,
						"name": "insertions",
						"deco": "AS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"protection": "public",
						"offset": 416
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCb",
								"storageClass": [
									"in",
									"ref"
								],
								"name": "options"
							}
						],
						"line": 139,
						"kind": "constructor",
						"originalType": "(in ref Options options)",
						"char": 5,
						"name": "this",
						"deco": "FIKS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCbZCQDeQBl14processPileUps16PileUpsProcessor",
						"protection": "public",
						"endchar": 5,
						"endline": 144
					},
					{
						"line": 146,
						"kind": "function",
						"char": 10,
						"name": "run",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 159
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "i"
							},
							{
								"deco": "AS7dentist6common10alignments4base13ReadAlignment",
								"name": "pileUp"
							}
						],
						"line": 161,
						"kind": "function",
						"originalType": "void(size_t i, PileUp pileUp)",
						"char": 20,
						"name": "processPileUp",
						"deco": "FmAS7dentist6common10alignments4base13ReadAlignmentZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 166
					},
					{
						"line": 168,
						"kind": "function",
						"char": 20,
						"name": "readPileUps",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 176
					},
					{
						"line": 178,
						"kind": "function",
						"char": 20,
						"name": "readRepeatMask",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 187
					},
					{
						"line": 189,
						"kind": "function",
						"char": 20,
						"name": "dropEmptyInsertions",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 192
					},
					{
						"line": 194,
						"kind": "function",
						"char": 20,
						"name": "writeInsertions",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 203
					}
				],
				"name": "PileUpsProcessor",
				"protection": "public",
				"comment": "This class comprises the `processPileUps` step of the DENTIST algorithm\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 207,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "Tuple!(size_t, \"index\", T, \"value\")",
						"char": 1,
						"line": 207,
						"name": "Enumerated"
					}
				],
				"name": "Enumerated",
				"protection": "public"
			},
			{
				"line": 214,
				"kind": "class",
				"char": 11,
				"members": [
					{
						"storageClass": [
							"const"
						],
						"line": 216,
						"kind": "variable",
						"originalType": "const(Options)",
						"char": 20,
						"name": "options",
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCb",
						"protection": "public",
						"offset": 16
					},
					{
						"storageClass": [
							"const"
						],
						"line": 217,
						"kind": "variable",
						"originalType": "const(ReferenceRegion)",
						"char": 28,
						"name": "originalRepeatMask",
						"deco": "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
						"protection": "public",
						"offset": 384
					},
					{
						"line": 218,
						"kind": "variable",
						"originalType": "ReferenceRegion",
						"char": 21,
						"name": "repeatMask",
						"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
						"protection": "public",
						"offset": 400
					},
					{
						"storageClass": [
							"const"
						],
						"line": 220,
						"kind": "variable",
						"originalType": "id_t[]",
						"char": 28,
						"name": "pileUpIdMapping",
						"deco": "xAk",
						"protection": "protected",
						"offset": 416
					},
					{
						"line": 221,
						"kind": "variable",
						"originalType": "id_t",
						"char": 20,
						"name": "pileUpId",
						"deco": "k",
						"protection": "protected",
						"offset": 432
					},
					{
						"line": 222,
						"kind": "variable",
						"originalType": "PileUp",
						"char": 22,
						"name": "pileUp",
						"deco": "AS7dentist6common10alignments4base13ReadAlignment",
						"protection": "protected",
						"offset": 440
					},
					{
						"line": 223,
						"kind": "variable",
						"originalType": "Insertion*",
						"char": 26,
						"name": "resultInsertion",
						"deco": "PS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"protection": "protected",
						"offset": 456
					},
					{
						"line": 224,
						"kind": "variable",
						"char": 22,
						"name": "croppedDb",
						"deco": "Aya",
						"protection": "protected",
						"offset": 464
					},
					{
						"line": 225,
						"kind": "variable",
						"char": 24,
						"name": "pileUpContigs",
						"deco": "AS7dentist6common10alignments4base6Contig",
						"protection": "protected",
						"offset": 480
					},
					{
						"line": 226,
						"kind": "variable",
						"originalType": "ReferencePoint[]",
						"char": 32,
						"name": "croppingPositions",
						"deco": "AS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPoint",
						"protection": "protected",
						"offset": 496
					},
					{
						"line": 227,
						"kind": "variable",
						"char": 39,
						"name": "croppingSeeds",
						"deco": "AE7dentist6common10alignments4base21AlignmentLocationSeed",
						"protection": "protected",
						"offset": 512
					},
					{
						"line": 228,
						"kind": "variable",
						"char": 22,
						"name": "pileUpAlignment",
						"deco": "Aya",
						"protection": "protected",
						"offset": 528
					},
					{
						"line": 229,
						"kind": "variable",
						"originalType": "HashSet!id_t",
						"char": 28,
						"name": "allowedReferenceReadIds",
						"deco": "S7dentist4util10containers__T7HashSetTkZQl",
						"protection": "protected",
						"offset": 544
					},
					{
						"line": 230,
						"kind": "variable",
						"originalType": "id_t[]",
						"char": 22,
						"name": "referenceReadCandidateIndices",
						"deco": "Ak",
						"protection": "protected",
						"offset": 552
					},
					{
						"line": 231,
						"kind": "variable",
						"originalType": "size_t",
						"char": 22,
						"name": "referenceReadIdx",
						"deco": "m",
						"protection": "protected",
						"offset": 568
					},
					{
						"line": 232,
						"kind": "variable",
						"originalType": "id_t",
						"char": 20,
						"name": "referenceReadTry",
						"deco": "k",
						"protection": "protected",
						"offset": 576
					},
					{
						"line": 233,
						"kind": "variable",
						"char": 22,
						"name": "consensusDb",
						"deco": "Aya",
						"protection": "protected",
						"offset": 584
					},
					{
						"line": 234,
						"kind": "variable",
						"char": 32,
						"name": "postConsensusAlignment",
						"deco": "AS7dentist6common10alignments4base14AlignmentChain",
						"protection": "protected",
						"offset": 600
					},
					{
						"line": 235,
						"kind": "variable",
						"char": 29,
						"name": "insertionAlignment",
						"deco": "S7dentist6common10alignments4base13ReadAlignment",
						"protection": "protected",
						"offset": 616
					},
					{
						"line": 236,
						"kind": "variable",
						"char": 34,
						"name": "insertionSequence",
						"deco": "S7dentist6common5binioQn18CompressedSequence",
						"protection": "protected",
						"offset": 752
					},
					{
						"line": 237,
						"kind": "variable",
						"originalType": "Insertion",
						"char": 25,
						"name": "insertion",
						"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"protection": "protected",
						"offset": 784
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCb",
								"storageClass": [
									"in"
								],
								"name": "options"
							},
							{
								"deco": "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
								"storageClass": [
									"in"
								],
								"name": "repeatMask"
							}
						],
						"line": 239,
						"kind": "constructor",
						"originalType": "(in Options options, in ReferenceRegion repeatMask)",
						"char": 5,
						"name": "this",
						"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCbISQDe4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBnZCQFoQDv14processPileUps15PileUpProcessor",
						"protection": "public",
						"endchar": 5,
						"endline": 248
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "pileUpIdx"
							},
							{
								"deco": "AS7dentist6common10alignments4base13ReadAlignment",
								"name": "pileUp"
							},
							{
								"deco": "PS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
								"name": "resultInsertion"
							}
						],
						"line": 250,
						"kind": "function",
						"originalType": "void(size_t pileUpIdx, PileUp pileUp, Insertion* resultInsertion)",
						"char": 10,
						"name": "run",
						"deco": "FmAS7dentist6common10alignments4base13ReadAlignmentPSQBx4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQEsQEn8scaffold10ContigPartVQCaa10_636f6e74696750617274ZQDlTvVEQEiQEh__T4FlagVQDya10_69734469726563746564ZQBii0TSQJbQIw10insertions13InsertionInfoZQHw4EdgeZv",
						"protection": "public",
						"endchar": 5,
						"endline": 281
					},
					{
						"line": 283,
						"kind": "function",
						"char": 20,
						"name": "processPileUp",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 374
					},
					{
						"line": 376,
						"kind": "function",
						"char": 20,
						"name": "shouldProcessSingularPileUp",
						"deco": "xFNbZb",
						"protection": "protected",
						"endchar": 5,
						"endline": 379
					},
					{
						"line": 381,
						"kind": "function",
						"char": 20,
						"name": "shouldSkipSmallPileUp",
						"deco": "xFNbZb",
						"protection": "protected",
						"endchar": 5,
						"endline": 397
					},
					{
						"line": 399,
						"kind": "function",
						"char": 20,
						"name": "reduceRepeatMaskToFlankingContigs",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 407
					},
					{
						"line": 409,
						"kind": "function",
						"char": 20,
						"name": "crop",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 424
					},
					{
						"line": 426,
						"kind": "function",
						"char": 20,
						"name": "adjustRepeatMaskToMakeMappingPossible",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 459
					},
					{
						"line": 461,
						"kind": "function",
						"char": 20,
						"name": "selectAllowedReferenceReadIds",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 472
					},
					{
						"line": 474,
						"kind": "function",
						"char": 20,
						"name": "computeQVs",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 516
					},
					{
						"line": 518,
						"kind": "function",
						"char": 20,
						"name": "findReferenceReadCandidates",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 568
					},
					{
						"parameters": [
							{
								"deco": "xk",
								"storageClass": [
									"in"
								],
								"name": "referenceReadTry"
							}
						],
						"line": 570,
						"kind": "function",
						"originalType": "bool(in id_t referenceReadTry)",
						"char": 20,
						"name": "selectReferenceRead",
						"deco": "FIkZb",
						"protection": "protected",
						"endchar": 5,
						"endline": 585
					},
					{
						"line": 587,
						"kind": "function",
						"char": 46,
						"name": "referenceRead",
						"deco": "NgFNdZNgS7dentist6common10alignments4base13ReadAlignment",
						"protection": "protected",
						"endchar": 5,
						"endline": 590
					},
					{
						"parameters": [
							{
								"deco": "xk",
								"storageClass": [
									"in"
								],
								"name": "skip"
							}
						],
						"line": 592,
						"kind": "function",
						"originalType": "const pure size_t(in id_t skip)",
						"char": 22,
						"name": "bestReferenceReadIndex",
						"deco": "xFNaIkZm",
						"protection": "protected",
						"endchar": 5,
						"endline": 598
					},
					{
						"line": 600,
						"kind": "function",
						"char": 20,
						"name": "computeConsensus",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 619
					},
					{
						"line": 621,
						"kind": "function",
						"char": 20,
						"name": "alignConsensusToFlankingContigs",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 697
					},
					{
						"line": 699,
						"kind": "function",
						"char": 20,
						"name": "getInsertionAlignment",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 769
					},
					{
						"line": 771,
						"kind": "function",
						"char": 20,
						"name": "getInsertionSequence",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 787
					},
					{
						"line": 789,
						"kind": "function",
						"originalType": "Insertion()",
						"char": 25,
						"name": "makeInsertion",
						"deco": "FZS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"protection": "protected",
						"endchar": 5,
						"endline": 805
					}
				],
				"name": "PileUpProcessor",
				"protection": "protected",
				"comment": "This class processes a single pileup.\n"
			}
		],
		"comment": "    This is the `processPileUps` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Filter and process pile ups into insertions for gap closing.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.processPileUps"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/propagateMask.d",
		"members": [
			{
				"line": 76,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.propagateMask)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi5ZQCa",
				"protection": "public",
				"comment": "Options for the `propagateMask` command.\n"
			},
			{
				"line": 80,
				"kind": "alias",
				"originalType": "ReferenceInterval",
				"char": 1,
				"name": "QueryInterval",
				"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
				"protection": "public",
				"comment": "Alias for readbility.\n"
			},
			{
				"line": 82,
				"kind": "alias",
				"originalType": "ReferenceRegion",
				"char": 1,
				"name": "QueryRegion",
				"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi5ZQCa",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 86,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi5ZQCaZv",
				"protection": "public",
				"endchar": 1,
				"endline": 89,
				"comment": "Execute the `propagateMask` command with `options`.\n"
			},
			{
				"line": 92,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"const"
						],
						"line": 95,
						"kind": "variable",
						"originalType": "Options",
						"char": 19,
						"name": "options",
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi5ZQCa",
						"protection": "public",
						"offset": 16
					},
					{
						"line": 96,
						"kind": "variable",
						"char": 12,
						"name": "destinationDb",
						"deco": "Aya",
						"protection": "public",
						"offset": 168
					},
					{
						"line": 97,
						"kind": "variable",
						"originalType": "id_t",
						"char": 10,
						"name": "numSourceContigs",
						"deco": "k",
						"protection": "public",
						"offset": 184
					},
					{
						"line": 98,
						"kind": "variable",
						"originalType": "ReferenceRegion",
						"char": 21,
						"name": "inputMask",
						"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
						"protection": "public",
						"offset": 192
					},
					{
						"line": 99,
						"kind": "variable",
						"originalType": "QueryInterval[][]",
						"char": 23,
						"name": "outputMaskByContigs",
						"deco": "AAS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
						"protection": "public",
						"offset": 208
					},
					{
						"line": 100,
						"kind": "variable",
						"originalType": "QueryRegion",
						"char": 17,
						"name": "outputMask",
						"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
						"protection": "public",
						"offset": 224
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi5ZQCa",
								"name": "options"
							}
						],
						"line": 103,
						"kind": "constructor",
						"originalType": "(const Options options)",
						"char": 5,
						"name": "this",
						"deco": "FxS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi5ZQCaZCQDdQBk13propagateMask14MaskPropagator",
						"protection": "public",
						"endchar": 5,
						"endline": 109
					},
					{
						"line": 112,
						"kind": "function",
						"char": 10,
						"name": "run",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 125
					},
					{
						"line": 128,
						"kind": "function",
						"char": 10,
						"name": "init",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 133
					},
					{
						"line": 136,
						"kind": "function",
						"char": 10,
						"name": "readMasks",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 142
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 145,
						"kind": "function",
						"originalType": "()",
						"char": 10,
						"name": "getLocalAlignmentsByContig",
						"deco": "FZS7dentist4util9algorithm__T11SliceByImplSQBo8commands13propagateMask14MaskPropagator26getLocalAlignmentsByContigMFZ9__lambda2TASQEx6common10alignments4base18FlatLocalAlignmentZQFt",
						"protection": "public",
						"endchar": 5,
						"endline": 155
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "AxS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
								"name": "inputMask"
							},
							{
								"deco": "AS7dentist6common10alignments4base18FlatLocalAlignment",
								"name": "localAlignments"
							}
						],
						"line": 158,
						"kind": "function",
						"originalType": "QueryInterval[](const(ReferenceInterval)[] inputMask, FlatLocalAlignment[] localAlignments)",
						"char": 28,
						"name": "propagateMaskPerContig",
						"deco": "FAxS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalASQDf6common10alignments4base18FlatLocalAlignmentZASQFdQEyQEw__TQEsTmTmVQEoa8_636f6e7469674964Vmi0ZQGbQEo",
						"protection": "public",
						"endchar": 5,
						"endline": 212
					},
					{
						"storageClass": [
							"auto",
							"static"
						],
						"parameters": [
							{
								"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
								"name": "currentLA"
							},
							{
								"deco": "AxS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
								"name": "maskIntervals"
							}
						],
						"line": 217,
						"kind": "function",
						"originalType": "(const FlatLocalAlignment currentLA, const(ReferenceInterval)[] maskIntervals)",
						"char": 17,
						"name": "getIntersectionIntervals",
						"deco": "FxS7dentist6common10alignments4base18FlatLocalAlignmentAxSQCd4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalZS3std9algorithm9iteration__T9MapResultSQGp8commands13propagateMask14MaskPropagator24getIntersectionIntervalsFxQJjQHlZ9__lambda5TSQEy5range__T9enumerateTmTQJaZQrFQJhmZ6ResultZQFq",
						"protection": "public",
						"endchar": 5,
						"endline": 247,
						"comment": "Identify maskIntervals intersecting currentLA and return a range with\nfirst and last interval cropped to the extent of currentLA.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
								"name": "currentLA"
							},
							{
								"deco": "AxS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
								"name": "maskIntervals"
							}
						],
						"line": 251,
						"kind": "function",
						"originalType": "const(ReferenceInterval)[](const FlatLocalAlignment currentLA, const(ReferenceInterval)[] maskIntervals)",
						"char": 39,
						"name": "getIntersectingIntervals",
						"deco": "FxS7dentist6common10alignments4base18FlatLocalAlignmentAxSQCd4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalZQDc",
						"protection": "public",
						"endchar": 5,
						"endline": 266,
						"comment": "Identify all mask intervals intersecting currentLA.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"line": 271,
						"kind": "template",
						"char": 28,
						"members": [
							{
								"parameters": [
									{
										"type": "FlatLocalAlignment",
										"storageClass": [
											"const"
										],
										"name": "currentLA"
									},
									{
										"type": "R",
										"name": "intersectionIntervals"
									}
								],
								"line": 271,
								"kind": "function",
								"char": 28,
								"name": "propagateIntervals",
								"type": "QueryInterval[](const FlatLocalAlignment currentLA, R intersectionIntervals)",
								"endchar": 5,
								"endline": 303
							}
						],
						"name": "propagateIntervals",
						"protection": "public",
						"comment": "Propagate intersectionIntervals by means of currentLA and return the\nresulting query intervals.\n"
					},
					{
						"line": 305,
						"kind": "function",
						"char": 10,
						"name": "mergeMasks",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 311
					}
				],
				"name": "MaskPropagator",
				"protection": "public"
			}
		],
		"comment": "    This is the `propagateMask` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Propagate masked regions through the provided alignment. That means the\n    mask is first transferred to the B-contigs/reads according to the given\n    alignments.\n\n    The default workflow is to first propagate from the reference assembly to\n    the reads and then back again to the reference. Propagating, once again,\n    to the reads will produce a complete repeat mask on the reads.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.propagateMask"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/showInsertions.d",
		"members": [
			{
				"line": 40,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.showInsertions)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi14ZQCb",
				"protection": "public",
				"comment": "Options for the `showInsertions` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi14ZQCb",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 44,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi14ZQCbZv",
				"protection": "public",
				"endchar": 1,
				"endline": 82,
				"comment": "Execute the `showInsertions` command with `options`.\n"
			},
			{
				"line": 84,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 86,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "totalDbSize",
						"deco": "m",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 87,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numInsertions",
						"deco": "m",
						"protection": "public",
						"offset": 8
					},
					{
						"line": 88,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numCompressedBaseQuads",
						"deco": "m",
						"protection": "public",
						"offset": 16
					},
					{
						"line": 89,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numOverlaps",
						"deco": "m",
						"protection": "public",
						"offset": 24
					},
					{
						"line": 90,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numLocalAlignments",
						"deco": "m",
						"protection": "public",
						"offset": 32
					},
					{
						"line": 91,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numTracePoints",
						"deco": "m",
						"protection": "public",
						"offset": 40
					},
					{
						"line": 92,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numReadIds",
						"deco": "m",
						"protection": "public",
						"offset": 48
					},
					{
						"line": 94,
						"kind": "function",
						"originalType": "const nothrow size_t()",
						"char": 12,
						"name": "columnWidth",
						"deco": "xFNbZm",
						"protection": "public",
						"endchar": 5,
						"endline": 109
					}
				],
				"name": "Stats",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"deco": "S7dentist8commands14showInsertions5Stats",
						"name": "stats"
					}
				],
				"line": 112,
				"kind": "function",
				"char": 6,
				"name": "writeTabular",
				"deco": "FS7dentist8commands14showInsertions5StatsZv",
				"protection": "public",
				"endchar": 1,
				"endline": 123
			}
		],
		"comment": "    This is the `showInsertions` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Show a short summary of the insertions. Can also be used to convert\n    insertions to JSON by increasing verbosity two times.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.showInsertions"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/showMask.d",
		"members": [
			{
				"line": 44,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.showMask)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi8ZQCa",
				"protection": "public",
				"comment": "Options for the `showMask` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi8ZQCa",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 48,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi8ZQCaZv",
				"protection": "public",
				"endchar": 1,
				"endline": 80,
				"comment": "Execute the `showMask` command with `options`.\n"
			},
			{
				"line": 82,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 84,
						"kind": "variable",
						"char": 12,
						"name": "name",
						"deco": "Aya",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 85,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numIntervals",
						"deco": "m",
						"protection": "public",
						"offset": 16
					},
					{
						"line": 86,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numMaskedBases",
						"deco": "m",
						"protection": "public",
						"offset": 24
					},
					{
						"line": 88,
						"kind": "function",
						"originalType": "const nothrow size_t()",
						"char": 12,
						"name": "columnWidth",
						"deco": "xFNbZm",
						"protection": "public",
						"endchar": 5,
						"endline": 99
					}
				],
				"name": "Stats",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"name": "name"
					},
					{
						"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
						"name": "maskRegion"
					}
				],
				"line": 102,
				"kind": "function",
				"originalType": "Stats(string name, ReferenceRegion maskRegion)",
				"char": 7,
				"name": "statsFor",
				"deco": "FAyaS7dentist4util6region__T6RegionTmTmVQBna8_636f6e7469674964Vmi0ZQBnZSQCp8commands8showMask5Stats",
				"protection": "public",
				"endchar": 1,
				"endline": 109
			},
			{
				"parameters": [
					{
						"deco": "AS7dentist8commands8showMask5Stats",
						"name": "statsList"
					}
				],
				"line": 111,
				"kind": "function",
				"char": 6,
				"name": "writeTabular",
				"deco": "FAS7dentist8commands8showMask5StatsZv",
				"protection": "public",
				"endchar": 1,
				"endline": 124
			}
		],
		"comment": "    This is the `showMask` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Show a short summary of a mask. Can also be used to convert a mask to JSON\n    by increasing verbosity two times.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.showMask"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/showPileUps.d",
		"members": [
			{
				"line": 42,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.showPileUps)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi12ZQCb",
				"protection": "public",
				"comment": "Options for the `showPileUps` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi12ZQCb",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 46,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi12ZQCbZv",
				"protection": "public",
				"endchar": 1,
				"endline": 77,
				"comment": "Execute the `showPileUps` command with `options`.\n"
			},
			{
				"line": 79,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 81,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "totalDbSize",
						"deco": "m",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 82,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numPileUps",
						"deco": "m",
						"protection": "public",
						"offset": 8
					},
					{
						"line": 83,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numReadAlignments",
						"deco": "m",
						"protection": "public",
						"offset": 16
					},
					{
						"line": 84,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numSeededAlignments",
						"deco": "m",
						"protection": "public",
						"offset": 24
					},
					{
						"line": 85,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numLocalAlignments",
						"deco": "m",
						"protection": "public",
						"offset": 32
					},
					{
						"line": 86,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numTracePoints",
						"deco": "m",
						"protection": "public",
						"offset": 40
					},
					{
						"line": 88,
						"kind": "function",
						"originalType": "const nothrow size_t()",
						"char": 12,
						"name": "columnWidth",
						"deco": "xFNbZm",
						"protection": "public",
						"endchar": 5,
						"endline": 102
					}
				],
				"name": "Stats",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"deco": "S7dentist8commands11showPileUps5Stats",
						"name": "stats"
					}
				],
				"line": 105,
				"kind": "function",
				"char": 6,
				"name": "writeTabular",
				"deco": "FS7dentist8commands11showPileUps5StatsZv",
				"protection": "public",
				"endchar": 1,
				"endline": 115
			}
		],
		"comment": "    This is the `showPileUps` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Show a short summary of the pile ups. Can also be used to convert pile Ïps\n    to JSON by increasing verbosity two times.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.showPileUps"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/translateCoords.d",
		"members": [
			{
				"line": 72,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.translateCoords)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi17ZQCb",
				"protection": "public",
				"comment": "Options for the `translate-coords` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi17ZQCb",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 76,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi17ZQCbZv",
				"protection": "public",
				"endchar": 1,
				"endline": 81,
				"comment": "Execute the `translate-coords` command with `options`.\n"
			}
		],
		"comment": "    This is the `translate-coords` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Translate coordinates of result assembly to coordinates of\n    input assembly. This can be used to lift annotations from the input\n    assembly to the resulting assembly.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.translateCoords"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/validateConfig.d",
		"members": [
			{
				"line": 33,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.validateConfig)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi0ZQCa",
				"protection": "public",
				"comment": "Options for the `validateConfig` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi0ZQCa",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 37,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi0ZQCaZv",
				"protection": "public",
				"endchar": 1,
				"endline": 41,
				"comment": "Execute the `validateConfig` command with `options`.\n"
			}
		],
		"comment": "    This is the `validateConfig` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Validate config file. Exit with non-zero status and a descriptive error\n    message if errors are found.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.validateConfig"
	},
	{
		"kind": "module",
		"file": "source/dentist/commands/validateRegions.d",
		"members": [
			{
				"line": 97,
				"kind": "alias",
				"originalType": "OptionsFor!(DentistCommand.validateRegions)",
				"char": 1,
				"name": "Options",
				"deco": "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi18ZQCb",
				"protection": "public",
				"comment": "Options for the `validate-regions` command.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi18ZQCb",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 101,
				"kind": "function",
				"originalType": "void(in Options options)",
				"char": 6,
				"name": "execute",
				"deco": "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi18ZQCbZv",
				"protection": "public",
				"endchar": 1,
				"endline": 106,
				"comment": "Execute the `validate-regions` command with `options`.\n"
			}
		],
		"comment": "    This is the `validate-regions` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Validates that given regions look proper, in particular, this may be used\n    to validate closed gaps. Any given region is valid if the following\n    criteria apply to the region extended by --region-context on both sides:\n\n    a) Every sliding window of size --weak-coverage-window must be spanned\n       by at least --min-coverage-reads local alignments. This is a stricter\n       definition of alignment coverage that circumvents issues with\n       interleaved improper alignments.\n    b) The region without context must be spanned by at least\n       --min-spanning-reads properly aligned reads.\n    ---\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.commands.validateRegions"
	},
	{
		"kind": "module",
		"file": "source/dentist/common/alignments/base.d",
		"members": [
			{
				"line": 82,
				"kind": "alias",
				"char": 1,
				"name": "arithmetic_t",
				"deco": "i",
				"protection": "public",
				"comment": "Type aliases used throughout DENTIST to make definitions more meaningful.\n"
			},
			{
				"line": 84,
				"kind": "alias",
				"char": 1,
				"name": "coord_t",
				"deco": "k",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"line": 86,
				"kind": "alias",
				"char": 1,
				"name": "diff_t",
				"deco": "k",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"line": 88,
				"kind": "alias",
				"char": 1,
				"name": "id_t",
				"deco": "k",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"line": 90,
				"kind": "alias",
				"char": 1,
				"name": "trace_point_t",
				"deco": "t",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"line": 94,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 97,
						"kind": "variable",
						"originalType": "id_t",
						"char": 10,
						"name": "id",
						"deco": "k",
						"protection": "public",
						"offset": 0,
						"comment": "One-based contig ID. Zero is used as a special `undefined` value.\n"
					},
					{
						"line": 99,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "length",
						"deco": "k",
						"protection": "public",
						"offset": 4,
						"comment": "Optional. Length of the contig.\n"
					}
				],
				"name": "Contig",
				"protection": "public",
				"comment": "Holds information about a contig.\n"
			},
			{
				"line": 104,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 107,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "begin",
						"deco": "k",
						"protection": "public",
						"offset": 0,
						"comment": "Zero-based begin coordinate (inclusive).\n"
					},
					{
						"line": 109,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "end",
						"deco": "k",
						"protection": "public",
						"offset": 4,
						"comment": "Zero-based end coordinate (exclusive).\n"
					},
					{
						"line": 113,
						"kind": "function",
						"originalType": "const pure nothrow @property coord_t()",
						"char": 23,
						"name": "length",
						"deco": "xFNaNbNdZk",
						"protection": "public",
						"endchar": 5,
						"endline": 116,
						"comment": "Computed length of the locus.\n"
					}
				],
				"name": "Locus",
				"protection": "public",
				"comment": "Right-open locus, i.e. interval, on a contig.\n"
			},
			{
				"line": 121,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 124,
						"kind": "enum member",
						"char": 5,
						"name": "complement",
						"protection": "public",
						"value": "cast(ubyte)1u",
						"comment": "Alignment is relative the the reverse-complement of contig B.\n"
					},
					{
						"line": 126,
						"kind": "enum member",
						"char": 5,
						"name": "disabled",
						"protection": "public",
						"value": "cast(ubyte)2u",
						"comment": "Alignment should be ignored.\n"
					},
					{
						"line": 128,
						"kind": "enum member",
						"char": 5,
						"name": "alternateChain",
						"protection": "public",
						"value": "cast(ubyte)4u",
						"comment": "Alignment is the start of an alternate chain.\n"
					},
					{
						"line": 130,
						"kind": "enum member",
						"char": 5,
						"name": "chainContinuation",
						"protection": "public",
						"value": "cast(ubyte)8u",
						"comment": "Alignment continuation of a chain of alignments.\n"
					},
					{
						"line": 132,
						"kind": "enum member",
						"char": 5,
						"name": "unchained",
						"protection": "public",
						"value": "cast(ubyte)16u",
						"comment": "Alignment is explicitly unchained.\n"
					}
				],
				"name": "Flag",
				"protection": "public",
				"baseDeco": "h",
				"comment": "Alignment flag.\n"
			},
			{
				"line": 140,
				"kind": "alias",
				"originalType": "BitFlags!Flag",
				"char": 1,
				"name": "Flags",
				"deco": "S3std8typecons__T8BitFlagsTE7dentist6common10alignments4base4FlagVEQCoQCn__TQqVAyaa6_756e73616665ZQBmi0ZQDj",
				"protection": "public",
				"comment": "Bit field of `Flag`. Flags are accessible as properties, e.g.\n`flags.disabled`.\n\nSee_also: `std.typecons.BitFlags`\n"
			},
			{
				"line": 148,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 150,
						"kind": "variable",
						"originalType": "trace_point_t",
						"char": 19,
						"name": "numDiffs",
						"deco": "t",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 151,
						"kind": "variable",
						"originalType": "trace_point_t",
						"char": 19,
						"name": "numBasePairs",
						"deco": "t",
						"protection": "public",
						"offset": 2
					}
				],
				"name": "TracePoint",
				"protection": "public",
				"comment": "A single trace point. Alignments are encoded using a list of equally\nspaced (on contig A) trace points (`tracePointSpacing`) by providing the\nnumber of base pairs consumed on contig B and additionally the number of\ndiffs. This allows efficient reconstruction using local Needleman-Wunsch\nalgorithm.\n"
			},
			{
				"line": 162,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 164,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "contigA",
						"deco": "k",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 165,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "contigB",
						"deco": "k",
						"protection": "public",
						"offset": 4
					}
				],
				"name": "TranslatedTracePoint",
				"protection": "public",
				"comment": "Pair of coordinates on contig A/B that map exactly to one another\naccording to an alignment.\n\nSee_also: `Trace.translateTracePoint`,\n`AlignmentChain.LocalAlignment.getTrace`,\n`AlignmentChain.LocalAlignment.translateTracePoint`,\n`FlatLocalAlignment.trace`\n"
			},
			{
				"line": 169,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 171,
						"kind": "variable",
						"char": 11,
						"name": "contigA",
						"deco": "S7dentist6common10alignments4base5Locus",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 172,
						"kind": "variable",
						"char": 11,
						"name": "contigB",
						"deco": "S7dentist6common10alignments4base5Locus",
						"protection": "public",
						"offset": 8
					},
					{
						"line": 173,
						"kind": "variable",
						"originalType": "trace_point_t",
						"char": 19,
						"name": "tracePointDistance",
						"deco": "t",
						"protection": "public",
						"offset": 16
					},
					{
						"line": 174,
						"kind": "variable",
						"char": 25,
						"name": "tracePoints",
						"deco": "AxS7dentist6common10alignments4base10TracePoint",
						"protection": "public",
						"offset": 24
					},
					{
						"constraint": "contig.among(\"contigA\", \"contigB\")",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "contig"
							}
						],
						"line": 185,
						"kind": "template",
						"char": 26,
						"members": [
							{
								"parameters": [
									{
										"type": "coord_t",
										"name": "contigPos"
									},
									{
										"type": "RoundingMode",
										"name": "roundingMode"
									}
								],
								"line": 185,
								"kind": "function",
								"char": 26,
								"name": "translateTracePoint",
								"type": "const pure TranslatedTracePoint(coord_t contigPos, RoundingMode roundingMode)",
								"endchar": 5,
								"endline": 203
							}
						],
						"name": "translateTracePoint",
						"protection": "public",
						"comment": "Translate `contigPos` on `contig` to a position on the other contig\nusing `tracePoints` without exact alignment reconstruction.\n\n`contigPos` is assigned to one of the coordinates in the trace using\n`roundingMode` and the returned structure contains this adjusted\nposition.\n\nReturns: `TranslatedTracePoint` with the computed positions.\n"
					},
					{
						"constraint": "contig == \"contigA\"",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "contig"
							}
						],
						"line": 210,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "coord_t",
										"name": "contigAPos"
									},
									{
										"type": "RoundingMode",
										"name": "roundingMode"
									}
								],
								"line": 210,
								"kind": "function",
								"char": 10,
								"name": "tracePointsUpTo",
								"type": "const pure nothrow (coord_t contigAPos, RoundingMode roundingMode)",
								"endchar": 5,
								"endline": 242
							}
						],
						"name": "tracePointsUpTo",
						"protection": "public",
						"comment": "Return the number of trace points up to and including `contigAPos`/\n`contigBPos` using `roundingMode`.\n\nNote: `RoundingMode.round` is not implemented.\n"
					},
					{
						"constraint": "contig == \"contigB\"",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "contig"
							}
						],
						"line": 267,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "coord_t",
										"name": "contigBPos"
									},
									{
										"type": "RoundingMode",
										"name": "roundingMode"
									}
								],
								"line": 267,
								"kind": "function",
								"char": 10,
								"name": "tracePointsUpTo",
								"type": "const pure nothrow (coord_t contigBPos, RoundingMode roundingMode)",
								"endchar": 5,
								"endline": 298
							}
						],
						"name": "tracePointsUpTo",
						"protection": "public",
						"comment": "ditto\n"
					}
				],
				"name": "Trace",
				"protection": "public"
			},
			{
				"line": 306,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 308,
						"kind": "struct",
						"char": 12,
						"members": [
							{
								"line": 310,
								"kind": "alias",
								"originalType": ".Locus",
								"char": 9,
								"name": "Locus",
								"deco": "S7dentist6common10alignments4base5Locus",
								"protection": "public"
							},
							{
								"line": 311,
								"kind": "alias",
								"originalType": ".TracePoint",
								"char": 9,
								"name": "TracePoint",
								"deco": "S7dentist6common10alignments4base10TracePoint",
								"protection": "public"
							},
							{
								"line": 313,
								"kind": "variable",
								"char": 15,
								"name": "contigA",
								"deco": "S7dentist6common10alignments4base5Locus",
								"protection": "public",
								"offset": 0
							},
							{
								"line": 314,
								"kind": "variable",
								"char": 15,
								"name": "contigB",
								"deco": "S7dentist6common10alignments4base5Locus",
								"protection": "public",
								"offset": 8
							},
							{
								"line": 315,
								"kind": "variable",
								"originalType": "diff_t",
								"char": 16,
								"name": "numDiffs",
								"deco": "k",
								"protection": "public",
								"offset": 16
							},
							{
								"line": 316,
								"kind": "variable",
								"char": 22,
								"name": "tracePoints",
								"deco": "AS7dentist6common10alignments4base10TracePoint",
								"protection": "public",
								"offset": 24
							},
							{
								"parameters": [
									{
										"deco": "t",
										"name": "tracePointDistance"
									}
								],
								"line": 323,
								"kind": "function",
								"originalType": "const pure nothrow @safe Trace(trace_point_t tracePointDistance)",
								"char": 15,
								"name": "getTrace",
								"deco": "xFNaNbNftZS7dentist6common10alignments4base5Trace",
								"protection": "public",
								"endchar": 9,
								"endline": 331,
								"comment": "Return trace object. Holds a `const` reference to `tracePoints`.\n\nParams:\ntracePointDistance = spacing on contig A between trace points.\n"
							},
							{
								"constraint": "contig.among(\"contigA\", \"contigB\")",
								"parameters": [
									{
										"kind": "value",
										"deco": "Aya",
										"defaultValue": "\"contigA\"",
										"name": "contig"
									}
								],
								"line": 343,
								"kind": "template",
								"char": 30,
								"members": [
									{
										"parameters": [
											{
												"type": "coord_t",
												"name": "contigPos"
											},
											{
												"type": "trace_point_t",
												"name": "tracePointDistance"
											},
											{
												"type": "RoundingMode",
												"name": "roundingMode"
											}
										],
										"line": 343,
										"kind": "function",
										"char": 30,
										"name": "translateTracePoint",
										"type": "const pure TranslatedTracePoint(coord_t contigPos, trace_point_t tracePointDistance, RoundingMode roundingMode)",
										"endchar": 9,
										"endline": 350
									}
								],
								"name": "translateTracePoint",
								"protection": "public",
								"comment": "Translate `contigPos` on `contig` to a position on the other contig\nusing `tracePoints` without exact alignment reconstruction.\n\nParams:\ncontig             = Either `\"contigA\"` or `\"contigB\"`.\ncontigPos          = Input coordinate on `contig`.\ntracePointDistance = spacing on contig A between trace points.\nroundingMode       = see `dentist.util.math.RoundingMode`.\nSee_also: `Trace.translateTracePoint`\n"
							},
							{
								"constraint": "contig.among(\"contigA\", \"contigB\")",
								"parameters": [
									{
										"kind": "value",
										"deco": "Aya",
										"defaultValue": "\"contigA\"",
										"name": "contig"
									}
								],
								"line": 363,
								"kind": "template",
								"char": 14,
								"members": [
									{
										"parameters": [
											{
												"type": "AlignmentLocationSeed",
												"storageClass": [
													"in"
												],
												"name": "startingSeed"
											},
											{
												"type": "coord_t",
												"storageClass": [
													"in"
												],
												"name": "contigPos"
											},
											{
												"type": "trace_point_t",
												"storageClass": [
													"in"
												],
												"name": "tracePointDistance"
											},
											{
												"type": "RoundingMode",
												"storageClass": [
													"in"
												],
												"name": "roundingMode"
											}
										],
										"line": 363,
										"kind": "function",
										"char": 14,
										"name": "cropToTracePoint",
										"type": "pure void(in AlignmentLocationSeed startingSeed, in coord_t contigPos, in trace_point_t tracePointDistance, in RoundingMode roundingMode)",
										"endchar": 9,
										"endline": 392
									}
								],
								"name": "cropToTracePoint",
								"protection": "public",
								"comment": "Crops this local alignment from `startingSeed` (begin or end of\nalignment) to `contigPos`.\n\nParams:\ncontig             = Either `\"contigA\"` or `\"contigB\"`.\nstartingSeed       = Begin (`AlignmentLocationSeed.front`) or\nend (`AlignmentLocationSeed.back`) of alignment.\ncontigPos          = Input coordinate on `contig`.\ntracePointDistance = spacing on contig A between trace points.\nroundingMode       = see `dentist.util.math.RoundingMode`.\n"
							},
							{
								"constraint": "contig.among(\"contigA\", \"contigB\")",
								"parameters": [
									{
										"kind": "value",
										"deco": "Aya",
										"name": "contig"
									}
								],
								"line": 403,
								"kind": "template",
								"char": 14,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "coord_t",
												"name": "contigPos"
											},
											{
												"type": "trace_point_t",
												"name": "tracePointDistance"
											},
											{
												"type": "RoundingMode",
												"name": "roundingMode"
											}
										],
										"line": 403,
										"kind": "function",
										"char": 14,
										"name": "tracePointsUpTo",
										"type": "const pure nothrow (coord_t contigPos, trace_point_t tracePointDistance, RoundingMode roundingMode)",
										"endchar": 9,
										"endline": 413
									}
								],
								"name": "tracePointsUpTo",
								"protection": "public",
								"comment": "Return the number of trace points up to and including `contigPos`\nusing `roundingMode`.\n\nParams:\ncontig             = Either `\"contigA\"` or `\"contigB\"`.\ncontigPos          = Input coordinate on `contig`.\ntracePointDistance = spacing on contig A between trace points.\nroundingMode       = see `dentist.util.math.RoundingMode`.\nSee_also: `Trace.tracePointsUpTo`\n"
							}
						],
						"name": "LocalAlignment",
						"protection": "public"
					},
					{
						"line": 416,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "id",
						"deco": "m",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 417,
						"kind": "variable",
						"char": 12,
						"name": "contigA",
						"deco": "S7dentist6common10alignments4base6Contig",
						"protection": "public",
						"offset": 8
					},
					{
						"line": 418,
						"kind": "variable",
						"char": 12,
						"name": "contigB",
						"deco": "S7dentist6common10alignments4base6Contig",
						"protection": "public",
						"offset": 16
					},
					{
						"line": 419,
						"kind": "variable",
						"originalType": "Flags",
						"char": 11,
						"name": "flags",
						"deco": "S3std8typecons__T8BitFlagsTE7dentist6common10alignments4base4FlagVEQCoQCn__TQqVAyaa6_756e73616665ZQBmi0ZQDj",
						"protection": "public",
						"offset": 24
					},
					{
						"line": 420,
						"kind": "variable",
						"char": 22,
						"name": "localAlignments",
						"deco": "AS7dentist6common10alignments4base14AlignmentChain14LocalAlignment",
						"protection": "public",
						"offset": 32
					},
					{
						"line": 421,
						"kind": "variable",
						"originalType": "trace_point_t",
						"char": 19,
						"name": "tracePointDistance",
						"deco": "t",
						"protection": "public",
						"offset": 48
					},
					{
						"storageClass": [
							"static"
						],
						"line": 425,
						"kind": "function",
						"char": 37,
						"name": "disabledInstance",
						"deco": "FNaNbNdNiNfZS7dentist6common10alignments4base14AlignmentChain",
						"protection": "public",
						"endchar": 5,
						"endline": 432,
						"comment": "Return a minimal `AlignmentChain` with the disabled flag set.\n"
					},
					{
						"line": 487,
						"kind": "function",
						"char": 41,
						"name": "first",
						"deco": "xFNaNbNcNdNfZxS7dentist6common10alignments4base14AlignmentChain14LocalAlignment",
						"protection": "public",
						"endchar": 5,
						"endline": 490,
						"comment": "Return first local alignment.\n"
					},
					{
						"line": 505,
						"kind": "function",
						"char": 41,
						"name": "last",
						"deco": "xFNaNbNcNdNfZxS7dentist6common10alignments4base14AlignmentChain14LocalAlignment",
						"protection": "public",
						"endchar": 5,
						"endline": 508,
						"comment": "Return last local alignment.\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"storageClass": [
									"lazy"
								],
								"name": "disable"
							}
						],
						"line": 526,
						"kind": "function",
						"originalType": "pure @safe PhobosFlag!\"disabled\"(lazy bool disable)",
						"char": 27,
						"name": "disableIf",
						"deco": "FNaNfLbZE3std8typecons__T4FlagVAyaa8_64697361626c6564ZQBd",
						"protection": "public",
						"endchar": 5,
						"endline": 532,
						"comment": "Set the disable flag if `disable == true` unless it is already set.\n\nThis does not evaluate `disable` if `flags.disabled` is already set.\n"
					},
					{
						"parameters": [
							{
								"deco": "k",
								"default": "0u",
								"name": "allowance"
							}
						],
						"line": 537,
						"kind": "function",
						"originalType": "const pure nothrow @property @safe bool(coord_t allowance = 0)",
						"char": 20,
						"name": "isProper",
						"deco": "xFNaNbNdNfkZb",
						"protection": "public",
						"endchar": 5,
						"endline": 541,
						"comment": "This alignment is called proper iff it starts and ends at a contig\nboundary within `allowance`.\n"
					},
					{
						"constraint": "contig.among(\"contigA\", \"contigB\")",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "contig"
							}
						],
						"line": 545,
						"kind": "template",
						"char": 20,
						"members": [
							{
								"parameters": [
									{
										"type": "coord_t",
										"default": "0",
										"name": "allowance"
									}
								],
								"line": 545,
								"kind": "function",
								"char": 20,
								"name": "beginsWith",
								"type": "const pure nothrow @property @safe bool(coord_t allowance = 0)",
								"endchar": 5,
								"endline": 549
							}
						],
						"name": "beginsWith",
						"protection": "public",
						"comment": "This alignment begins within `allowance` of the begin of `contig`.\n"
					},
					{
						"constraint": "contig.among(\"contigA\", \"contigB\")",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "contig"
							}
						],
						"line": 553,
						"kind": "template",
						"char": 20,
						"members": [
							{
								"parameters": [
									{
										"type": "coord_t",
										"default": "0",
										"name": "allowance"
									}
								],
								"line": 553,
								"kind": "function",
								"char": 20,
								"name": "endsWith",
								"type": "const pure nothrow @property @safe bool(coord_t allowance = 0)",
								"endchar": 5,
								"endline": 557
							}
						],
						"name": "endsWith",
						"protection": "public",
						"comment": "This alignment ends within `allowance` of the end of `contig`.\n"
					},
					{
						"constraint": "contig.among(\"contigA\", \"contigB\")",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "contig"
							}
						],
						"line": 562,
						"kind": "template",
						"char": 20,
						"members": [
							{
								"parameters": [
									{
										"type": "coord_t",
										"default": "0",
										"name": "allowance"
									}
								],
								"line": 562,
								"kind": "function",
								"char": 20,
								"name": "completelyCovers",
								"type": "const pure nothrow @property @safe bool(coord_t allowance = 0)",
								"endchar": 5,
								"endline": 566
							}
						],
						"name": "completelyCovers",
						"protection": "public",
						"comment": "Returns true iff this alignment covers `contig` completely within\n`allowance`.\n"
					},
					{
						"line": 589,
						"kind": "function",
						"char": 10,
						"name": "isFullyContained",
						"deco": "xFNfZb",
						"protection": "public",
						"endchar": 5,
						"endline": 601,
						"comment": "        Returns true if the aligned read `contigB` (with extensions on either\n        end) is fully contained in the reference `contigA`.\n\n        According to the following 'definition' `contigA` is fully contained\n        in `contigB` iff `x >= 0` and `y <= l_a`.\n        ---\n                0                  x   ua      va  y                        la\n        contigA |------------------+---+-+---+-+---+-------------------------|\n                                  / / /  | | |  \\ \\ \\\n                                 / / /   | | |   \\ \\ \\\n                                / / /    | | |    \\ \\ \\\n                               / / /     | | |     \\ \\ \\\n        contigB               |---+------+---+------+---|\n                              0   ub                vb lb\n\n        x = ua - (ub - 0) = ua - ub\n        y = va + (lb - vb)\n        ---\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "contig"
							}
						],
						"line": 656,
						"kind": "template",
						"char": 22,
						"members": [
							{
								"line": 656,
								"kind": "function",
								"char": 22,
								"name": "coveredBases",
								"type": "const pure @property @safe size_t()",
								"endchar": 5,
								"endline": 659
							}
						],
						"name": "coveredBases",
						"protection": "public",
						"comment": "Sum of bases covered by each local alignment on contig A. Some bases\nmay be counted multiple times.\n"
					},
					{
						"line": 676,
						"kind": "function",
						"originalType": "const pure @property @safe size_t()",
						"char": 22,
						"name": "totalDiffs",
						"deco": "xFNaNdNfZm",
						"protection": "public",
						"endchar": 5,
						"endline": 679,
						"comment": "Sum of differences in each local alignment.\n"
					},
					{
						"line": 695,
						"kind": "function",
						"char": 22,
						"name": "averageErrorRate",
						"deco": "xFNaNdNfZd",
						"protection": "public",
						"endchar": 5,
						"endline": 698,
						"comment": "Average diffs per base pair over all local alignments.\n"
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist6common10alignments4base14AlignmentChain",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"line": 714,
						"kind": "function",
						"originalType": "const pure nothrow @safe int(const ref AlignmentChain other)",
						"char": 9,
						"name": "compareIds",
						"deco": "xFNaNbNfKxS7dentist6common10alignments4base14AlignmentChainZi",
						"protection": "public",
						"endchar": 5,
						"endline": 721,
						"comment": "Compare this alignment chain to other only by contig IDs.\n"
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist6common10alignments4base14AlignmentChain",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"line": 766,
						"kind": "function",
						"originalType": "const pure nothrow @safe int(const ref AlignmentChain other)",
						"char": 9,
						"name": "opCmp",
						"deco": "xFNaNbNfKxS7dentist6common10alignments4base14AlignmentChainZi",
						"protection": "public",
						"endchar": 5,
						"endline": 777,
						"comment": "Compare this alignment chain to `other`. Sort order is determined\nby these criteria:\n\n$(OL\n$(LI `contigA.id`)\n$(LI `contigB.id`)\n$(LI `first.contigA.begin`)\n$(LI `first.contigB.begin`)\n$(LI `last.contigA.end`)\n$(LI `last.contigB.end`)\n)\n\nNote, this is incompatible with `FlatLocalAlignment.opCmp`.\n"
					},
					{
						"constraint": "contig.among(\"contigA\", \"contigB\")",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"defaultValue": "\"contigA\"",
								"name": "contig"
							}
						],
						"line": 866,
						"kind": "template",
						"char": 26,
						"members": [
							{
								"parameters": [
									{
										"type": "coord_t",
										"storageClass": [
											"in"
										],
										"name": "contigPos"
									},
									{
										"type": "RoundingMode",
										"name": "roundingMode"
									}
								],
								"line": 866,
								"kind": "function",
								"char": 26,
								"name": "translateTracePoint",
								"type": "const pure TranslatedTracePoint(in coord_t contigPos, RoundingMode roundingMode)",
								"endchar": 5,
								"endline": 879
							}
						],
						"name": "translateTracePoint",
						"protection": "public",
						"comment": "Translate `contigPos` on `contig` to a position on the other contig\nwithout exact alignment reconstruction. The first local alignment\nthat covers `contigPos` is selected for translation.\n\nSee_also: `coveringLocalAlignmentIndex`,\n`LocalAlignment.translateTracePoint`\n"
					},
					{
						"constraint": "contig.among(\"contigA\", \"contigB\")",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"defaultValue": "\"contigA\"",
								"name": "contig"
							}
						],
						"line": 958,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"parameters": [
									{
										"type": "AlignmentLocationSeed",
										"storageClass": [
											"in"
										],
										"name": "startingSeed"
									},
									{
										"type": "coord_t",
										"storageClass": [
											"in"
										],
										"name": "contigPos"
									},
									{
										"type": "RoundingMode",
										"storageClass": [
											"in"
										],
										"name": "roundingMode"
									}
								],
								"line": 958,
								"kind": "function",
								"char": 10,
								"name": "cropToTracePoint",
								"type": "pure void(in AlignmentLocationSeed startingSeed, in coord_t contigPos, in RoundingMode roundingMode)",
								"endchar": 5,
								"endline": 991
							}
						],
						"name": "cropToTracePoint",
						"protection": "public",
						"comment": "Crops this local alignment from `startingSeed` (begin or end of\nalignment chain) to `contigPos`.\n\nParams:\ncontig             = Either `\"contigA\"` or `\"contigB\"`.\nstartingSeed       = Begin (`AlignmentLocationSeed.front`) or\nend (`AlignmentLocationSeed.back`) of alignment.\ncontigPos          = Input coordinate on `contig`.\nroundingMode       = see `dentist.util.math.RoundingMode`.\nSee_also: `coveringLocalAlignmentIndex`,\n`LocalAlignment.cropToTracePoint`\n"
					},
					{
						"constraint": "contig.among(\"contigA\", \"contigB\")",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"defaultValue": "\"contigA\"",
								"name": "contig"
							}
						],
						"line": 1136,
						"kind": "template",
						"char": 22,
						"members": [
							{
								"parameters": [
									{
										"type": "coord_t",
										"storageClass": [
											"in"
										],
										"name": "contigPos"
									},
									{
										"type": "RoundingMode",
										"storageClass": [
											"in"
										],
										"name": "roundingMode"
									}
								],
								"line": 1136,
								"kind": "function",
								"char": 22,
								"name": "coveringLocalAlignmentIndex",
								"type": "const pure size_t(in coord_t contigPos, in RoundingMode roundingMode)",
								"endchar": 5,
								"endline": 1154
							}
						],
						"name": "coveringLocalAlignmentIndex",
						"protection": "protected",
						"comment": "Return the index of the first local alignment that covers `contigPos`.\n\nThrows: `Exception` if `contigPos` is not covered by any local\nalignment.\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "contig"
							}
						],
						"line": 1166,
						"kind": "template",
						"char": 19,
						"members": [
							{
								"parameters": [
									{
										"type": "coord_t",
										"storageClass": [
											"in"
										],
										"name": "bpsPerChar"
									},
									{
										"type": "AlignmentChain[]",
										"storageClass": [
											"in"
										],
										"name": "alignmentChains"
									}
								],
								"line": 1166,
								"kind": "function",
								"char": 19,
								"name": "cartoon",
								"type": "string(in coord_t bpsPerChar, in AlignmentChain[] alignmentChains...)",
								"endchar": 5,
								"endline": 1235
							}
						],
						"name": "cartoon",
						"protection": "public",
						"comment": "        Generate a cartoon of this alignment relative to `contig`.\n\n        Params:\n            bpsPerChar =    Number of base pairs that one char represents.\n            alignmentChains = List of alignments to show\n\n        Returns: a cartoon of this alignment\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1238_C5)\n---\nalias LocalAlignment = AlignmentChain.LocalAlignment;\n\nauto acs = [\n    AlignmentChain(\n        0,\n        Contig(1, 10),\n        Contig(1, 10),\n        Flags(),\n        [\n            LocalAlignment(Locus(0, 3), Locus(0, 3)),\n            LocalAlignment(Locus(4, 5), Locus(4, 5)),\n        ]),\n    AlignmentChain(\n        1,\n        Contig(1, 10),\n        Contig(1, 10),\n        Flags(Flag.complement),\n        [\n            LocalAlignment(Locus(5, 8), Locus(0, 3)),\n            LocalAlignment(Locus(9, 10), Locus(4, 5)),\n        ]),\n];\n\nassert(cartoon!\"contigA\"(1, acs) == \"----------\\n\" ~\n                                    \"---=-\\n\" ~\n                                    \"     ---=-\");\nassert(cartoon!\"contigB\"(1, acs) == \"----------\\n\" ~\n                                    \"---=-\\n\" ~\n                                    \"     -=---\");\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1238_C5)\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 1277,
						"kind": "function",
						"originalType": "pure nothrow ()",
						"char": 10,
						"name": "toFlatLocalAlignments",
						"deco": "FNaNbNfZS3std9algorithm9iteration__T9MapResultS7dentist6common10alignments4base14AlignmentChain21toFlatLocalAlignmentsMFNaNbZ9__lambda1TSQEy5range__T9enumerateTmTASQEnQEiQEeQDvQDt14LocalAlignmentZQBvFQBmmZ6ResultZQGv",
						"protection": "public",
						"endchar": 5,
						"endline": 1302,
						"comment": "Split this alignment chain into a range of `FlatLocalAlignment`s. The\nresulting alignment are flagged appropriately to make reconstruction\nof the chain possible.\n\nReturns: range of `FlatLocalAlignment`s\n"
					},
					{
						"line": 1306,
						"kind": "function",
						"char": 10,
						"name": "toJson",
						"deco": "xFNfZS4vibe4data4json4Json",
						"protection": "public",
						"endchar": 5,
						"endline": 1314,
						"comment": "Convert to/from `vibed.data.json.Json`.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "S4vibe4data4json4Json",
								"name": "json"
							}
						],
						"line": 1317,
						"kind": "function",
						"char": 27,
						"name": "fromJson",
						"deco": "FNfS4vibe4data4json4JsonZS7dentist6common10alignments4base14AlignmentChain",
						"protection": "public",
						"endchar": 5,
						"endline": 1327,
						"comment": "ditto\n"
					}
				],
				"name": "AlignmentChain",
				"protection": "public",
				"comment": "    Holds a chain of local alignments that form a compound alignment. An AlignmentChain should\n    contain at least one element.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"in"
						],
						"name": "ac1"
					},
					{
						"deco": "xS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"in"
						],
						"name": "ac2"
					}
				],
				"line": 1333,
				"kind": "function",
				"char": 6,
				"name": "idsPred",
				"deco": "FNaIS7dentist6common10alignments4base14AlignmentChainIQByZb",
				"protection": "public",
				"endchar": 1,
				"endline": 1338,
				"comment": "Returns true if `ac1` is smaller than `ac2` according to\n`AlignmentChain.compareIds`.\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"in"
						],
						"name": "ac1"
					},
					{
						"deco": "xS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"in"
						],
						"name": "ac2"
					}
				],
				"line": 1369,
				"kind": "function",
				"originalType": "pure (in AlignmentChain ac1, in AlignmentChain ac2)",
				"char": 6,
				"name": "haveEqualIds",
				"deco": "FNaNbNfIS7dentist6common10alignments4base14AlignmentChainIQByZb",
				"protection": "public",
				"endchar": 1,
				"endline": 1374,
				"comment": "Returns true if `ac1` and `ac2` are equal according to\n`AlignmentChain.compareIds`.\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xAS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"in"
						],
						"name": "acList"
					},
					{
						"deco": "xk",
						"storageClass": [
							"in"
						],
						"name": "contigAID"
					},
					{
						"deco": "xk",
						"storageClass": [
							"in"
						],
						"name": "contigBID"
					}
				],
				"line": 1407,
				"kind": "function",
				"originalType": "pure (in AlignmentChain[] acList, in id_t contigAID, in id_t contigBID)",
				"char": 6,
				"name": "equalIdsRange",
				"deco": "FNaIAS7dentist6common10alignments4base14AlignmentChainIkIkZS3std5range__T11SortedRangeTAxQDgS_DQDlQDgQDcQCt7idsPredFNaIQEkIQEoZbVEQCsQCr18SortedRangeOptionsi0ZQDi",
				"protection": "public",
				"endchar": 1,
				"endline": 1416,
				"comment": "Return the slice of `acList` where the contig IDs match. `acList` must be\nsorted by `idsPred`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"ref"
						],
						"name": "lhs"
					},
					{
						"deco": "xS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"ref"
						],
						"name": "rhs"
					}
				],
				"line": 1450,
				"kind": "function",
				"originalType": "int(const ref AlignmentChain lhs, const ref AlignmentChain rhs)",
				"char": 5,
				"name": "cmpIdsAndComplement",
				"deco": "FKxS7dentist6common10alignments4base14AlignmentChainKxQBzZi",
				"protection": "public",
				"endchar": 1,
				"endline": 1458,
				"comment": "Compare `lhs` to `rhs`. Sort order is determined by these criteria:\n\n$(OL\n$(LI `contigA.id`)\n$(LI `contigB.id`)\n$(LI `flags.complement`)\n)\n\nNote, this is incompatible with `AlignmentChain.opCmp`.\n"
			},
			{
				"constraint": "contig == \"contigA\" || contig == \"contigB\"",
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "contig"
					}
				],
				"line": 1462,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "AlignmentChain",
								"storageClass": [
									"in"
								],
								"name": "ac1"
							},
							{
								"type": "AlignmentChain",
								"storageClass": [
									"in"
								],
								"name": "ac2"
							}
						],
						"line": 1462,
						"kind": "function",
						"char": 6,
						"name": "isBefore",
						"type": "pure bool(in AlignmentChain ac1, in AlignmentChain ac2)",
						"endchar": 1,
						"endline": 1477
					}
				],
				"name": "isBefore",
				"protection": "public",
				"comment": "Returns true iff `ac1` begins before `ac2` on the given contig.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"in"
						],
						"name": "alignments"
					}
				],
				"line": 1514,
				"kind": "function",
				"char": 8,
				"name": "alignmentCoverage",
				"deco": "FIAS7dentist6common10alignments4base14AlignmentChainZd",
				"protection": "public",
				"endchar": 1,
				"endline": 1532,
				"comment": "Calculates the coverage of the contigs by the given alignments. Only\ncontigs involved in the alignments are regarded.\n\nReturns:\n---\ntotalCoveredBases / totalContigLength\n---\n"
			},
			{
				"line": 1604,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 1607,
						"kind": "struct",
						"char": 12,
						"members": [
							{
								"line": 1610,
								"kind": "variable",
								"originalType": "id_t",
								"char": 14,
								"name": "id",
								"deco": "k",
								"protection": "public",
								"offset": 0,
								"comment": "Contig ID\n"
							},
							{
								"line": 1612,
								"kind": "variable",
								"originalType": "coord_t",
								"char": 17,
								"name": "length",
								"deco": "k",
								"protection": "public",
								"offset": 4,
								"comment": "Contig length\n"
							},
							{
								"line": 1614,
								"kind": "variable",
								"originalType": "coord_t",
								"char": 17,
								"name": "begin",
								"deco": "k",
								"protection": "public",
								"offset": 8,
								"comment": "Locus begin (inclusive)\n"
							},
							{
								"line": 1616,
								"kind": "variable",
								"originalType": "coord_t",
								"char": 17,
								"name": "end",
								"deco": "k",
								"protection": "public",
								"offset": 12,
								"comment": "Locus end (exclusive)\n"
							},
							{
								"line": 1620,
								"kind": "function",
								"char": 26,
								"name": "contig",
								"deco": "xFNaNbNdNfZS7dentist6common10alignments4base6Contig",
								"protection": "public",
								"endchar": 9,
								"endline": 1623,
								"comment": "Construct a `Contig` struct from this locus.\n"
							},
							{
								"parameters": [
									{
										"deco": "S7dentist6common10alignments4base6Contig",
										"name": "newContig"
									}
								],
								"line": 1627,
								"kind": "function",
								"char": 24,
								"name": "contig",
								"deco": "FNaNbNdNfS7dentist6common10alignments4base6ContigZv",
								"protection": "public",
								"endchar": 9,
								"endline": 1631,
								"comment": "Assign contig ID and length from `newContig`.\n"
							},
							{
								"line": 1635,
								"kind": "function",
								"char": 25,
								"name": "locus",
								"deco": "xFNaNbNdNfZS7dentist6common10alignments4base5Locus",
								"protection": "public",
								"endchar": 9,
								"endline": 1638,
								"comment": "Construct a `Locus` struct from this locus.\n"
							},
							{
								"parameters": [
									{
										"deco": "S7dentist6common10alignments4base5Locus",
										"name": "newLocus"
									}
								],
								"line": 1642,
								"kind": "function",
								"char": 24,
								"name": "locus",
								"deco": "FNaNbNdNfS7dentist6common10alignments4base5LocusZv",
								"protection": "public",
								"endchar": 9,
								"endline": 1646,
								"comment": "Assign locus begin and end from `newLocus`.\n"
							},
							{
								"line": 1650,
								"kind": "function",
								"originalType": "const pure nothrow @property @safe coord_t()",
								"char": 27,
								"name": "mappedLength",
								"deco": "xFNaNbNdNfZk",
								"protection": "public",
								"endchar": 9,
								"endline": 1653,
								"comment": "Returns the length of the locus, i.e. `end - begin`.\n"
							},
							{
								"parameters": [
									{
										"deco": "k",
										"name": "begin"
									}
								],
								"line": 1657,
								"kind": "function",
								"originalType": "pure nothrow @property @safe void(coord_t begin)",
								"char": 24,
								"name": "boundedBegin",
								"deco": "FNaNbNdNfkZv",
								"protection": "public",
								"endchar": 9,
								"endline": 1660,
								"comment": "Set `this.begin` to `begin` bounded by `this.length`.\n"
							},
							{
								"parameters": [
									{
										"deco": "k",
										"name": "end"
									}
								],
								"line": 1664,
								"kind": "function",
								"originalType": "pure nothrow @property @safe void(coord_t end)",
								"char": 24,
								"name": "boundedEnd",
								"deco": "FNaNbNdNfkZv",
								"protection": "public",
								"endchar": 9,
								"endline": 1667,
								"comment": "Set `this.end` to `end` bounded by `this.length`.\n"
							},
							{
								"parameters": [
									{
										"deco": "k",
										"name": "allowance"
									}
								],
								"line": 1672,
								"kind": "function",
								"originalType": "const pure nothrow @safe bool(coord_t allowance)",
								"char": 14,
								"name": "beginsWithin",
								"deco": "xFNaNbNfkZb",
								"protection": "public",
								"endchar": 9,
								"endline": 1675,
								"comment": "Returns true if this locus begins within `allowance` base pairs\nof the begin of the containing contig.\n"
							},
							{
								"parameters": [
									{
										"deco": "k",
										"name": "allowance"
									}
								],
								"line": 1680,
								"kind": "function",
								"originalType": "const pure nothrow @safe bool(coord_t allowance)",
								"char": 14,
								"name": "endsWithin",
								"deco": "xFNaNbNfkZb",
								"protection": "public",
								"endchar": 9,
								"endline": 1683,
								"comment": "Returns true if this locus ends within `allowance` base pairs\nof the begin of the containing contig.\n"
							},
							{
								"parameters": [
									{
										"deco": "k",
										"name": "allowance"
									}
								],
								"line": 1688,
								"kind": "function",
								"originalType": "const pure nothrow @safe bool(coord_t allowance)",
								"char": 14,
								"name": "isFullyContained",
								"deco": "xFNaNbNfkZb",
								"protection": "public",
								"endchar": 9,
								"endline": 1691,
								"comment": "Returns true if this locus begins/ends within `allowance` base pairs\nof the begin/end of the containing contig.\n"
							}
						],
						"name": "FlatLocus",
						"protection": "public",
						"comment": "Describes the locus of the alignment.\n"
					},
					{
						"line": 1696,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "id",
						"deco": "m",
						"protection": "public",
						"offset": 0,
						"comment": "Optional ID of this local alignment.\n"
					},
					{
						"line": 1698,
						"kind": "variable",
						"char": 15,
						"name": "contigA",
						"deco": "S7dentist6common10alignments4base18FlatLocalAlignment9FlatLocus",
						"protection": "public",
						"offset": 8,
						"comment": "Alignment locus on contig A.\n"
					},
					{
						"line": 1700,
						"kind": "variable",
						"char": 15,
						"name": "contigB",
						"deco": "S7dentist6common10alignments4base18FlatLocalAlignment9FlatLocus",
						"protection": "public",
						"offset": 24,
						"comment": "Alignment locus on contig B.\n"
					},
					{
						"line": 1702,
						"kind": "variable",
						"originalType": "Flags",
						"char": 11,
						"name": "flags",
						"deco": "S3std8typecons__T8BitFlagsTE7dentist6common10alignments4base4FlagVEQCoQCn__TQqVAyaa6_756e73616665ZQBmi0ZQDj",
						"protection": "public",
						"offset": 40,
						"comment": "Alignment flags.\n"
					},
					{
						"line": 1704,
						"kind": "variable",
						"originalType": "trace_point_t",
						"char": 19,
						"name": "tracePointDistance",
						"deco": "t",
						"protection": "public",
						"offset": 42,
						"comment": "Optional spacing between trace points.\n"
					},
					{
						"line": 1706,
						"kind": "variable",
						"char": 18,
						"name": "tracePoints",
						"deco": "AS7dentist6common10alignments4base10TracePoint",
						"protection": "public",
						"offset": 48,
						"comment": "Optional list of trace points.\n"
					},
					{
						"parameters": [
							{
								"deco": "b",
								"storageClass": [
									"lazy"
								],
								"name": "disable"
							}
						],
						"line": 1712,
						"kind": "function",
						"originalType": "pure PhobosFlag!\"disabled\"(lazy bool disable)",
						"char": 27,
						"name": "disableIf",
						"deco": "FNaLbZE3std8typecons__T4FlagVAyaa8_64697361626c6564ZQBd",
						"protection": "public",
						"endchar": 5,
						"endline": 1719,
						"comment": "Set the disable flag if `disable == true` unless it is already set.\n\nThis does not evaluate `disable` if `flags.disabled` is already set.\n"
					},
					{
						"line": 1723,
						"kind": "function",
						"char": 22,
						"name": "averageErrorRate",
						"deco": "xFNaNdZd",
						"protection": "public",
						"endchar": 5,
						"endline": 1726,
						"comment": "Average diffs per base pair over all local alignments.\n"
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"line": 1746,
						"kind": "function",
						"originalType": "const pure nothrow @nogc @safe int(const ref FlatLocalAlignment other)",
						"char": 9,
						"name": "opCmp",
						"deco": "xFNaNbNiNfKxS7dentist6common10alignments4base18FlatLocalAlignmentZi",
						"protection": "public",
						"endchar": 5,
						"endline": 1768,
						"comment": "Compare this local alignment to `other`'.\n\nSort order is determined according to `LAsort`, i.e. by these\ncriteria:\n\n$(OL\n$(LI `contigA.id`)\n$(LI `contigB.id`)\n$(LI `flags.complement`)\n$(LI `contigA.begin`)\n$(LI `contigA.end`)\n$(LI `contigB.begin`)\n$(LI `contigB.end`)\n$(LI `numDiffs`)\n)\n\nNote, this is incompatible with `AlignmentChain.opCmp`.\n"
					},
					{
						"line": 1772,
						"kind": "function",
						"originalType": "const pure nothrow @nogc @property @safe coord_t()",
						"char": 23,
						"name": "numDiffs",
						"deco": "xFNaNbNdNiNfZk",
						"protection": "public",
						"endchar": 5,
						"endline": 1775,
						"comment": "Sum of diffs across all `tracePoints`.\n"
					},
					{
						"line": 1779,
						"kind": "function",
						"char": 21,
						"name": "trace",
						"deco": "xFNaNbNdNfZS7dentist6common10alignments4base5Trace",
						"protection": "public",
						"endchar": 5,
						"endline": 1787,
						"comment": "Construct `Trace` object from this local alignment.\n"
					},
					{
						"constraint": "contig.among(\"contigA\", \"contigB\")",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"defaultValue": "\"contigA\"",
								"name": "contig"
							}
						],
						"line": 1798,
						"kind": "template",
						"char": 26,
						"members": [
							{
								"parameters": [
									{
										"type": "coord_t",
										"name": "contigPos"
									},
									{
										"type": "RoundingMode",
										"name": "roundingMode"
									}
								],
								"line": 1798,
								"kind": "function",
								"char": 26,
								"name": "translateTracePoint",
								"type": "const pure TranslatedTracePoint(coord_t contigPos, RoundingMode roundingMode)",
								"endchar": 5,
								"endline": 1804
							}
						],
						"name": "translateTracePoint",
						"protection": "public",
						"comment": "Translate `contigPos` on `contig` to a position on the other contig\nusing `tracePoints` without exact alignment reconstruction.\n\nParams:\ncontig             = Either `\"contigA\"` or `\"contigB\"`.\ncontigPos          = Input coordinate on `contig`.\nroundingMode       = see `dentist.util.math.RoundingMode`.\nSee_also: `Trace.translateTracePoint`\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "contig"
							}
						],
						"line": 1817,
						"kind": "template",
						"char": 19,
						"members": [
							{
								"parameters": [
									{
										"type": "coord_t",
										"storageClass": [
											"in"
										],
										"name": "bpsPerChar"
									},
									{
										"type": "FlatLocalAlignment[]",
										"storageClass": [
											"in"
										],
										"name": "localAlignments"
									}
								],
								"line": 1817,
								"kind": "function",
								"char": 19,
								"name": "cartoon",
								"type": "string(in coord_t bpsPerChar, in FlatLocalAlignment[] localAlignments...)",
								"endchar": 5,
								"endline": 1849
							}
						],
						"name": "cartoon",
						"protection": "public",
						"comment": "        Generate a cartoon of this alignment relative to `contig`.\n\n        Params:\n            contig     = Which contig to show; either `\"contigA\"` or  `\"contigB\"`\n            bpsPerChar = Number of base pairs that one char represents.\n            localAlignments = Local alignments to include in the cartoon.\n\n        Returns: a cartoon of this alignment\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1852_C5)\n---\nauto flas = [\n    FlatLocalAlignment(\n        0,\n        FlatLocus(1, 10, 0, 3),\n        FlatLocus(1, 10, 0, 3),\n    ),\n    FlatLocalAlignment(\n        1,\n        FlatLocus(1, 10, 4, 5),\n        FlatLocus(1, 10, 4, 5),\n    ),\n    FlatLocalAlignment(\n        2,\n        FlatLocus(1, 10, 5, 8),\n        FlatLocus(1, 10, 0, 3),\n        Flags(Flag.complement),\n    ),\n    FlatLocalAlignment(\n        3,\n        FlatLocus(1, 10, 9, 10),\n        FlatLocus(1, 10, 4, 5),\n        Flags(Flag.complement),\n    ),\n];\n\nassert(cartoon!\"contigA\"(1, flas) == \"----------\\n\" ~\n                                     \"---\\n\" ~\n                                     \"    -\\n\" ~\n                                     \"     ---\\n\" ~\n                                     \"         -\");\nassert(cartoon!\"contigB\"(1, flas) == \"----------\\n\" ~\n                                     \"---\\n\" ~\n                                     \"    -\\n\" ~\n                                     \"       ---\\n\" ~\n                                     \"     -\");\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1852_C5)\n"
					}
				],
				"name": "FlatLocalAlignment",
				"protection": "public",
				"comment": "A single local alignment. These correspond to the entries in a LAS file.\n"
			},
			{
				"line": 1897,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 1900,
						"kind": "enum member",
						"char": 5,
						"name": "front",
						"protection": "public",
						"value": "cast(ubyte)0u",
						"comment": "Mark the begin/front.\n"
					},
					{
						"line": 1902,
						"kind": "enum member",
						"char": 5,
						"name": "back",
						"protection": "public",
						"value": "1",
						"comment": "Mark the end/back.\n"
					}
				],
				"name": "AlignmentLocationSeed",
				"protection": "public",
				"baseDeco": "h",
				"comment": "Seed location of a read alignment. This marks the begin or end of an\nalignment or contig.\n\nSee_also: `AlignmentChain.cropToTracePoint`, `SeededAlignment.seed`\n"
			},
			{
				"parameters": [
					{
						"deco": "xE7dentist6common10alignments4base21AlignmentLocationSeed",
						"name": "seed"
					}
				],
				"line": 1907,
				"kind": "function",
				"originalType": "pure nothrow @safe char(const AlignmentLocationSeed seed)",
				"char": 6,
				"name": "toChar",
				"deco": "FNaNbNfxE7dentist6common10alignments4base21AlignmentLocationSeedZa",
				"protection": "public",
				"endchar": 1,
				"endline": 1916,
				"comment": "Returns `'f'` for `front` and `'b'` for `back`.\n"
			},
			{
				"line": 1923,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 1927,
						"kind": "variable",
						"char": 20,
						"name": "alignment",
						"deco": "S7dentist6common10alignments4base14AlignmentChain",
						"protection": "public",
						"offset": 0,
						"comment": "The alignment chain. Properties can be accessed directly on the\n`SeededAlignment` because of `alias alignment this`.\n"
					},
					{
						"line": 1931,
						"kind": "variable",
						"char": 27,
						"name": "seed",
						"deco": "E7dentist6common10alignments4base21AlignmentLocationSeed",
						"protection": "public",
						"offset": 56,
						"comment": "Mark the end of the contained contig that this alignment belongs to.\nThis is used to discriminate between copies of alignments that fully\ncover the contig.\n"
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist6common10alignments4base15SeededAlignment",
								"storageClass": [
									"ref"
								],
								"name": "other"
							}
						],
						"line": 1944,
						"kind": "function",
						"originalType": "const pure nothrow int(const ref SeededAlignment other)",
						"char": 9,
						"name": "opCmp",
						"deco": "xFNaNbKxS7dentist6common10alignments4base15SeededAlignmentZi",
						"protection": "public",
						"endchar": 5,
						"endline": 1951,
						"comment": "Compare according to `AlignmentChain.opCmp` and break ties by\ncomparing `seed`s.\n"
					},
					{
						"storageClass": [
							"auto",
							"static"
						],
						"parameters": [
							{
								"deco": "S7dentist6common10alignments4base14AlignmentChain",
								"name": "alignmentChain"
							}
						],
						"line": 1961,
						"kind": "function",
						"originalType": "(AlignmentChain alignmentChain)",
						"char": 17,
						"name": "from",
						"deco": "FNaNbNfS7dentist6common10alignments4base14AlignmentChainZS3std9algorithm9iteration__T12FilterResultSQDoQDjQDfQCw15SeededAlignment4fromFQEyZ9__lambda2TSQDp5range__T10OnlyResultTSQGnQGiQGeQFvQCzTQrZQBhZQEl",
						"protection": "public",
						"endchar": 5,
						"endline": 1973,
						"comment": "Construct a range of `SeededAlignment`s from `alignmentChain`. The\nresulting range will contain:\n$(UL\n$(LI a `front` copy if `isFrontExtension`)\n$(LI a `back` copy if `isBackExtension`)\n)\n\n"
					}
				],
				"name": "SeededAlignment",
				"protection": "public",
				"comment": "An alignment chain with a \"seed\", ie. hint for it's intended location.\nThis is used to separate alignment that fully cover a contig into one that\nis used for the left/previous gap and one that is used for that right/next\ngap.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"in"
						],
						"name": "alignment"
					}
				],
				"line": 1980,
				"kind": "function",
				"char": 16,
				"name": "isExtension",
				"deco": "FNaNbIS7dentist6common10alignments4base14AlignmentChainZb",
				"protection": "protected",
				"endchar": 1,
				"endline": 1983,
				"comment": "Returns true if `alignment` either `isFrontExtension` or `isBackExtension`\nbut not both. A more complete description can be found at\n`ReadAlignment.isExtension`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"in"
						],
						"name": "alignment"
					}
				],
				"line": 1989,
				"kind": "function",
				"char": 16,
				"name": "isFrontExtension",
				"deco": "FNaNbIS7dentist6common10alignments4base14AlignmentChainZb",
				"protection": "protected",
				"endchar": 1,
				"endline": 1995,
				"comment": "Returns true if the sequence of the aligned read extends beyond the\ncontig begin. A more complete description can be found at\n`ReadAlignment.isFrontExtension`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"in"
						],
						"name": "alignment"
					}
				],
				"line": 2001,
				"kind": "function",
				"char": 16,
				"name": "isBackExtension",
				"deco": "FNaNbIS7dentist6common10alignments4base14AlignmentChainZb",
				"protection": "protected",
				"endchar": 1,
				"endline": 2007,
				"comment": "Returns true if the sequence of the aligned read extends beyond the\ncontig end. A more complete description can be found at\n`ReadAlignment.isBackExtension`.\n"
			},
			{
				"line": 2011,
				"kind": "enum",
				"char": 8,
				"members": [
					{
						"line": 2016,
						"kind": "enum member",
						"char": 5,
						"name": "front",
						"protection": "public",
						"value": "0",
						"comment": "Read aligns only to the front of a contig.\n\nSee_also: `ReadAlignment.isFront`\n"
					},
					{
						"line": 2020,
						"kind": "enum member",
						"char": 5,
						"name": "gap",
						"protection": "public",
						"value": "1",
						"comment": "Read aligns to two distinct contigs.\n\nSee_also: `ReadAlignment.isGap`\n"
					},
					{
						"line": 2024,
						"kind": "enum member",
						"char": 5,
						"name": "back",
						"protection": "public",
						"value": "2",
						"comment": "Read aligns only to the back of a contig.\n\nSee_also: `ReadAlignment.isBack`\n"
					}
				],
				"name": "ReadAlignmentType",
				"protection": "public",
				"baseDeco": "i",
				"comment": "Type of the read alignment.\n"
			},
			{
				"line": 2036,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "AS7dentist6common10alignments4base15SeededAlignment",
								"name": "alignments"
							}
						],
						"line": 2045,
						"kind": "constructor",
						"originalType": "ref (SeededAlignment[] alignments...)",
						"char": 5,
						"name": "this",
						"deco": "FNcAS7dentist6common10alignments4base15SeededAlignmentXSQBzQBuQBqQBh13ReadAlignment",
						"protection": "public",
						"endchar": 5,
						"endline": 2061,
						"comment": "Construct from one or two `SeededAlignment`s. Returns an empty\n`ReadAlignment` If `alignments` has an invalid length and writes a\n`dentist.util.log.LogLevel.debug` message.\n"
					},
					{
						"line": 2065,
						"kind": "function",
						"originalType": "const pure nothrow @property size_t()",
						"char": 22,
						"name": "length",
						"deco": "xFNaNbNdZm",
						"protection": "public",
						"endchar": 5,
						"endline": 2068,
						"comment": "Returns the number of `SeededAlignment`s.\n"
					},
					{
						"line": 2071,
						"kind": "function",
						"originalType": "const pure nothrow @property size_t()",
						"char": 22,
						"name": "opDollar",
						"deco": "xFNaNbNdZm",
						"protection": "public",
						"endchar": 5,
						"endline": 2074,
						"comment": "ditto\n"
					},
					{
						"line": 2078,
						"kind": "function",
						"char": 30,
						"name": "opIndex",
						"deco": "NgFNaNbZNgAS7dentist6common10alignments4base15SeededAlignment",
						"protection": "public",
						"endchar": 5,
						"endline": 2081,
						"comment": "Return a view of the contained alignments.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 2085,
						"kind": "template",
						"char": 28,
						"members": [
							{
								"parameters": [
									{
										"type": "T",
										"name": "idx"
									}
								],
								"line": 2085,
								"kind": "function",
								"char": 28,
								"name": "opIndex",
								"type": "inout pure nothrow inout(SeededAlignment)(T idx)",
								"endchar": 5,
								"endline": 2088
							}
						],
						"name": "opIndex",
						"protection": "public",
						"comment": "Return the alignment at `idx` (zero-based).\n"
					},
					{
						"line": 2117,
						"kind": "function",
						"char": 20,
						"name": "isInOrder",
						"deco": "xFNaNbNdZb",
						"protection": "public",
						"endchar": 5,
						"endline": 2120,
						"comment": "        If readAlignment is a gap return true iff the first alignment's\n        `contigA.id` is lower than the second alignment's; otherwise returns\n        true.\n"
					},
					{
						"line": 2124,
						"kind": "function",
						"char": 19,
						"name": "getInOrder",
						"deco": "FNaNbZS7dentist6common10alignments4base13ReadAlignment",
						"protection": "public",
						"endchar": 5,
						"endline": 2130,
						"comment": "Swap contained alignments if they are not `isInOrder`.\n"
					},
					{
						"line": 2137,
						"kind": "function",
						"char": 20,
						"name": "isValid",
						"deco": "xFNaNbNdZb",
						"protection": "public",
						"endchar": 5,
						"endline": 2140,
						"comment": "        Returns true iff the read alignment is valid, ie. it is either an\n        extension or gap.\n"
					},
					{
						"line": 2148,
						"kind": "function",
						"char": 33,
						"name": "type",
						"deco": "xFNaNbNdZE7dentist6common10alignments4base17ReadAlignmentType",
						"protection": "public",
						"endchar": 5,
						"endline": 2164,
						"comment": "        Get the type of the read alignment.\n\n        See_Also: `isFrontExtension`, `isBackExtension`, `isGap`\n"
					},
					{
						"line": 2173,
						"kind": "function",
						"char": 20,
						"name": "isExtension",
						"deco": "xFNaNbNdZb",
						"protection": "public",
						"endchar": 5,
						"endline": 2177,
						"comment": "        Returns true iff the read alignment is an extension, ie. it is a front or\n        back extension.\n\n        See_Also: `isFrontExtension`, `isBackExtension`\n"
					},
					{
						"line": 2202,
						"kind": "function",
						"char": 20,
						"name": "isFrontExtension",
						"deco": "xFNaNbNdZb",
						"protection": "public",
						"endchar": 5,
						"endline": 2205,
						"comment": "        Returns true iff the read alignment is an front extension, ie. it is an\n        extension and reaches over the front of the reference contig.\n\n        ---\n        Case 1 (complement alignment):\n\n                          0  rx\n            ref           |--+->-+->-->-->--|\n                             | | |\n            read  |--<--<--<-+-<-+--|\n                  0          ax\n\n        Case 2 (non-complement alignment):\n\n                          0  rx\n            ref           |--+->-+->-->-->--|\n                             | | |\n            read  |-->-->-->-+->-+--|\n                  0          ax\n        ---\n"
					},
					{
						"line": 2230,
						"kind": "function",
						"char": 20,
						"name": "isBackExtension",
						"deco": "xFNaNbNdZb",
						"protection": "public",
						"endchar": 5,
						"endline": 2233,
						"comment": "        Returns true iff the read alignment is an back extension, ie. it is an\n        extension and reaches over the back of the reference contig.\n\n        ---\n        Case 1 (complement alignment):\n\n                  0             ry lr\n            ref   |-->-->-->-+->-+--|\n                             | | |\n            read          |--+-<-+-<--<--<--|\n                          0     ay         la\n\n        Case 2 (non-complement alignment):\n\n                  0             ry lr\n            ref   |-->-->-->-+->-+--|\n                             | | |\n            read          |--+->-+->-->-->--|\n                          0     ay         la\n        ---\n"
					},
					{
						"line": 2240,
						"kind": "function",
						"char": 20,
						"name": "isGap",
						"deco": "xFNaNbNdZb",
						"protection": "public",
						"endchar": 5,
						"endline": 2245,
						"comment": "        Returns true iff the read alignment spans a gap, ie. two alignments of\n        the same read on different reference contigs are involved.\n"
					},
					{
						"line": 2252,
						"kind": "function",
						"char": 20,
						"name": "isParallel",
						"deco": "xFNaNbNdZb",
						"protection": "public",
						"endchar": 5,
						"endline": 2257,
						"comment": "        Returns true iff the read alignment spans a gap and the flanking\n        contigs have in the same orientation (according to this alignment).\n"
					},
					{
						"line": 2264,
						"kind": "function",
						"char": 20,
						"name": "isAntiParallel",
						"deco": "xFNaNbNdZb",
						"protection": "public",
						"endchar": 5,
						"endline": 2269,
						"comment": "        Returns true iff the read alignment spans a gap and the flanking\n        contigs have in different orientation (according to this alignment).\n"
					}
				],
				"name": "ReadAlignment",
				"protection": "public",
				"comment": "    Alignment of a read against the reference. This is either one or two\n    alignment chains which belong to the same read and one or two reference\n    contig(s).\n\n    It uses a static array of `SeededAlignment`s to store the alignments, thus\n    avoiding memory allocation.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "J"
					}
				],
				"line": 2627,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "ReadAlignment",
								"name": "readAlignment"
							}
						],
						"line": 2627,
						"kind": "function",
						"char": 3,
						"name": "makeJoin",
						"type": "J(ReadAlignment readAlignment)",
						"endchar": 1,
						"endline": 2669
					}
				],
				"name": "makeJoin",
				"protection": "public",
				"comment": "Generate basic join from read alignment.\n"
			},
			{
				"line": 2674,
				"kind": "alias",
				"char": 1,
				"name": "PileUp",
				"deco": "AS7dentist6common10alignments4base13ReadAlignment",
				"protection": "public",
				"comment": "A pile of read alignments belonging to the same gap/contig ends. These\nare the candidates for gap closing.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAS7dentist6common10alignments4base13ReadAlignment",
						"storageClass": [
							"in"
						],
						"name": "pileUp"
					}
				],
				"line": 2681,
				"kind": "function",
				"originalType": "pure nothrow ReadAlignmentType(in PileUp pileUp)",
				"char": 19,
				"name": "getType",
				"deco": "FNaNbIAS7dentist6common10alignments4base13ReadAlignmentZEQBxQBsQBoQBf17ReadAlignmentType",
				"protection": "public",
				"endchar": 1,
				"endline": 2696,
				"comment": "    Get the type of the read alignment.\n\n    See_Also: `isFrontExtension`, `isBackExtension`, `isGap`\n"
			},
			{
				"parameters": [
					{
						"deco": "xAS7dentist6common10alignments4base13ReadAlignment",
						"storageClass": [
							"in"
						],
						"name": "pileUp"
					}
				],
				"line": 2701,
				"kind": "function",
				"originalType": "pure nothrow bool(in PileUp pileUp)",
				"char": 6,
				"name": "isValid",
				"deco": "FNaNbIAS7dentist6common10alignments4base13ReadAlignmentZb",
				"protection": "public",
				"endchar": 1,
				"endline": 2704,
				"comment": "Returns true iff the read alignment is valid, ie. it either `isExtension`\nor `isGap`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAS7dentist6common10alignments4base13ReadAlignment",
						"storageClass": [
							"in"
						],
						"name": "pileUp"
					}
				],
				"line": 2709,
				"kind": "function",
				"originalType": "pure nothrow bool(in PileUp pileUp)",
				"char": 6,
				"name": "isExtension",
				"deco": "FNaNbIAS7dentist6common10alignments4base13ReadAlignmentZb",
				"protection": "public",
				"endchar": 1,
				"endline": 2723,
				"comment": "Returns true if all alignments in `pileUp` are either\n`ReadAlignment.isFrontExtension` or `ReadAlignment.isBackExtension`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAS7dentist6common10alignments4base13ReadAlignment",
						"storageClass": [
							"in"
						],
						"name": "pileUp"
					}
				],
				"line": 2727,
				"kind": "function",
				"originalType": "pure nothrow bool(in PileUp pileUp)",
				"char": 6,
				"name": "isGap",
				"deco": "FNaNbIAS7dentist6common10alignments4base13ReadAlignmentZb",
				"protection": "public",
				"endchar": 1,
				"endline": 2730,
				"comment": "Returns true if all alignments in `pileUp` are `ReadAlignment.isGap`.\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xAS7dentist6common10alignments4base13ReadAlignment",
						"storageClass": [
							"in"
						],
						"name": "pileUp"
					}
				],
				"line": 2734,
				"kind": "function",
				"originalType": "pure nothrow (in PileUp pileUp)",
				"char": 6,
				"name": "isParallel",
				"deco": "FNaNbIAS7dentist6common10alignments4base13ReadAlignmentZb",
				"protection": "public",
				"endchar": 1,
				"endline": 2740,
				"comment": "Returns true if all alignments in `pileUp` are `ReadAlignment.isParallel`.\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xAS7dentist6common10alignments4base13ReadAlignment",
						"storageClass": [
							"in"
						],
						"name": "pileUp"
					}
				],
				"line": 2745,
				"kind": "function",
				"originalType": "pure nothrow (in PileUp pileUp)",
				"char": 6,
				"name": "isAntiParallel",
				"deco": "FNaNbIAS7dentist6common10alignments4base13ReadAlignmentZb",
				"protection": "public",
				"endchar": 1,
				"endline": 2751,
				"comment": "Returns true if all alignments in `pileUp` are\n`ReadAlignment.isAntiParallel`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAS7dentist6common10alignments4base13ReadAlignment",
						"storageClass": [
							"in"
						],
						"name": "pileUp"
					}
				],
				"line": 2757,
				"kind": "function",
				"originalType": "nothrow Contig[](in PileUp pileUp)",
				"char": 10,
				"name": "contigs",
				"deco": "FNbIAS7dentist6common10alignments4base13ReadAlignmentZASQByQBtQBpQBg6Contig",
				"protection": "public",
				"endchar": 1,
				"endline": 2776,
				"comment": "Efficiently determines the contig IDs involved in `pileUp`. This assumes\nthat there are one or two contigs involved. Consequently, an empty\n`pileUp` is not allowed.\n"
			},
			{
				"parameters": [
					{
						"deco": "AS7dentist6common10alignments4base13ReadAlignment",
						"name": "pileUp"
					}
				],
				"line": 2780,
				"kind": "function",
				"originalType": "pure nothrow AlignmentChain*[](PileUp pileUp)",
				"char": 19,
				"name": "getAlignmentRefs",
				"deco": "FNaNbAS7dentist6common10alignments4base13ReadAlignmentZAPSQBzQBuQBqQBh14AlignmentChain",
				"protection": "public",
				"endchar": 1,
				"endline": 2794,
				"comment": "Returns a list of pointers to all involved alignment chains.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L2797_C1)\n---\nauto pileUp = [\n    ReadAlignment(SeededAlignment(), SeededAlignment()), ReadAlignment(SeededAlignment())\n];\nauto allAlignmentChains = pileUp.getAlignmentRefs();\n\nassert(allAlignmentChains.length == 3);\nassert(pileUp[0][0].id == 0);\nassert(pileUp[0][1].id == 0);\nassert(pileUp[1][0].id == 0);\n\nallAlignmentChains[0].id = 1;\nallAlignmentChains[1].id = 2;\nallAlignmentChains[2].id = 3;\n\nassert(pileUp[0][0].id == 1);\nassert(pileUp[0][1].id == 2);\nassert(pileUp[1][0].id == 3);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L2797_C1)\n"
			},
			{
				"parameters": [
					{
						"deco": "xAS7dentist6common10alignments4base13ReadAlignment",
						"storageClass": [
							"in"
						],
						"name": "pileUp"
					}
				],
				"line": 2820,
				"kind": "function",
				"originalType": "Json(in PileUp pileUp)",
				"char": 6,
				"name": "pileUpToSimpleJson",
				"deco": "FIAS7dentist6common10alignments4base13ReadAlignmentZS4vibe4data4json4Json",
				"protection": "public",
				"endchar": 1,
				"endline": 2834,
				"comment": "Converts the pileup into a simple JSON object for diagnostic purposes.\n"
			}
		],
		"comment": "    Defines alignment central data structures `AlignmentChain` and\n    `FlatLocalAlignment` as well as derived types and helper functions.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.common.alignments.base"
	},
	{
		"kind": "module",
		"file": "source/dentist/common/alignments/chaining.d",
		"members": [
			{
				"line": 78,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 84,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "maxIndelBps",
						"deco": "k",
						"protection": "public",
						"offset": 0,
						"comment": "Maximum absolute distance between neighboring ends of local\nalignments.\n\nSee_also: `indel`\n"
					},
					{
						"line": 90,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "maxChainGapBps",
						"deco": "k",
						"protection": "public",
						"offset": 4,
						"comment": "Maximum postively truncated distance between neighboring ends of local\nalignments.\n\nSee_also: `gap`\n"
					},
					{
						"line": 96,
						"kind": "variable",
						"char": 12,
						"name": "maxRelativeOverlap",
						"deco": "d",
						"protection": "public",
						"offset": 8,
						"comment": "Maximum absolute distance between neighboring ends of local\nalignments.\n\nSee_also: `indel`\n"
					},
					{
						"line": 101,
						"kind": "variable",
						"char": 12,
						"name": "minRelativeScore",
						"deco": "d",
						"protection": "public",
						"offset": 16,
						"comment": "Minimum chain score as fraction of the best score.\n\nSee_also: `effectiveMinScore`, `chainScore`\n"
					},
					{
						"line": 106,
						"kind": "variable",
						"originalType": "arithmetic_t",
						"char": 18,
						"name": "minScore",
						"deco": "i",
						"protection": "public",
						"offset": 24,
						"comment": "Minimum chain score.\n\nSee_also: `effectiveMinScore`, `chainScore`\n"
					},
					{
						"parameters": [
							{
								"deco": "i",
								"name": "bestScore"
							}
						],
						"line": 111,
						"kind": "function",
						"originalType": "const pure @safe arithmetic_t(arithmetic_t bestScore)",
						"char": 18,
						"name": "effectiveMinScore",
						"deco": "xFNaNfiZi",
						"protection": "public",
						"endchar": 5,
						"endline": 117,
						"comment": "Returns the effective minimum score taking into account\n`minRelativeScore` relative to `bestScore` and `minScore`.\n"
					}
				],
				"name": "ChainingOptions",
				"protection": "public",
				"comment": "Options for that control the chaining algorithm.\n"
			},
			{
				"constraint": "isInputRange!R && is(ElementType!R == FlatLocalAlignment)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 122,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "R",
								"name": "inputAlignments"
							},
							{
								"type": "ChainingOptions",
								"storageClass": [
									"const"
								],
								"name": "options"
							}
						],
						"line": 122,
						"kind": "function",
						"char": 6,
						"name": "chainLocalAlignments",
						"type": "(R inputAlignments, const ChainingOptions options)",
						"endchar": 1,
						"endline": 149
					}
				],
				"name": "chainLocalAlignments",
				"protection": "public",
				"comment": "Chain local alignments contained in `inputAlignments`.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "a",
						"name": "seq"
					}
				],
				"line": 368,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "FlatLocalAlignment",
								"storageClass": [
									"const"
								],
								"name": "x"
							},
							{
								"type": "FlatLocalAlignment",
								"storageClass": [
									"const"
								],
								"name": "y"
							}
						],
						"line": 368,
						"kind": "function",
						"char": 14,
						"name": "gap",
						"type": "pure nothrow @safe arithmetic_t(const FlatLocalAlignment x, const FlatLocalAlignment y)",
						"endchar": 1,
						"endline": 371
					}
				],
				"name": "gap",
				"protection": "public",
				"comment": "Returns the size of the gap between `x` and `y` on contig `seq`. This is\nnegative if they overlap. `x` and `y` are expected to be `areChainable`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
						"name": "x"
					},
					{
						"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
						"name": "y"
					}
				],
				"line": 376,
				"kind": "function",
				"originalType": "pure nothrow @safe arithmetic_t(const FlatLocalAlignment x, const FlatLocalAlignment y)",
				"char": 14,
				"name": "maxAbsGap",
				"deco": "FNaNbNfxS7dentist6common10alignments4base18FlatLocalAlignmentxQCcZi",
				"protection": "public",
				"endchar": 1,
				"endline": 379,
				"comment": "Returns the maximum of the absolute gap sizes on contig A and B. `x` and\n`y` are expected to be `areChainable`.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "a",
						"name": "seq"
					}
				],
				"line": 384,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "FlatLocalAlignment",
								"storageClass": [
									"const"
								],
								"name": "x"
							},
							{
								"type": "FlatLocalAlignment",
								"storageClass": [
									"const"
								],
								"name": "y"
							}
						],
						"line": 384,
						"kind": "function",
						"char": 14,
						"name": "overlap",
						"type": "pure nothrow @safe arithmetic_t(const FlatLocalAlignment x, const FlatLocalAlignment y)",
						"endchar": 1,
						"endline": 387
					}
				],
				"name": "overlap",
				"protection": "public",
				"comment": "Returns the size of the overlap between `x` and `y` on contig `seq`,\ni.e. the number of overlapping bases if they overlap and 0 otherwise.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "a",
						"name": "seq"
					}
				],
				"line": 391,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "FlatLocalAlignment",
								"storageClass": [
									"const"
								],
								"name": "la"
							}
						],
						"line": 391,
						"kind": "function",
						"char": 14,
						"name": "length",
						"type": "pure nothrow @safe arithmetic_t(const FlatLocalAlignment la)",
						"endchar": 1,
						"endline": 394
					}
				],
				"name": "length",
				"protection": "public",
				"comment": "Returns the number of bases covered by `la` on contig `seq`.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "a",
						"name": "seq"
					}
				],
				"line": 397,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "FlatLocalAlignment",
								"storageClass": [
									"const"
								],
								"name": "x"
							},
							{
								"type": "FlatLocalAlignment",
								"storageClass": [
									"const"
								],
								"name": "y"
							}
						],
						"line": 397,
						"kind": "function",
						"char": 14,
						"name": "minLength",
						"type": "pure nothrow @safe arithmetic_t(const FlatLocalAlignment x, const FlatLocalAlignment y)",
						"endchar": 1,
						"endline": 400
					}
				],
				"name": "minLength",
				"protection": "public",
				"comment": "Returns the minimum of `length!'A'` and `length!'B'`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
						"name": "x"
					},
					{
						"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
						"name": "y"
					}
				],
				"line": 404,
				"kind": "function",
				"originalType": "pure nothrow @safe arithmetic_t(const FlatLocalAlignment x, const FlatLocalAlignment y)",
				"char": 14,
				"name": "indel",
				"deco": "FNaNbNfxS7dentist6common10alignments4base18FlatLocalAlignmentxQCcZi",
				"protection": "public",
				"endchar": 1,
				"endline": 407,
				"comment": "Returns the absolute difference between gap sizes on contig A and B.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
						"name": "x"
					},
					{
						"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
						"name": "y"
					}
				],
				"line": 411,
				"kind": "function",
				"originalType": "pure nothrow @safe bool(const FlatLocalAlignment x, const FlatLocalAlignment y)",
				"char": 6,
				"name": "sameIds",
				"deco": "FNaNbNfxS7dentist6common10alignments4base18FlatLocalAlignmentxQCcZb",
				"protection": "public",
				"endchar": 1,
				"endline": 418,
				"comment": "Returns true if `x` and `y` have the same contig A and B IDs.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
						"name": "lhs"
					},
					{
						"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
						"name": "rhs"
					}
				],
				"line": 422,
				"kind": "function",
				"originalType": "pure nothrow @safe int(const FlatLocalAlignment lhs, const FlatLocalAlignment rhs)",
				"char": 5,
				"name": "cmpIds",
				"deco": "FNaNbNfxS7dentist6common10alignments4base18FlatLocalAlignmentxQCcZi",
				"protection": "public",
				"endchar": 1,
				"endline": 429,
				"comment": "Compares `x` and `y` by contig A and B ID in this order.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
						"name": "x"
					},
					{
						"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
						"name": "y"
					},
					{
						"deco": "xS7dentist6common10alignments8chaining15ChainingOptions",
						"name": "options"
					}
				],
				"line": 434,
				"kind": "function",
				"originalType": "pure nothrow @safe bool(const FlatLocalAlignment x, const FlatLocalAlignment y, const ChainingOptions options)",
				"char": 6,
				"name": "areChainable",
				"deco": "FNaNbNfxS7dentist6common10alignments4base18FlatLocalAlignmentxQCcxSQCgQCbQBx8chaining15ChainingOptionsZb",
				"protection": "public",
				"endchar": 1,
				"endline": 451
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
						"storageClass": [
							"ref"
						],
						"name": "x"
					},
					{
						"deco": "xS7dentist6common10alignments8chaining15ChainingOptions",
						"name": "options"
					}
				],
				"line": 455,
				"kind": "function",
				"originalType": "pure nothrow @safe arithmetic_t(const ref FlatLocalAlignment x, const ChainingOptions options)",
				"char": 14,
				"name": "alignmentScore",
				"deco": "FNaNbNfKxS7dentist6common10alignments4base18FlatLocalAlignmentxSQCcQBxQBt8chaining15ChainingOptionsZi",
				"protection": "public",
				"endchar": 1,
				"endline": 461,
				"comment": "Return the mean `length` of `x` on contig A and B.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
						"storageClass": [
							"ref"
						],
						"name": "x"
					},
					{
						"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
						"storageClass": [
							"ref"
						],
						"name": "y"
					},
					{
						"deco": "xS7dentist6common10alignments8chaining15ChainingOptions",
						"name": "options"
					}
				],
				"line": 467,
				"kind": "function",
				"originalType": "pure nothrow @safe arithmetic_t(const ref FlatLocalAlignment x, const ref FlatLocalAlignment y, const ChainingOptions options)",
				"char": 14,
				"name": "chainScore",
				"deco": "FNaNbNfKxS7dentist6common10alignments4base18FlatLocalAlignmentKxQCdxSQChQCcQBy8chaining15ChainingOptionsZi",
				"protection": "public",
				"endchar": 1,
				"endline": 475,
				"comment": "Returns `indel(x, y) + maxAbsGap(x, y)/10 - alignmentScore(y)`.\n\nSee_also: `indel`, `maxAbsGap`, `alignmentScore`\n"
			}
		],
		"comment": "    Implementation of local alignment chaining. The main function is\n    `chainLocalAlignments`.\n\n    The chaining algorithm works by solving a shortest path problem\n    on a directed, node and edge weighted graph where each node is a local\n    alignment and a directed edge between to nodes exists if they\n    `areChainable`. The nodes give a bonus score relative to the amount of\n    sequence covered by the local alignment whereas the edges give a penalty\n    proportional to the \"gap\" between the two involved local alignments.\n\n    This graph problem is reduced to a classical edge-weight single source\n    shortest paths problem with one additional node `s` that is the source and\n    is connected to all other nodes in the graph. The edges from `s` to `x`\n    have a weight of `-alignmentScore(x)` and all other edges `(x, y)` have a\n    weight of `chainScore(x, y)` which include the `-alignmentScore(y)` term\n    that accounts for `y`'s node weight.\n\n    `ChainingOptions` provides fine-grained control over the graph's structure\n    by means of `ChainingOptions.maxIndelBps`, `ChainingOptions.maxChainGapBps`\n    and `ChainingOptions.maxRelativeOverlap`.\n\n    Selection of the final chains is controlled by `ChainingOptions.minScore`\n    and `ChainingOptions.minRelativeScore`. See command line options for\n    default values of these.\n\n    See_also: `chainLocalAlignments`, `ChainingOptions`, `areChainable`,\n        `alignmentScore`, `chainScore`\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.common.alignments.chaining"
	},
	{
		"kind": "module",
		"file": "source/dentist/common/alignments/package.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 13,
				"name": "dentist.common.alignments.base"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 14,
				"name": "dentist.common.alignments.chaining"
			}
		],
		"comment": "    Everything to handle local alignments and friends.\n\n    See_also: `dentist.common.alignments.base`,\n        `dentist.common.alignments.chaining`\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.common.alignments"
	},
	{
		"kind": "module",
		"file": "source/dentist/common/binio/common.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "S3std5stdio4File",
						"storageClass": [
							"ref"
						],
						"name": "file"
					}
				],
				"line": 54,
				"kind": "function",
				"char": 6,
				"name": "lockIfPossible",
				"deco": "FNbKS3std5stdio4FileZv",
				"protection": "public",
				"endchar": 1,
				"endline": 101,
				"comment": "Place a lock on `file` if the underlying file system supports it. This\nignores and logs errors encountered while trying to acquire the lock.\nFile locking may disabled entirely by setting the environment variable\n`SKIP_FILE_LOCKING=1`.\n\nEnvironment:\n$(UL\n$(LI `SKIP_FILE_LOCKING`: disable file locking by setting to `1`)\n)\n"
			},
			{
				"line": 105,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "nextInChain"
							}
						],
						"line": 107,
						"kind": "constructor",
						"originalType": "pure nothrow @nogc @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
						"char": 30,
						"name": "this",
						"deco": "FNaNbNiNfAyaQdmC6object9ThrowableZC7dentist6common5binioQn17BinaryIOException",
						"protection": "public",
						"endchar": 5,
						"endline": 111
					}
				],
				"name": "BinaryIOException",
				"protection": "public",
				"comment": "Thrown if an error occurs during binary I/O operations.\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 117,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"kind": "struct",
						"protection": "public",
						"char": 12,
						"line": 119,
						"name": "EOF"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 123,
						"kind": "template",
						"char": 31,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"line": 123,
								"kind": "function",
								"char": 31,
								"name": "beginPtr",
								"type": "pure nothrow @property ref size_t()",
								"endchar": 5,
								"endline": 126
							}
						],
						"name": "beginPtr",
						"comment": "Return the pointer to the begin of the `T`s array.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 129,
						"kind": "template",
						"char": 22,
						"members": [
							{
								"line": 129,
								"kind": "function",
								"char": 22,
								"name": "beginPtr",
								"type": "const pure nothrow @property size_t()",
								"endchar": 5,
								"endline": 132
							}
						],
						"name": "beginPtr",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 136,
						"kind": "template",
						"char": 31,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"line": 136,
								"kind": "function",
								"char": 31,
								"name": "endPtr",
								"type": "pure nothrow @property ref size_t()",
								"endchar": 5,
								"endline": 139
							}
						],
						"name": "endPtr",
						"comment": "Return the pointer to the end of the `T`s array.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 142,
						"kind": "template",
						"char": 22,
						"members": [
							{
								"line": 142,
								"kind": "function",
								"char": 22,
								"name": "endPtr",
								"type": "const pure nothrow @property size_t()",
								"endchar": 5,
								"endline": 145
							}
						],
						"name": "endPtr",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 149,
						"kind": "template",
						"char": 44,
						"members": [
							{
								"line": 149,
								"kind": "function",
								"char": 44,
								"name": "arrayStorage",
								"type": "const pure nothrow @property ArrayStorage!(StorageType!T)()",
								"endchar": 5,
								"endline": 152
							}
						],
						"name": "arrayStorage",
						"comment": "Return an `ArrayStorage` constructed from `beginPtr!T` and `endPtr!T`.\n"
					}
				],
				"name": "DbIndex",
				"protection": "public",
				"comment": "Provides array access to the fields defined by `fieldPtr!T`. The latter\nmethod must be implemented by the struct where this is mixed in.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 157,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "File",
								"name": "dbFile"
							},
							{
								"type": "size_t",
								"name": "ptr"
							}
						],
						"line": 157,
						"kind": "function",
						"char": 3,
						"name": "readRecordAt",
						"type": "T(File dbFile, size_t ptr)",
						"endchar": 1,
						"endline": 162
					}
				],
				"name": "readRecordAt",
				"protection": "public",
				"comment": "Read a single record of type `T` at offset `ptr` in `dbFile`.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 166,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "File",
								"name": "dbFile"
							}
						],
						"line": 166,
						"kind": "function",
						"char": 3,
						"name": "readRecord",
						"type": "T(File dbFile)",
						"endchar": 1,
						"endline": 169
					}
				],
				"name": "readRecord",
				"protection": "public",
				"comment": "Read a single record of type `T` at the current offset in `dbFile`.\n"
			},
			{
				"constraint": "isArray!T",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 177,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "File",
								"name": "dbFile"
							},
							{
								"type": "T",
								"name": "records"
							}
						],
						"line": 177,
						"kind": "function",
						"char": 3,
						"name": "readRecords",
						"type": "T(File dbFile, T records)",
						"endchar": 1,
						"endline": 202
					}
				],
				"name": "readRecords",
				"protection": "public",
				"comment": "Read an array of records at the current offset in `dbFile`.\n\nThrows:\n`BinaryIOException` if an `ErrnoException` occurs or the file ends\nbefore all records are read.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 208,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 208,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 211,
								"kind": "variable",
								"char": 10,
								"name": "elementSize",
								"init": "T.sizeof",
								"comment": "Number of bytes consumed by a single `T`.\n"
							},
							{
								"kind": "variable",
								"line": 213,
								"char": 12,
								"type": "size_t",
								"comment": "Base pointer to the first array element.\n",
								"name": "ptr"
							},
							{
								"kind": "variable",
								"line": 215,
								"char": 12,
								"type": "size_t",
								"comment": "Number of `T` items in this array.\n",
								"name": "length"
							},
							{
								"line": 219,
								"kind": "function",
								"char": 20,
								"name": "opIndex",
								"type": "const pure nothrow ArrayStorage!T()",
								"endchar": 5,
								"endline": 222,
								"comment": "Return a shallow copy if `this`.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "i"
									}
								],
								"line": 228,
								"kind": "function",
								"char": 12,
								"name": "opIndex",
								"type": "const pure nothrow size_t(size_t i)",
								"endchar": 5,
								"endline": 233,
								"comment": "Return the pointer to element `0 <= i <= length`. Contrary to regular\narrays, the element at `i == length` can be accessed. This is useful\nthe construct slices (see `opIndex(size_t[2])`).\n"
							},
							{
								"parameters": [
									{
										"type": "size_t[2]",
										"name": "slice"
									}
								],
								"line": 237,
								"kind": "function",
								"char": 20,
								"name": "opIndex",
								"type": "const pure nothrow ArrayStorage!T(size_t[2] slice)",
								"endchar": 5,
								"endline": 244,
								"comment": "Return a slice of this `ArrayStorage`. An empty slice is not allowed.\n"
							},
							{
								"constraint": "dim == 0",
								"parameters": [
									{
										"kind": "value",
										"type": "size_t",
										"name": "dim"
									}
								],
								"line": 246,
								"kind": "template",
								"char": 15,
								"members": [
									{
										"parameters": [
											{
												"type": "size_t",
												"name": "from"
											},
											{
												"type": "size_t",
												"name": "to"
											}
										],
										"line": 246,
										"kind": "function",
										"char": 15,
										"name": "opSlice",
										"type": "const pure nothrow size_t[2](size_t from, size_t to)",
										"endchar": 5,
										"endline": 252
									}
								],
								"name": "opSlice"
							},
							{
								"line": 256,
								"kind": "function",
								"char": 12,
								"name": "opDollar",
								"type": "const pure nothrow size_t()",
								"endchar": 5,
								"endline": 259,
								"comment": "Returns `length`.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "ptr"
									}
								],
								"line": 265,
								"kind": "function",
								"char": 10,
								"name": "indexOf",
								"type": "const pure long(size_t ptr)",
								"endchar": 5,
								"endline": 270,
								"comment": "Computes the index corresponding to `ptr` relative to this array.\nThe result may be out of bounds. `ptr` must have a valid alignment\nrelative to `this.ptr`.\n"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "size_t",
										"name": "fromPtr"
									},
									{
										"type": "size_t",
										"name": "toPtr"
									}
								],
								"line": 275,
								"kind": "function",
								"char": 27,
								"name": "fromPtrs",
								"type": "ArrayStorage!T(size_t fromPtr, size_t toPtr)",
								"endchar": 5,
								"endline": 280,
								"comment": "Construct an `ArrayStorage` from given pointers. The pointers must\nbe properly aligned.\n"
							}
						],
						"name": "ArrayStorage",
						"protection": "public"
					}
				],
				"name": "ArrayStorage",
				"protection": "public",
				"comment": "An array-like structure of pointers that is used to access the data in a\nbinary file. In this context, pointers are expected to be offsets in the\nbinary file.\n"
			},
			{
				"line": 325,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 327,
						"kind": "enum member",
						"char": 5,
						"name": "a",
						"protection": "public",
						"value": "cast(ubyte)0u"
					},
					{
						"line": 328,
						"kind": "enum member",
						"char": 5,
						"name": "c",
						"protection": "public",
						"value": "cast(ubyte)1u"
					},
					{
						"line": 329,
						"kind": "enum member",
						"char": 5,
						"name": "t",
						"protection": "public",
						"value": "cast(ubyte)2u"
					},
					{
						"line": 330,
						"kind": "enum member",
						"char": 5,
						"name": "g",
						"protection": "public",
						"value": "cast(ubyte)3u"
					}
				],
				"name": "CompressedBase",
				"protection": "public",
				"baseDeco": "h",
				"comment": "2-bit encoding of bases `a`, `c`, `t`, `g`.\n"
			},
			{
				"line": 335,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 348,
						"kind": "variable",
						"char": 10,
						"name": "length",
						"deco": "i",
						"init": "4",
						"protection": "public",
						"file": "source/dentist/common/binio/common.d",
						"comment": "Number of bases â always four.\n"
					},
					{
						"line": 351,
						"kind": "alias",
						"originalType": "length",
						"char": 5,
						"name": "opDollar",
						"protection": "public",
						"comment": "ditto\n"
					},
					{
						"line": 357,
						"kind": "function",
						"char": 22,
						"name": "opIndex",
						"deco": "xFNaNbZAE7dentist6common5binioQn14CompressedBase",
						"protection": "public",
						"endchar": 5,
						"endline": 360,
						"comment": "Construct a dynamic array of the bases. This requires memory\nallocation and takes up the size of the array struct and additional\nfour bytes â one per base.\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "i"
							}
						],
						"line": 364,
						"kind": "function",
						"originalType": "const pure nothrow CompressedBase(size_t i)",
						"char": 20,
						"name": "opIndex",
						"deco": "xFNaNbmZE7dentist6common5binioQn14CompressedBase",
						"protection": "public",
						"endchar": 5,
						"endline": 379,
						"comment": "Access base at `i`.\n"
					},
					{
						"parameters": [
							{
								"deco": "E7dentist6common5binioQn14CompressedBase",
								"name": "base"
							},
							{
								"deco": "m",
								"name": "i"
							}
						],
						"line": 382,
						"kind": "function",
						"originalType": "pure nothrow void(CompressedBase base, size_t i)",
						"char": 10,
						"name": "opIndexAssign",
						"deco": "FNaNbE7dentist6common5binioQn14CompressedBasemZv",
						"protection": "public",
						"endchar": 5,
						"endline": 401,
						"comment": "Set base at `i` to `base`.\n"
					}
				],
				"name": "CompressedBaseQuad",
				"protection": "public",
				"comment": "Four `CompressedBase`s packed into one byte. Provides array-like access\nto these four bases.\n"
			},
			{
				"line": 407,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"constraint": "isSomeString!S",
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"line": 425,
						"kind": "template",
						"char": 31,
						"members": [
							{
								"parameters": [
									{
										"type": "S",
										"name": "fastaString"
									}
								],
								"line": 425,
								"kind": "function",
								"char": 31,
								"name": "from",
								"type": "CompressedSequence(S fastaString)",
								"endchar": 5,
								"endline": 447
							}
						],
						"name": "from",
						"protection": "public",
						"comment": "Compress ASCII-encoded string of `acgt`s.\n\nThrows: `Exception` if `fastaString` contains characters other than\n`acgt`.\n"
					},
					{
						"line": 462,
						"kind": "function",
						"char": 43,
						"name": "data",
						"deco": "xFNaNbNdZxAS7dentist6common5binioQn18CompressedBaseQuad",
						"protection": "public",
						"endchar": 5,
						"endline": 465,
						"comment": "Access underlying buffer directly. This is intended for binary storage.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"deco": "E7dentist6common5binioQn14CompressedBase",
								"name": "T"
							},
							{
								"kind": "value",
								"deco": "E3std8typecons__T4FlagVAyaa7_72657665727365ZQBb",
								"defaultValue": "No.reverse",
								"name": "reverse"
							}
						],
						"line": 475,
						"kind": "template",
						"char": 20,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"line": 475,
								"kind": "function",
								"char": 20,
								"name": "bases",
								"type": "const pure nothrow @property ()",
								"endchar": 5,
								"endline": 491
							}
						],
						"name": "bases",
						"protection": "public",
						"comment": "Return a lazy range of the stored bases.\n\nBugs:\n$(UL\n$(LI this procedure requires many allocations because the\n`CompressedBaseQuad`s are turned into ranges with `a[]`.)\n)\n"
					},
					{
						"constraint": "isSomeChar!C",
						"parameters": [
							{
								"kind": "type",
								"name": "C"
							},
							{
								"kind": "value",
								"deco": "E3std8typecons__T4FlagVAyaa7_72657665727365ZQBb",
								"defaultValue": "No.reverse",
								"name": "reverse"
							}
						],
						"line": 515,
						"kind": "template",
						"char": 20,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"line": 515,
								"kind": "function",
								"char": 20,
								"name": "bases",
								"type": "const pure nothrow @property ()",
								"endchar": 5,
								"endline": 518
							}
						],
						"name": "bases",
						"protection": "public",
						"comment": "ditto\n"
					},
					{
						"constraint": "isSomeString!S",
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"line": 533,
						"kind": "template",
						"char": 7,
						"members": [
							{
								"line": 533,
								"kind": "function",
								"char": 7,
								"name": "to",
								"type": "const pure nothrow S()",
								"endchar": 5,
								"endline": 545
							}
						],
						"name": "to",
						"protection": "public",
						"comment": "Decompress sequence into an ASCII-encoded string.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L551_C5)\n---\nenum testSequence = \"atgccaactactttgaacgcgCCGCAAGGCACAGGTGCGCCT\";\nauto cs = CompressedSequence.from(testSequence);\n\nassert(cs.to!string == testSequence.toLower);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L551_C5)\n"
					},
					{
						"line": 548,
						"kind": "alias",
						"originalType": "to!string",
						"char": 5,
						"name": "toString",
						"protection": "public",
						"comment": "ditto\n"
					},
					{
						"line": 561,
						"kind": "function",
						"char": 21,
						"name": "baseOffset",
						"deco": "xFNaNbNdZh",
						"protection": "public",
						"endchar": 5,
						"endline": 564,
						"comment": "Internal property that is exposed for binary storage.\n"
					},
					{
						"line": 568,
						"kind": "function",
						"originalType": "const pure nothrow @property size_t()",
						"char": 22,
						"name": "length",
						"deco": "xFNaNbNdZm",
						"protection": "public",
						"endchar": 5,
						"endline": 571,
						"comment": "Returns the number of bases in sequence.\n"
					},
					{
						"line": 574,
						"kind": "alias",
						"originalType": "length",
						"char": 5,
						"name": "opDollar",
						"protection": "public",
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "fastaIdx"
							}
						],
						"line": 587,
						"kind": "function",
						"originalType": "const pure nothrow CompressedBase(size_t fastaIdx)",
						"char": 20,
						"name": "opIndex",
						"deco": "xFNaNbmZE7dentist6common5binioQn14CompressedBase",
						"protection": "public",
						"endchar": 5,
						"endline": 596,
						"comment": "Access base at index `fastaIdx`.\n"
					},
					{
						"parameters": [
							{
								"deco": "G2m",
								"name": "slice"
							}
						],
						"line": 624,
						"kind": "function",
						"originalType": "inout pure nothrow inout(CompressedSequence)(size_t[2] slice)",
						"char": 31,
						"name": "opIndex",
						"deco": "NgFNaNbG2mZNgS7dentist6common5binioQn18CompressedSequence",
						"protection": "public",
						"endchar": 5,
						"endline": 640,
						"comment": "Return a slice of this `CompressedSequence` in single base coordinates.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L643_C5)\n---\nenum testSequence = \"atgccaactactttgaacgcgCCGCAAGGCACAGGTGCGCCT\";\nauto cs = CompressedSequence.from(testSequence);\n\nassert(cs[1 .. $ - 2].to!string == testSequence[1 .. $ - 2].toLower);\nassert(cs[0 .. $].to!string == testSequence.toLower);\nassert(cs[0 .. $] == cs);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L643_C5)\n"
					},
					{
						"constraint": "dim == 0",
						"parameters": [
							{
								"kind": "value",
								"deco": "m",
								"name": "dim"
							}
						],
						"line": 654,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"storageClass": [
											"in"
										],
										"name": "start"
									},
									{
										"type": "size_t",
										"storageClass": [
											"in"
										],
										"name": "end"
									}
								],
								"line": 654,
								"kind": "function",
								"char": 15,
								"name": "opSlice",
								"type": "const pure nothrow size_t[2](in size_t start, in size_t end)",
								"endchar": 5,
								"endline": 657
							}
						],
						"name": "opSlice",
						"protection": "public"
					},
					{
						"line": 662,
						"kind": "function",
						"originalType": "const pure nothrow @property size_t()",
						"char": 22,
						"name": "compressedLength",
						"deco": "xFNaNbNdZm",
						"protection": "public",
						"endchar": 5,
						"endline": 665,
						"comment": "Number of bytes required to store the sequence. This does not include\nmeta data.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L685_C5)\n---\nenum testSequence = \"atgccaactactttgaacgcgCCGCAAGGCACAGGTGCGCCT\";\n\nassert(compressedLength(testSequence) == 11);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L685_C5)\n"
					},
					{
						"constraint": "isSomeString!S",
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"line": 677,
						"kind": "template",
						"char": 19,
						"members": [
							{
								"parameters": [
									{
										"type": "S",
										"storageClass": [
											"in"
										],
										"name": "fastaSequence"
									}
								],
								"line": 677,
								"kind": "function",
								"char": 19,
								"name": "compressedLength",
								"type": "size_t(in S fastaSequence)",
								"endchar": 5,
								"endline": 682
							}
						],
						"name": "compressedLength",
						"protection": "public",
						"comment": "ditto\n"
					},
					{
						"constraint": "isSomeString!S",
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"line": 695,
						"kind": "template",
						"char": 19,
						"members": [
							{
								"parameters": [
									{
										"type": "S",
										"storageClass": [
											"in"
										],
										"name": "fastaSequence"
									}
								],
								"line": 695,
								"kind": "function",
								"char": 19,
								"name": "canConvert",
								"type": "size_t(in S fastaSequence)",
								"endchar": 5,
								"endline": 698
							}
						],
						"name": "canConvert",
						"protection": "public",
						"comment": "Returns true if `fastaSequence` contains only characters `acgt`\nignoring casing.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L701_C5)\n---\nenum testSequence = \"atgccaactactttgaacgcgCCGCAAGGCACAGGTGCGCCT\";\nenum falseSequence = \"atgccaactactttgaNNNNNnnnnnAGGCACAGGTGCGCCT\";\n\nassert(canConvert(testSequence));\nassert(!canConvert(falseSequence));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L701_C5)\n"
					},
					{
						"constraint": "isSomeChar!C",
						"parameters": [
							{
								"kind": "type",
								"name": "C"
							}
						],
						"line": 716,
						"kind": "template",
						"char": 27,
						"members": [
							{
								"parameters": [
									{
										"type": "C",
										"storageClass": [
											"in"
										],
										"name": "fastaBase"
									}
								],
								"line": 716,
								"kind": "function",
								"char": 27,
								"name": "convert",
								"type": "CompressedBase(in C fastaBase)",
								"endchar": 5,
								"endline": 731
							}
						],
						"name": "convert",
						"protection": "public",
						"comment": "Convert a single ASCII-encoded `fastaBase` to `CompressedBase` and\nvice versa.\n\nThrows: `Exception` if not `canConvert(fastaBase)`\nSee_also: `canConvert`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L734_C5)\n---\nenum bases = \"actgACTG\";\n\nstatic foreach (i, base; bases)\n{\n    mixin(\"assert(convert(base) == CompressedBase.\" ~ base.toLower.to!char ~ \");\");\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L734_C5)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L761_C5)\n---\nenum bases = \"actgACTG\";\n\nstatic foreach (i, base; bases)\n{\n    mixin(\"assert(convert!dchar(CompressedBase.\" ~ base.toLower.to!char ~ \") == base.toLower);\");\n}\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L761_C5)\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "C"
							}
						],
						"line": 745,
						"kind": "template",
						"char": 14,
						"members": [
							{
								"parameters": [
									{
										"type": "CompressedBase",
										"storageClass": [
											"in"
										],
										"name": "compressedBase"
									}
								],
								"line": 745,
								"kind": "function",
								"char": 14,
								"name": "convert",
								"type": "C(in CompressedBase compressedBase)",
								"endchar": 5,
								"endline": 758
							}
						],
						"name": "convert",
						"protection": "public",
						"comment": "ditto\n"
					}
				],
				"name": "CompressedSequence",
				"protection": "public",
				"comment": "A string of bases encoded in `CompressedBaseQuad`s. The sequence may have\nany length â not just multiples of four.\n"
			}
		],
		"comment": "    Collection of common structure and functions for working with binary data.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.common.binio.common"
	},
	{
		"kind": "module",
		"file": "source/dentist/common/binio/insertiondb.d",
		"members": [
			{
				"line": 68,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "nextInChain"
							}
						],
						"line": 70,
						"kind": "constructor",
						"originalType": "pure nothrow @nogc @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
						"char": 30,
						"name": "this",
						"deco": "FNaNbNiNfAyaQdmC6object9ThrowableZC7dentist6common5binio11insertiondb20InsertionDbException",
						"protection": "public",
						"endchar": 5,
						"endline": 74
					}
				],
				"name": "InsertionDbException",
				"protection": "public",
				"comment": "Thrown if an error is encountered.\n"
			},
			{
				"line": 79,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"line": 101,
						"kind": "function",
						"originalType": "const pure nothrow @property ()",
						"char": 20,
						"name": "insertions",
						"deco": "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh11insertiondb16InsertionStorageZQCf",
						"protection": "public",
						"endchar": 5,
						"endline": 104,
						"comment": "Return the respective `ArrayStorage`s. This is used to report details\nof the DB in command `show-insertions`.\n\nSee_also: `dentist.commands.showInsertions`,\n`dentist.common.binio.common.ArrayStorage`\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 107,
						"kind": "function",
						"originalType": "const pure nothrow @property ()",
						"char": 20,
						"name": "compressedBaseQuads",
						"deco": "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBhQBr18CompressedBaseQuadZQBx",
						"protection": "public",
						"endchar": 5,
						"endline": 110,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 113,
						"kind": "function",
						"originalType": "const pure nothrow @property ()",
						"char": 20,
						"name": "overlaps",
						"deco": "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh11insertiondb22SeededAlignmentStorageZQCl",
						"protection": "public",
						"endchar": 5,
						"endline": 116,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 119,
						"kind": "function",
						"originalType": "const pure nothrow @property ()",
						"char": 20,
						"name": "localAlignments",
						"deco": "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh11insertiondb21LocalAlignmentStorageZQCk",
						"protection": "public",
						"endchar": 5,
						"endline": 122,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 125,
						"kind": "function",
						"originalType": "const pure nothrow @property ()",
						"char": 20,
						"name": "tracePoints",
						"deco": "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh11insertiondb17TracePointStorageZQCg",
						"protection": "public",
						"endchar": 5,
						"endline": 128,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 131,
						"kind": "function",
						"originalType": "const pure nothrow @property ()",
						"char": 20,
						"name": "readIds",
						"deco": "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTkZQr",
						"protection": "public",
						"endchar": 5,
						"endline": 134,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "xAya",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							}
						],
						"line": 141,
						"kind": "function",
						"char": 24,
						"name": "parse",
						"deco": "FIAyaZS7dentist6common5binio11insertiondb11InsertionDb",
						"protection": "public",
						"endchar": 5,
						"endline": 149,
						"comment": "Create an `InsertionDb` from `dbFile`. A lock is placed on `dbFile`\nif possible.\n\nSee_also: `dentist.common.binio.common.lockIfPossible`\n"
					},
					{
						"line": 153,
						"kind": "function",
						"char": 10,
						"name": "releaseDb",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 156,
						"comment": "Closes the underlying file.\n"
					},
					{
						"line": 160,
						"kind": "function",
						"originalType": "Insertion[]()",
						"char": 17,
						"name": "opIndex",
						"deco": "FZAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"protection": "public",
						"endchar": 5,
						"endline": 165,
						"comment": "Read the entire DB at once.\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "i"
							}
						],
						"line": 171,
						"kind": "function",
						"originalType": "Insertion(size_t i)",
						"char": 15,
						"name": "opIndex",
						"deco": "FmZS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"protection": "public",
						"endchar": 5,
						"endline": 181,
						"comment": "Read `Insertion` at index `i`.\n\nThrows: `InsertionDbException` if `i` is out of bounds.\n"
					},
					{
						"parameters": [
							{
								"deco": "G2m",
								"name": "slice"
							}
						],
						"line": 187,
						"kind": "function",
						"originalType": "Insertion[](size_t[2] slice)",
						"char": 17,
						"name": "opIndex",
						"deco": "FG2mZAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"protection": "public",
						"endchar": 5,
						"endline": 199,
						"comment": "Read a slice of `Insertion`s.\n\nThrows: `InsertionDbException` if `slice` is out of bounds.\n"
					},
					{
						"constraint": "dim == 0",
						"parameters": [
							{
								"kind": "value",
								"deco": "m",
								"name": "dim"
							}
						],
						"line": 201,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "from"
									},
									{
										"type": "size_t",
										"name": "to"
									}
								],
								"line": 201,
								"kind": "function",
								"char": 15,
								"name": "opSlice",
								"type": "size_t[2](size_t from, size_t to)",
								"endchar": 5,
								"endline": 207
							}
						],
						"name": "opSlice",
						"protection": "public"
					},
					{
						"line": 211,
						"kind": "function",
						"originalType": "@property size_t()",
						"char": 22,
						"name": "length",
						"deco": "FNdZm",
						"protection": "public",
						"endchar": 5,
						"endline": 216,
						"comment": "Return the number of insertions in this DB.\n"
					},
					{
						"line": 219,
						"kind": "alias",
						"originalType": "length",
						"char": 5,
						"name": "opDollar",
						"protection": "public",
						"comment": "ditto\n"
					},
					{
						"constraint": "isForwardRange!R && hasLength!R && is(ElementType!R : const(Insertion))",
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"line": 460,
						"kind": "template",
						"char": 17,
						"members": [
							{
								"parameters": [
									{
										"type": "string",
										"storageClass": [
											"in"
										],
										"name": "dbFile"
									},
									{
										"type": "R",
										"name": "insertions"
									}
								],
								"line": 460,
								"kind": "function",
								"char": 17,
								"name": "write",
								"type": "void(in string dbFile, R insertions)",
								"endchar": 5,
								"endline": 467
							}
						],
						"name": "write",
						"protection": "public",
						"comment": "Write `insertions` to binary `dbFile`. A lock is placed on the file\nif possible.\n\nSee_also: `dentist.common.binio.common.lockIfPossible`\n"
					},
					{
						"line": 79,
						"kind": "destructor",
						"char": 1,
						"name": "~this",
						"deco": "FNeZv",
						"protection": "public"
					},
					{
						"parameters": [
							{
								"deco": "S7dentist6common5binio11insertiondb11InsertionDb",
								"name": "p"
							}
						],
						"line": 79,
						"kind": "generated function",
						"originalType": "ref InsertionDb(InsertionDb p) return",
						"char": 1,
						"name": "opAssign",
						"deco": "FNcNjS7dentist6common5binio11insertiondb11InsertionDbZQBx",
						"protection": "public"
					}
				],
				"name": "InsertionDb",
				"protection": "public",
				"comment": "Structure to access insertions stored in a binary file.\n"
			}
		],
		"comment": "    This package contains methods to handle the proprietary binary data\n    container for `Insertion`s.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.common.binio.insertiondb"
	},
	{
		"kind": "module",
		"file": "source/dentist/common/binio/package.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 22,
				"name": "dentist.common.binio.common"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 23,
				"name": "dentist.common.binio.insertiondb"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 24,
				"name": "dentist.common.binio.pileupdb"
			}
		],
		"comment": "    This package contains methods to handle the proprietary binary data\n    containers used to store information between stages of the algorithm.\n    Currently, there are two containers:\n\n    $(UL\n        $(LI `dentist.common.binio.pileupdb` for pile ups,\n            i.e. candidate sets of reads for gap closing)\n        $(LI `dentist.common.binio.insertiondb` for insertions,\n            i.e. consensus sequence and splicing information generated\n            from pile ups)\n    )\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.common.binio"
	},
	{
		"kind": "module",
		"file": "source/dentist/common/binio/pileupdb.d",
		"members": [
			{
				"line": 49,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "nextInChain"
							}
						],
						"line": 51,
						"kind": "constructor",
						"originalType": "pure nothrow @nogc @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
						"char": 30,
						"name": "this",
						"deco": "FNaNbNiNfAyaQdmC6object9ThrowableZC7dentist6common5binio8pileupdb17PileUpDbException",
						"protection": "public",
						"endchar": 5,
						"endline": 55
					}
				],
				"name": "PileUpDbException",
				"protection": "public",
				"comment": "Thrown if an error is encountered.\n"
			},
			{
				"line": 60,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"line": 82,
						"kind": "function",
						"originalType": "const pure nothrow @property ()",
						"char": 20,
						"name": "pileUps",
						"deco": "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBhQBr__TQBfTSQCkQCfQCbQCl__TQBzTSQDeQCzQCv8pileupdb22SeededAlignmentStorageZQDvZQDzZQEd",
						"protection": "public",
						"endchar": 5,
						"endline": 85,
						"comment": "Return the respective `ArrayStorage`s. This is used to report details\nof the DB in command `show-pile-ups`.\n\nSee_also: `dentist.commands.showPileUps`,\n`dentist.common.binio.common.ArrayStorage`\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 89,
						"kind": "function",
						"originalType": "const pure nothrow @property ()",
						"char": 20,
						"name": "readAlignments",
						"deco": "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBhQBr__TQBfTSQCkQCfQCb8pileupdb22SeededAlignmentStorageZQDbZQDf",
						"protection": "public",
						"endchar": 5,
						"endline": 92,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 96,
						"kind": "function",
						"originalType": "const pure nothrow @property ()",
						"char": 20,
						"name": "seededAlignments",
						"deco": "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh8pileupdb22SeededAlignmentStorageZQCh",
						"protection": "public",
						"endchar": 5,
						"endline": 99,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 103,
						"kind": "function",
						"originalType": "const pure nothrow @property ()",
						"char": 20,
						"name": "localAlignments",
						"deco": "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh8pileupdb21LocalAlignmentStorageZQCg",
						"protection": "public",
						"endchar": 5,
						"endline": 106,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 110,
						"kind": "function",
						"originalType": "const pure nothrow @property ()",
						"char": 20,
						"name": "tracePoints",
						"deco": "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh8pileupdb17TracePointStorageZQCc",
						"protection": "public",
						"endchar": 5,
						"endline": 113,
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "xAya",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							}
						],
						"line": 120,
						"kind": "function",
						"char": 21,
						"name": "parse",
						"deco": "FIAyaZS7dentist6common5binio8pileupdb8PileUpDb",
						"protection": "public",
						"endchar": 5,
						"endline": 129,
						"comment": "Create a `PileUpDb` from `dbFile`. A lock is placed on `dbFile`\nif possible.\n\nSee_also: `dentist.common.binio.common.lockIfPossible`\n"
					},
					{
						"line": 133,
						"kind": "function",
						"char": 10,
						"name": "releaseDb",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 136,
						"comment": "Closes the underlying file.\n"
					},
					{
						"line": 140,
						"kind": "function",
						"originalType": "PileUp[]()",
						"char": 14,
						"name": "opIndex",
						"deco": "FZAAS7dentist6common10alignments4base13ReadAlignment",
						"protection": "public",
						"endchar": 5,
						"endline": 145,
						"comment": "Read the entire DB at once.\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "i"
							}
						],
						"line": 151,
						"kind": "function",
						"originalType": "PileUp(size_t i)",
						"char": 12,
						"name": "opIndex",
						"deco": "FmZAS7dentist6common10alignments4base13ReadAlignment",
						"protection": "public",
						"endchar": 5,
						"endline": 161,
						"comment": "Read `PileUp` at index `i`.\n\nThrows: `InsertionDbException` if `i` is out of bounds.\n"
					},
					{
						"parameters": [
							{
								"deco": "G2m",
								"name": "slice"
							}
						],
						"line": 167,
						"kind": "function",
						"originalType": "PileUp[](size_t[2] slice)",
						"char": 14,
						"name": "opIndex",
						"deco": "FG2mZAAS7dentist6common10alignments4base13ReadAlignment",
						"protection": "public",
						"endchar": 5,
						"endline": 179,
						"comment": "Read a slice of `PileUp`s.\n\nThrows: `InsertionDbException` if `slice` is out of bounds.\n"
					},
					{
						"constraint": "dim == 0",
						"parameters": [
							{
								"kind": "value",
								"deco": "m",
								"name": "dim"
							}
						],
						"line": 182,
						"kind": "template",
						"char": 15,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "from"
									},
									{
										"type": "size_t",
										"name": "to"
									}
								],
								"line": 182,
								"kind": "function",
								"char": 15,
								"name": "opSlice",
								"type": "size_t[2](size_t from, size_t to)",
								"endchar": 5,
								"endline": 188
							}
						],
						"name": "opSlice",
						"protection": "public"
					},
					{
						"line": 192,
						"kind": "function",
						"originalType": "@property size_t()",
						"char": 22,
						"name": "length",
						"deco": "FNdZm",
						"protection": "public",
						"endchar": 5,
						"endline": 197,
						"comment": "Return the number of pile ups in this DB.\n"
					},
					{
						"line": 200,
						"kind": "alias",
						"originalType": "length",
						"char": 5,
						"name": "opDollar",
						"protection": "public",
						"comment": "ditto\n"
					},
					{
						"line": 60,
						"kind": "destructor",
						"char": 1,
						"name": "~this",
						"deco": "FNeZv",
						"protection": "public"
					},
					{
						"parameters": [
							{
								"deco": "S7dentist6common5binio8pileupdb8PileUpDb",
								"name": "p"
							}
						],
						"line": 60,
						"kind": "generated function",
						"originalType": "ref PileUpDb(PileUpDb p) return",
						"char": 1,
						"name": "opAssign",
						"deco": "FNcNjS7dentist6common5binio8pileupdb8PileUpDbZQBp",
						"protection": "public"
					}
				],
				"name": "PileUpDb",
				"protection": "public",
				"comment": "Structure to access pile ups stored in a binary file.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAAS7dentist6common10alignments4base13ReadAlignment",
						"storageClass": [
							"in"
						],
						"name": "pileUps"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					}
				],
				"line": 405,
				"kind": "function",
				"originalType": "void(in PileUp[] pileUps, in string dbFile)",
				"char": 6,
				"name": "writePileUpsDb",
				"deco": "FIAAS7dentist6common10alignments4base13ReadAlignmentIAyaZv",
				"protection": "public",
				"endchar": 1,
				"endline": 411,
				"comment": "Write `pileUps` to binary `dbFile`. A lock is placed on the file\nif possible.\n\nSee_also: `dentist.common.binio.common.lockIfPossible`\n"
			},
			{
				"parameters": [
					{
						"deco": "xAAS7dentist6common10alignments4base13ReadAlignment",
						"storageClass": [
							"in"
						],
						"name": "pileUps"
					},
					{
						"deco": "S3std5stdio4File",
						"name": "pileUpDb"
					}
				],
				"line": 414,
				"kind": "function",
				"originalType": "void(in PileUp[] pileUps, File pileUpDb)",
				"char": 6,
				"name": "writePileUpsDb",
				"deco": "FIAAS7dentist6common10alignments4base13ReadAlignmentS3std5stdio4FileZv",
				"protection": "public",
				"endchar": 1,
				"endline": 428,
				"comment": "ditto\n"
			}
		],
		"comment": "    This package contains methods to handle the proprietary binary data\n    container for `PileUp`s.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.common.binio.pileupdb"
	},
	{
		"kind": "module",
		"file": "source/dentist/common/commands.d",
		"members": [
			{
				"line": 20,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 20,
						"kind": "enum member",
						"char": 22,
						"name": "validateConfig",
						"protection": "public",
						"value": "0"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 37,
						"name": "buildPartialAssembly",
						"protection": "public",
						"value": "1"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 58,
						"name": "findClosableGaps",
						"protection": "public",
						"value": "2"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 75,
						"name": "generateDazzlerOptions",
						"protection": "public",
						"value": "3"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 98,
						"name": "maskRepetitiveRegions",
						"protection": "public",
						"value": "4"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 120,
						"name": "propagateMask",
						"protection": "public",
						"value": "5"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 134,
						"name": "filterMask",
						"protection": "public",
						"value": "6"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 145,
						"name": "mergeMasks",
						"protection": "public",
						"value": "7"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 156,
						"name": "showMask",
						"protection": "public",
						"value": "8"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 165,
						"name": "bed2mask",
						"protection": "public",
						"value": "9"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 174,
						"name": "chainLocalAlignments",
						"protection": "public",
						"value": "10"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 195,
						"name": "collectPileUps",
						"protection": "public",
						"value": "11"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 210,
						"name": "showPileUps",
						"protection": "public",
						"value": "12"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 222,
						"name": "processPileUps",
						"protection": "public",
						"value": "13"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 237,
						"name": "showInsertions",
						"protection": "public",
						"value": "14"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 252,
						"name": "mergeInsertions",
						"protection": "public",
						"value": "15"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 268,
						"name": "output",
						"protection": "public",
						"value": "16"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 275,
						"name": "translateCoords",
						"protection": "public",
						"value": "17"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 291,
						"name": "validateRegions",
						"protection": "public",
						"value": "18"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 307,
						"name": "checkResults",
						"protection": "public",
						"value": "19"
					},
					{
						"line": 20,
						"kind": "enum member",
						"char": 320,
						"name": "checkScaffolding",
						"protection": "public",
						"value": "20"
					}
				],
				"name": "DentistCommand",
				"protection": "public",
				"file": "source/dentist/common/commands.d-mixin-20",
				"baseDeco": "i"
			},
			{
				"line": 46,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"@disable"
						],
						"line": 48,
						"kind": "constructor",
						"originalType": "ref ()",
						"char": 14,
						"name": "this",
						"deco": "FNcZS7dentist6common8commands14TestingCommand",
						"protection": "public"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "command"
							}
						],
						"line": 50,
						"kind": "template",
						"char": 27,
						"members": [
							{
								"line": 50,
								"kind": "function",
								"char": 27,
								"name": "opDispatch",
								"type": "pure nothrow DentistCommand()",
								"endchar": 5,
								"endline": 56
							}
						],
						"name": "opDispatch",
						"protection": "public"
					}
				],
				"name": "TestingCommand",
				"protection": "public",
				"file": "source/dentist/common/commands.d",
				"comment": "Helper for sub-commands that are only available in testing version.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 61,
				"kind": "variable",
				"char": 6,
				"name": "dentistCommands",
				"deco": "BAyaQdQfQhQjQlQnQpQrQtQvQxQzQBbQBeQBhQBkQBnQBqQBtQBwZ",
				"init": "tuple(['v', 'a', 'l', 'i', 'd', 'a', 't', 'e', '-', 'c', 'o', 'n', 'f', 'i', 'g'], ['b', 'u', 'i', 'l', 'd', '-', 'p', 'a', 'r', 't', 'i', 'a', 'l', '-', 'a', 's', 's', 'e', 'm', 'b', 'l', 'y'], ['f', 'i', 'n', 'd', '-', 'c', 'l', 'o', 's', 'a', 'b', 'l', 'e', '-', 'g', 'a', 'p', 's'], ['g', 'e', 'n', 'e', 'r', 'a', 't', 'e', '-', 'd', 'a', 'z', 'z', 'l', 'e', 'r', '-', 'o', 'p', 't', 'i', 'o', 'n', 's'], ['m', 'a', 's', 'k', '-', 'r', 'e', 'p', 'e', 't', 'i', 't', 'i', 'v', 'e', '-', 'r', 'e', 'g', 'i', 'o', 'n', 's'], ['p', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'e', '-', 'm', 'a', 's', 'k'], ['f', 'i', 'l', 't', 'e', 'r', '-', 'm', 'a', 's', 'k'], ['m', 'e', 'r', 'g', 'e', '-', 'm', 'a', 's', 'k', 's'], ['s', 'h', 'o', 'w', '-', 'm', 'a', 's', 'k'], ['b', 'e', 'd', '2', 'm', 'a', 's', 'k'], ['c', 'h', 'a', 'i', 'n', '-', 'l', 'o', 'c', 'a', 'l', '-', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 's'], ['c', 'o', 'l', 'l', 'e', 'c', 't', '-', 'p', 'i', 'l', 'e', '-', 'u', 'p', 's'], ['s', 'h', 'o', 'w', '-', 'p', 'i', 'l', 'e', '-', 'u', 'p', 's'], ['p', 'r', 'o', 'c', 'e', 's', 's', '-', 'p', 'i', 'l', 'e', '-', 'u', 'p', 's'], ['s', 'h', 'o', 'w', '-', 'i', 'n', 's', 'e', 'r', 't', 'i', 'o', 'n', 's'], ['m', 'e', 'r', 'g', 'e', '-', 'i', 'n', 's', 'e', 'r', 't', 'i', 'o', 'n', 's'], ['o', 'u', 't', 'p', 'u', 't'], ['t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '-', 'c', 'o', 'o', 'r', 'd', 's'], ['v', 'a', 'l', 'i', 'd', 'a', 't', 'e', '-', 'r', 'e', 'g', 'i', 'o', 'n', 's'], ['c', 'h', 'e', 'c', 'k', '-', 'r', 'e', 's', 'u', 'l', 't', 's'], ['c', 'h', 'e', 'c', 'k', '-', 's', 'c', 'a', 'f', 'f', 'o', 'l', 'd', 'i', 'n', 'g'])",
				"protection": "public",
				"comment": "Tuple of dentist sub-command names.\n"
			}
		],
		"comment": "    Enums with sub-commands of dentist. This is mostly relevant if you are\n    trying to add a new command to DENTIST.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.common.commands"
	},
	{
		"kind": "module",
		"file": "source/dentist/common/configfile.d",
		"members": [
			{
				"storageClass": [
					"enum"
				],
				"line": 68,
				"kind": "variable",
				"char": 6,
				"name": "configDefaultKey",
				"deco": "Aya",
				"init": "\"__default__\"",
				"protection": "public",
				"comment": "Identifier for the config object with default values.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 71,
				"kind": "variable",
				"char": 6,
				"name": "configEmptyArgument",
				"deco": "Aya",
				"init": "\"-\"",
				"protection": "public",
				"comment": "Arguments with this value are assigned the config value.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 74,
				"kind": "variable",
				"char": 6,
				"name": "configCommentPrefix",
				"deco": "Aya",
				"init": "\"//\"",
				"protection": "public",
				"comment": "Keys prefixed with this string are ignored.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 77,
				"kind": "variable",
				"char": 6,
				"name": "maxConfigSize",
				"deco": "m",
				"init": "268435456LU",
				"protection": "public",
				"comment": "Maximum size of a valid config file.\n"
			},
			{
				"line": 81,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"kind": "mixin",
						"line": 84,
						"protection": "public",
						"char": 5,
						"comment": "\n",
						"name": "basicExceptionCtors!()"
					}
				],
				"name": "ConfigFileException",
				"protection": "public",
				"comment": "Thrown if an error while handling config file occurs.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Options"
					}
				],
				"line": 105,
				"kind": "template",
				"char": 9,
				"members": [
					{
						"parameters": [
							{
								"type": "Options",
								"storageClass": [
									"ref"
								],
								"name": "options"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "configFile"
							}
						],
						"line": 105,
						"kind": "function",
						"char": 9,
						"name": "retroInitFromConfig",
						"type": "Options(ref Options options, in string configFile)",
						"endchar": 1,
						"endline": 165
					}
				],
				"name": "retroInitFromConfig",
				"protection": "public",
				"comment": "Retroactively initialize `options` from `config`.\n\nNote: Since this function has no knowledge about the creation process of\n`options` it assumes that fields are not modified if they have their\ndefault value. This means that a CLI option providing the default\nvalue of that option does NOT overrule the config value. Here is a\nsmall example:\n---\n// config,yaml:\ncollectPileUps:\nmin-spanning-reads: 42\n\n// invocation\ndentist collect-pile-ups --config=config.yaml --min-spanning-reads=3 ...\n\n// --> effectivate value of --min-spanning-reads is 42\n---\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Options"
					}
				],
				"line": 169,
				"kind": "template",
				"char": 9,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "configFile"
							}
						],
						"line": 169,
						"kind": "function",
						"char": 9,
						"name": "parseConfig",
						"type": "Options(in string configFile)",
						"endchar": 1,
						"endline": 203
					}
				],
				"name": "parseConfig",
				"protection": "public",
				"comment": "Create `Options` from `configFile`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "configFile"
					}
				],
				"line": 226,
				"kind": "function",
				"char": 6,
				"name": "validateConfigFile",
				"deco": "FIAyaZv",
				"protection": "public",
				"endchar": 1,
				"endline": 231,
				"comment": "Validates the format and structure of `configFile`. These rules must be\nfulfilled:\n$(UL\n$(LI The document must contain a single object (dict type).)\n$(LI The root object may have a `__default__` key with an object as\nvalue.)\n$(LI Each key in the `__default__` object must be a valid option\n(secondary or short option names are allowed) or argument name\nfrom ANY DENTIST command. The value type must be convertible\nto the destination type.)\n$(LI The root object may have a key for each DENTIST command\n(hyphenated as used in the CLI) with an object as value.)\n$(LI Each key in the command objects must be a valid option\n(secondary or short option names are allowed) or argument name\nfrom the named DENTIST command. The value type must be convertible\nto the destination type.)\n$(LI Keys starting with two slashes (`//`) are ignored on all levels.)\n)\n\nThrows: `ConfigFileException` if config is invalid.\n"
			},
			{
				"parameters": [
					{
						"deco": "S4vibe4data4json4Json",
						"name": "configValues"
					}
				],
				"line": 234,
				"kind": "function",
				"char": 16,
				"name": "validateConfig",
				"deco": "FS4vibe4data4json4JsonZv",
				"protection": "protected",
				"endchar": 1,
				"endline": 261,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Options"
					}
				],
				"line": 328,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "Json",
								"name": "commandConfig"
							}
						],
						"line": 328,
						"kind": "function",
						"char": 6,
						"name": "validateConfigCommand",
						"type": "void(Json commandConfig)",
						"endchar": 1,
						"endline": 378
					}
				],
				"name": "validateConfigCommand",
				"protection": "public",
				"comment": "Validate config for `Options.commandName`.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "symbol"
					}
				],
				"line": 386,
				"kind": "template",
				"char": 11,
				"members": [
					{
						"kind": "alias",
						"type": "getUDAs!(symbol, Option)",
						"char": 5,
						"line": 388,
						"name": "optUDAs"
					},
					{
						"kind": "alias",
						"type": "getUDAs!(symbol, Argument)",
						"char": 5,
						"line": 389,
						"name": "argUDAs"
					},
					{
						"storageClass": [
							"enum"
						],
						"line": 392,
						"kind": "variable",
						"char": 14,
						"name": "argName",
						"init": "argUDAs[0].name.split(\":\")[__dollar - 1][0..__dollar - 1]"
					},
					{
						"storageClass": [
							"enum"
						],
						"line": 396,
						"kind": "variable",
						"char": 14,
						"name": "configNamesOf",
						"init": "optUDAs[0].names ~ argName"
					}
				],
				"name": "configNamesOf",
				"protection": "protected",
				"comment": "Get an array of names that can be used in a config file to reference\n`symbol`. If symbol is an argument it will split the argument name by\ncolon (`:`) and return the last part stripped off its last character\n(which should be a `>`). If symbol is an option it will return the list\nof names that were provided. Otherwise, an empty array is returned.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "member"
					},
					{
						"kind": "type",
						"name": "Options"
					}
				],
				"line": 431,
				"kind": "template",
				"char": 16,
				"members": [
					{
						"parameters": [
							{
								"type": "Options",
								"storageClass": [
									"ref"
								],
								"name": "options"
							},
							{
								"type": "Json",
								"name": "configValue"
							}
						],
						"line": 431,
						"kind": "function",
						"char": 16,
						"name": "assignConfigValue",
						"type": "void(ref Options options, Json configValue)",
						"endchar": 1,
						"endline": 468
					}
				],
				"name": "assignConfigValue",
				"protection": "protected",
				"comment": "Convert and assign `configValue` to `member` in `options`.\n\nConversion rules:\n$(UL\n$(LI if `member` has a zero-argument function: $(UL\n$(LI call `member` `configValue` times if `configValue` is an integer)\n$(LI call `member` once if `configValue` is `true`)\n$(LI do not call `member` if `configValue` is `false`)\n))\n$(LI if `member` has a single-argument function: $(UL\n$(LI call `member` with each value of `configValue` if\n`configValue` is a string array)\n$(LI call `member` with `configValue` if `configValue` is a string)\n))\n$(LI if `member` can be assigned to `configValue` will be converted\nto `member`'s type using `getConfigValue`)\n$(LI if none of the above applies a `ConfigFileException` will be thrown)\n)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "SymbolType"
					}
				],
				"line": 487,
				"kind": "template",
				"char": 16,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "Json",
								"name": "configValue"
							}
						],
						"line": 487,
						"kind": "function",
						"char": 16,
						"name": "getConfigValue",
						"type": "(Json configValue)",
						"endchar": 1,
						"endline": 540
					}
				],
				"name": "getConfigValue",
				"protection": "protected",
				"comment": "Convert `configValue` to `SymbolType`.\n\nConversion_Rules:\n\nThe rule (SymbolType â JsonType) is picked based on `SymbolType` and the\nprovided JSON type(s) are permitted.\n\n$(UL\n$(LI `OptionFlag`|`bool` â `bool`)\n$(LI `enum` â `string`)\n$(LI `float`|`double`|`real` â `int`|`float`)\n$(LI unsigned|signed integer â `int`)\n$(LI `string` â `string`)\n$(LI `T[]`|T[n] â `array`: apply above rules to each member;\nfor static arrays the lengths must match)\n)\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "configFileName"
					}
				],
				"line": 544,
				"kind": "function",
				"char": 16,
				"name": "parseConfigFile",
				"deco": "FIAyaZS4vibe4data4json4Json",
				"protection": "protected",
				"endchar": 1,
				"endline": 562,
				"comment": "Parse `configFileName` into a `JSON` struct.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "configFileName"
					}
				],
				"line": 567,
				"kind": "function",
				"char": 18,
				"name": "readConfigFile",
				"deco": "FIAyaZAya",
				"protection": "protected",
				"endchar": 1,
				"endline": 580,
				"comment": "Read `configFileName` into a string respecting a maximum file size of\n`maxConfigSize` bytes.\n"
			},
			{
				"parameters": [
					{
						"deco": "S5dyaml4node4Node",
						"name": "yaml"
					}
				],
				"line": 586,
				"kind": "function",
				"originalType": "Json(YAML yaml)",
				"char": 6,
				"name": "toJson",
				"deco": "FS5dyaml4node4NodeZS4vibe4data4json4Json",
				"protection": "public",
				"endchar": 1,
				"endline": 631,
				"comment": "Convert `yaml` into `Json` as good as possible. Since YAML is a strict\nsuperset of JSON it not always possible BUT every valid config file\ncan be converted.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L634_C1)\n---\nenum complexJson = `{\n\"int\": 42,\n\"float\": 3.1415,\n\"truth\": true,\n\"void\": null,\n\"answer\": \"The answer is 42.\",\n\"list\": [\"Apple\", \"Banana\", \"Coconut\", {\"weird\": \"thing\"}],\n}`;\n\nauto expected = ((json) => parseJson(json))(complexJson);\nauto yamlConverted = YAMLLoader.fromString(complexJson).load().toJson();\n\nassert(expected == yamlConverted);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L634_C1)\n"
			},
			{
				"line": 652,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 654,
						"kind": "enum member",
						"char": 5,
						"name": "B",
						"protection": "public",
						"value": "0"
					},
					{
						"line": 655,
						"kind": "enum member",
						"char": 5,
						"name": "KiB",
						"protection": "public",
						"value": "1"
					},
					{
						"line": 656,
						"kind": "enum member",
						"char": 5,
						"name": "MiB",
						"protection": "public",
						"value": "2"
					},
					{
						"line": 657,
						"kind": "enum member",
						"char": 5,
						"name": "GiB",
						"protection": "public",
						"value": "3"
					},
					{
						"line": 658,
						"kind": "enum member",
						"char": 5,
						"name": "TiB",
						"protection": "public",
						"value": "4"
					},
					{
						"line": 659,
						"kind": "enum member",
						"char": 5,
						"name": "PiB",
						"protection": "public",
						"value": "5"
					},
					{
						"line": 660,
						"kind": "enum member",
						"char": 5,
						"name": "EiB",
						"protection": "public",
						"value": "6"
					},
					{
						"line": 661,
						"kind": "enum member",
						"char": 5,
						"name": "ZiB",
						"protection": "public",
						"value": "7"
					},
					{
						"line": 662,
						"kind": "enum member",
						"char": 5,
						"name": "YiB",
						"protection": "public",
						"value": "8"
					}
				],
				"name": "SizeUnit",
				"protection": "public",
				"baseDeco": "i",
				"comment": "Set of size units for `toBytes` and `fromBytes`.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 667,
				"kind": "variable",
				"originalType": "size_t",
				"char": 13,
				"name": "sizeUnitBase",
				"deco": "m",
				"init": "1024LU",
				"protection": "public",
				"comment": "Base for size units.\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xm",
						"storageClass": [
							"in"
						],
						"name": "value"
					},
					{
						"deco": "xE7dentist6common10configfile8SizeUnit",
						"storageClass": [
							"in"
						],
						"name": "unit"
					}
				],
				"line": 671,
				"kind": "function",
				"originalType": "(in size_t value, in SizeUnit unit)",
				"char": 6,
				"name": "toBytes",
				"deco": "FNaNbNiNfImIE7dentist6common10configfile8SizeUnitZm",
				"protection": "public",
				"endchar": 1,
				"endline": 674,
				"comment": "Convert `value` with `unit` to bytes.\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xm",
						"storageClass": [
							"in"
						],
						"name": "bytes"
					}
				],
				"line": 678,
				"kind": "function",
				"originalType": "(in size_t bytes)",
				"char": 6,
				"name": "fromBytes",
				"deco": "FNaNbNiNfImZS3std8typecons__T5TupleTdVAyaa5_76616c7565TE7dentist6common10configfile8SizeUnitVQCda4_756e6974ZQDb",
				"protection": "public",
				"endchar": 1,
				"endline": 692,
				"comment": "Convert `bytes` to the smallest unit such that the value is between 0\nand 1.\n"
			}
		],
		"comment": "    Validate and parse config files.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.common.configfile"
	},
	{
		"kind": "module",
		"file": "source/dentist/common/external.d",
		"members": [
			{
				"line": 29,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 32,
						"kind": "variable",
						"char": 12,
						"name": "executable",
						"deco": "Aya",
						"protection": "public",
						"offset": 0,
						"comment": "Name of the executable, e.g. `LAsort`.\n"
					},
					{
						"line": 36,
						"kind": "variable",
						"char": 12,
						"name": "package_",
						"deco": "Aya",
						"protection": "public",
						"offset": 16,
						"comment": "Package name that is displayed to the user to aid installation of\nmissing dependencies, e.g. `DALIGNER`.\n"
					},
					{
						"line": 41,
						"kind": "variable",
						"char": 12,
						"name": "url",
						"deco": "Aya",
						"protection": "public",
						"offset": 32,
						"comment": "Package url/homepage that is displayed to the user to aid\ninstallation of missing dependencies, e.g.\n`https://github.com/thegenemyers/DALIGNER`.\n"
					},
					{
						"line": 45,
						"kind": "function",
						"char": 12,
						"name": "toString",
						"deco": "xFNaNbZAya",
						"protection": "public",
						"endchar": 5,
						"endline": 55,
						"comment": "Build a human-readable string that contains all available information.\n"
					}
				],
				"name": "ExternalDependency",
				"protection": "public",
				"comment": "Used as a decorator to mark external dependencies. External dependencies\nare executable that are expected to be on the `PATH`.\n\nThis decorator allows for automatic checks concerning these dependencies\nat start up of the program rather than waiting for an error during\nexecution.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 146,
				"kind": "variable",
				"char": 6,
				"name": "externalDependencies",
				"deco": "AS7dentist6common8external18ExternalDependency",
				"init": "[ExternalDependency(\"LAmerge\", \"DALIGNER\", \"https://github.com/thegenemyers/DALIGNER\"), ExternalDependency(\"daligner\", \"DALIGNER\", \"https://github.com/thegenemyers/DALIGNER\"), ExternalDependency(\"damapper\", \"DAMAPPER\", \"https://github.com/thegenemyers/DAMAPPER\"), ExternalDependency(\"DAScover\", \"DASCRUBBER\", \"https://github.com/thegenemyers/DASCRUBBER\"), ExternalDependency(\"DASqv\", \"DASCRUBBER\", \"https://github.com/thegenemyers/DASCRUBBER\"), ExternalDependency(\"DBdump\", \"DAZZ_DB\", \"https://github.com/thegenemyers/DAZZ_DB\"), ExternalDependency(\"DBdust\", \"DAZZ_DB\", \"https://github.com/thegenemyers/DAZZ_DB\"), ExternalDependency(\"DBrm\", \"DAZZ_DB\", \"https://github.com/thegenemyers/DAZZ_DB\"), ExternalDependency(\"DBshow\", \"DAZZ_DB\", \"https://github.com/thegenemyers/DAZZ_DB\"), ExternalDependency(\"DBsplit\", \"DAZZ_DB\", \"https://github.com/thegenemyers/DAZZ_DB\"), ExternalDependency(\"fasta2DAM\", \"DAZZ_DB\", \"https://github.com/thegenemyers/DAZZ_DB\"), ExternalDependency(\"fasta2DB\", \"DAZZ_DB\", \"https://github.com/thegenemyers/DAZZ_DB\"), ExternalDependency(\"stretcher\", \"EMBOSS >=6.0.0\", \"http://emboss.sourceforge.net/apps/\"), ExternalDependency(\"computeintrinsicqv\", \"daccord\", \"https://gitlab.com/german.tischler/daccord\"), ExternalDependency(\"daccord\", \"daccord\", \"https://gitlab.com/german.tischler/daccord\")]",
				"protection": "public",
				"comment": "All external dependencies in DENTIST. Note that the actual list depends\non the build config (`testing` or not). You can get a valid list by\ncalling `dentist -d`.\n\nSee_also: `ExternalDependency`\n"
			}
		],
		"comment": "    This package holds function for easy verification of external tools'\n    existence.\n\n    See_also: `ExternalDependency`, `externalDependencies`\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.common.external"
	},
	{
		"kind": "module",
		"file": "source/dentist/common/insertions.d",
		"members": [
			{
				"line": 47,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 51,
						"kind": "variable",
						"char": 24,
						"name": "sequence",
						"deco": "S7dentist6common5binioQn18CompressedSequence",
						"protection": "public",
						"offset": 0,
						"comment": "(insertions only) Consensus sequence that overlaps with the\nneighboring contigs.\n"
					},
					{
						"line": 54,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "contigLength",
						"deco": "m",
						"protection": "public",
						"offset": 32,
						"comment": "(contigs and gaps only): the length of the object in bases.\n"
					},
					{
						"line": 63,
						"kind": "variable",
						"char": 23,
						"name": "overlaps",
						"deco": "AS7dentist6common10alignments4base15SeededAlignment",
						"protection": "public",
						"offset": 40,
						"comment": "(insertions and contigs only): Overlaps of the sequence with the\nneighboring contigs. This is used to decide on the quality and exact\nsplicing information in the `output` step.\n\nFor contigs, the overlaps are transferred from incident insertions\nafter the final scaffold graph has been constructed (see\n`dentist.commands.output.fixCropping`).\n"
					},
					{
						"line": 66,
						"kind": "variable",
						"originalType": "id_t[]",
						"char": 12,
						"name": "readIds",
						"deco": "Ak",
						"protection": "public",
						"offset": 56,
						"comment": "(insertions only) Read IDs involved in creation of the consensus.\n"
					}
				],
				"name": "InsertionInfo",
				"protection": "public",
				"comment": "This describes an insertion, existing contig or gap.\n\nSee_also: `Insertion`\n"
			},
			{
				"line": 72,
				"kind": "alias",
				"originalType": "Scaffold!InsertionInfo",
				"char": 1,
				"name": "OutputScaffold",
				"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa",
				"protection": "public",
				"comment": "This is used to collect all sub-sequences (contigs, gaps, insertions)\nof the output.\n"
			},
			{
				"line": 80,
				"kind": "alias",
				"originalType": "OutputScaffold.Edge",
				"char": 1,
				"name": "Insertion",
				"deco": "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
				"protection": "public",
				"comment": "This represents a contig, gap or insertion edge with `InsertionInfo`\npayload.\n\nSee_also: `isValidInsertion`, `isDefault`, `isOutputGap`, `isGap`,\n`isExtension`, `hasSequence`\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"storageClass": [
							"in"
						],
						"name": "insertion"
					}
				],
				"line": 84,
				"kind": "function",
				"originalType": "bool(in Insertion insertion)",
				"char": 6,
				"name": "isOutputGap",
				"deco": "FIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZb",
				"protection": "public",
				"endchar": 1,
				"endline": 87,
				"comment": "Returns true iff a sequence of `n`s should be written.\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"storageClass": [
							"in"
						],
						"name": "insertion"
					}
				],
				"line": 92,
				"kind": "function",
				"originalType": "bool(in Insertion insertion)",
				"char": 6,
				"name": "isValidInsertion",
				"deco": "FIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZb",
				"protection": "public",
				"endchar": 1,
				"endline": 99,
				"comment": "Returns true iff insertion describes a contig (`isDefault`), gap\n(`isOutputGap`) or insertion (`isGap`, `isExtension`, `hasSequence`).\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"storageClass": [
							"in"
						],
						"name": "insertion"
					}
				],
				"line": 103,
				"kind": "function",
				"originalType": "bool(in Insertion insertion)",
				"char": 6,
				"name": "hasSequence",
				"deco": "FIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZb",
				"protection": "public",
				"endchar": 1,
				"endline": 106,
				"comment": "Returns true if insertion has a non-empty sequence attached.\n"
			},
			{
				"constraint": "contig == \"contigA\"",
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "contig"
					}
				],
				"line": 110,
				"kind": "template",
				"char": 9,
				"members": [
					{
						"parameters": [
							{
								"type": "SeededAlignment",
								"storageClass": [
									"in"
								],
								"name": "overlap"
							}
						],
						"line": 110,
						"kind": "function",
						"char": 9,
						"name": "getCroppingPosition",
						"type": "coord_t(in SeededAlignment overlap)",
						"endchar": 1,
						"endline": 119
					}
				],
				"name": "getCroppingPosition",
				"protection": "public",
				"comment": "Return the cropping position on `contig` according to `overlap`.\n"
			},
			{
				"constraint": "contig == \"contigB\"",
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "contig"
					}
				],
				"line": 122,
				"kind": "template",
				"char": 9,
				"members": [
					{
						"parameters": [
							{
								"type": "SeededAlignment",
								"storageClass": [
									"in"
								],
								"name": "overlap"
							}
						],
						"line": 122,
						"kind": "function",
						"char": 9,
						"name": "getCroppingPosition",
						"type": "coord_t(in SeededAlignment overlap)",
						"endchar": 1,
						"endline": 140
					}
				],
				"name": "getCroppingPosition",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
						"storageClass": [
							"in"
						],
						"name": "begin"
					},
					{
						"deco": "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"storageClass": [
							"in"
						],
						"name": "insertion"
					},
					{
						"deco": "xb",
						"storageClass": [
							"in"
						],
						"name": "globalComplement"
					}
				],
				"line": 153,
				"kind": "function",
				"originalType": "(in ContigNode begin, in Insertion insertion, in bool globalComplement)",
				"char": 6,
				"name": "getInfoForExistingContig",
				"deco": "FNaNfIS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuISQCs4util4math__T5GraphTSQFnQFm__TQFgTmVQFda8_636f6e7469674964TQFdVQGea10_636f6e74696750617274ZQHpTvVEQImQIl__T4FlagVQIca10_69734469726563746564ZQBii0TSQInQIi10insertions13InsertionInfoZQGn4EdgeIbZSQMeQMd__TQLxTkVQLua8_636f6e7469674964TxmVQMua12_636f6e7469674c656e677468TSQNdQKl6region__T6RegionTmTmVQPda8_636f6e7469674964Vmi0ZQBn14TaggedIntervalVQQya8_63726f7070696e67TmVQRxa6_6c656e677468TxbVQSta10_636f6d706c656d656e74ZQUe",
				"protection": "public",
				"endchar": 1,
				"endline": 219,
				"comment": "Returns information required when building the assembly.\n\nThe parameters must have a type that matches the function name, e.g.\n`isDefault(insertion)` must be true for `getInfoForExistingContig`.\n\nParams:\nbegin            = start node of `insertion` is required because\n`insertion` is undirected\ninsertion        = undirected edge with `InsertionInfo` payload\nglobalComplement = current complement status in the assembly process\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"storageClass": [
							"in"
						],
						"name": "insertion"
					}
				],
				"line": 222,
				"kind": "function",
				"originalType": "(in Insertion insertion)",
				"char": 6,
				"name": "getInfoForGap",
				"deco": "FNaNbNiNfIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZSQIcQIb__TQHvTxmVQHta6_6c656e677468ZQIv",
				"protection": "public",
				"endchar": 1,
				"endline": 225,
				"comment": "ditto\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
						"storageClass": [
							"in"
						],
						"name": "begin"
					},
					{
						"deco": "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
						"storageClass": [
							"in"
						],
						"name": "insertion"
					},
					{
						"deco": "xb",
						"storageClass": [
							"in"
						],
						"name": "globalComplement"
					}
				],
				"line": 228,
				"kind": "function",
				"originalType": "(in ContigNode begin, in Insertion insertion, in bool globalComplement)",
				"char": 6,
				"name": "getInfoForNewSequenceInsertion",
				"deco": "FNaNbIS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuISQCs4util4math__T5GraphTSQFnQFm__TQFgTmVQFda8_636f6e7469674964TQFdVQGea10_636f6e74696750617274ZQHpTvVEQImQIl__T4FlagVQIca10_69734469726563746564ZQBii0TSQInQIi10insertions13InsertionInfoZQGn4EdgeIbZSQMeQMd__TQLxTxSQKwQKr5binioQLa18CompressedSequenceVQNea8_73657175656e6365TSQNeQKm6region__T6RegionTmTmVQPea6_726561644964Vmi0ZQBj14TaggedIntervalVQQva8_63726f7070696e67TmVQRua6_6c656e677468TbVQSpa10_636f6d706c656d656e74ZQUa",
				"protection": "public",
				"endchar": 1,
				"endline": 284,
				"comment": "ditto\n"
			}
		],
		"comment": "    Everything to handle insertions. `Insertion`s are generated by DENTIST\n    command `process-pile-ups`. They are essentially a consensus sequence\n    alongside alignment that allow precise splicing into the assembly. In\n    addition, the IDs of the reads involved in the consensus are included.\n\n    See_also: `dentist.commands.processPileUps`\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.common.insertions"
	},
	{
		"kind": "module",
		"file": "source/dentist/common/package.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 29,
				"name": "dentist.common.alignments"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 30,
				"name": "dentist.common.binio"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 31,
				"name": "dentist.common.scaffold"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 36,
				"kind": "variable",
				"char": 10,
				"name": "isTesting",
				"deco": "b",
				"init": "true",
				"protection": "public",
				"comment": "True iff building with testing commands.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "value"
					}
				],
				"line": 43,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 46,
						"kind": "variable",
						"char": 14,
						"name": "testingOnly",
						"init": "value"
					}
				],
				"name": "testingOnly",
				"protection": "public",
				"comment": "Evaluate to `value` if building with testing command;\notherwise to `typeof(value).init`.\n"
			},
			{
				"line": 53,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"line": 57,
						"kind": "variable",
						"char": 10,
						"name": "payload",
						"deco": "S4vibe4data4json4Json",
						"align": 8,
						"protection": "public",
						"offset": 80,
						"comment": "Auxiliary data describing the circumstances under which the exception\noccurred.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"line": 69,
						"kind": "constructor",
						"originalType": "pure nothrow @nogc @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 5,
						"name": "this",
						"deco": "FNaNbNiNfAyaQdmC6object9ThrowableZC7dentist6common16DentistException",
						"protection": "public",
						"endchar": 5,
						"endline": 73,
						"comment": "        Construct a new `DentistException`.\n\n        Params:\n            msg      = The message for the exception.\n            payload  = Additional information for the exception.\n            file     = The file where the exception occurred.\n            line     = The line number where the exception occurred.\n            next     = The previous exception in the chain of exceptions, if any.\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "C6object9Throwable",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							}
						],
						"line": 76,
						"kind": "constructor",
						"originalType": "pure nothrow @nogc @safe (string msg, Throwable next, string file = __FILE__, size_t line = __LINE__)",
						"char": 5,
						"name": "this",
						"deco": "FNaNbNiNfAyaC6object9ThrowableQvmZC7dentist6common16DentistException",
						"protection": "public",
						"endchar": 5,
						"endline": 80,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "S4vibe4data4json4Json",
								"name": "payload"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"line": 83,
						"kind": "constructor",
						"originalType": "pure nothrow @nogc @safe (string msg, Json payload, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 5,
						"name": "this",
						"deco": "FNaNbNiNfAyaS4vibe4data4json4JsonQymC6object9ThrowableZC7dentist6common16DentistException",
						"protection": "public",
						"endchar": 5,
						"endline": 88,
						"comment": "ditto\n"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "S4vibe4data4json4Json",
								"name": "payload"
							},
							{
								"deco": "C6object9Throwable",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							}
						],
						"line": 91,
						"kind": "constructor",
						"originalType": "pure nothrow @nogc @safe (string msg, Json payload, Throwable next, string file = __FILE__, size_t line = __LINE__)",
						"char": 5,
						"name": "this",
						"deco": "FNaNbNiNfAyaS4vibe4data4json4JsonC6object9ThrowableQBqmZC7dentist6common16DentistException",
						"protection": "public",
						"endchar": 5,
						"endline": 96,
						"comment": "ditto\n"
					}
				],
				"name": "DentistException",
				"protection": "public",
				"comment": "Thrown if some runtime error in the DENTIST algorithm occurs.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 114,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "value"
							},
							{
								"type": "string",
								"storageClass": [
									"lazy"
								],
								"name": "msg"
							},
							{
								"type": "Json",
								"storageClass": [
									"lazy"
								],
								"default": "Json()",
								"name": "payload"
							},
							{
								"type": "string",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"type": "size_t",
								"default": "__LINE__",
								"name": "line"
							}
						],
						"line": 114,
						"kind": "function",
						"char": 3,
						"name": "dentistEnforce",
						"type": "T(T value, lazy string msg, lazy Json payload = Json(), string file = __FILE__, size_t line = __LINE__)",
						"endchar": 1,
						"endline": 128
					}
				],
				"name": "dentistEnforce",
				"protection": "public",
				"comment": "    Enforces that the given value is true. If the given value is false, a\n    `DentistException` is thrown.\n\n    Params:\n        value    = Test value.\n        msg      = The message for the exception.\n        payload  = Additional information for the exception.\n        file     = The file where the exception occurred.\n        line     = The line number where the exception occurred.\n    See_also: `std.exception.enforce`\n    Returns:  `value`, if `cast(bool) value` is true. Otherwise,\n              `new DentistException(msg, payload)` is thrown.\n"
			},
			{
				"line": 146,
				"kind": "alias",
				"originalType": "Region!(size_t, size_t, \"contigId\")",
				"char": 1,
				"name": "ReferenceRegion",
				"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
				"protection": "public",
				"comment": "A region, interval or point of the reference/read.\n\nA point is a zero-based coordinate (property `value`) on the contig/read\nspecified by `contigId`/`readId`.\n\nAn interval is a pair of zero-based coordinates describing the right-open\ninterval `[begin, end)` on the contig/read specified by\n`contigId`/`readId`.\n\nA region is a collection of disjunctive intervals. When creating or\nexpanding a region the intervals are normalized, i.e. merged if they\noverlap. This is the internal representation of masks.\n\nSee_also: `dentist.util.region.Region`,\n`dentist.util.region.Region.TaggedInterval`,\n`dentist.util.region.Region.TaggedPoint`\n"
			},
			{
				"line": 148,
				"kind": "alias",
				"originalType": "ReferenceRegion.TaggedInterval",
				"char": 1,
				"name": "ReferenceInterval",
				"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"line": 150,
				"kind": "alias",
				"originalType": "ReferenceRegion.TaggedPoint",
				"char": 1,
				"name": "ReferencePoint",
				"deco": "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPoint",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"line": 152,
				"kind": "alias",
				"originalType": "Region!(size_t, size_t, \"readId\")",
				"char": 1,
				"name": "ReadRegion",
				"deco": "S7dentist4util6region__T6RegionTmTmVAyaa6_726561644964Vmi0ZQBj",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"line": 154,
				"kind": "alias",
				"originalType": "ReadRegion.TaggedInterval",
				"char": 1,
				"name": "ReadInterval",
				"deco": "S7dentist4util6region__T6RegionTmTmVAyaa6_726561644964Vmi0ZQBj14TaggedInterval",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"line": 156,
				"kind": "alias",
				"originalType": "ReadRegion.TaggedPoint",
				"char": 1,
				"name": "ReadPoint",
				"deco": "S7dentist4util6region__T6RegionTmTmVAyaa6_726561644964Vmi0ZQBj11TaggedPoint",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"line": 163,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 166,
						"kind": "enum",
						"char": 12,
						"members": [
							{
								"line": 169,
								"kind": "enum member",
								"char": 9,
								"name": "global",
								"protection": "public",
								"value": "cast(ubyte)0u",
								"comment": "Not implemented. Global base pair position counting all ACGTN's.\n"
							},
							{
								"line": 171,
								"kind": "enum member",
								"char": 9,
								"name": "contig",
								"protection": "public",
								"value": "1",
								"comment": "Not implemented. Position on a specific contig (only ACGT).\n"
							},
							{
								"line": 173,
								"kind": "enum member",
								"char": 9,
								"name": "scaffold",
								"protection": "public",
								"value": "2",
								"comment": "Position on specific contig counting all ACGTN's.\n"
							},
							{
								"line": 176,
								"kind": "enum member",
								"char": 9,
								"name": "scaffoldContig",
								"protection": "public",
								"value": "3",
								"comment": "Not implemented. Position on a specific contig of a specific\nscaffold (only ACGT).\n"
							}
						],
						"name": "OriginType",
						"protection": "public",
						"baseDeco": "h",
						"comment": "Type of the coordinate origin or reference system.\n"
					},
					{
						"line": 180,
						"kind": "variable",
						"originalType": "id_t",
						"char": 10,
						"name": "scaffoldId",
						"deco": "k",
						"protection": "public",
						"offset": 0,
						"comment": "One-based scaffold ID; a value of zero signifies absence.\n"
					},
					{
						"line": 182,
						"kind": "variable",
						"originalType": "id_t",
						"char": 10,
						"name": "contigId",
						"deco": "k",
						"protection": "public",
						"offset": 4,
						"comment": "One-based contig ID; a value of zero signifies absence.\n"
					},
					{
						"line": 184,
						"kind": "variable",
						"originalType": "coord_t",
						"char": 13,
						"name": "coord",
						"deco": "k",
						"protection": "public",
						"offset": 8,
						"comment": "One-based coordinate.\n"
					},
					{
						"line": 188,
						"kind": "function",
						"originalType": "const pure nothrow @property coord_t()",
						"char": 23,
						"name": "idx",
						"deco": "xFNaNbNdZk",
						"protection": "public",
						"endchar": 5,
						"endline": 191,
						"comment": "Zero-based coordinate.\n"
					},
					{
						"line": 195,
						"kind": "function",
						"char": 26,
						"name": "originType",
						"deco": "xFNaNbNdZE7dentist6common16OutputCoordinate10OriginType",
						"protection": "public",
						"endchar": 5,
						"endline": 205,
						"comment": "Return the origin type or reference system of this coordinate.\n"
					},
					{
						"line": 210,
						"kind": "function",
						"char": 12,
						"name": "toString",
						"deco": "xFZAya",
						"protection": "public",
						"endchar": 5,
						"endline": 223,
						"comment": "Encode this coordinate in a string with format\n`[scaffold/<scaff>/][contig/<contig>/]<coord>`.\n"
					}
				],
				"name": "OutputCoordinate",
				"protection": "public",
				"comment": "A point on the output assembly. This is used in the `translate-coords`\ncommand.\n\nSee_also: `dentist.commands.translateCoords`\n"
			},
			{
				"constraint": "__traits(isSame, TemplateOf!R, Region)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "\"contigA\"",
						"name": "contig"
					}
				],
				"line": 228,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "AlignmentChain",
								"storageClass": [
									"in"
								],
								"name": "alignmentChain"
							}
						],
						"line": 228,
						"kind": "function",
						"char": 3,
						"name": "to",
						"type": "pure R(in AlignmentChain alignmentChain)",
						"endchar": 1,
						"endline": 242
					}
				],
				"name": "to",
				"protection": "public",
				"comment": "Returns the alignment region of `alignmentChain`.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Interval"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "contig"
					}
				],
				"line": 259,
				"kind": "template",
				"char": 10,
				"members": [
					{
						"parameters": [
							{
								"type": "AlignmentChain",
								"storageClass": [
									"in"
								],
								"name": "alignment"
							}
						],
						"line": 259,
						"kind": "function",
						"char": 10,
						"name": "toInterval",
						"type": "Interval(in AlignmentChain alignment)",
						"endchar": 1,
						"endline": 288
					}
				],
				"name": "toInterval",
				"protection": "public",
				"comment": "    Get the interval that the alignment covers. This method does returns a\n    single interval from the first to the last matching base pair. It takes\n    complementary alignments into account when an interval on `contigB` is\n    requested\n\n    Params:\n        Interval  = interval type with (at least) three fields `contigId`,\n                   `begin` and `end`\n        contig    = either `\"contigA\"` or `\"contigB\"`\n        alignment = alignment chain\n\n    Returns: interval from the first to the last matching base pair.\n"
			}
		],
		"comment": "    This package holds common code for the DENTIST algorithm.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.common"
	},
	{
		"kind": "module",
		"file": "source/dentist/common/scaffold.d",
		"members": [
			{
				"line": 77,
				"kind": "enum",
				"char": 8,
				"members": [
					{
						"line": 81,
						"kind": "enum member",
						"char": 5,
						"name": "pre",
						"protection": "public",
						"value": "cast(ubyte)0u",
						"comment": "Designates a transcendent point *before* the contig where\nfront extensions end.\n"
					},
					{
						"line": 83,
						"kind": "enum member",
						"char": 5,
						"name": "begin",
						"protection": "public",
						"value": "1",
						"comment": "Designates the begin of the contig.\n"
					},
					{
						"line": 85,
						"kind": "enum member",
						"char": 5,
						"name": "end",
						"protection": "public",
						"value": "2",
						"comment": "Designates the end of the contig.\n"
					},
					{
						"line": 88,
						"kind": "enum member",
						"char": 5,
						"name": "post",
						"protection": "public",
						"value": "3",
						"comment": "Designates a transcendent point *after* the contig where\nback extensions end.\n"
					}
				],
				"name": "ContigPart",
				"protection": "public",
				"baseDeco": "h",
				"comment": "Each contig has four designated parts where joins can start or end.\n"
			},
			{
				"parameters": [
					{
						"deco": "xE7dentist6common8scaffold10ContigPart",
						"storageClass": [
							"in"
						],
						"name": "contigPart"
					}
				],
				"line": 93,
				"kind": "function",
				"char": 6,
				"name": "isReal",
				"deco": "FNaNbIE7dentist6common8scaffold10ContigPartZb",
				"protection": "public",
				"endchar": 1,
				"endline": 96,
				"comment": "True for the two real locations `begin` and `end`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xE7dentist6common8scaffold10ContigPart",
						"storageClass": [
							"in"
						],
						"name": "contigPart"
					}
				],
				"line": 100,
				"kind": "function",
				"char": 6,
				"name": "isTranscendent",
				"deco": "FNaNbIE7dentist6common8scaffold10ContigPartZb",
				"protection": "public",
				"endchar": 1,
				"endline": 103,
				"comment": "True for the two symbolic locations `pre` and `post`.\n"
			},
			{
				"line": 108,
				"kind": "alias",
				"originalType": "Tuple!(size_t, \"contigId\", ContigPart, \"contigPart\")",
				"char": 1,
				"name": "ContigNode",
				"deco": "S3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
				"protection": "public",
				"comment": "A contig is represented by four `ContigNodes` in the scaffold graph: one\nfor each `ContigPart`.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 115,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "Graph!(ContigNode, void, No.isDirected, T)",
						"char": 1,
						"line": 115,
						"name": "Scaffold"
					}
				],
				"name": "Scaffold",
				"protection": "public",
				"comment": "Data structure for the scaffold graph described in the module\ndocumentation.\n\nSee_also: `dentist.util.math.Graph`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 119,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "Scaffold!T.Edge",
						"char": 1,
						"line": 119,
						"name": "Join"
					}
				],
				"name": "Join",
				"protection": "public",
				"comment": "An edge of the scaffold graph.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 123,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "Scaffold!T.IncidentEdgesCache",
						"char": 1,
						"line": 123,
						"name": "IncidentEdgesCache"
					}
				],
				"name": "IncidentEdgesCache",
				"protection": "public",
				"comment": "`IncidentEdgesCache` for `Scaffold!T`.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 129,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "Join!T[]",
								"name": "joins"
							}
						],
						"line": 129,
						"kind": "function",
						"char": 8,
						"name": "sumPayloads",
						"type": "nothrow Join!T(Join!T[] joins...)",
						"endchar": 1,
						"endline": 140
					}
				],
				"name": "sumPayloads",
				"protection": "public",
				"comment": "Combine joins by summing their payloads.\n\nThis is used in unit tests.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 144,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "Join!T[]",
								"name": "joins"
							}
						],
						"line": 144,
						"kind": "function",
						"char": 8,
						"name": "concatenatePayloads",
						"type": "nothrow Join!T(Join!T[] joins...)",
						"endchar": 1,
						"endline": 156
					}
				],
				"name": "concatenatePayloads",
				"protection": "public",
				"comment": "Combine joins by concatenating their payloads.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "J"
					}
				],
				"line": 160,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "J",
								"storageClass": [
									"in"
								],
								"name": "join"
							}
						],
						"line": 160,
						"kind": "function",
						"char": 6,
						"name": "isDefault",
						"type": "pure nothrow bool(in J join)",
						"endchar": 1,
						"endline": 165
					}
				],
				"name": "isDefault",
				"protection": "public",
				"comment": "Returns true iff join is a default/contig edge of the scaffold graph.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "J"
					}
				],
				"line": 170,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "J",
								"storageClass": [
									"in"
								],
								"name": "join"
							}
						],
						"line": 170,
						"kind": "function",
						"char": 6,
						"name": "isUnkown",
						"type": "pure nothrow bool(in J join)",
						"endchar": 1,
						"endline": 176
					}
				],
				"name": "isUnkown",
				"protection": "public",
				"comment": "Returns true iff join is a unknown edge, ie. an edge for unknown sequence\n(`n`s) of the scaffold graph.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "J"
					}
				],
				"line": 180,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "J",
								"storageClass": [
									"in"
								],
								"name": "join"
							}
						],
						"line": 180,
						"kind": "function",
						"char": 6,
						"name": "isGap",
						"type": "pure nothrow bool(in J join)",
						"endchar": 1,
						"endline": 185
					}
				],
				"name": "isGap",
				"protection": "public",
				"comment": "Returns true iff join is a gap edge of the scaffold graph.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "J"
					}
				],
				"line": 189,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "J",
								"storageClass": [
									"in"
								],
								"name": "join"
							}
						],
						"line": 189,
						"kind": "function",
						"char": 6,
						"name": "isAntiParallel",
						"type": "pure nothrow bool(in J join)",
						"endchar": 1,
						"endline": 192
					}
				],
				"name": "isAntiParallel",
				"protection": "public",
				"comment": "Returns true iff join is a gap edge and anti-parallel.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "J"
					}
				],
				"line": 196,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "J",
								"storageClass": [
									"in"
								],
								"name": "join"
							}
						],
						"line": 196,
						"kind": "function",
						"char": 6,
						"name": "isParallel",
						"type": "pure nothrow bool(in J join)",
						"endchar": 1,
						"endline": 199
					}
				],
				"name": "isParallel",
				"protection": "public",
				"comment": "Returns true iff join is a gap edge and parallel.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "J"
					}
				],
				"line": 203,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "J",
								"storageClass": [
									"in"
								],
								"name": "join"
							}
						],
						"line": 203,
						"kind": "function",
						"char": 6,
						"name": "isExtension",
						"type": "pure nothrow bool(in J join)",
						"endchar": 1,
						"endline": 206
					}
				],
				"name": "isExtension",
				"protection": "public",
				"comment": "Returns true iff join is an extension edge of the scaffold graph.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "J"
					}
				],
				"line": 210,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "J",
								"storageClass": [
									"in"
								],
								"name": "join"
							}
						],
						"line": 210,
						"kind": "function",
						"char": 6,
						"name": "isFrontExtension",
						"type": "pure nothrow bool(in J join)",
						"endchar": 1,
						"endline": 215
					}
				],
				"name": "isFrontExtension",
				"protection": "public",
				"comment": "Returns true iff join is a front extension edge of the scaffold graph.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "J"
					}
				],
				"line": 219,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "J",
								"storageClass": [
									"in"
								],
								"name": "join"
							}
						],
						"line": 219,
						"kind": "function",
						"char": 6,
						"name": "isBackExtension",
						"type": "pure nothrow bool(in J join)",
						"endchar": 1,
						"endline": 224
					}
				],
				"name": "isBackExtension",
				"protection": "public",
				"comment": "Returns true iff join is a back extension edge of the scaffold graph.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "J"
					}
				],
				"line": 228,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "J",
								"storageClass": [
									"in"
								],
								"name": "join"
							}
						],
						"line": 228,
						"kind": "function",
						"char": 6,
						"name": "isValid",
						"type": "pure nothrow bool(in J join)",
						"endchar": 1,
						"endline": 231
					}
				],
				"name": "isValid",
				"protection": "public",
				"comment": "Returns true iff join is a valid canonical edge of the scaffold graph.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "mergeMultiEdges"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 237,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"name": "numReferenceContigs"
							},
							{
								"type": "R",
								"name": "rawJoins"
							}
						],
						"line": 237,
						"kind": "function",
						"char": 12,
						"name": "buildScaffold",
						"type": "Scaffold!T(in size_t numReferenceContigs, R rawJoins)",
						"endchar": 1,
						"endline": 244
					}
				],
				"name": "buildScaffold",
				"protection": "public",
				"comment": "Build a scaffold graph using `rawJoins`. This creates default edges for\ncontigs `1 .. numReferenceContigs + 1` and inserts the `rawJoins`.\nMulti-edges are merged using `mergeMultiEdges`.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 252,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "R",
								"name": "rawJoins"
							}
						],
						"line": 252,
						"kind": "function",
						"char": 6,
						"name": "buildScaffold",
						"type": "(R rawJoins)",
						"endchar": 1,
						"endline": 273
					}
				],
				"name": "buildScaffold",
				"protection": "public",
				"comment": "Build a scaffold graph using `rawJoins`. The nodes are deduced from\n`rawJoins`.\n\nThrows: `dentist.util.math.EdgeExistsException` if `rawJoins` contains\nduplicate joins.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "getPayload"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 281,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"name": "numReferenceContigs"
							}
						],
						"line": 281,
						"kind": "function",
						"char": 12,
						"name": "initScaffold",
						"type": "Scaffold!T(in size_t numReferenceContigs)",
						"endchar": 1,
						"endline": 307
					}
				],
				"name": "initScaffold",
				"protection": "public",
				"comment": "Creates a scaffold the default edges for contigs\n`1 .. numReferenceContigs + 1`. Optionally specify\na function that produces the payloads.\n\nSee_Also: `getDefaultJoin`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 310,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"name": "numReferenceContigs"
							}
						],
						"line": 310,
						"kind": "function",
						"char": 12,
						"name": "initScaffold",
						"type": "Scaffold!T(in size_t numReferenceContigs)",
						"endchar": 1,
						"endline": 313
					}
				],
				"name": "initScaffold",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 318,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "size_t",
								"name": "contigId"
							}
						],
						"line": 318,
						"kind": "function",
						"char": 8,
						"name": "getDefaultJoin",
						"type": "pure nothrow Join!T(size_t contigId)",
						"endchar": 1,
						"endline": 324
					}
				],
				"name": "getDefaultJoin",
				"protection": "public",
				"comment": "Construct the default join for `contigId`. Initialize `payload` with\n`getPayload(contigId)` if given.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "getPayload"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 327,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "size_t",
								"name": "contigId"
							}
						],
						"line": 327,
						"kind": "function",
						"char": 8,
						"name": "getDefaultJoin",
						"type": "pure nothrow Join!T(size_t contigId)",
						"endchar": 1,
						"endline": 334
					}
				],
				"name": "getDefaultJoin",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 359,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "size_t",
								"name": "preContigId"
							},
							{
								"type": "size_t",
								"name": "postContigId"
							},
							{
								"type": "T",
								"name": "payload"
							}
						],
						"line": 359,
						"kind": "function",
						"char": 8,
						"name": "getUnkownJoin",
						"type": "pure nothrow Join!T(size_t preContigId, size_t postContigId, T payload)",
						"endchar": 1,
						"endline": 367
					}
				],
				"name": "getUnkownJoin",
				"protection": "public",
				"comment": "Get join for a stretch of unknown sequence (`n`s).\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 373,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "Scaffold!T",
								"name": "scaffold"
							}
						],
						"line": 373,
						"kind": "function",
						"char": 12,
						"name": "normalizeUnkownJoins",
						"type": "Scaffold!T(Scaffold!T scaffold)",
						"endchar": 1,
						"endline": 451
					}
				],
				"name": "normalizeUnkownJoins",
				"protection": "public",
				"comment": "Normalizes unknown joins such that they join contigs or are removed as\napplicable. Afterwards the gap joins may not be canonical anymore, i.e.\n`isUnkown` may be false.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L454_C1)\n---\nalias J = Join!int;\nalias S = Scaffold!int;\nalias CN = ContigNode;\nalias CP = ContigPart;\n\n//  Case 1:\n//\n//      o        oxxxxo        o   =>   o        o    o        o\n//                                 =>\n//        o -- o        o -- o     =>     o -- oxxxxxxxxo -- o\nauto scaffold1 = buildScaffold!(sumPayloads!int, int)(2, [\n    getUnkownJoin!int(1, 2, 1),\n]).normalizeUnkownJoins!int;\nassert(getDefaultJoin!int(1) in scaffold1);\nassert(getDefaultJoin!int(2) in scaffold1);\nassert(J(CN(1, CP.end), CN(2, CP.begin)) in scaffold1);\nassert(scaffold1.edges.walkLength == 3);\n\n//  Case 2:\n//\n//      o        oxxxxo        o  =>  o        o   xxxo        o\n//                     \\          =>              /    \\\n//        o -- o        o -- o    =>    o -- oxxxx      o -- o\nauto scaffold2 = buildScaffold!(sumPayloads!int, int)(2, [\n    getUnkownJoin!int(1, 2, 1),\n    J(CN(2, CP.pre), CN(2, CP.begin), 1),\n]).normalizeUnkownJoins!int;\nassert(getDefaultJoin!int(1) in scaffold2);\nassert(getDefaultJoin!int(2) in scaffold2);\nassert(J(CN(1, CP.end), CN(2, CP.pre)) in scaffold2);\nassert(J(CN(2, CP.pre), CN(2, CP.begin)) in scaffold2);\nassert(scaffold2.edges.walkLength == 4);\n\n//  Case 3:\n//\n//      o        oxxxxo        o  =>  o        o    o        o\n//                                =>\n//        o -- o        o -- o    =>    o -- o        o -- o\n//                      |         =>                  |\n//                      o -- o    =>                  o -- o\n//                                =>\n//                    o        o  =>                o        o\nauto scaffold3 = buildScaffold!(sumPayloads!int, int)(3, [\n    getUnkownJoin!int(1, 2, 1),\n    J(CN(2, CP.begin), CN(3, CP.begin), 1),\n]).normalizeUnkownJoins!int;\nassert(getDefaultJoin!int(1) in scaffold3);\nassert(getDefaultJoin!int(2) in scaffold3);\nassert(getDefaultJoin!int(3) in scaffold3);\nassert(J(CN(2, CP.begin), CN(3, CP.begin)) in scaffold3);\nassert(scaffold3.edges.walkLength == 4);\n\n//  Case 4:\n//\n//      o        oxxxxo        o  =>  o        oxxx   o        o\n//              /                 =>          /    \\\n//        o -- o        o -- o    =>    o -- o      xxxxo -- o\nauto scaffold4 = buildScaffold!(sumPayloads!int, int)(2, [\n    getUnkownJoin!int(1, 2, 1),\n    J(CN(1, CP.end), CN(1, CP.post), 1),\n]).normalizeUnkownJoins!int;\nassert(getDefaultJoin!int(1) in scaffold4);\nassert(getDefaultJoin!int(2) in scaffold4);\nassert(J(CN(1, CP.post), CN(2, CP.begin)) in scaffold4);\nassert(J(CN(1, CP.end), CN(1, CP.post)) in scaffold4);\nassert(scaffold4.edges.walkLength == 4);\n\n//  Case 5:\n//\n//      o        oxxxxo        o\n//              /      \\\n//        o -- o        o -- o\nauto scaffold5 = buildScaffold!(sumPayloads!int, int)(2, [\n    getUnkownJoin!int(1, 2, 1),\n    J(CN(1, CP.end), CN(1, CP.post), 1),\n    J(CN(2, CP.pre), CN(2, CP.begin), 1),\n]).normalizeUnkownJoins!int;\nassert(getDefaultJoin!int(1) in scaffold5);\nassert(getDefaultJoin!int(2) in scaffold5);\nassert(getUnkownJoin!int(1, 2, 1) in scaffold5);\nassert(J(CN(1, CP.end), CN(1, CP.post)) in scaffold5);\nassert(J(CN(2, CP.pre), CN(2, CP.begin)) in scaffold5);\nassert(scaffold5.edges.walkLength == 5);\n\n//  Case 6:\n//\n//      o        oxxxxo        o  =>  o        o    o        o\n//              /                 =>          /\n//        o -- o        o -- o    =>    o -- o        o -- o\n//                      |         =>                  |\n//                      o -- o    =>                  o -- o\n//                                =>\n//                    o        o  =>                o        o\nauto scaffold6 = buildScaffold!(sumPayloads!int, int)(3, [\n    getUnkownJoin!int(1, 2, 1),\n    J(CN(1, CP.end), CN(1, CP.post), 1),\n    J(CN(2, CP.begin), CN(3, CP.begin), 1),\n]).normalizeUnkownJoins!int;\nassert(getDefaultJoin!int(1) in scaffold6);\nassert(getDefaultJoin!int(2) in scaffold6);\nassert(getDefaultJoin!int(3) in scaffold6);\nassert(J(CN(1, CP.end), CN(1, CP.post)) in scaffold6);\nassert(J(CN(2, CP.begin), CN(3, CP.begin)) in scaffold6);\nassert(scaffold6.edges.walkLength == 5);\n\n//  Case 7:\n//\n//      o        oxxxxo        o  =>  o        o    o        o\n//                                =>\n//        o -- o        o -- o    =>    o -- o        o -- o\n//             |                  =>         |\n//        o -- o                  =>    o -- o\n//                                =>\n//      o        o                =>  o        o\nauto scaffold7 = buildScaffold!(sumPayloads!int, int)(3, [\n    getUnkownJoin!int(1, 2, 1),\n    J(CN(1, CP.end), CN(3, CP.end), 1),\n]).normalizeUnkownJoins!int;\nassert(getDefaultJoin!int(1) in scaffold7);\nassert(getDefaultJoin!int(2) in scaffold7);\nassert(getDefaultJoin!int(3) in scaffold7);\nassert(J(CN(1, CP.end), CN(3, CP.end)) in scaffold7);\nassert(scaffold7.edges.walkLength == 4);\n\n//  Case 8:\n//\n//      o        oxxxxo        o  =>  o        o    o        o\n//                     \\          =>                 \\\n//        o -- o        o -- o    =>    o -- o        o -- o\n//             |                  =>         |\n//        o -- o                  =>    o -- o\n//                                =>\n//      o        o                =>  o        o\nauto scaffold8 = buildScaffold!(sumPayloads!int, int)(3, [\n    getUnkownJoin!int(1, 2, 1),\n    J(CN(1, CP.end), CN(3, CP.end), 1),\n    J(CN(2, CP.pre), CN(2, CP.begin), 1),\n]).normalizeUnkownJoins!int;\nassert(getDefaultJoin!int(1) in scaffold8);\nassert(getDefaultJoin!int(2) in scaffold8);\nassert(getDefaultJoin!int(3) in scaffold8);\nassert(J(CN(1, CP.end), CN(3, CP.end)) in scaffold8);\nassert(J(CN(2, CP.pre), CN(2, CP.begin)) in scaffold8);\nassert(scaffold8.edges.walkLength == 5);\n\n//  Case 9:\n//\n//      o        oxxxxo        o  =>  o        o    o        o\n//                                =>\n//        o -- o        o -- o    =>    o -- o        o -- o\n//             |        |         =>         |        |\n//             o ------ o         =>         o ------ o\n//                                =>\n//           o            o       =>       o            o\nauto scaffold9 = buildScaffold!(sumPayloads!int, int)(3, [\n    getUnkownJoin!int(1, 2, 1),\n    J(CN(1, CP.end), CN(3, CP.begin), 1),\n    J(CN(2, CP.begin), CN(3, CP.end), 1),\n]).normalizeUnkownJoins!int;\nassert(getDefaultJoin!int(1) in scaffold9);\nassert(getDefaultJoin!int(2) in scaffold9);\nassert(getDefaultJoin!int(3) in scaffold9);\nassert(J(CN(1, CP.end), CN(3, CP.begin)) in scaffold9);\nassert(J(CN(2, CP.begin), CN(3, CP.end)) in scaffold9);\nassert(scaffold9.edges.walkLength == 5);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L454_C1)\n"
			},
			{
				"line": 625,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 628,
						"kind": "enum member",
						"char": 5,
						"name": "scaffoldGaps",
						"protection": "public",
						"value": "0",
						"comment": "Only join gaps inside of scaffolds (marked by `n`s in FASTA).\n"
					},
					{
						"line": 631,
						"kind": "enum member",
						"char": 5,
						"name": "scaffolds",
						"protection": "public",
						"value": "1",
						"comment": "Join gaps inside of scaffolds (marked by `n`s in FASTA) and try to\njoin scaffolds.\n"
					},
					{
						"line": 634,
						"kind": "enum member",
						"char": 5,
						"name": "contigs",
						"protection": "public",
						"value": "2",
						"comment": "Break input into contigs and re-scaffold everything; maintains scaffold gaps where new\nscaffolds are consistent.\n"
					}
				],
				"name": "JoinPolicy",
				"protection": "public",
				"baseDeco": "i",
				"comment": "Determine which kinds of joins are allowed.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 642,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "Scaffold!T",
								"name": "scaffold"
							},
							{
								"type": "JoinPolicy",
								"storageClass": [
									"in"
								],
								"name": "joinPolicy"
							}
						],
						"line": 642,
						"kind": "function",
						"char": 12,
						"name": "enforceJoinPolicy",
						"type": "Scaffold!T(Scaffold!T scaffold, in JoinPolicy joinPolicy)",
						"endchar": 1,
						"endline": 647
					}
				],
				"name": "enforceJoinPolicy",
				"protection": "public",
				"comment": "Enforce `joinPolicy` in `scaffold`. Write discarded joins to\n`forbiddenJoins` if given.\n\nSee_also: `JoinPolicy`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 650,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "Scaffold!T",
								"name": "scaffold"
							},
							{
								"type": "JoinPolicy",
								"storageClass": [
									"in"
								],
								"name": "joinPolicy"
							},
							{
								"type": "Join!T[]",
								"storageClass": [
									"out"
								],
								"name": "forbiddenJoins"
							}
						],
						"line": 650,
						"kind": "function",
						"char": 12,
						"name": "enforceJoinPolicy",
						"type": "Scaffold!T(Scaffold!T scaffold, in JoinPolicy joinPolicy, out Join!T[] forbiddenJoins)",
						"endchar": 1,
						"endline": 722
					}
				],
				"name": "enforceJoinPolicy",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 727,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "Scaffold!T",
								"name": "scaffold"
							},
							{
								"type": "bool[size_t[2]]",
								"storageClass": [
									"in"
								],
								"name": "blacklist"
							}
						],
						"line": 727,
						"kind": "function",
						"char": 12,
						"name": "removeBlacklisted",
						"type": "Scaffold!T(Scaffold!T scaffold, in bool[size_t[2]] blacklist)",
						"endchar": 1,
						"endline": 732
					}
				],
				"name": "removeBlacklisted",
				"protection": "public",
				"comment": "Remove blacklisted gap joins. Write discarded joins to\n`forbiddenJoins` if given.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 735,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "Scaffold!T",
								"name": "scaffold"
							},
							{
								"type": "bool[size_t[2]]",
								"storageClass": [
									"in"
								],
								"name": "blacklist"
							},
							{
								"type": "Join!T[]",
								"storageClass": [
									"out"
								],
								"name": "forbiddenJoins"
							}
						],
						"line": 735,
						"kind": "function",
						"char": 12,
						"name": "removeBlacklisted",
						"type": "Scaffold!T(Scaffold!T scaffold, in bool[size_t[2]] blacklist, out Join!T[] forbiddenJoins)",
						"endchar": 1,
						"endline": 768
					}
				],
				"name": "removeBlacklisted",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 772,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "Scaffold!T",
								"name": "scaffold"
							}
						],
						"line": 772,
						"kind": "function",
						"char": 12,
						"name": "removeNoneJoins",
						"type": "Scaffold!T(Scaffold!T scaffold)",
						"endchar": 1,
						"endline": 777
					}
				],
				"name": "removeNoneJoins",
				"protection": "public",
				"comment": "Remove marked edges from the graph. This always keeps the default edges.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "mergePayloads"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 789,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "Scaffold!T",
								"name": "scaffold"
							}
						],
						"line": 789,
						"kind": "function",
						"char": 12,
						"name": "mergeExtensionsWithGaps",
						"type": "Scaffold!T(Scaffold!T scaffold)",
						"endchar": 1,
						"endline": 816
					}
				],
				"name": "mergeExtensionsWithGaps",
				"protection": "public",
				"comment": "Remove extension edges were they coincide with a gap edge combining their\npayloads. This is intended to build pile ups with all reads that contribute\nto each gap.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L819_C1)\n---\nalias J = Join!int;\nalias S = Scaffold!int;\nalias CN = ContigNode;\nalias CP = ContigPart;\n//   contig 1      contig 2\n//\n//  o        o     o        o\n//          / e1 e2 \\      / e4\n//    o -- o ------- o -- o\n//              e3\n//\n//    o -- o         o -- o         o -- o\n//                         \\ e7 e8 /      \\ e9\n//  o        o     o        o     o        o\n//\n//   contig 5       contig 4      contig 3\n//\nauto scaffold = buildScaffold!(sumPayloads!int, int)(5, [\n    J(CN(1, CP.end), CN(1, CP.post ), 1), // e1\n    J(CN(1, CP.end), CN(1, CP.post ), 1), // e1\n    J(CN(2, CP.pre), CN(2, CP.begin), 1), // e2\n    J(CN(1, CP.end), CN(2, CP.begin), 1), // e3\n    J(CN(2, CP.end), CN(2, CP.post ), 1), // e4\n    J(CN(4, CP.end), CN(4, CP.post ), 1), // e7\n    J(CN(3, CP.pre), CN(3, CP.begin), 1), // e8\n    J(CN(3, CP.end), CN(3, CP.post ), 1), // e9\n]).mergeExtensionsWithGaps!(\"a + b\", int);\n\nassert(J(CN(1, CP.end), CN(1, CP.post)) !in scaffold); // e1\nassert(J(CN(2, CP.pre), CN(2, CP.begin)) !in scaffold); // e2\nassert(J(CN(1, CP.end), CN(2, CP.begin)) in scaffold); // e3\nassert(J(CN(2, CP.end), CN(2, CP.post)) in scaffold); // e4\nassert(J(CN(4, CP.end), CN(4, CP.post)) in scaffold); // e7\nassert(J(CN(3, CP.pre), CN(3, CP.begin)) in scaffold); // e8\nassert(J(CN(3, CP.end), CN(3, CP.post)) in scaffold); // e9\n\nassert(scaffold.get(J(CN(1, CP.end), CN(2, CP.begin))).payload == 4); // merged 2 * e1 + e2 + e3\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L819_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 879,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "Scaffold!T",
								"name": "scaffold"
							},
							{
								"type": "ContigNode",
								"name": "startNode"
							},
							{
								"type": "IncidentEdgesCache!T",
								"default": "IncidentEdgesCache!T.init",
								"name": "incidentEdgesCache"
							}
						],
						"line": 879,
						"kind": "function",
						"char": 14,
						"name": "linearWalk",
						"type": "LinearWalk!T(Scaffold!T scaffold, ContigNode startNode, IncidentEdgesCache!T incidentEdgesCache = IncidentEdgesCache!T.init)",
						"endchar": 1,
						"endline": 886
					}
				],
				"name": "linearWalk",
				"protection": "public",
				"comment": "    Performs a linear walk through a scaffold graph starting in `startNode`.\n    A linear walk is a sequence of adjacent joins where no node is visited\n    twice unless the graph is cyclic in which case the first node will appear\n    twice. The implementation requires the graph to have linear components,\n    i.e. for every node the degree must be at most two. If the component of\n    `startNode` is cyclic then the walk will end in `startNode` and the\n    `isCyclic` flag will be set.\n\n    The direction of the walk can be influenced by giving `firstJoin`.\n\n*Note:** if one wants to read the `isCyclic` flag it is required to use\n    `std.range.refRange` in most cases.\n\n    Returns: range of joins in the scaffold graph.\n    Throws: `MissingNodeException` if any node is encountered that is not part\n            of the graph.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L900_C1)\n---\nalias Payload = int;\nalias J = Join!Payload;\nalias S = Scaffold!Payload;\nalias CN = ContigNode;\nalias CP = ContigPart;\n//   contig 1      contig 2\n//\n//  o        o     o        o\n//                         / e4\n//    o -- o ------- o -- o\n//              e3\n//\n//    o -- o         o -- o         o -- o\n//                         \\ e7 e8 /      \\ e9\n//  o        o     o        o     o        o\n//\n//   contig 5       contig 4      contig 3\n//\nauto joins1 = [\n    J(CN(1, CP.end), CN(2, CP.begin), 1), // e3\n    J(CN(2, CP.end), CN(2, CP.post ), 1), // e4\n    J(CN(4, CP.end), CN(4, CP.post ), 1), // e7\n    J(CN(3, CP.pre), CN(3, CP.begin), 1), // e8\n    J(CN(3, CP.end), CN(3, CP.post ), 1), // e9\n];\nauto scaffold1 = buildScaffold!(sumPayloads!Payload, Payload)(5, joins1);\nauto scaffold1Cache = scaffold1.allIncidentEdges();\nauto walks1 = [\n    [\n        getDefaultJoin!Payload(1),\n        joins1[0],\n        getDefaultJoin!Payload(2),\n        joins1[1],\n    ],\n    [\n        getDefaultJoin!Payload(4),\n        joins1[2],\n    ],\n    [\n        joins1[3],\n        getDefaultJoin!Payload(3),\n        joins1[4],\n    ],\n];\n\nalias getWalkStart = (walk) => walk[0].source(walk[0].getConnectingNode(walk[1]));\n\nforeach (walk; walks1)\n{\n    auto reverseWalk = walk.retro.array;\n    auto computedWalk = linearWalk!Payload(scaffold1, getWalkStart(walk));\n    auto computedReverseWalk = linearWalk!Payload(scaffold1, getWalkStart(reverseWalk));\n\n    assert(equal(walk[], refRange(&computedWalk)));\n    assert(!computedWalk.isCyclic);\n    assert(equal(reverseWalk[], refRange(&computedReverseWalk)));\n    assert(!computedReverseWalk.isCyclic);\n}\n\nforeach (walk; walks1)\n{\n    auto reverseWalk = walk.retro.array;\n    auto computedWalk = linearWalk!Payload(scaffold1, getWalkStart(walk), scaffold1Cache);\n    auto computedReverseWalk = linearWalk!Payload(scaffold1, getWalkStart(reverseWalk), scaffold1Cache);\n\n    assert(equal(walk[], refRange(&computedWalk)));\n    assert(!computedWalk.isCyclic);\n    assert(equal(reverseWalk[], refRange(&computedReverseWalk)));\n    assert(!computedReverseWalk.isCyclic);\n}\n\n//   contig 1      contig 2\n//\n//  o        o     o        o\n//\n//              e1\n//    o -- o ------- o -- o\n//     \\_________________/\n//              e2\n//\nauto joins2 = [\n    J(CN(1, CP.end), CN(2, CP.begin), 1), // e1\n    J(CN(2, CP.end), CN(1, CP.begin ), 1), // e2\n];\nauto scaffold2 = buildScaffold!(sumPayloads!Payload, Payload)(2, joins2);\nauto scaffold2Cache = scaffold2.allIncidentEdges();\nauto walk2 = [\n    getDefaultJoin!Payload(1),\n    joins2[0],\n    getDefaultJoin!Payload(2),\n    joins2[1],\n];\n\n{\n    auto computedWalk = linearWalk!Payload(scaffold2, getWalkStart(walk2), walk2[0]);\n    auto reverseWalk2 = walk2.retro.array;\n    auto computedReverseWalk2 = linearWalk!Payload(scaffold2,\n            getWalkStart(reverseWalk2), reverseWalk2[0]);\n\n    assert(equal(walk2[], refRange(&computedWalk)));\n    assert(computedWalk.isCyclic);\n    assert(equal(reverseWalk2[], refRange(&computedReverseWalk2)));\n    assert(computedWalk.isCyclic);\n}\n\n{\n    auto computedWalk = linearWalk!Payload(scaffold2, getWalkStart(walk2), walk2[0], scaffold2Cache);\n    auto reverseWalk2 = walk2.retro.array;\n    auto computedReverseWalk2 = linearWalk!Payload(scaffold2,\n            getWalkStart(reverseWalk2), reverseWalk2[0], scaffold2Cache);\n\n    assert(equal(walk2[], refRange(&computedWalk)));\n    assert(computedWalk.isCyclic);\n    assert(equal(reverseWalk2[], refRange(&computedReverseWalk2)));\n    assert(computedWalk.isCyclic);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L900_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 889,
				"kind": "template",
				"char": 14,
				"members": [
					{
						"parameters": [
							{
								"type": "Scaffold!T",
								"name": "scaffold"
							},
							{
								"type": "ContigNode",
								"name": "startNode"
							},
							{
								"type": "Join!T",
								"name": "firstJoin"
							},
							{
								"type": "IncidentEdgesCache!T",
								"default": "IncidentEdgesCache!T.init",
								"name": "incidentEdgesCache"
							}
						],
						"line": 889,
						"kind": "function",
						"char": 14,
						"name": "linearWalk",
						"type": "LinearWalk!T(Scaffold!T scaffold, ContigNode startNode, Join!T firstJoin, IncidentEdgesCache!T incidentEdgesCache = IncidentEdgesCache!T.init)",
						"endchar": 1,
						"endline": 897
					}
				],
				"name": "linearWalk",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1022,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 1022,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 1024,
								"kind": "variable",
								"char": 17,
								"name": "emptyIncidentEdgesCache",
								"init": "IncidentEdgesCache!T.init"
							},
							{
								"kind": "variable",
								"type": "Scaffold!T",
								"char": 24,
								"line": 1026,
								"name": "scaffold"
							},
							{
								"kind": "variable",
								"type": "IncidentEdgesCache!T",
								"char": 34,
								"line": 1027,
								"name": "incidentEdgesCache"
							},
							{
								"kind": "variable",
								"type": "size_t",
								"char": 20,
								"line": 1028,
								"name": "currentNodeIdx"
							},
							{
								"kind": "variable",
								"type": "Join!T",
								"char": 20,
								"line": 1029,
								"name": "currentJoin"
							},
							{
								"line": 1030,
								"kind": "variable",
								"char": 18,
								"name": "isEmpty",
								"deco": "b",
								"init": "false"
							},
							{
								"line": 1031,
								"kind": "variable",
								"char": 29,
								"name": "_isCyclic",
								"init": "No.isCyclic",
								"type": "Flag!\"isCyclic\""
							},
							{
								"kind": "variable",
								"type": "NaturalNumberSet",
								"char": 30,
								"line": 1032,
								"name": "visitedNodes"
							},
							{
								"line": 1036,
								"kind": "function",
								"char": 31,
								"name": "isCyclic",
								"type": "const pure nothrow @property @safe Flag!\"isCyclic\"()",
								"endchar": 5,
								"endline": 1039,
								"comment": "Set to `Yes.isCyclic` if a cycle was detected.\n"
							},
							{
								"parameters": [
									{
										"type": "Scaffold!T",
										"name": "scaffold"
									},
									{
										"type": "ContigNode",
										"name": "startNode"
									},
									{
										"type": "IncidentEdgesCache!T",
										"default": "emptyIncidentEdgesCache",
										"name": "incidentEdgesCache"
									}
								],
								"line": 1043,
								"kind": "constructor",
								"char": 13,
								"name": "this",
								"type": "(Scaffold!T scaffold, ContigNode startNode, IncidentEdgesCache!T incidentEdgesCache = emptyIncidentEdgesCache)",
								"endchar": 5,
								"endline": 1057,
								"comment": "See `linearWalk` instead.\n"
							},
							{
								"parameters": [
									{
										"type": "Scaffold!T",
										"name": "scaffold"
									},
									{
										"type": "ContigNode",
										"name": "startNode"
									},
									{
										"type": "Join!T",
										"name": "firstJoin"
									},
									{
										"type": "IncidentEdgesCache!T",
										"default": "emptyIncidentEdgesCache",
										"name": "incidentEdgesCache"
									}
								],
								"line": 1061,
								"kind": "constructor",
								"char": 13,
								"name": "this",
								"type": "(Scaffold!T scaffold, ContigNode startNode, Join!T firstJoin, IncidentEdgesCache!T incidentEdgesCache = emptyIncidentEdgesCache)",
								"endchar": 5,
								"endline": 1078,
								"comment": "ditto\n"
							},
							{
								"line": 1082,
								"kind": "function",
								"char": 10,
								"name": "popFront",
								"type": "void()",
								"endchar": 5,
								"endline": 1117,
								"comment": "Input range interface.\n"
							},
							{
								"line": 1121,
								"kind": "function",
								"char": 22,
								"name": "front",
								"type": "@property Join!T()",
								"endchar": 5,
								"endline": 1125,
								"comment": "ditto\n"
							},
							{
								"line": 1129,
								"kind": "function",
								"char": 20,
								"name": "empty",
								"type": "@property bool()",
								"endchar": 5,
								"endline": 1132,
								"comment": "ditto\n"
							},
							{
								"line": 1135,
								"kind": "function",
								"char": 18,
								"name": "lastEdgeOfCycle",
								"type": "void()",
								"endchar": 5,
								"endline": 1143
							},
							{
								"line": 1146,
								"kind": "function",
								"char": 18,
								"name": "endOfWalk",
								"type": "void()",
								"endchar": 5,
								"endline": 1150
							},
							{
								"line": 1153,
								"kind": "function",
								"char": 34,
								"name": "currentNode",
								"type": "@property ContigNode()",
								"endchar": 5,
								"endline": 1156
							},
							{
								"parameters": [
									{
										"type": "ContigNode",
										"name": "node"
									}
								],
								"line": 1159,
								"kind": "function",
								"char": 28,
								"name": "currentNode",
								"type": "@property void(ContigNode node)",
								"endchar": 5,
								"endline": 1162
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "nodeIdx"
									}
								],
								"line": 1165,
								"kind": "function",
								"char": 18,
								"name": "markVisited",
								"type": "void(size_t nodeIdx)",
								"endchar": 5,
								"endline": 1168
							}
						],
						"name": "LinearWalk",
						"protection": "public"
					}
				],
				"name": "LinearWalk",
				"protection": "public",
				"comment": "Range that walks linearly through its scaffold graph.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1175,
				"kind": "template",
				"char": 17,
				"members": [
					{
						"parameters": [
							{
								"type": "Scaffold!T",
								"name": "scaffold"
							},
							{
								"type": "ContigNode",
								"name": "startNode"
							},
							{
								"type": "IncidentEdgesCache!T",
								"default": "IncidentEdgesCache!T.init",
								"name": "incidentEdgesCache"
							}
						],
						"line": 1175,
						"kind": "function",
						"char": 17,
						"name": "isCyclic",
						"type": "Flag!\"isCyclic\"(Scaffold!T scaffold, ContigNode startNode, IncidentEdgesCache!T incidentEdgesCache = IncidentEdgesCache!T.init)",
						"endchar": 1,
						"endline": 1184
					}
				],
				"name": "isCyclic",
				"protection": "public",
				"comment": "Use `linearWalk` to determine if `startNode` is part of a cycle.\n\nSee_also: `linearWalk`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1187,
				"kind": "template",
				"char": 17,
				"members": [
					{
						"parameters": [
							{
								"type": "Scaffold!T",
								"name": "scaffold"
							},
							{
								"type": "ContigNode",
								"name": "startNode"
							},
							{
								"type": "Join!T",
								"name": "firstJoin"
							},
							{
								"type": "IncidentEdgesCache!T",
								"default": "IncidentEdgesCache!T.init",
								"name": "incidentEdgesCache"
							}
						],
						"line": 1187,
						"kind": "function",
						"char": 17,
						"name": "isCyclic",
						"type": "Flag!\"isCyclic\"(Scaffold!T scaffold, ContigNode startNode, Join!T firstJoin, IncidentEdgesCache!T incidentEdgesCache = IncidentEdgesCache!T.init)",
						"endchar": 1,
						"endline": 1197
					}
				],
				"name": "isCyclic",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1210,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "Scaffold!T",
								"name": "scaffold"
							},
							{
								"type": "IncidentEdgesCache!T",
								"default": "IncidentEdgesCache!T.init",
								"name": "incidentEdgesCache"
							}
						],
						"line": 1210,
						"kind": "function",
						"char": 6,
						"name": "scaffoldStarts",
						"type": "(Scaffold!T scaffold, IncidentEdgesCache!T incidentEdgesCache = IncidentEdgesCache!T.init)",
						"endchar": 1,
						"endline": 1295
					}
				],
				"name": "scaffoldStarts",
				"protection": "public",
				"comment": "Returns a range of `ContigNode`s where full contig walks should start.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1298_C1)\n---\nalias Payload = int;\nalias J = Join!Payload;\nalias S = Scaffold!Payload;\nalias CN = ContigNode;\nalias CP = ContigPart;\n//   contig 1      contig 2\n//\n//  o        o     o        o\n//                         / e4\n//    o -- o ------- o -- o\n//              e3\n//\n//    o -- o         o -- o         o -- o\n//                         \\ e7 e8 /      \\ e9\n//  o        o     o        o     o        o\n//\n//   contig 5       contig 4      contig 3\n//\nauto scaffold1 = buildScaffold!(sumPayloads!Payload, Payload)(5, [\n    J(CN(1, CP.end), CN(2, CP.begin), 1), // e3\n    J(CN(2, CP.end), CN(2, CP.post ), 1), // e4\n    J(CN(4, CP.end), CN(4, CP.post ), 1), // e7\n    J(CN(3, CP.pre), CN(3, CP.begin), 1), // e8\n    J(CN(3, CP.end), CN(3, CP.post ), 1), // e9\n]);\n\nassert(equal(scaffoldStarts!Payload(scaffold1), [\n    CN(1, CP.begin),\n    CN(3, CP.pre),\n    CN(4, CP.begin),\n    CN(5, CP.begin),\n]));\n\n//   contig 1      contig 2\n//\n//  o        o     o        o\n//\n//              e1\n//    o -- o ------- o -- o\n//     \\_________________/\n//              e2\n//\nauto scaffold2 = buildScaffold!(sumPayloads!Payload, Payload)(2, [\n    J(CN(1, CP.end), CN(2, CP.begin), 1), // e1\n    J(CN(2, CP.end), CN(1, CP.begin ), 1), // e2\n]);\n\nassert(equal(scaffoldStarts!Payload(scaffold2), [\n    CN(1, CP.begin),\n]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1298_C1)\n"
			}
		],
		"comment": "    Work with scaffold graphs. A scaffold graph is an undirected graph with\n    optional edge payloads.\n\n    For each contig of the input assembly there exist four nodes in the graph:\n    `ContigPart.pre`, `ContigPart.begin`, `ContigPart.end` and\n    `ContigPart.post`. These represent four locations relative to the contig.\n\n    Canonical edges are categorized by `isDefault` (the contig itself),\n    `isUnkown` (a gap marked by `n`s), `isGap` (pile up or insertion that\n    connects two contigs), `isFrontExtension` or ` isBackExtension` (pile up\n    or insertion that extends beyond the begin/end of a contig).\n\n    Gap edges are further categorized as `isParallel` or `isAntiParallel`\n    depending on weather the involved contigs are connected in the same\n    (parallel) or opposite (anti-parallel) orientation.\n\n    The scaffold graph is used to collect pile ups of read alignments and\n    represent the final assembly.\n\n\n    See_also: `dentist.commands.collectPileUps`,\n        `dentist.commands.output`\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.common.scaffold"
	},
	{
		"kind": "module",
		"file": "source/dentist/dazzler.d",
		"members": [
			{
				"storageClass": [
					"enum"
				],
				"line": 143,
				"kind": "variable",
				"char": 6,
				"name": "dbFileExtension",
				"deco": "Aya",
				"init": "\".db\"",
				"protection": "public",
				"comment": "Constant holding the .db file extension.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 146,
				"kind": "variable",
				"char": 6,
				"name": "damFileExtension",
				"deco": "Aya",
				"init": "\".dam\"",
				"protection": "public",
				"comment": "Constant holding the .dam file extension.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 150,
				"kind": "variable",
				"char": 6,
				"name": "minSequenceLength",
				"deco": "i",
				"init": "14",
				"protection": "public",
				"comment": "The Dazzler tools require sequence of\nat least `minSequenceLength` base pairs.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 154,
				"kind": "variable",
				"char": 6,
				"name": "forceLargeTracePointType",
				"deco": "i",
				"init": "126",
				"protection": "public",
				"comment": "This trace point spacing enforces the use\nof `ushort` for trace point encoding.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 157,
				"kind": "variable",
				"char": 6,
				"name": "minAverageCorrelationRate",
				"deco": "d",
				"init": "0.7",
				"protection": "public",
				"comment": "Minimum allowed value for `-e` option of `daligner`/`damapper`\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 160,
				"kind": "variable",
				"char": 6,
				"name": "minBestMatches",
				"deco": "d",
				"init": "0.7",
				"protection": "public",
				"comment": "Minimum allowed value for `-n` option of `damapper`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 163,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 163,
						"kind": "variable",
						"char": 6,
						"name": "isOptionsList",
						"init": "isArray!T && isSomeString!(ElementType!T)"
					}
				],
				"name": "isOptionsList",
				"protection": "public",
				"comment": "True if `T` is some array of strings.\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "Aya",
						"name": "dbFile"
					}
				],
				"line": 171,
				"kind": "function",
				"originalType": "(string dbFile)",
				"char": 6,
				"name": "getHiddenDbFiles",
				"deco": "FNaNfAyaZS3std9algorithm9iteration__T9MapResultS7dentist7dazzler16getHiddenDbFilesFQDaZ9__lambda3TAQDqZQCo",
				"protection": "public",
				"endchar": 1,
				"endline": 182,
				"comment": "    Return a list of hidden files associated to every `.dam`/`.db` file. These\n    files contain the actual data used in all the computation. Thus, we\n    carefully check for their existence.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					}
				],
				"line": 187,
				"kind": "function",
				"char": 8,
				"name": "stripDbExtension",
				"deco": "FNaNbNfIAyaZAya",
				"protection": "public",
				"endchar": 1,
				"endline": 195,
				"comment": "Strip extension of `dbFile` if its is `dbFileExtension`\nor `damFileExtension`. Otherwise return `dbFile` untouched.\n"
			},
			{
				"line": 199,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "nextInChain"
							}
						],
						"line": 201,
						"kind": "constructor",
						"originalType": "pure nothrow @nogc @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
						"char": 30,
						"name": "this",
						"deco": "FNaNbNiNfAyaQdmC6object9ThrowableZC7dentist7dazzler23DazzlerCommandException",
						"protection": "public",
						"endchar": 5,
						"endline": 205
					}
				],
				"name": "DazzlerCommandException",
				"protection": "public",
				"comment": "Signal error from the Dazzler bindings.\n"
			},
			{
				"line": 211,
				"kind": "alias",
				"originalType": "Flag!\"append\"",
				"char": 1,
				"name": "Append",
				"deco": "E3std8typecons__T4FlagVAyaa6_617070656e64ZQz",
				"protection": "public",
				"comment": "Flag used to signal if DB write operations should append to an existing\nDB or call `handleExistingDb` instead (default).\n"
			},
			{
				"line": 216,
				"kind": "variable",
				"char": 30,
				"name": "handleExistingDb",
				"deco": "DFAyaZv",
				"init": "delegate void(string dbFile) @system\n{\nremoveDB(dbFile);\nreturn ;\n}\n",
				"protection": "public",
				"comment": "This funcion is called if writing to an existing DB is attempted without\npassing `Yes.append` or similar to the called function.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "lasFile"
					}
				],
				"line": 220,
				"kind": "function",
				"char": 6,
				"name": "lasEmpty",
				"deco": "FIAyaZb",
				"protection": "public",
				"endchar": 1,
				"endline": 225,
				"comment": "Returns true iff lasFile contains zero parts.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					}
				],
				"line": 229,
				"kind": "function",
				"originalType": "id_t(in string dbFile)",
				"char": 6,
				"name": "numDbRecords",
				"deco": "FIAyaZk",
				"protection": "public",
				"endchar": 1,
				"endline": 241,
				"comment": "Returns the (trimmed) number of records in `dbFile`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					}
				],
				"line": 245,
				"kind": "function",
				"char": 6,
				"name": "dbEmpty",
				"deco": "FIAyaZb",
				"protection": "public",
				"endchar": 1,
				"endline": 248,
				"comment": "Returns true iff `dbFile` is empty.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					}
				],
				"line": 253,
				"kind": "function",
				"char": 6,
				"name": "removeDB",
				"deco": "FIAyaZv",
				"protection": "public",
				"endchar": 1,
				"endline": 256,
				"comment": "Remove database and hidden files.\n"
			},
			{
				"constraint": "isSomeString!(typeof(options.tmpdir)) && isOptionsList!(typeof(options.dbsplitOptions))",
				"parameters": [
					{
						"kind": "type",
						"name": "Options"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 269,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "inDbFile"
							},
							{
								"type": "R",
								"name": "readIds"
							},
							{
								"type": "Options",
								"storageClass": [
									"in"
								],
								"name": "options"
							},
							{
								"type": "Append",
								"default": "No.append",
								"name": "append"
							}
						],
						"line": 269,
						"kind": "function",
						"char": 8,
						"name": "dbSubset",
						"type": "string(in string inDbFile, R readIds, in Options options, Append append = No.append)",
						"endchar": 1,
						"endline": 282
					}
				],
				"name": "dbSubset",
				"protection": "public",
				"comment": "Build DB file by using the given subset of reads in `inDbFile`.\nWrites to `outputDB` if given; otherwise a name with the same extenion as\n`inDbFile` under `options.tmpdir` is safely generated. The resulting DB\nis implictly split using `options.dbsplitOptions`.\n\nNote that the returned DB path always has the same extension as `inDbFile`.\nIf `outputDb` is given and does not have the expected extension it will be\nappend.\n\nReturns: path to resulting DB\n"
			},
			{
				"constraint": "isOptionsList!(typeof(options.dbsplitOptions))",
				"parameters": [
					{
						"kind": "type",
						"name": "Options"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 285,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "outputDb"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "inDbFile"
							},
							{
								"type": "R",
								"name": "readIds"
							},
							{
								"type": "Options",
								"storageClass": [
									"in"
								],
								"name": "options"
							},
							{
								"type": "Append",
								"default": "No.append",
								"name": "append"
							}
						],
						"line": 285,
						"kind": "function",
						"char": 8,
						"name": "dbSubset",
						"type": "string(in string outputDb, in string inDbFile, R readIds, in Options options, Append append = No.append)",
						"endchar": 1,
						"endline": 296
					}
				],
				"name": "dbSubset",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 301,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "mergedLas"
							},
							{
								"type": "R",
								"name": "lasFiles"
							}
						],
						"line": 301,
						"kind": "function",
						"char": 6,
						"name": "LAmerge",
						"type": "void(in string mergedLas, R lasFiles)",
						"endchar": 1,
						"endline": 304
					}
				],
				"name": "LAmerge",
				"protection": "public",
				"comment": "Merge given las files.\n"
			},
			{
				"constraint": "isOptionsList!(typeof(options.dalignerOptions)) && isSomeString!(typeof(options.tmpdir))",
				"parameters": [
					{
						"kind": "type",
						"name": "Options"
					}
				],
				"line": 317,
				"kind": "template",
				"char": 18,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbA"
							},
							{
								"type": "Options",
								"storageClass": [
									"in"
								],
								"name": "options"
							}
						],
						"line": 317,
						"kind": "function",
						"char": 18,
						"name": "getLocalAlignments",
						"type": "AlignmentChain[](in string dbA, in Options options)",
						"endchar": 1,
						"endline": 325
					}
				],
				"name": "getLocalAlignments",
				"protection": "public",
				"comment": "Compute local alignments of given DBs using `daligner`. Uses `dbB = dbA`\nif `dbB` is omitted.\n\nThe resulting LAS file is placed in `options.tmpdir`. Its name can be\nretrieved by calling `getLasFile(dbA, dbB, options.tmpdir)`. `daligner`\nwill not be executed if a file with that name already exists to avoid\nredundant computations.\n\nReturns: alignment data\nSee_also: `getAlignments`, `getLasFile`\n"
			},
			{
				"constraint": "isOptionsList!(typeof(options.dalignerOptions)) && isSomeString!(typeof(options.tmpdir))",
				"parameters": [
					{
						"kind": "type",
						"name": "Options"
					}
				],
				"line": 328,
				"kind": "template",
				"char": 18,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbA"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbB"
							},
							{
								"type": "Options",
								"storageClass": [
									"in"
								],
								"name": "options"
							}
						],
						"line": 328,
						"kind": "function",
						"char": 18,
						"name": "getLocalAlignments",
						"type": "AlignmentChain[](in string dbA, in string dbB, in Options options)",
						"endchar": 1,
						"endline": 336
					}
				],
				"name": "getLocalAlignments",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"constraint": "isOptionsList!(typeof(options.damapperOptions)) && isSomeString!(typeof(options.tmpdir))",
				"parameters": [
					{
						"kind": "type",
						"name": "Options"
					}
				],
				"line": 348,
				"kind": "template",
				"char": 18,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbA"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbB"
							},
							{
								"type": "Options",
								"storageClass": [
									"in"
								],
								"name": "options"
							}
						],
						"line": 348,
						"kind": "function",
						"char": 18,
						"name": "getMappings",
						"type": "AlignmentChain[](in string dbA, in string dbB, in Options options)",
						"endchar": 1,
						"endline": 356
					}
				],
				"name": "getMappings",
				"protection": "public",
				"comment": "Compute local alignments of given DBs using `damapper`.\n\nThe resulting LAS file is placed in `options.tmpdir`. Its name can be\nretrieved by calling `getLasFile(dbA, dbB, options.tmpdir)`. `damapper`\nwill not be executed if a file with that name already exists to avoid\nredundant computations.\n\nReturns: alignment data\nSee_also: `getAlignments`, `getLasFile`\n"
			},
			{
				"line": 372,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 375,
						"kind": "enum member",
						"char": 5,
						"name": "none",
						"protection": "public",
						"value": "0u",
						"comment": "Perform only minimal set of operations.\n"
					},
					{
						"line": 378,
						"kind": "enum member",
						"char": 5,
						"name": "includeTracePoints",
						"protection": "public",
						"value": "1u",
						"comment": "Read trace points and include them in the result.\n"
					},
					{
						"line": 381,
						"kind": "enum member",
						"char": 5,
						"name": "sort",
						"protection": "public",
						"value": "2u",
						"comment": "Sort the alignments after reading.\n"
					}
				],
				"name": "AlignmentReaderFlag",
				"protection": "public",
				"baseDeco": "k",
				"comment": "Control operation of `LocalAlignmentReader`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbA"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "lasFile"
					},
					{
						"deco": "E3std8typecons__T4FlagVAyaa18_696e636c7564655472616365506f696e7473ZQBy",
						"default": "Flag.no",
						"name": "includeTracePoints"
					}
				],
				"line": 395,
				"kind": "function",
				"originalType": "AlignmentChain[](in string dbA, in string lasFile, Flag!\"includeTracePoints\" includeTracePoints = No.includeTracePoints)",
				"char": 18,
				"name": "getAlignments",
				"deco": "FIAyaIQeE3std8typecons__T4FlagVAyaa18_696e636c7564655472616365506f696e7473ZQByZAS7dentist6common10alignments4base14AlignmentChain",
				"protection": "public",
				"endchar": 1,
				"endline": 402,
				"comment": "Read all alignment chains from `lasFile`.\n\nParams:\ndbA         = A-read DB\ndbB         = optional B-read DB; if omitted `dbB = dbA` is used\nlasFile     = file with alignment\nincludeTracePoints = include trace points in output; this signature\nimplies `AlignmentReaderFlag.sort`. Skipping trace points is\nfaster and requires less memory.\nflags       = specify additional operations (see `AlignmentReaderFlag`)\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbA"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbB"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "lasFile"
					},
					{
						"deco": "E3std8typecons__T4FlagVAyaa18_696e636c7564655472616365506f696e7473ZQBy",
						"default": "Flag.no",
						"name": "includeTracePoints"
					}
				],
				"line": 405,
				"kind": "function",
				"originalType": "AlignmentChain[](in string dbA, in string dbB, in string lasFile, Flag!\"includeTracePoints\" includeTracePoints = No.includeTracePoints)",
				"char": 18,
				"name": "getAlignments",
				"deco": "FIAyaIQeIQhE3std8typecons__T4FlagVAyaa18_696e636c7564655472616365506f696e7473ZQByZAS7dentist6common10alignments4base14AlignmentChain",
				"protection": "public",
				"endchar": 1,
				"endline": 418,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbA"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "lasFile"
					},
					{
						"deco": "E7dentist7dazzler19AlignmentReaderFlag",
						"name": "flags"
					}
				],
				"line": 421,
				"kind": "function",
				"char": 18,
				"name": "getAlignments",
				"deco": "FIAyaIQeE7dentist7dazzler19AlignmentReaderFlagZASQBo6common10alignments4base14AlignmentChain",
				"protection": "public",
				"endchar": 1,
				"endline": 428,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbA"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbB"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "lasFile"
					},
					{
						"deco": "E7dentist7dazzler19AlignmentReaderFlag",
						"name": "flags"
					}
				],
				"line": 431,
				"kind": "function",
				"char": 18,
				"name": "getAlignments",
				"deco": "FIAyaIQeIQhE7dentist7dazzler19AlignmentReaderFlagZASQBo6common10alignments4base14AlignmentChain",
				"protection": "public",
				"endchar": 1,
				"endline": 477,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 661,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 661,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "AlignmentChain.LocalAlignment",
								"char": 13,
								"line": 663,
								"name": "LocalAlignment"
							},
							{
								"kind": "variable",
								"type": "R",
								"char": 15,
								"line": 665,
								"name": "alignments"
							},
							{
								"kind": "variable",
								"type": "BufferMode",
								"char": 24,
								"line": 666,
								"name": "bufferMode"
							},
							{
								"kind": "variable",
								"type": "LocalAlignment[]",
								"char": 30,
								"line": 667,
								"name": "localAlignmentBuffer"
							},
							{
								"kind": "variable",
								"type": "size_t",
								"char": 20,
								"line": 668,
								"name": "numBufferedLocalAlignments"
							},
							{
								"kind": "variable",
								"type": "Appender!(LocalAlignment[])",
								"char": 41,
								"line": 669,
								"name": "localAlignmentAcc"
							},
							{
								"kind": "variable",
								"type": "AlignmentChain",
								"char": 28,
								"line": 670,
								"name": "currentChain"
							},
							{
								"kind": "variable",
								"type": "TracePoint*",
								"char": 25,
								"line": 672,
								"name": "lastTracePointLocation"
							},
							{
								"parameters": [
									{
										"type": "R",
										"name": "alignments"
									},
									{
										"type": "BufferMode",
										"name": "bufferMode"
									},
									{
										"type": "LocalAlignment[]",
										"default": "[]",
										"name": "localAlignmentBuffer"
									}
								],
								"line": 675,
								"kind": "constructor",
								"char": 15,
								"name": "this",
								"type": "(R alignments, BufferMode bufferMode, LocalAlignment[] localAlignmentBuffer = [])",
								"endchar": 5,
								"endline": 695
							},
							{
								"line": 699,
								"kind": "function",
								"char": 20,
								"name": "empty",
								"type": "const pure nothrow @property @safe bool()",
								"endchar": 5,
								"endline": 702,
								"comment": "Input range interface.\n"
							},
							{
								"line": 705,
								"kind": "function",
								"char": 10,
								"name": "popFront",
								"type": "void()",
								"endchar": 5,
								"endline": 740,
								"comment": "ditto\n"
							},
							{
								"line": 744,
								"kind": "function",
								"char": 30,
								"name": "front",
								"type": "pure nothrow @property @safe AlignmentChain()",
								"endchar": 5,
								"endline": 749,
								"comment": "ditto\n"
							},
							{
								"line": 752,
								"kind": "function",
								"char": 18,
								"name": "setEmpty",
								"type": "pure nothrow @safe void()",
								"endchar": 5,
								"endline": 755
							},
							{
								"line": 758,
								"kind": "function",
								"char": 35,
								"name": "assertMatchingAlignmentHead",
								"type": "pure nothrow @safe void()",
								"endchar": 5,
								"endline": 773
							},
							{
								"line": 776,
								"kind": "function",
								"char": 18,
								"name": "bufferCurrentLocalAlignment",
								"type": "pure nothrow @safe void()",
								"endchar": 5,
								"endline": 790
							},
							{
								"line": 793,
								"kind": "function",
								"char": 30,
								"name": "finishLocalAlignmentBuffer",
								"type": "pure nothrow @safe LocalAlignment[]()",
								"endchar": 5,
								"endline": 817
							},
							{
								"line": 820,
								"kind": "function",
								"char": 43,
								"name": "makeCurrentLocalAlignment",
								"type": "pure nothrow @safe AlignmentChain.LocalAlignment()",
								"endchar": 5,
								"endline": 838
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 841,
								"kind": "function",
								"char": 28,
								"name": "currentFLA",
								"type": "pure nothrow @property @safe ()",
								"endchar": 5,
								"endline": 844
							}
						],
						"name": "AlignmentChainPacker",
						"protection": "public"
					}
				],
				"name": "AlignmentChainPacker",
				"protection": "public",
				"comment": "Transforms a range `R` of `FlatLocalAlignment`s into a range of\n`AlignmentChain`s.\n\nSee_also: `alignmentChainPacker` for more details.\n"
			},
			{
				"constraint": "isInputRange!R && is(ElementType!R == FlatLocalAlignment)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 858,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "R",
								"name": "localAlignments"
							},
							{
								"type": "BufferMode",
								"default": "BufferMode.skip",
								"name": "bufferMode"
							},
							{
								"type": "AlignmentChain.LocalAlignment[]",
								"default": "[]",
								"name": "localAlignmentBuffer"
							}
						],
						"line": 858,
						"kind": "function",
						"char": 6,
						"name": "alignmentChainPacker",
						"type": "(R localAlignments, BufferMode bufferMode = BufferMode.skip, AlignmentChain.LocalAlignment[] localAlignmentBuffer = [])",
						"endchar": 1,
						"endline": 866
					}
				],
				"name": "alignmentChainPacker",
				"protection": "public",
				"comment": "Transforms a range `R` of `FlatLocalAlignment`s into a range of\n`AlignmentChain`s.\n\nParams:\nlocalAlignments = input range of `FlatLocalAlignment`s\nbufferMode      = selects how `LocalAlignment`s are buffered\nlocalAlignmentBuffer = buffer for `LocalAlignment`s. If provided by\nthe caller it must be adequately sized with respect to\n`bufferMode`; otherwise an adequate buffer is allocated.\nSee_also: `BufferMode`, `getFlatLocalAlignments`\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"in",
							"ref"
						],
						"name": "alignmentChain"
					}
				],
				"line": 878,
				"kind": "function",
				"originalType": "pure nothrow (in ref AlignmentChain alignmentChain)",
				"char": 16,
				"name": "fingerprint",
				"deco": "FNaNbNfIKS7dentist6common10alignments4base14AlignmentChainZS3std8typecons__T5TupleTxkTxkTkTkTkTkZQv",
				"protection": "protected",
				"endchar": 1,
				"endline": 888,
				"comment": "Returns a tuple of contig IDs and first and last begin/end coords.\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "lasFile"
					},
					{
						"deco": "E7dentist7dazzler10BufferMode",
						"default": "BufferMode.skip",
						"name": "bufferMode"
					},
					{
						"deco": "AS7dentist6common10alignments4base10TracePoint",
						"default": "[]",
						"name": "tracePointBuffer"
					}
				],
				"line": 904,
				"kind": "function",
				"originalType": "(in string lasFile, BufferMode bufferMode = BufferMode.skip, TracePoint[] tracePointBuffer = [])",
				"char": 6,
				"name": "getFlatLocalAlignments",
				"deco": "FIAyaE7dentist7dazzler10BufferModeASQBe6common10alignments4base10TracePointZCQCtQCo20LocalAlignmentReader",
				"protection": "public",
				"endchar": 1,
				"endline": 911,
				"comment": "Lazily read individual local alignments from `lasFile`.\n\nReturns: input range of `FlatLocalAlignment` with defined length.\nParams:\ndbA         = A-read DB used to insert contig lengths if present\ndbB         = optional B-read DB; if omitted but `dbA` is given\n`dbB = dbA` is used\nlasFile     = file with alignment\nbufferMode  = select buffer strategy for trace points\ntracePointBuffer = buffer for `TracePoint`s. If provided by the caller\nit must be adequately sized with respect to `bufferMode`;\notherwise an adequate buffer is allocated.\nSee_also: `BufferMode`, `FlatLocalAlignment`, `LocalAlignmentReader`\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbA"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "lasFile"
					},
					{
						"deco": "E7dentist7dazzler10BufferMode",
						"default": "BufferMode.skip",
						"name": "bufferMode"
					},
					{
						"deco": "AS7dentist6common10alignments4base10TracePoint",
						"default": "[]",
						"name": "tracePointBuffer"
					}
				],
				"line": 914,
				"kind": "function",
				"originalType": "(in string dbA, in string lasFile, BufferMode bufferMode = BufferMode.skip, TracePoint[] tracePointBuffer = [])",
				"char": 6,
				"name": "getFlatLocalAlignments",
				"deco": "FIAyaIQeE7dentist7dazzler10BufferModeASQBe6common10alignments4base10TracePointZCQCtQCo20LocalAlignmentReader",
				"protection": "public",
				"endchar": 1,
				"endline": 922,
				"comment": "ditto\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbA"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbB"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "lasFile"
					},
					{
						"deco": "E7dentist7dazzler10BufferMode",
						"default": "BufferMode.skip",
						"name": "bufferMode"
					},
					{
						"deco": "AS7dentist6common10alignments4base10TracePoint",
						"default": "[]",
						"name": "tracePointBuffer"
					}
				],
				"line": 925,
				"kind": "function",
				"originalType": "(in string dbA, in string dbB, in string lasFile, BufferMode bufferMode = BufferMode.skip, TracePoint[] tracePointBuffer = [])",
				"char": 6,
				"name": "getFlatLocalAlignments",
				"deco": "FIAyaIQeIQhE7dentist7dazzler10BufferModeASQBe6common10alignments4base10TracePointZCQCtQCo20LocalAlignmentReader",
				"protection": "public",
				"endchar": 1,
				"endline": 957,
				"comment": "ditto\n"
			},
			{
				"line": 1174,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 1177,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numAlignments",
						"deco": "m",
						"protection": "public",
						"offset": 0,
						"comment": "Sum of number of alignment chains and number of unchained alignments\n"
					},
					{
						"line": 1179,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numAlignmentChains",
						"deco": "m",
						"protection": "public",
						"offset": 8,
						"comment": "Number of alignment chains (i.e. the unchained flag is unset)\n"
					},
					{
						"line": 1181,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numLocalAlignments",
						"deco": "m",
						"protection": "public",
						"offset": 16,
						"comment": "Total number of local alignments disregarding chaining\n"
					},
					{
						"line": 1183,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "maxLocalAlignments",
						"deco": "m",
						"protection": "public",
						"offset": 24,
						"comment": "Maximum number of local alignments per chain\n"
					},
					{
						"line": 1185,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "maxLocalAlignmentsPerContig",
						"deco": "m",
						"protection": "public",
						"offset": 32,
						"comment": "Maximum total number of local alignments per contig\n"
					},
					{
						"line": 1187,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numTracePoints",
						"deco": "m",
						"protection": "public",
						"offset": 40,
						"comment": "Total number of trace points\n"
					},
					{
						"line": 1189,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "maxTracePoints",
						"deco": "m",
						"protection": "public",
						"offset": 48,
						"comment": "Maximum number of trace points per local alignment\n"
					},
					{
						"line": 1192,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "tracePointDistance",
						"deco": "m",
						"protection": "public",
						"offset": 56,
						"comment": "Trace point distance\n"
					},
					{
						"constraint": "isInputRange!R",
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"line": 1203,
						"kind": "template",
						"char": 28,
						"members": [
							{
								"parameters": [
									{
										"type": "R",
										"name": "alignmentChains"
									}
								],
								"line": 1203,
								"kind": "function",
								"char": 28,
								"name": "inferFrom",
								"type": "AlignmentHeader(R alignmentChains)",
								"endchar": 5,
								"endline": 1245
							}
						],
						"name": "inferFrom",
						"protection": "public",
						"comment": "Infer header data from a range of alignments with a single pass\nacross the data.\n\nThe range signatures accepts currently only a range of\n`AlignmentChain`s.\n\nThe `lasFile` signature walks through `lasFile` using a\n`LocalAlignmentReader` with `BufferMode.skip`.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Aya",
								"name": "lasFile"
							}
						],
						"line": 1249,
						"kind": "function",
						"char": 28,
						"name": "inferFrom",
						"deco": "FAyaZS7dentist7dazzler15AlignmentHeader",
						"protection": "public",
						"endchar": 5,
						"endline": 1303,
						"comment": "ditto\n"
					},
					{
						"constraint": "isInputRange!R && (is(const(ElementType!R) == const(AlignmentChain)) || is(const(ElementType!R) == const(FlatLocalAlignment)))",
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"line": 1312,
						"kind": "template",
						"char": 19,
						"members": [
							{
								"parameters": [
									{
										"type": "R",
										"name": "alignments"
									}
								],
								"line": 1312,
								"kind": "function",
								"char": 19,
								"name": "inferTracePointDistanceFrom",
								"type": "size_t(R alignments)",
								"endchar": 5,
								"endline": 1322
							}
						],
						"name": "inferTracePointDistanceFrom",
						"protection": "public",
						"comment": "Infer trace points spacing from `alignments`.\n\nThis do NOT advance `alignments`.\n\nReturns: `tracePointDistance` of the first element of `alignments` or\n`100` if `alignments` is empty.\n"
					}
				],
				"name": "AlignmentHeader",
				"protection": "public",
				"comment": "Meta information about a set of alignments, e.g. a LAS file.\n\nUsually this is created by reading a LAS file as efficiently as possible\nto improve performance of subsequent operations on the LAS file, e.g.\nby pre-allocating memory.\n"
			},
			{
				"line": 1423,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 1426,
						"kind": "enum member",
						"char": 5,
						"name": "overwrite",
						"protection": "public",
						"value": "cast(ubyte)0u",
						"comment": "Keep a single buffer and keep overwriting it with every new record.\n"
					},
					{
						"line": 1429,
						"kind": "enum member",
						"char": 5,
						"name": "dynamic",
						"protection": "public",
						"value": "1",
						"comment": "Allocate a new buffer for every record. Use a `std.array.Appender`\nif the number of records is unknown.\n"
					},
					{
						"line": 1433,
						"kind": "enum member",
						"char": 5,
						"name": "preallocated",
						"protection": "public",
						"value": "2",
						"comment": "Write all records to a continuous stretch of memory pre-allocated by\nthe caller. The memory may be uninitialized since it will always be\nwritten to before any read occurs.\n"
					},
					{
						"line": 1435,
						"kind": "enum member",
						"char": 5,
						"name": "skip",
						"protection": "public",
						"value": "3",
						"comment": "Do not use memory at all instead just skip over the records.\n"
					}
				],
				"name": "BufferMode",
				"protection": "public",
				"baseDeco": "h",
				"comment": "Controls how to manage the buffer when reading data into memory.\n"
			},
			{
				"line": 1442,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"line": 1463,
						"kind": "function",
						"originalType": "const pure nothrow @nogc @property @safe size_t()",
						"char": 22,
						"name": "numLocalAlignments",
						"deco": "xFNaNbNdNiNfZm",
						"protection": "public",
						"endchar": 5,
						"endline": 1466,
						"comment": "Total number of local alignments in the LAS file. This is not affected\nby range operation, e.g. `popFront`.\n\nSee_also: `length`\n"
					},
					{
						"line": 1475,
						"kind": "function",
						"originalType": "const pure nothrow @nogc @property @safe trace_point_t()",
						"char": 29,
						"name": "tracePointDistance",
						"deco": "xFNaNbNdNiNfZt",
						"protection": "public",
						"endchar": 5,
						"endline": 1478,
						"comment": "Trace point spacing of the LAS file.\n"
					},
					{
						"parameters": [
							{
								"deco": "xAya",
								"name": "lasFile"
							},
							{
								"deco": "E7dentist7dazzler10BufferMode",
								"name": "bufferMode"
							},
							{
								"deco": "AS7dentist6common10alignments4base10TracePoint",
								"default": "[]",
								"name": "tracePointBuffer"
							}
						],
						"line": 1486,
						"kind": "constructor",
						"originalType": "(const string lasFile, BufferMode bufferMode, TracePoint[] tracePointBuffer = [])",
						"char": 15,
						"name": "this",
						"deco": "FxAyaE7dentist7dazzler10BufferModeASQBe6common10alignments4base10TracePointZCQCtQCo20LocalAlignmentReader",
						"protection": "protected",
						"endchar": 5,
						"endline": 1495
					},
					{
						"parameters": [
							{
								"deco": "xAya",
								"name": "lasFile"
							},
							{
								"deco": "Aya",
								"name": "dbA"
							},
							{
								"deco": "Aya",
								"name": "dbB"
							},
							{
								"deco": "E7dentist7dazzler10BufferMode",
								"name": "bufferMode"
							},
							{
								"deco": "AS7dentist6common10alignments4base10TracePoint",
								"default": "[]",
								"name": "tracePointBuffer"
							}
						],
						"line": 1498,
						"kind": "constructor",
						"originalType": "(const string lasFile, string dbA, string dbB, BufferMode bufferMode, TracePoint[] tracePointBuffer = [])",
						"char": 15,
						"name": "this",
						"deco": "FxAyaAyaQdE7dentist7dazzler10BufferModeASQBe6common10alignments4base10TracePointZCQCtQCo20LocalAlignmentReader",
						"protection": "protected",
						"endchar": 5,
						"endline": 1515
					},
					{
						"line": 1579,
						"kind": "function",
						"char": 10,
						"name": "reset",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 1584,
						"comment": "Reset the range. This can be used to walk over a LAS file multiple\ntimes without reopening the `std.stdio.File` or recreating the\nbuffers.\n\nThis requires a seek-able file as it seeks to the begin of the\nunderlying LAS file and adjusts the range state accordingly.\n"
					},
					{
						"line": 1588,
						"kind": "function",
						"char": 20,
						"name": "empty",
						"deco": "xFNaNbNdNfZb",
						"protection": "public",
						"endchar": 5,
						"endline": 1591,
						"comment": "Range interface.\n"
					},
					{
						"line": 1595,
						"kind": "function",
						"originalType": "const pure nothrow @property @safe size_t()",
						"char": 22,
						"name": "length",
						"deco": "xFNaNbNdNfZm",
						"protection": "public",
						"endchar": 5,
						"endline": 1598,
						"comment": "ditto\n"
					},
					{
						"line": 1602,
						"kind": "function",
						"char": 10,
						"name": "popFront",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 1609,
						"comment": "ditto\n"
					},
					{
						"line": 1613,
						"kind": "function",
						"char": 34,
						"name": "front",
						"deco": "FNaNbNdNfZS7dentist6common10alignments4base18FlatLocalAlignment",
						"protection": "public",
						"endchar": 5,
						"endline": 1618,
						"comment": "ditto\n"
					},
					{
						"line": 1622,
						"kind": "function",
						"char": 20,
						"name": "skipTracePoints",
						"deco": "xFNaNbNdNfZb",
						"protection": "public",
						"endchar": 5,
						"endline": 1625,
						"comment": "Returns whether reading or skipping trace points.\n"
					},
					{
						"line": 1633,
						"kind": "function",
						"originalType": "const pure nothrow @property @safe size_t()",
						"char": 22,
						"name": "currentNumTracePoints",
						"deco": "xFNaNbNdNfZm",
						"protection": "public",
						"endchar": 5,
						"endline": 1636,
						"comment": "Returns the number of trace points in the current local alignment\neven if `skipTracePoints` is true.\n\nThis is required because the number of trace points is unavailable in\nthe `front` element if `skipTracePoints` is true.\n"
					},
					{
						"line": 1640,
						"kind": "function",
						"char": 10,
						"name": "readHeader",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 1644
					},
					{
						"line": 1647,
						"kind": "function",
						"char": 10,
						"name": "readNumLocalAlignments",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 1653
					},
					{
						"line": 1656,
						"kind": "function",
						"char": 10,
						"name": "readTracePointDistance",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 1663
					},
					{
						"line": 1666,
						"kind": "function",
						"char": 10,
						"name": "readLocalAlignment",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 1689
					},
					{
						"line": 1692,
						"kind": "function",
						"char": 10,
						"name": "readOverlapHead",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 1700
					},
					{
						"line": 1703,
						"kind": "function",
						"char": 10,
						"name": "fillInOverlapHead",
						"deco": "FNaNbNfZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 1733
					},
					{
						"line": 1736,
						"kind": "function",
						"char": 10,
						"name": "fillInContigLengths",
						"deco": "FNaNfZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 1755
					},
					{
						"line": 1758,
						"kind": "function",
						"originalType": "const pure @safe size_t()",
						"char": 12,
						"name": "getTraceVectorLength",
						"deco": "xFNaNfZm",
						"protection": "protected",
						"endchar": 5,
						"endline": 1770
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "traceLength"
							}
						],
						"line": 1773,
						"kind": "function",
						"originalType": "void(size_t traceLength)",
						"char": 10,
						"name": "readTraceVector",
						"deco": "FmZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 1780
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "traceLength"
							}
						],
						"line": 1783,
						"kind": "function",
						"originalType": "void(size_t traceLength)",
						"char": 10,
						"name": "skipTraceVector",
						"deco": "FmZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 1788
					},
					{
						"line": 1791,
						"kind": "function",
						"char": 10,
						"name": "rewriteTracePointBufferToLargeTracePointType",
						"deco": "FZv",
						"protection": "protected",
						"endchar": 5,
						"endline": 1809
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "traceLength"
							}
						],
						"line": 1812,
						"kind": "function",
						"originalType": "pure nothrow @property ubyte[](size_t traceLength)",
						"char": 23,
						"name": "getRawTracePointBuffer",
						"deco": "FNaNbNdmZAh",
						"protection": "protected",
						"endchar": 5,
						"endline": 1821
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "what"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 1824,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"parameters": [
									{
										"type": "T[]",
										"storageClass": [
											"const"
										],
										"name": "gotBuffer"
									},
									{
										"type": "T[]",
										"storageClass": [
											"const"
										],
										"name": "expBuffer"
									}
								],
								"line": 1824,
								"kind": "function",
								"char": 10,
								"name": "unexpectedEOF",
								"type": "void(const T[] gotBuffer, const T[] expBuffer)",
								"endchar": 5,
								"endline": 1832
							}
						],
						"name": "unexpectedEOF",
						"protection": "protected"
					},
					{
						"line": 1442,
						"kind": "destructor",
						"char": 1,
						"name": "~this",
						"deco": "FNeZv",
						"protection": "public"
					}
				],
				"name": "LocalAlignmentReader",
				"protection": "public",
				"comment": "Read local alignments from a LAS file.\n\nSee_also: `getFlatLocalAlignments` for more details\n"
			},
			{
				"constraint": "isInputRange!R && is(const(ElementType!R) == const(FlatLocalAlignment))",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 1888,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"const"
								],
								"name": "lasFile"
							},
							{
								"type": "R",
								"name": "flatLocalAlignments"
							}
						],
						"line": 1888,
						"kind": "function",
						"char": 6,
						"name": "writeAlignments",
						"type": "void(const string lasFile, R flatLocalAlignments)",
						"endchar": 1,
						"endline": 1910
					}
				],
				"name": "writeAlignments",
				"protection": "public",
				"comment": "Write alignments to `lasFile`. This method takes care of the differences\nbetween alignment flags in DENTIST and Dazzler code.\n\n`lasFile` must point to a seek-able file because the LAS header is updated\nafter writing all data to avoid traversing the data twice.\n"
			},
			{
				"constraint": "isInputRange!R && is(const(ElementType!R) == const(AlignmentChain))",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 1913,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"const"
								],
								"name": "lasFile"
							},
							{
								"type": "R",
								"name": "alignmentChains"
							}
						],
						"line": 1913,
						"kind": "function",
						"char": 6,
						"name": "writeAlignments",
						"type": "void(const string lasFile, R alignmentChains)",
						"endchar": 1,
						"endline": 1935
					}
				],
				"name": "writeAlignments",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "lasFile"
					}
				],
				"line": 2149,
				"kind": "function",
				"originalType": "trace_point_t(in string lasFile)",
				"char": 15,
				"name": "getTracePointDistance",
				"deco": "FIAyaZt",
				"protection": "public",
				"endchar": 1,
				"endline": 2152,
				"comment": "Returns the trace point distance in `lasFile`.\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbA"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbB"
					},
					{
						"deco": "xS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"in"
						],
						"name": "ac"
					},
					{
						"deco": "xm",
						"storageClass": [
							"in"
						],
						"default": "1048576LU",
						"name": "memoryLimit"
					}
				],
				"line": 2160,
				"kind": "function",
				"originalType": "(in string dbA, in string dbB, in AlignmentChain ac, in size_t memoryLimit = 2 ^^ 20)",
				"char": 6,
				"name": "getExactAlignment",
				"deco": "FIAyaIQeIS7dentist6common10alignments4base14AlignmentChainImZSQCa4util6string__T17SequenceAlignmentTAyaVQea14_61203d3d2062203f2030203a2031ZQCh",
				"protection": "public",
				"endchar": 1,
				"endline": 2175,
				"comment": "$(RED [Experimental]) Reconstruct the alignment matrix for `ac`\nforce-filling gaps in the chain. Restrict reconstruction to\n`[beginA, endA)` on contig A if given.\n\nThe implementation is rather inefficient and should be avoided.\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbA"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbB"
					},
					{
						"deco": "xS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"in"
						],
						"name": "ac"
					},
					{
						"deco": "xk",
						"storageClass": [
							"in"
						],
						"name": "beginA"
					},
					{
						"deco": "xk",
						"storageClass": [
							"in"
						],
						"name": "endA"
					},
					{
						"deco": "xm",
						"storageClass": [
							"in"
						],
						"default": "1048576LU",
						"name": "memoryLimit"
					}
				],
				"line": 2178,
				"kind": "function",
				"originalType": "(in string dbA, in string dbB, in AlignmentChain ac, in coord_t beginA, in coord_t endA, in size_t memoryLimit = 2 ^^ 20)",
				"char": 6,
				"name": "getExactAlignment",
				"deco": "FIAyaIQeIS7dentist6common10alignments4base14AlignmentChainIkIkImZSQCe4util6string__T17SequenceAlignmentTAyaVQea14_61203d3d2062203f2030203a2031ZQCh",
				"protection": "public",
				"endchar": 1,
				"endline": 2221,
				"comment": "ditto\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					},
					{
						"deco": "xAE7dentist7dazzler13DBdumpOptions",
						"storageClass": [
							"in"
						],
						"default": "[]",
						"name": "dbdumpOptions"
					}
				],
				"line": 2737,
				"kind": "function",
				"originalType": "(in string dbFile, in DBdumpOptions[] dbdumpOptions = [])",
				"char": 6,
				"name": "getDbRecords",
				"deco": "FIAyaIAE7dentist7dazzler13DBdumpOptionsZSQBhQBc__T12DbDumpReaderTCQCg4util7process__T9LinesPipeTSQDlQBfQBd11ProcessInfoVE3std8typecons__T4FlagVAyaa10_69734275666665726564ZQBii0ZQDoZQFb",
				"protection": "public",
				"endchar": 1,
				"endline": 2742,
				"comment": "    Get the designated records of `dbFile`. Returns all records unless\n    `recordNumbers` is given.\n\n    Returns: lazy range of designated `DbRecord`s.\n    Throws: `DazzlerCommandException` if `recordNumber` is not in `dbFile`\n"
			},
			{
				"constraint": "isForwardRange!Range && is(ElementType!Range : size_t)",
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 2745,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							},
							{
								"type": "Range",
								"name": "recordNumbers"
							},
							{
								"type": "DBdumpOptions[]",
								"storageClass": [
									"in"
								],
								"default": "[]",
								"name": "dbdumpOptions"
							}
						],
						"line": 2745,
						"kind": "function",
						"char": 6,
						"name": "getDbRecords",
						"type": "(in string dbFile, Range recordNumbers, in DBdumpOptions[] dbdumpOptions = [])",
						"endchar": 1,
						"endline": 2753
					}
				],
				"name": "getDbRecords",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"line": 2792,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 2794,
						"kind": "struct",
						"char": 12,
						"members": [
							{
								"line": 2798,
								"kind": "variable",
								"originalType": "id_t",
								"char": 14,
								"name": "well",
								"deco": "k",
								"protection": "public",
								"offset": 0,
								"comment": "ID of the well where the read occurred or zero-based contig index\nin the containing scaffold.\n"
							},
							{
								"line": 2800,
								"kind": "alias",
								"originalType": "well",
								"char": 9,
								"name": "contigIdx",
								"protection": "public",
								"comment": "ditto\n"
							},
							{
								"line": 2804,
								"kind": "variable",
								"originalType": "coord_t",
								"char": 17,
								"name": "pulseStart",
								"deco": "k",
								"protection": "public",
								"offset": 4,
								"comment": "Start of the high-quality region for reads or begin coordinate\non the scaffold (including gaps) for contigs.\n"
							},
							{
								"line": 2805,
								"kind": "alias",
								"originalType": "pulseStart",
								"char": 9,
								"name": "begin",
								"protection": "public"
							},
							{
								"line": 2809,
								"kind": "variable",
								"originalType": "coord_t",
								"char": 17,
								"name": "pulseEnd",
								"deco": "k",
								"protection": "public",
								"offset": 8,
								"comment": "End of the high-quality region for reads or end coordinate\non the scaffold (including gaps) for contigs.\n"
							},
							{
								"line": 2810,
								"kind": "alias",
								"originalType": "pulseEnd",
								"char": 9,
								"name": "end",
								"protection": "public"
							},
							{
								"line": 2813,
								"kind": "variable",
								"char": 15,
								"name": "readQuality",
								"deco": "f",
								"protection": "public",
								"offset": 12,
								"comment": "Read quality in [0, 1] for reads. Does not apply to contigs.\n"
							},
							{
								"line": 2818,
								"kind": "function",
								"originalType": "const pure nothrow @property @safe coord_t()",
								"char": 27,
								"name": "pulseLength",
								"deco": "xFNaNbNdNfZk",
								"protection": "public",
								"endchar": 9,
								"endline": 2821,
								"comment": "Length of the high-quality region for reads or length of the\ncontig for contigs.\n"
							},
							{
								"line": 2824,
								"kind": "alias",
								"originalType": "pulseLength",
								"char": 9,
								"name": "length",
								"protection": "public",
								"comment": "ditto\n"
							}
						],
						"name": "PacBioReadInfo",
						"protection": "public"
					},
					{
						"line": 2828,
						"kind": "variable",
						"originalType": "id_t",
						"char": 10,
						"name": "readNumber",
						"deco": "k",
						"protection": "public",
						"offset": 0,
						"comment": "One-based read/contig number.\n"
					},
					{
						"line": 2830,
						"kind": "alias",
						"originalType": "readNumber",
						"char": 5,
						"name": "contigId",
						"protection": "public",
						"comment": "ditto\n"
					},
					{
						"line": 2833,
						"kind": "variable",
						"char": 12,
						"name": "header",
						"deco": "Aya",
						"protection": "public",
						"offset": 8,
						"comment": "FASTA header\n"
					},
					{
						"line": 2836,
						"kind": "variable",
						"char": 20,
						"name": "pacBioReadInfo",
						"deco": "S7dentist7dazzler8DbRecord14PacBioReadInfo",
						"protection": "public",
						"offset": 24,
						"comment": "PacBio read information for reads and assembly location for contigs.\n"
					},
					{
						"line": 2838,
						"kind": "alias",
						"originalType": "pacBioReadInfo",
						"char": 5,
						"name": "location",
						"protection": "public",
						"comment": "ditto\n"
					},
					{
						"line": 2841,
						"kind": "variable",
						"char": 12,
						"name": "sequence",
						"deco": "Aya",
						"protection": "public",
						"offset": 40,
						"comment": "Base pair sequence.\n"
					},
					{
						"line": 2844,
						"kind": "variable",
						"char": 12,
						"name": "intrinsicQualityVector",
						"deco": "Ag",
						"protection": "public",
						"offset": 56,
						"comment": "Intrinsic QVs.\n"
					},
					{
						"line": 2845,
						"kind": "alias",
						"originalType": "intrinsicQualityVector",
						"char": 5,
						"name": "intrinsicQVs",
						"protection": "public"
					},
					{
						"storageClass": [
							"enum"
						],
						"line": 2848,
						"kind": "variable",
						"char": 10,
						"name": "maxQV",
						"deco": "i",
						"init": "50",
						"protection": "public",
						"comment": "Maximum allowed QV value.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "xa",
								"name": "qv"
							}
						],
						"line": 2852,
						"kind": "function",
						"originalType": "byte(const char qv)",
						"char": 17,
						"name": "fromQVChar",
						"deco": "FxaZg",
						"protection": "public",
						"endchar": 5,
						"endline": 2860,
						"comment": "Get numeric QV from character `qv`.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "xg",
								"name": "qv"
							}
						],
						"line": 2864,
						"kind": "function",
						"originalType": "char(const byte qv)",
						"char": 17,
						"name": "toQVChar",
						"deco": "FxgZa",
						"protection": "public",
						"endchar": 5,
						"endline": 2872,
						"comment": "Get QV character from numeric `qv` value.\n"
					}
				],
				"name": "DbRecord",
				"protection": "public",
				"comment": "Captures information about a single entry in a Dazzler DB.\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					}
				],
				"line": 3329,
				"kind": "function",
				"originalType": "(in string dbFile)",
				"char": 6,
				"name": "getFastaSequences",
				"deco": "FIAyaZS3std5range__T4TakeTSQuQs__T9GeneratorS_D7dentist7dazzler__T17getFastaSequencesTAmZQxFIQDnQkZ16countedSequencesMFZAyaZQDmZQEe",
				"protection": "public",
				"endchar": 1,
				"endline": 3334,
				"comment": "    Get the base pair sequences of the designated records. This does NOT\n    include the header.\n\n    Returns sequences from all records if `recordNumbers` is empty.\n\n    Throws: `DazzlerCommandException` if `recordNumber` is not in `dbFile`\n"
			},
			{
				"constraint": "isForwardRange!Range && is(ElementType!Range : size_t)",
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 3337,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							},
							{
								"type": "Range",
								"name": "recordNumbers"
							}
						],
						"line": 3337,
						"kind": "function",
						"char": 6,
						"name": "getFastaSequences",
						"type": "(in string dbFile, Range recordNumbers)",
						"endchar": 1,
						"endline": 3370
					}
				],
				"name": "getFastaSequences",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					},
					{
						"deco": "k",
						"name": "recordNumber"
					},
					{
						"deco": "xk",
						"storageClass": [
							"in"
						],
						"default": "1024u",
						"name": "cacheSize"
					}
				],
				"line": 3388,
				"kind": "function",
				"originalType": "string(in string dbFile, id_t recordNumber, in id_t cacheSize = 1024)",
				"char": 8,
				"name": "getFastaSequence",
				"deco": "FIAyakIkZAya",
				"protection": "public",
				"endchar": 1,
				"endline": 3433,
				"comment": "    Get the base pair sequence of the designated record.\n\n    This methods caches and pre-fetches sequences in order to improve\n    performance and reduce the number of forks. It uses two caches selected\n    by `dbFile` which each hold up to `cacheSize` many read sequence at once.\n    If `recordNumber` is not in the pre-fetched segment the next `cacheSize`\n    many sequences starting with `recordNumber` are fetched.\n\n    Params:\n        dbFile = path to DB\n        recordNumber = one-based number of the desired record\n        cacheSize = maximum number of reads in the cache\n    Throws: DazzlerCommandException if recordNumber is not in dbFile\n"
			},
			{
				"constraint": "isInputRange!Range && is(ElementType!Range : size_t)",
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 3474,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							},
							{
								"type": "Range",
								"name": "recordNumbers"
							},
							{
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"name": "fastaLineWidth"
							}
						],
						"line": 3474,
						"kind": "function",
						"char": 6,
						"name": "getFastaEntries",
						"type": "(in string dbFile, Range recordNumbers, in size_t fastaLineWidth)",
						"endchar": 1,
						"endline": 3488
					}
				],
				"name": "getFastaEntries",
				"protection": "public",
				"comment": "    Get the designated set of records in FASTA format. If `recordNumbers` is\n    empty the whole DB will be converted.\n\n    Returns: lazy range of strings\n"
			},
			{
				"constraint": "isInputRange!Range && isSomeString!(ElementType!Range)",
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 3619,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "Range",
								"name": "fastaRecords"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "tmpdir"
							},
							{
								"type": "string[]",
								"storageClass": [
									"in"
								],
								"default": "[]",
								"name": "dbsplitOptions"
							},
							{
								"type": "Append",
								"default": "No.append",
								"name": "append"
							}
						],
						"line": 3619,
						"kind": "function",
						"char": 8,
						"name": "buildDamFile",
						"type": "string(Range fastaRecords, in string tmpdir, in string[] dbsplitOptions = [], Append append = No.append)",
						"endchar": 1,
						"endline": 3631
					}
				],
				"name": "buildDamFile",
				"protection": "public",
				"comment": "    Build `outputDb` with the given set of FASTA records. If no `outputDb`\n    is given a temporary `.dam` file in `tmpdir` will be created.\n\n    Returns: path to DB\n"
			},
			{
				"constraint": "isInputRange!Range && isSomeString!(ElementType!Range)",
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 3634,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "outputDb"
							},
							{
								"type": "Range",
								"name": "fastaRecords"
							},
							{
								"type": "string[]",
								"storageClass": [
									"in"
								],
								"default": "[]",
								"name": "dbsplitOptions"
							},
							{
								"type": "Append",
								"default": "No.append",
								"name": "append"
							}
						],
						"line": 3634,
						"kind": "function",
						"char": 8,
						"name": "buildDamFile",
						"type": "string(string outputDb, Range fastaRecords, in string[] dbsplitOptions = [], Append append = No.append)",
						"endchar": 1,
						"endline": 3643
					}
				],
				"name": "buildDamFile",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"constraint": "isInputRange!Range && isSomeString!(ElementType!Range)",
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 3684,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "Range",
								"name": "fastaRecords"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "tmpdir"
							},
							{
								"type": "string[]",
								"storageClass": [
									"in"
								],
								"default": "[]",
								"name": "dbsplitOptions"
							},
							{
								"type": "Append",
								"default": "No.append",
								"name": "append"
							}
						],
						"line": 3684,
						"kind": "function",
						"char": 8,
						"name": "buildDbFile",
						"type": "string(Range fastaRecords, in string tmpdir, in string[] dbsplitOptions = [], Append append = No.append)",
						"endchar": 1,
						"endline": 3696
					}
				],
				"name": "buildDbFile",
				"protection": "public",
				"comment": "    Build `outputDb` with the given set of FASTA records. If no `outputDb`\n    is given a temporary `.db` file in `tmpdir` will be created.\n\n    Returns: path to DB\n"
			},
			{
				"constraint": "isInputRange!Range && isSomeString!(ElementType!Range)",
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 3699,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "outputDb"
							},
							{
								"type": "Range",
								"name": "fastaRecords"
							},
							{
								"type": "string[]",
								"storageClass": [
									"in"
								],
								"default": "[]",
								"name": "dbsplitOptions"
							},
							{
								"type": "Append",
								"default": "No.append",
								"name": "append"
							}
						],
						"line": 3699,
						"kind": "function",
						"char": 8,
						"name": "buildDbFile",
						"type": "string(string outputDb, Range fastaRecords, in string[] dbsplitOptions = [], Append append = No.append)",
						"endchar": 1,
						"endline": 3708
					}
				],
				"name": "buildDbFile",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 3746,
				"kind": "variable",
				"originalType": "id_t",
				"char": 11,
				"name": "minQVCoverage",
				"deco": "k",
				"init": "4u",
				"protection": "public",
				"comment": "Minimum alignment coverage required to compute intrinsic quality values\n(QVs).\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "lasFile"
					},
					{
						"deco": "k",
						"default": "0u",
						"name": "coverage"
					}
				],
				"line": 3757,
				"kind": "function",
				"originalType": "void(in string dbFile, in string lasFile, id_t coverage = 0)",
				"char": 6,
				"name": "computeQVs",
				"deco": "FIAyaIQekZv",
				"protection": "public",
				"endchar": 1,
				"endline": 3760,
				"comment": "Compute intrinsic quality values (QVs) from the alignments in `lasFile`.\n\nParams:\ndbFile = path to DB\nlasFile = alignments of entries in `dbFile`\nmasks = list of soft masks used with `DAScover`\ncoverage = coverage estimate passed to `DASqv`; estimate from\n`DAScover` will be used unless a positive `coverage` is provided.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "lasFile"
					},
					{
						"deco": "xAAya",
						"storageClass": [
							"in"
						],
						"name": "masks"
					},
					{
						"deco": "k",
						"default": "0u",
						"name": "coverage"
					}
				],
				"line": 3763,
				"kind": "function",
				"originalType": "void(in string dbFile, in string lasFile, in string[] masks, id_t coverage = 0)",
				"char": 6,
				"name": "computeQVs",
				"deco": "FIAyaIQeIAQikZv",
				"protection": "public",
				"endchar": 1,
				"endline": 3767,
				"comment": "ditto\n"
			},
			{
				"line": 3771,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 3774,
						"kind": "enum member",
						"char": 5,
						"name": "windowSize",
						"protection": "public",
						"value": "\"-w\""
					},
					{
						"line": 3776,
						"kind": "enum member",
						"char": 5,
						"name": "dustThreshold",
						"protection": "public",
						"value": "\"-t\""
					},
					{
						"line": 3778,
						"kind": "enum member",
						"char": 5,
						"name": "minIntervalSize",
						"protection": "public",
						"value": "\"-m\""
					},
					{
						"line": 3780,
						"kind": "enum member",
						"char": 5,
						"name": "baseCompositionBias",
						"protection": "public",
						"value": "\"-b\""
					}
				],
				"name": "DBdustOptions",
				"protection": "public",
				"baseDeco": "Aya",
				"comment": "Options for `DBdump`.\n"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 3785,
				"kind": "variable",
				"char": 6,
				"name": "dbdustMaskName",
				"deco": "Aya",
				"init": "\"dust\"",
				"protection": "public",
				"comment": "`DBdust` always produces a mask with this name.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					},
					{
						"deco": "xAAya",
						"storageClass": [
							"in"
						],
						"name": "dbdustOptions"
					}
				],
				"line": 3790,
				"kind": "function",
				"char": 6,
				"name": "dbdust",
				"deco": "FIAyaIAQfZv",
				"protection": "public",
				"endchar": 1,
				"endline": 3793,
				"comment": "Run `DBdust` on `dbFile`.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					},
					{
						"deco": "xAAya",
						"storageClass": [
							"in"
						],
						"name": "dalignerOptions"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "outdir"
					}
				],
				"line": 3804,
				"kind": "function",
				"char": 8,
				"name": "getDalignment",
				"deco": "FIAyaIAQfIQiZAya",
				"protection": "public",
				"endchar": 1,
				"endline": 3810,
				"comment": "    Align DB(s) to each other using `daligner` executed in `outdir`.\n\n    The paths `dbFile`, `referenceDb`, `queryDb` are relative to the current\n    working directory â NOT `outdir`.\n\n    Returns: path to LAS file.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "referenceDb"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "queryDb"
					},
					{
						"deco": "xAAya",
						"storageClass": [
							"in"
						],
						"name": "dalignerOptions"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "outdir"
					}
				],
				"line": 3813,
				"kind": "function",
				"char": 8,
				"name": "getDalignment",
				"deco": "FIAyaIQeIAQiIQlZAya",
				"protection": "public",
				"endchar": 1,
				"endline": 3819,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "refDb"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "queryDb"
					},
					{
						"deco": "xAAya",
						"storageClass": [
							"in"
						],
						"name": "damapperOptions"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "outdir"
					}
				],
				"line": 3830,
				"kind": "function",
				"char": 8,
				"name": "getDamapping",
				"deco": "FIAyaIQeIAQiIQlZAya",
				"protection": "public",
				"endchar": 1,
				"endline": 3841,
				"comment": "    Align `queryDb` against `refDb` using `damapper` executed in `outdir`.\n\n    The paths `refDb`, `queryDb` are relative to the current working\n    directory â NOT `outdir`.\n\n    Returns: path to LAS file.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					}
				],
				"line": 3854,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "lasFile"
							}
						],
						"line": 3854,
						"kind": "function",
						"char": 8,
						"name": "filterLocalAlignments",
						"type": "string(in string lasFile)",
						"endchar": 1,
						"endline": 3857
					}
				],
				"name": "filterLocalAlignments",
				"protection": "public",
				"comment": "Filter local alignments in `lasFile` producing a new LAS file.\n\nThe `lasFile` is read using `getFlatLocalAlignments` and `pred`\nis applied to every `FlatLocalAlignment`. The alignment is kept if `pred`\nevaluates to a truthy value and discarded otherwise.\n\nRead/contig lengths are filled in if `dbFile` is provided.\n\nBugs: LAs files referring to two different DBs cannot makes use of the\nfill-in feature for contig lengths.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					}
				],
				"line": 3860,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "lasFile"
							}
						],
						"line": 3860,
						"kind": "function",
						"char": 8,
						"name": "filterLocalAlignments",
						"type": "string(in string dbFile, in string lasFile)",
						"endchar": 1,
						"endline": 3872
					}
				],
				"name": "filterLocalAlignments",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "lasFile"
					},
					{
						"deco": "xS7dentist6common10alignments8chaining15ChainingOptions",
						"storageClass": [
							"in"
						],
						"name": "options"
					}
				],
				"line": 3968,
				"kind": "function",
				"char": 8,
				"name": "chainLocalAlignments",
				"deco": "FIAyaIQeIS7dentist6common10alignments8chaining15ChainingOptionsZAya",
				"protection": "public",
				"endchar": 1,
				"endline": 3989,
				"comment": "Chain local alignments in `lasFile` and write back to a LAS file.\n\nReturns: path to LAS file\nSee_also: `dentist.common.alignments.chaining`\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "lasFile"
					},
					{
						"deco": "xk",
						"storageClass": [
							"in"
						],
						"name": "properAlignmentAllowance"
					},
					{
						"deco": "E3std8typecons__T4FlagVAyaa9_666f726365466c6174ZQBf",
						"default": "Flag.no",
						"name": "forceFlat"
					}
				],
				"line": 4014,
				"kind": "function",
				"originalType": "string(in string dbFile, in string lasFile, in coord_t properAlignmentAllowance, Flag!\"forceFlat\" forceFlat = No.forceFlat)",
				"char": 8,
				"name": "filterPileUpAlignments",
				"deco": "FIAyaIQeIkE3std8typecons__T4FlagVAyaa9_666f726365466c6174ZQBfZQBd",
				"protection": "public",
				"endchar": 1,
				"endline": 4030,
				"comment": "Disables alignments that should not appear in a pile up.\n\nIf using the `lasFile` signature then this reads `lasFile` with contig\nlengths from `dbFile`, applies the filter and writes the result to the\nreturned LAS file. The resulting LAS file will have the same amount of\ndata as the input LAS file.\n\nIf using the array signature then the disabled flag of the array entries\nis modified according to the filter.\n\nReturns: path to LAS file or nothing.\nParams:\ndbFile = DB of involved reads\nlasFile = file of alignments\nalignments = array of alignments\nproperAlignmentAllowance = allowance when determining if an alignment\nends or starts at the tips of a contig.\nforceFlat = set alignment flags to make it look unchained and sort\nthe unchained alignments. This is required if theisValidPileUpAlignment alignments are\nchained and sorted as chains. $(I Warning: this changes the passed\narray!)\nSee_also: `isValidPileUpAlignment`\n"
			},
			{
				"parameters": [
					{
						"deco": "AS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"ref"
						],
						"name": "alignments"
					},
					{
						"deco": "xk",
						"storageClass": [
							"in"
						],
						"name": "properAlignmentAllowance"
					}
				],
				"line": 4033,
				"kind": "function",
				"originalType": "void(ref AlignmentChain[] alignments, in coord_t properAlignmentAllowance)",
				"char": 6,
				"name": "filterPileUpAlignments",
				"deco": "FKAS7dentist6common10alignments4base14AlignmentChainIkZv",
				"protection": "public",
				"endchar": 1,
				"endline": 4040,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "AS7dentist6common10alignments4base18FlatLocalAlignment",
						"storageClass": [
							"ref"
						],
						"name": "alignments"
					},
					{
						"deco": "xk",
						"storageClass": [
							"in"
						],
						"name": "properAlignmentAllowance"
					},
					{
						"deco": "E3std8typecons__T4FlagVAyaa9_666f726365466c6174ZQBf",
						"default": "Flag.no",
						"name": "forceFlat"
					}
				],
				"line": 4044,
				"kind": "function",
				"originalType": "void(ref FlatLocalAlignment[] alignments, in coord_t properAlignmentAllowance, Flag!\"forceFlat\" forceFlat = No.forceFlat)",
				"char": 6,
				"name": "filterPileUpAlignments",
				"deco": "FKAS7dentist6common10alignments4base18FlatLocalAlignmentIkE3std8typecons__T4FlagVAyaa9_666f726365466c6174ZQBfZv",
				"protection": "public",
				"endchar": 1,
				"endline": 4064,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base14AlignmentChain",
						"storageClass": [
							"ref"
						],
						"name": "alignment"
					},
					{
						"deco": "xk",
						"name": "allowance"
					}
				],
				"line": 4078,
				"kind": "function",
				"originalType": "bool(const ref AlignmentChain alignment, const coord_t allowance)",
				"char": 6,
				"name": "isValidPileUpAlignment",
				"deco": "FKxS7dentist6common10alignments4base14AlignmentChainxkZb",
				"protection": "public",
				"endchar": 1,
				"endline": 4093,
				"comment": "An alignment in a pile up is valid iff it is proper and the begin/end\nof both reads match.\n\nParams:\nalignment = alignment to investigate\nallowance = allowance when determining if an alignment\nends or starts at the tips of a contig.\nSee_also: `dentist.common.alignments.base.AlignmentChain.beginsWith`,\n`dentist.common.alignments.base.AlignmentChain.endsWith`,\n`dentist.common.alignments.base.FlatLocalAlignment.FlatLocus.beginsWithin`,\n`dentist.common.alignments.base.FlatLocalAlignment.FlatLocus.endsWithin`,\n"
			},
			{
				"parameters": [
					{
						"deco": "xS7dentist6common10alignments4base18FlatLocalAlignment",
						"storageClass": [
							"ref"
						],
						"name": "alignment"
					},
					{
						"deco": "xk",
						"name": "allowance"
					}
				],
				"line": 4096,
				"kind": "function",
				"originalType": "bool(const ref FlatLocalAlignment alignment, const coord_t allowance)",
				"char": 6,
				"name": "isValidPileUpAlignment",
				"deco": "FKxS7dentist6common10alignments4base18FlatLocalAlignmentxkZb",
				"protection": "public",
				"endchar": 1,
				"endline": 4111,
				"comment": "ditto\n"
			},
			{
				"constraint": "isOptionsList!(typeof(options.daccordOptions)) && isOptionsList!(typeof(options.dalignerOptions)) && isOptionsList!(typeof(options.dbsplitOptions)) && is(typeof(options.properAlignmentAllowance) == const(coord_t)) && isSomeString!(typeof(options.tmpdir))",
				"parameters": [
					{
						"kind": "type",
						"name": "Options"
					}
				],
				"line": 4132,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							},
							{
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"name": "readId"
							},
							{
								"type": "Options",
								"storageClass": [
									"in"
								],
								"name": "options"
							}
						],
						"line": 4132,
						"kind": "function",
						"char": 8,
						"name": "getConsensus",
						"type": "string(in string dbFile, in size_t readId, in Options options)",
						"endchar": 1,
						"endline": 4163
					}
				],
				"name": "getConsensus",
				"protection": "public",
				"comment": "    Build consensus using `daccord`.\n\n    If no `filteredLasFile` is provided the reads will be self-aligned using\n    `daligner` and filtered with `filterPileUpAlignments`.\n\n    If `readId` is provided the option `\"-I{readId},{readId}\"` will be appended\n    to a copy of `options.daccordOptions`. This means the user may not provide\n    `readId` and limit the operation themselves or run `daccord` on all reads.\n\n    Params:\n        dbFile          = DB of reads\n        filteredLasFile = only \"true\" local alignments, i.e. without\n            repeat-induced alignments â  as good as possible.\n        readId          = the reference read used in the consensus procedure\n        options         = control the various aspects of the process\n    Returns: filename of consensus DB.\n"
			},
			{
				"constraint": "isOptionsList!(typeof(options.daccordOptions)) && isOptionsList!(typeof(options.dalignerOptions)) && isOptionsList!(typeof(options.dbsplitOptions)) && is(typeof(options.properAlignmentAllowance) == const(coord_t)) && isSomeString!(typeof(options.tmpdir))",
				"parameters": [
					{
						"kind": "type",
						"name": "Options"
					}
				],
				"line": 4166,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							},
							{
								"type": "Options",
								"storageClass": [
									"in"
								],
								"name": "options"
							}
						],
						"line": 4166,
						"kind": "function",
						"char": 8,
						"name": "getConsensus",
						"type": "string(in string dbFile, in Options options)",
						"endchar": 1,
						"endline": 4180
					}
				],
				"name": "getConsensus",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"constraint": "isOptionsList!(typeof(options.daccordOptions)) && isOptionsList!(typeof(options.dbsplitOptions)) && isSomeString!(typeof(options.tmpdir))",
				"parameters": [
					{
						"kind": "type",
						"name": "Options"
					}
				],
				"line": 4183,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "filteredLasFile"
							},
							{
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"name": "readId"
							},
							{
								"type": "Options",
								"storageClass": [
									"in"
								],
								"name": "options"
							}
						],
						"line": 4183,
						"kind": "function",
						"char": 8,
						"name": "getConsensus",
						"type": "string(in string dbFile, in string filteredLasFile, in size_t readId, in Options options)",
						"endchar": 1,
						"endline": 4208
					}
				],
				"name": "getConsensus",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"constraint": "isOptionsList!(typeof(options.daccordOptions)) && isOptionsList!(typeof(options.dbsplitOptions)) && isSomeString!(typeof(options.tmpdir))",
				"parameters": [
					{
						"kind": "type",
						"name": "Options"
					}
				],
				"line": 4211,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "filteredLasFile"
							},
							{
								"type": "Options",
								"storageClass": [
									"in"
								],
								"name": "options"
							}
						],
						"line": 4211,
						"kind": "function",
						"char": 8,
						"name": "getConsensus",
						"type": "string(in string dbFile, in string filteredLasFile, in Options options)",
						"endchar": 1,
						"endline": 4225
					}
				],
				"name": "getConsensus",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbA"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "baseDirectory"
					}
				],
				"line": 4309,
				"kind": "function",
				"char": 8,
				"name": "getLasFile",
				"deco": "FIAyaIQeZAya",
				"protection": "public",
				"endchar": 1,
				"endline": 4312,
				"comment": "Generate the LAS file name as `daligner`/`damapper` run in `baseDirectory`\ndoes.\n\nUses `dbB = dbA` if no `dbB` is provided.\n\nParams:\ndbA           = A-read DB\ndbB           = B-read DB\nbaseDirectory = directory where LAS file is/should be located\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbA"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbB"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "baseDirectory"
					}
				],
				"line": 4315,
				"kind": "function",
				"char": 8,
				"name": "getLasFile",
				"deco": "FIAyaIQeIQhZAya",
				"protection": "public",
				"endchar": 1,
				"endline": 4324,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbA"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "baseDirectory"
					}
				],
				"line": 4337,
				"kind": "function",
				"char": 6,
				"name": "lasFileGenerated",
				"deco": "FIAyaIQeZb",
				"protection": "public",
				"endchar": 1,
				"endline": 4340,
				"comment": "Check if a LAS file was generated by `daligner`/`damapper` run in\n`baseDirectory`.\n\nUses `dbB = dbA` if no `dbB` is provided.\n\nParams:\ndbA           = A-read DB\ndbB           = B-read DB\nbaseDirectory = directory where LAS file is/should be located\nSee_also: `getLasFile`\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbA"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbB"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "baseDirectory"
					}
				],
				"line": 4343,
				"kind": "function",
				"char": 6,
				"name": "lasFileGenerated",
				"deco": "FIAyaIQeIQhZb",
				"protection": "public",
				"endchar": 1,
				"endline": 4346,
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					}
				],
				"line": 4353,
				"kind": "function",
				"originalType": "id_t(in string dbFile)",
				"char": 6,
				"name": "getNumBlocks",
				"deco": "FIAyaZk",
				"protection": "public",
				"endchar": 1,
				"endline": 4380,
				"comment": "Return the number of blocks in `dbFile`.\n\nThrows: `DazzlerCommandException` if the DB is not split or the block\ncount could not be read.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					}
				],
				"line": 4387,
				"kind": "function",
				"originalType": "coord_t(in string dbFile)",
				"char": 9,
				"name": "getBlockSize",
				"deco": "FIAyaZk",
				"protection": "public",
				"endchar": 1,
				"endline": 4414,
				"comment": "Return the of block size of `dbFile`.\n\nThrows: `DazzlerCommandException` if the DB is not split or the block\nsize could not be read.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					}
				],
				"line": 4421,
				"kind": "function",
				"originalType": "coord_t(in string dbFile)",
				"char": 9,
				"name": "getContigCutoff",
				"deco": "FIAyaZk",
				"protection": "public",
				"endchar": 1,
				"endline": 4449,
				"comment": "Return the contig/read length cutoff of `dbFile`.\n\nThrows: `DazzlerCommandException` if the DB is not split or the cutoff\ncould not be read.\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					}
				],
				"line": 4457,
				"kind": "function",
				"originalType": "id_t(in string dbFile)",
				"char": 6,
				"name": "getNumContigs",
				"deco": "FIAyaZk",
				"protection": "public",
				"endchar": 1,
				"endline": 4460,
				"comment": "Get the number of reads/contig in `dbFile`.\n\nParams:\ndbFile      = path to DB\nuntrimmedDb = return count for trimmed/untrimmed DB\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					},
					{
						"deco": "E3std8typecons__T4FlagVAyaa11_756e7472696d6d65644462ZQBk",
						"default": "Flag.no",
						"name": "untrimmedDb"
					}
				],
				"line": 4463,
				"kind": "function",
				"originalType": "id_t(in string dbFile, Flag!\"untrimmedDb\" untrimmedDb = No.untrimmedDb)",
				"char": 6,
				"name": "getNumContigs",
				"deco": "FIAyaE3std8typecons__T4FlagVAyaa11_756e7472696d6d65644462ZQBkZk",
				"protection": "public",
				"endchar": 1,
				"endline": 4489,
				"comment": "ditto\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					}
				],
				"line": 4497,
				"kind": "function",
				"originalType": "(in string dbFile)",
				"char": 6,
				"name": "getScaffoldStructure",
				"deco": "FIAyaZS7dentist7dazzler23ScaffoldStructureReader",
				"protection": "public",
				"endchar": 1,
				"endline": 4504,
				"comment": "Returns a lazy range of `ScaffoldSegment`s describing the scaffold\nstructure.\n\nReturns: range of alternating `ContigSegment`s and `GapSegment`s packed in\n`ScaffoldSegment`s.\n"
			},
			{
				"line": 4509,
				"kind": "alias",
				"originalType": "Algebraic!(ContigSegment, GapSegment)",
				"char": 1,
				"name": "ScaffoldSegment",
				"deco": "S3std7variant__T8VariantNVmi56TS7dentist7dazzler13ContigSegmentTSQBhQBc10GapSegmentZQCq",
				"protection": "public",
				"comment": "Either `ContigSegment` or `GapSegment`. Used to create a mixed range of\nthe two base types.\n"
			},
			{
				"line": 4513,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 4516,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "globalContigId",
						"deco": "m",
						"protection": "public",
						"offset": 0,
						"comment": "One-based contig ID in the Dazzler DB.\n"
					},
					{
						"line": 4518,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "scaffoldId",
						"deco": "m",
						"protection": "public",
						"offset": 8,
						"comment": "Zero-based ID of the scaffold.\n"
					},
					{
						"line": 4520,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "contigId",
						"deco": "m",
						"protection": "public",
						"offset": 16,
						"comment": "Zero-based ID of the contig within the scaffold.\n"
					},
					{
						"line": 4522,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "begin",
						"deco": "m",
						"protection": "public",
						"offset": 24,
						"comment": "Begin coordinate within the scaffold.\n"
					},
					{
						"line": 4524,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "end",
						"deco": "m",
						"protection": "public",
						"offset": 32,
						"comment": "End coordinate within the scaffold.\n"
					},
					{
						"line": 4526,
						"kind": "variable",
						"char": 12,
						"name": "header",
						"deco": "Aya",
						"protection": "public",
						"offset": 40,
						"comment": "FASTA header of the scaffold.\n"
					},
					{
						"line": 4534,
						"kind": "function",
						"originalType": "const pure nothrow @property size_t()",
						"char": 22,
						"name": "length",
						"deco": "xFNaNbNdZm",
						"protection": "public",
						"endchar": 5,
						"endline": 4537,
						"comment": "Length of the contig.\n"
					}
				],
				"name": "ContigSegment",
				"protection": "public",
				"comment": "Describes the location of a contig inside its scaffold.\n"
			},
			{
				"line": 4540,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 4543,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "beginGlobalContigId",
						"deco": "m",
						"protection": "public",
						"offset": 0,
						"comment": "One-based contig ID in the Dazzler DB of the contig preceding the gap.\n"
					},
					{
						"line": 4545,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "endGlobalContigId",
						"deco": "m",
						"protection": "public",
						"offset": 8,
						"comment": "One-based contig ID in the Dazzler DB of the contig following the gap.\n"
					},
					{
						"line": 4547,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "scaffoldId",
						"deco": "m",
						"protection": "public",
						"offset": 16,
						"comment": "Zero-based ID of the scaffold.\n"
					},
					{
						"line": 4549,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "beginContigId",
						"deco": "m",
						"protection": "public",
						"offset": 24,
						"comment": "Zero-based ID of the contig preceding the gap within the scaffold.\n"
					},
					{
						"line": 4551,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "endContigId",
						"deco": "m",
						"protection": "public",
						"offset": 32,
						"comment": "Zero-based ID of the contig following the gap within the scaffold.\n"
					},
					{
						"line": 4553,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "begin",
						"deco": "m",
						"protection": "public",
						"offset": 40,
						"comment": "Begin coordinate within the scaffold.\n"
					},
					{
						"line": 4555,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "end",
						"deco": "m",
						"protection": "public",
						"offset": 48,
						"comment": "End coordinate within the scaffold.\n"
					},
					{
						"line": 4564,
						"kind": "function",
						"originalType": "const pure nothrow @property size_t()",
						"char": 22,
						"name": "length",
						"deco": "xFNaNbNdZm",
						"protection": "public",
						"endchar": 5,
						"endline": 4567,
						"comment": "Length of the gap.\n"
					}
				],
				"name": "GapSegment",
				"protection": "public"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "dbFile"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "maskName"
					},
					{
						"deco": "E3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBi",
						"default": "Flag.no",
						"name": "allowBlock"
					}
				],
				"line": 4758,
				"kind": "function",
				"originalType": "(in string dbFile, in string maskName, Flag!\"allowBlock\" allowBlock = No.allowBlock)",
				"char": 6,
				"name": "getMaskFiles",
				"deco": "FNaNfIAyaIQeE3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBiZSQCdQCc__T5TupleTQBxVQCba6_686561646572TQCuVQCya4_64617461ZQBx",
				"protection": "public",
				"endchar": 1,
				"endline": 4797,
				"comment": "    Get the hidden files comprising the designated mask.\n\n    Returns: tuple with fields `header` and `data`\n    Params:\n        dbFile = path to DB\n        maskName = name of the mask. This must not contain dots (`\".\"`) unless\n            `allowBlock` is true in which case a single dot followed by the\n            block ID is allowed. Slashes (`\"/`) are never allowed.\n        allowBlock = whether or not `maskName` contains a block ID\n"
			},
			{
				"line": 4803,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "nextInChain"
							}
						],
						"line": 4805,
						"kind": "constructor",
						"originalType": "pure nothrow @nogc @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
						"char": 30,
						"name": "this",
						"deco": "FNaNbNiNfAyaQdmC6object9ThrowableZC7dentist7dazzler19MaskReaderException",
						"protection": "public",
						"endchar": 5,
						"endline": 4809
					}
				],
				"name": "MaskReaderException",
				"protection": "public",
				"comment": "Thrown on failure while reading a Dazzler mask.\n\nSee_Also: `readMask`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Interval"
					}
				],
				"line": 4831,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "maskName"
							}
						],
						"line": 4831,
						"kind": "function",
						"char": 12,
						"name": "readMask",
						"type": "Interval[](in string dbFile, in string maskName)",
						"endchar": 1,
						"endline": 4899
					}
				],
				"name": "readMask",
				"protection": "public",
				"comment": "    Read the `Interval`s of a Dazzler mask for `dbFile`.\n\n    Params:\n        Interval = target type for intervals the is default-constructible\n            and has three fields `tag`, `begin` and `end`.\n        dbFile   = path to DB\n        maskName = name of the mask\n    Throws: `MaskReaderException`\n    See_Also: `writeMask`, `getMaskFiles`\n"
			},
			{
				"constraint": "isInputRange!Intervals",
				"parameters": [
					{
						"kind": "type",
						"name": "Intervals"
					}
				],
				"line": 5008,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "maskName"
							},
							{
								"type": "Intervals",
								"name": "intervals"
							}
						],
						"line": 5008,
						"kind": "function",
						"char": 6,
						"name": "writeMask",
						"type": "void(in string dbFile, in string maskName, Intervals intervals)",
						"endchar": 1,
						"endline": 5058
					}
				],
				"name": "writeMask",
				"protection": "public",
				"comment": "    Write the list of intervals to a Dazzler mask for `dbFile`.\n\n    Params:\n        dbFile   = path to DB\n        maskName = name of the mask\n        intervals = range of intervals the have three fields `tag`, `begin`\n            and `end`\n    See_Also: `readMask`, `getMaskFiles`\n"
			},
			{
				"line": 5064,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 5067,
						"kind": "enum member",
						"char": 5,
						"name": "exact",
						"protection": "public",
						"value": "0",
						"comment": "Extra contents must match exactly for all blocks.\n"
					},
					{
						"line": 5069,
						"kind": "enum member",
						"char": 5,
						"name": "sum",
						"protection": "public",
						"value": "1",
						"comment": "Extra contents are summed like vectors across blocks.\n"
					}
				],
				"name": "AccumMode",
				"protection": "public",
				"baseDeco": "i",
				"comment": "Accumulation mode for merging extras of block tracks.\n\nSee_also: `DazzExtra`\n"
			},
			{
				"constraint": "is(T == long) || is(T == double)",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 5078,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 5078,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 5082,
								"kind": "variable",
								"char": 18,
								"name": "vtype",
								"deco": "i",
								"init": "0",
								"comment": "Dynamic value type representation.\n"
							},
							{
								"kind": "variable",
								"line": 5089,
								"char": 12,
								"type": "string",
								"comment": "Extra name.\n",
								"name": "name"
							},
							{
								"kind": "variable",
								"line": 5093,
								"char": 9,
								"type": "T[]",
								"comment": "Extra data. Alias this allows accessing data directly in this\n`DazzExtra`, e.g. `extra[0 .. 10]` returns a slice of the first 10\nelements.\n",
								"name": "data"
							},
							{
								"kind": "variable",
								"line": 5098,
								"char": 15,
								"type": "AccumMode",
								"comment": "Defines how data from a different block-level extras is combined\nin `Catrack`.\n",
								"name": "accumMode"
							}
						],
						"name": "DazzExtra",
						"protection": "public"
					}
				],
				"name": "DazzExtra",
				"protection": "public",
				"comment": "Represents a track extra, i.e. additional data stored alongside a DB track.\n\nUse `dazzExtra` to construct objects.\n\nSee_also: `dazzExtra`, `readDazzExtra`, `writeDazzExtra`\n"
			},
			{
				"constraint": "is(T == long) || is(T == double)",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 5105,
				"kind": "template",
				"char": 13,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "name"
							},
							{
								"type": "T[]",
								"name": "data"
							},
							{
								"type": "AccumMode",
								"default": "AccumMode.init",
								"name": "accumMode"
							}
						],
						"line": 5105,
						"kind": "function",
						"char": 13,
						"name": "dazzExtra",
						"type": "DazzExtra!T(string name, T[] data, AccumMode accumMode = AccumMode.init)",
						"endchar": 1,
						"endline": 5109
					}
				],
				"name": "dazzExtra",
				"protection": "public",
				"comment": "Represents a track extra, i.e. additional data stored alongside a DB track.\n\nSee_also: `DazzExtra`, `readDazzExtra`, `writeDazzExtra`\n"
			},
			{
				"line": 5115,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"kind": "mixin",
						"protection": "public",
						"char": 5,
						"line": 5119,
						"name": "basicExceptionCtors!()"
					}
				],
				"name": "DazzExtraNotFound",
				"protection": "public",
				"comment": "Thrown on failure while reading a Dazzler mask.\n\nSee_Also: `readMask`\n"
			},
			{
				"constraint": "is(T == long) || is(T == double)",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 5134,
				"kind": "template",
				"char": 13,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "maskName"
							},
							{
								"type": "string",
								"name": "extraName"
							}
						],
						"line": 5134,
						"kind": "function",
						"char": 13,
						"name": "readDazzExtra",
						"type": "DazzExtra!T(in string dbFile, in string maskName, string extraName)",
						"endchar": 1,
						"endline": 5203
					}
				],
				"name": "readDazzExtra",
				"protection": "public",
				"comment": "    Read extra `extraName` of track `maskName` with elements of type `T` from\n    `dbFile`.\n\n    Returns: fully populated `DazzExtra!T`.\n    Throws: $(UL\n        $(LI `MaskReaderException` on read errors)\n        $(LI `DazzExtraNotFound` if no extra with given name exists)\n    )\n    See_Also: `writeDazzExtra`, `DazzExtra`\n"
			},
			{
				"constraint": "is(T == long) || is(T == double)",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 5217,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "dbFile"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "maskName"
							},
							{
								"type": "DazzExtra!T",
								"name": "extra"
							}
						],
						"line": 5217,
						"kind": "function",
						"char": 6,
						"name": "writeDazzExtra",
						"type": "void(in string dbFile, in string maskName, DazzExtra!T extra)",
						"endchar": 1,
						"endline": 5232
					}
				],
				"name": "writeDazzExtra",
				"protection": "public",
				"comment": "    Write extra `extraName` of track `maskName` with elements of type `T` from\n    `dbFile`.\n\n    Use `dazzExtra` to construct `DazzExtra` objects.\n\n    Note: the extra will be appended to the list of extras regardless of any\n        existing extras. You may use `readDazzExtra` to check for existing\n        extras.\n    See_Also: `dazzExtra`, `readDazzExtra`\n"
			},
			{
				"line": 5271,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 5274,
						"kind": "enum member",
						"char": 5,
						"name": "replaceOrAdd",
						"protection": "public",
						"value": "cast(ubyte)0u",
						"comment": "Replace existing option or add as new option.\n"
					},
					{
						"line": 5276,
						"kind": "enum member",
						"char": 5,
						"name": "ensurePresent",
						"protection": "public",
						"value": "1",
						"comment": "Make sure option is present, e.i. option name and value must match.\n"
					},
					{
						"line": 5280,
						"kind": "enum member",
						"char": 5,
						"name": "defaultValue",
						"protection": "public",
						"value": "2",
						"comment": "Make sure option is present, e.i. an option with the given name exists.\nDoes not modify existing options. This does nothing if no option value\nis given.\n"
					},
					{
						"line": 5282,
						"kind": "enum member",
						"char": 5,
						"name": "add",
						"protection": "public",
						"value": "3",
						"comment": "Append new option.\n"
					},
					{
						"line": 5284,
						"kind": "enum member",
						"char": 5,
						"name": "remove",
						"protection": "public",
						"value": "4",
						"comment": "Remove existing options.\n"
					},
					{
						"line": 5286,
						"kind": "enum member",
						"char": 5,
						"name": "replace",
						"protection": "public",
						"value": "5",
						"comment": "Replace existing options. Does not add new option.\n"
					}
				],
				"name": "OptionModifier",
				"protection": "public",
				"baseDeco": "h",
				"comment": "Specifies the type of action `withOption` should take.\n"
			},
			{
				"constraint": "isInputRange!R && is(ElementType!R == string)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 5291,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "R",
								"name": "dazzlerOptions"
							},
							{
								"type": "string",
								"name": "optionName"
							},
							{
								"type": "OptionModifier",
								"name": "mod"
							}
						],
						"line": 5291,
						"kind": "function",
						"char": 6,
						"name": "withOption",
						"type": "(R dazzlerOptions, string optionName, OptionModifier mod)",
						"endchar": 1,
						"endline": 5295
					}
				],
				"name": "withOption",
				"protection": "public",
				"comment": "Lazily modifies `dazzlerOptions` as specified.\nExample:\n`OptionModifier.replaceOrAdd`$(DDOX_UNITTEST_HEADER __unittest_L5314_C1)\n---\nimport std.algorithm : equal;\n\nenum dazzlerOptions = [\n    \"-C\",\n    \"-n.7\",\n    \"-e0.841500\",\n    \"-M25\",\n    \"-T8\",\n    \"-P/tmp\",\n    \"-mdust\",\n    \"-mdentist-self\",\n    \"-mtan\",\n];\n\nauto modifiedDazzlerOptions = dazzlerOptions\n    .withOption(\"-T\", \"16\", OptionModifier.replaceOrAdd)\n    .withOption(\"-k\", \"20\", OptionModifier.replaceOrAdd);\n\nassert(equal(modifiedDazzlerOptions, [\n    \"-C\",\n    \"-n.7\",\n    \"-e0.841500\",\n    \"-M25\",\n    \"-T16\",\n    \"-P/tmp\",\n    \"-mdust\",\n    \"-mdentist-self\",\n    \"-mtan\",\n    \"-k20\",\n]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L5314_C1)\nExample:\n`OptionModifier.ensurePresent`$(DDOX_UNITTEST_HEADER __unittest_L5349_C1)\n---\nimport std.algorithm : equal;\n\nenum dazzlerOptions = [\n    \"-C\",\n    \"-n.7\",\n    \"-e0.841500\",\n    \"-M25\",\n    \"-T8\",\n    \"-P/tmp\",\n    \"-mdust\",\n    \"-mdentist-self\",\n    \"-mtan\",\n];\n\nauto modifiedDazzlerOptions = dazzlerOptions\n    .withOption(\"-C\", OptionModifier.ensurePresent)\n    .withOption(\"-e\", \"0.841500\", OptionModifier.ensurePresent)\n    .withOption(\"-m\", \"dust\", OptionModifier.ensurePresent)\n    .withOption(\"-m\", \"dentist-reads\", OptionModifier.ensurePresent);\n\nassert(equal(modifiedDazzlerOptions, [\n    \"-C\",\n    \"-n.7\",\n    \"-e0.841500\",\n    \"-M25\",\n    \"-T8\",\n    \"-P/tmp\",\n    \"-mdust\",\n    \"-mdentist-self\",\n    \"-mtan\",\n    \"-mdentist-reads\",\n]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L5349_C1)\nExample:\n`OptionModifier.defaultValue`$(DDOX_UNITTEST_HEADER __unittest_L5386_C1)\n---\nimport std.algorithm : equal;\n\nenum dazzlerOptions = [\n    \"-C\",\n    \"-n.7\",\n    \"-e0.841500\",\n    \"-M25\",\n    \"-T8\",\n    \"-P/tmp\",\n    \"-mdust\",\n    \"-mdentist-self\",\n    \"-mtan\",\n];\n\nauto modifiedDazzlerOptions = dazzlerOptions\n    .withOption(\"-e\", \"0.7\", OptionModifier.defaultValue)\n    .withOption(\"-s\", \"126\", OptionModifier.defaultValue)\n    .withOption(\"-P\", null, OptionModifier.defaultValue);\n\nassert(equal(modifiedDazzlerOptions, [\n    \"-C\",\n    \"-n.7\",\n    \"-e0.841500\",\n    \"-M25\",\n    \"-T8\",\n    \"-P/tmp\",\n    \"-mdust\",\n    \"-mdentist-self\",\n    \"-mtan\",\n    \"-s126\",\n]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L5386_C1)\nExample:\n`OptionModifier.add` and `OptionModifier.remove`$(DDOX_UNITTEST_HEADER __unittest_L5422_C1)\n---\nimport std.algorithm : equal;\n\nenum dazzlerOptions = [\n    \"-C\",\n    \"-n.7\",\n    \"-e0.841500\",\n    \"-M25\",\n    \"-T8\",\n    \"-P/tmp\",\n    \"-mdust\",\n    \"-mdentist-self\",\n    \"-mtan\",\n];\n\nauto modifiedDazzlerOptions = dazzlerOptions\n    .withOption(\"-T\", OptionModifier.remove)\n    .withOption(\"-M\", \"128\", OptionModifier.remove)\n    .withOption(\"-P\", \"/tmp\", OptionModifier.remove)\n    .withOption(\"-m\", \"dentist-reads\", OptionModifier.add);\n\nassert(equal(modifiedDazzlerOptions, [\n    \"-C\",\n    \"-n.7\",\n    \"-e0.841500\",\n    \"-M25\",\n    \"-mdust\",\n    \"-mdentist-self\",\n    \"-mtan\",\n    \"-mdentist-reads\",\n]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L5422_C1)\n"
			},
			{
				"constraint": "isInputRange!R && is(ElementType!R == string)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 5298,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "R",
								"name": "dazzlerOptions"
							},
							{
								"type": "string",
								"name": "optionName"
							},
							{
								"type": "string",
								"name": "value"
							},
							{
								"type": "OptionModifier",
								"name": "mod"
							}
						],
						"line": 5298,
						"kind": "function",
						"char": 6,
						"name": "withOption",
						"type": "(R dazzlerOptions, string optionName, string value, OptionModifier mod)",
						"endchar": 1,
						"endline": 5311
					}
				],
				"name": "withOption",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"line": 5633,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 5636,
						"kind": "enum member",
						"char": 5,
						"name": "numberOfThreads",
						"protection": "public",
						"value": "\"-t\"",
						"comment": "number of threads (default 4)\n"
					},
					{
						"line": 5638,
						"kind": "enum member",
						"char": 5,
						"name": "windowSize",
						"protection": "public",
						"value": "\"-w\"",
						"comment": "window size (default 40)\n"
					},
					{
						"line": 5640,
						"kind": "enum member",
						"char": 5,
						"name": "advanceSize",
						"protection": "public",
						"value": "\"-a\"",
						"comment": "advance size (default 10)\n"
					},
					{
						"line": 5642,
						"kind": "enum member",
						"char": 5,
						"name": "maxDepth",
						"protection": "public",
						"value": "\"-d\"",
						"comment": "max depth (default 18446744073709551615)\n"
					},
					{
						"line": 5644,
						"kind": "enum member",
						"char": 5,
						"name": "produceFullSequences",
						"protection": "public",
						"value": "\"-f\"",
						"comment": "produce full sequences (default 0)\n"
					},
					{
						"line": 5646,
						"kind": "enum member",
						"char": 5,
						"name": "verbosity",
						"protection": "public",
						"value": "\"-V\"",
						"comment": "verbosity (default 18446744073709551615)\n"
					},
					{
						"line": 5648,
						"kind": "enum member",
						"char": 5,
						"name": "readInterval",
						"protection": "public",
						"value": "\"-I\"",
						"comment": "read interval (default 0,18446744073709551615)\n"
					},
					{
						"line": 5650,
						"kind": "enum member",
						"char": 5,
						"name": "readsPart",
						"protection": "public",
						"value": "\"-J\"",
						"comment": "reads part (default 0,1)\n"
					},
					{
						"line": 5652,
						"kind": "enum member",
						"char": 5,
						"name": "errorProfileFileName",
						"protection": "public",
						"value": "\"-E\"",
						"comment": "error profile file name (default input.las.eprof)\n"
					},
					{
						"line": 5654,
						"kind": "enum member",
						"char": 5,
						"name": "minWindowCoverage",
						"protection": "public",
						"value": "\"-m\"",
						"comment": "minimum window coverage (default 3)\n"
					},
					{
						"line": 5656,
						"kind": "enum member",
						"char": 5,
						"name": "maxWindowError",
						"protection": "public",
						"value": "\"-e\"",
						"comment": "maximum window error (default 18446744073709551615)\n"
					},
					{
						"line": 5658,
						"kind": "enum member",
						"char": 5,
						"name": "minLengthOfOutput",
						"protection": "public",
						"value": "\"-l\"",
						"comment": "minimum length of output (default 0)\n"
					},
					{
						"line": 5660,
						"kind": "enum member",
						"char": 5,
						"name": "minKMerFilterFrequency",
						"protection": "public",
						"value": "\"--minfilterfreq\"",
						"comment": "minimum k-mer filter frequency (default 0)\n"
					},
					{
						"line": 5662,
						"kind": "enum member",
						"char": 5,
						"name": "maxKMerFilterFrequency",
						"protection": "public",
						"value": "\"--maxfilterfreq\"",
						"comment": "maximum k-mer filter frequency (default 2)\n"
					},
					{
						"line": 5664,
						"kind": "enum member",
						"char": 5,
						"name": "temporaryFilePrefix",
						"protection": "public",
						"value": "\"-T\"",
						"comment": "temporary file prefix (default daccord_ozelot_4500_1529654843)\n"
					},
					{
						"line": 5666,
						"kind": "enum member",
						"char": 5,
						"name": "maxAlignmentsPerRead",
						"protection": "public",
						"value": "\"-D\"",
						"comment": "maximum number of alignments considered per read (default 5000)\n"
					},
					{
						"line": 5668,
						"kind": "enum member",
						"char": 5,
						"name": "maxAlignmentsPerReadVard",
						"protection": "public",
						"value": "\"--vard\"",
						"comment": "maximum number of alignments considered per read (default 0)\n"
					},
					{
						"line": 5670,
						"kind": "enum member",
						"char": 5,
						"name": "computeErrorProfileOnly",
						"protection": "public",
						"value": "\"--eprofonly\"",
						"comment": "compute error profile only (default disable)\n"
					},
					{
						"line": 5672,
						"kind": "enum member",
						"char": 5,
						"name": "computeErrorDistributionEstimate",
						"protection": "public",
						"value": "\"--deepprofileonly\"",
						"comment": "compute error distribution estimate (default disable)\n"
					},
					{
						"line": 5674,
						"kind": "enum member",
						"char": 5,
						"name": "kmerSize",
						"protection": "public",
						"value": "\"-k\"",
						"comment": "kmer size (default 8)\n"
					}
				],
				"name": "DaccordOptions",
				"protection": "public",
				"baseDeco": "Aya",
				"comment": "Options for `daccord`.\n"
			},
			{
				"line": 5679,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 5681,
						"kind": "enum member",
						"char": 5,
						"name": "verbose",
						"protection": "public",
						"value": "\"-v\""
					},
					{
						"line": 5684,
						"kind": "enum member",
						"char": 5,
						"name": "strongCompositionalBias",
						"protection": "public",
						"value": "\"-b\"",
						"comment": "If the -b option is set, then the daligner assumes the data has a\nstrong compositional bias (e.g. >65% AT rich).\n"
					},
					{
						"line": 5689,
						"kind": "enum member",
						"char": 5,
						"name": "asymmetric",
						"protection": "public",
						"value": "\"-A\"",
						"comment": "If the -A option is set (âAâ for âasymmetricâ) then just overlaps\nwhere the a-read is in block X and the b-read is in block Y are\nreported, and if X = Y then it further reports only those overlaps\nwhere the a-read index is less than the b-read index.\n"
					},
					{
						"line": 5693,
						"kind": "enum member",
						"char": 5,
						"name": "identity",
						"protection": "public",
						"value": "\"-I\"",
						"comment": "If the -I option is set (âIâ for âidentityâ) then when X = Y, overlaps\nbetween different portions of the same read will also be found and\nreported.\n"
					},
					{
						"line": 5698,
						"kind": "enum member",
						"char": 5,
						"name": "kMerSize",
						"protection": "public",
						"value": "\"-k\"",
						"comment": "Search code looks for a pair of diagonal bands of width 2^^w\n(default 26 = 64) that contain a collection of exact matching k-mers\n(default 14) between the two reads, such that the total number of\nbases covered by the k-mer hits is h (default 35).\n"
					},
					{
						"line": 5700,
						"kind": "enum member",
						"char": 5,
						"name": "bandWidth",
						"protection": "public",
						"value": "\"-w\"",
						"comment": "ditto\n"
					},
					{
						"line": 5702,
						"kind": "enum member",
						"char": 5,
						"name": "hitBaseCoverage",
						"protection": "public",
						"value": "\"-h\"",
						"comment": "ditto\n"
					},
					{
						"line": 5704,
						"kind": "enum member",
						"char": 5,
						"name": "modimerPercentage",
						"protection": "public",
						"value": "\"-%\"",
						"comment": "Modimer percentage (take % of the k-mers)\n"
					},
					{
						"line": 5707,
						"kind": "enum member",
						"char": 5,
						"name": "maxKmerOccurence",
						"protection": "public",
						"value": "\"-t\"",
						"comment": "Suppresses the use of any k-mer that occurs more than t times in\neither the subject or target block.\n"
					},
					{
						"line": 5710,
						"kind": "enum member",
						"char": 5,
						"name": "maxKmerMemory",
						"protection": "public",
						"value": "\"-M\"",
						"comment": "Let the program automatically select a value of t that meets a given\nmemory usage limit specified (in Gb) by the -M parameter.\n"
					},
					{
						"line": 5712,
						"kind": "enum member",
						"char": 5,
						"name": "bridge",
						"protection": "public",
						"value": "\"-B\"",
						"comment": "Bridge consecutive aligned segments into one if possible\n"
					},
					{
						"line": 5713,
						"kind": "enum member",
						"char": 5,
						"name": "tempDir",
						"protection": "public",
						"value": "\"-P\""
					},
					{
						"line": 5717,
						"kind": "enum member",
						"char": 5,
						"name": "minAlignmentLength",
						"protection": "public",
						"value": "\"-l\"",
						"comment": "Searching for local alignments involving at least -l base pairs\n(default 1000) or more, that have an average correlation rate of\n-e (default 70%).\n"
					},
					{
						"line": 5719,
						"kind": "enum member",
						"char": 5,
						"name": "averageCorrelationRate",
						"protection": "public",
						"value": "\"-e\"",
						"comment": "ditto\n"
					},
					{
						"line": 5723,
						"kind": "enum member",
						"char": 5,
						"name": "tracePointDistance",
						"protection": "public",
						"value": "\"-s\"",
						"comment": "The local alignments found will be output in a sparse encoding where\na trace point on the alignment is recorded every -s base pairs of\nthe a-read (default 100bp).\n"
					},
					{
						"line": 5726,
						"kind": "enum member",
						"char": 5,
						"name": "minAReadLength",
						"protection": "public",
						"value": "\"-H\"",
						"comment": "By setting the -H parameter to say N, one alters daligner so that it\nonly reports overlaps where the a-read is over N base-pairs long.\n"
					},
					{
						"line": 5729,
						"kind": "enum member",
						"char": 5,
						"name": "numThreads",
						"protection": "public",
						"value": "\"-T\"",
						"comment": "The program runs with 4 threads by default, but this may be set to\nany power of 2 with the -T option.\n"
					},
					{
						"line": 5736,
						"kind": "enum member",
						"char": 5,
						"name": "masks",
						"protection": "public",
						"value": "\"-m\"",
						"comment": "If there are one or more interval tracks specified with the -m option\n(m for mask), then the reads of the DB or DBâs to which the track\napplies are soft masked with the union of the intervals of all the\ninterval tracks that apply, that is any k-mers that contain any bases\nin any of the masked intervals are ignored for the purposes of seeding\na match.\n"
					},
					{
						"line": 5739,
						"kind": "enum member",
						"char": 5,
						"name": "sortMap",
						"protection": "public",
						"value": "\"-a\"",
						"comment": "sort .las by A-read,A-position pairs for map usecase;\noff => sort .las by A,B-read pairs for overlap piles\n"
					}
				],
				"name": "DalignerOptions",
				"protection": "public",
				"baseDeco": "Aya",
				"comment": "Options for `daligner`.\n"
			},
			{
				"line": 5744,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 5746,
						"kind": "enum member",
						"char": 5,
						"name": "verbose",
						"protection": "public",
						"value": "\"-v\""
					},
					{
						"line": 5751,
						"kind": "enum member",
						"char": 5,
						"name": "kMerSize",
						"protection": "public",
						"value": "\"-k\"",
						"comment": "Search code looks for a pair of diagonal bands of width 2^^w\n(default 26 = 64) that contain a collection of exact matching k-mers\n(default 12) between the two reads, such that the total number of\nbases covered by the k-mer hits is h (default 35).\n"
					},
					{
						"line": 5753,
						"kind": "enum member",
						"char": 5,
						"name": "bandWidth",
						"protection": "public",
						"value": "\"-w\"",
						"comment": "ditto\n"
					},
					{
						"line": 5755,
						"kind": "enum member",
						"char": 5,
						"name": "hitBaseCoverage",
						"protection": "public",
						"value": "\"-h\"",
						"comment": "ditto\n"
					},
					{
						"line": 5756,
						"kind": "enum member",
						"char": 5,
						"name": "tempDir",
						"protection": "public",
						"value": "\"-P\""
					},
					{
						"line": 5760,
						"kind": "enum member",
						"char": 5,
						"name": "minAlignmentLength",
						"protection": "public",
						"value": "\"-l\"",
						"comment": "Searching for local alignments involving at least -l base pairs\n(default 1000) or more, that have an average correlation rate of\n-e (default 70%).\n"
					},
					{
						"line": 5762,
						"kind": "enum member",
						"char": 5,
						"name": "averageCorrelationRate",
						"protection": "public",
						"value": "\"-e\"",
						"comment": "ditto\n"
					},
					{
						"line": 5766,
						"kind": "enum member",
						"char": 5,
						"name": "tracePointDistance",
						"protection": "public",
						"value": "\"-s\"",
						"comment": "The local alignments found will be output in a sparse encoding where\na trace point on the alignment is recorded every -s base pairs of\nthe a-read (default 100bp).\n"
					},
					{
						"line": 5769,
						"kind": "enum member",
						"char": 5,
						"name": "numThreads",
						"protection": "public",
						"value": "\"-T\"",
						"comment": "The program runs with 4 threads by default, but this may be set to\nany power of 2 with the -T option.\n"
					}
				],
				"name": "DatanderOptions",
				"protection": "public",
				"baseDeco": "Aya",
				"comment": "Options for `datander`.\n"
			},
			{
				"line": 5774,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 5776,
						"kind": "enum member",
						"char": 5,
						"name": "verbose",
						"protection": "public",
						"value": "\"-v\""
					},
					{
						"line": 5779,
						"kind": "enum member",
						"char": 5,
						"name": "strongCompositionalBias",
						"protection": "public",
						"value": "\"-b\"",
						"comment": "If the -b option is set, then the daligner assumes the data has a\nstrong compositional bias (e.g. >65% AT rich).\n"
					},
					{
						"line": 5784,
						"kind": "enum member",
						"char": 5,
						"name": "kMerSize",
						"protection": "public",
						"value": "\"-k\"",
						"comment": "Search code looks for a pair of diagonal bands of width 2^^w\n(default 26 = 64) that contain a collection of exact matching k-mers\n(default 14) between the two reads, such that the total number of\nbases covered by the k-mer hits is h (default 35).\n"
					},
					{
						"line": 5787,
						"kind": "enum member",
						"char": 5,
						"name": "maxKmerOccurence",
						"protection": "public",
						"value": "\"-t\"",
						"comment": "Suppresses the use of any k-mer that occurs more than t times in\neither the subject or target block.\n"
					},
					{
						"line": 5790,
						"kind": "enum member",
						"char": 5,
						"name": "maxKmerMemory",
						"protection": "public",
						"value": "\"-M\"",
						"comment": "Let the program automatically select a value of t that meets a given\nmemory usage limit specified (in Gb) by the -M parameter.\n"
					},
					{
						"line": 5792,
						"kind": "enum member",
						"char": 5,
						"name": "averageCorrelationRate",
						"protection": "public",
						"value": "\"-e\"",
						"comment": "ditto\n"
					},
					{
						"line": 5796,
						"kind": "enum member",
						"char": 5,
						"name": "tracePointDistance",
						"protection": "public",
						"value": "\"-s\"",
						"comment": "The local alignments found will be output in a sparse encoding where\na trace point on the alignment is recorded every -s base pairs of\nthe a-read (default 100bp).\n"
					},
					{
						"line": 5799,
						"kind": "enum member",
						"char": 5,
						"name": "numThreads",
						"protection": "public",
						"value": "\"-T\"",
						"comment": "The program runs with 4 threads by default, but this may be set to\nany power of 2 with the -T option.\n"
					},
					{
						"line": 5800,
						"kind": "enum member",
						"char": 5,
						"name": "tempDir",
						"protection": "public",
						"value": "\"-P\""
					},
					{
						"line": 5807,
						"kind": "enum member",
						"char": 5,
						"name": "masks",
						"protection": "public",
						"value": "\"-m\"",
						"comment": "If there are one or more interval tracks specified with the -m option\n(m for mask), then the reads of the DB or DBâs to which the track\napplies are soft masked with the union of the intervals of all the\ninterval tracks that apply, that is any k-mers that contain any bases\nin any of the masked intervals are ignored for the purposes of seeding\na match.\n"
					},
					{
						"line": 5811,
						"kind": "enum member",
						"char": 5,
						"name": "bestMatches",
						"protection": "public",
						"value": "\"-n\"",
						"comment": "If the -n option is given then all chains that are within the given\nfraction of the best are also reported, e.g. -n.95 reports all\nmatches within 95% of the top match.\n"
					},
					{
						"line": 5814,
						"kind": "enum member",
						"char": 5,
						"name": "repeatProfileTrack",
						"protection": "public",
						"value": "\"-p\"",
						"comment": "The -p option requests that damapper produce a repeat profile track\nfor each read.\n"
					},
					{
						"line": 5818,
						"kind": "enum member",
						"char": 5,
						"name": "sortPileOrder",
						"protection": "public",
						"value": "\"-z\"",
						"comment": "The parameter -z asks that LAs are sorted in pile order as opposed to\nmap order (see the -a option of daligner for which this is the\nnegation).\n"
					},
					{
						"line": 5824,
						"kind": "enum member",
						"char": 5,
						"name": "symmetric",
						"protection": "public",
						"value": "\"-C\"",
						"comment": "If the -C option is set, then damapper also outputs a file Y.X.las\nfor a given block pair that contains all the same matches as in\nX.Y.las but where the A-read is a contig of the reference and the\nB-read is a mapped read. And if the -N options is set, then the file\nY.X.las is not produced.\n"
					},
					{
						"line": 5826,
						"kind": "enum member",
						"char": 5,
						"name": "oneDirection",
						"protection": "public",
						"value": "\"-N\"",
						"comment": "ditto\n"
					}
				],
				"name": "DamapperOptions",
				"protection": "public",
				"baseDeco": "Aya",
				"comment": "Options for `damapper`.\n"
			},
			{
				"line": 5831,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 5833,
						"kind": "enum member",
						"char": 5,
						"name": "readNumber",
						"protection": "public",
						"value": "\"-r\""
					},
					{
						"line": 5834,
						"kind": "enum member",
						"char": 5,
						"name": "originalHeader",
						"protection": "public",
						"value": "\"-h\""
					},
					{
						"line": 5835,
						"kind": "enum member",
						"char": 5,
						"name": "sequenceString",
						"protection": "public",
						"value": "\"-s\""
					},
					{
						"line": 5836,
						"kind": "enum member",
						"char": 5,
						"name": "sNROfACGTChannels",
						"protection": "public",
						"value": "\"-a\""
					},
					{
						"line": 5837,
						"kind": "enum member",
						"char": 5,
						"name": "intrinsicQualityVector",
						"protection": "public",
						"value": "\"-i\""
					},
					{
						"line": 5838,
						"kind": "enum member",
						"char": 5,
						"name": "quivaValues",
						"protection": "public",
						"value": "\"-q\""
					},
					{
						"line": 5839,
						"kind": "enum member",
						"char": 5,
						"name": "repeatProfileVector",
						"protection": "public",
						"value": "\"-p\""
					},
					{
						"line": 5840,
						"kind": "enum member",
						"char": 5,
						"name": "masks",
						"protection": "public",
						"value": "\"-m\""
					},
					{
						"line": 5841,
						"kind": "enum member",
						"char": 5,
						"name": "untrimmedDatabase",
						"protection": "public",
						"value": "\"-u\""
					},
					{
						"line": 5842,
						"kind": "enum member",
						"char": 5,
						"name": "upperCase",
						"protection": "public",
						"value": "\"-U\""
					}
				],
				"name": "DBdumpOptions",
				"protection": "public",
				"baseDeco": "Aya",
				"comment": "Options for `DBdump`.\n"
			},
			{
				"line": 5847,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 5849,
						"kind": "enum member",
						"char": 5,
						"name": "untrimmedDatabase",
						"protection": "public",
						"value": "\"-u\""
					},
					{
						"line": 5850,
						"kind": "enum member",
						"char": 5,
						"name": "showQuiva",
						"protection": "public",
						"value": "\"-q\""
					},
					{
						"line": 5851,
						"kind": "enum member",
						"char": 5,
						"name": "showArrowPulseSequence",
						"protection": "public",
						"value": "\"-a\""
					},
					{
						"line": 5852,
						"kind": "enum member",
						"char": 5,
						"name": "noSequence",
						"protection": "public",
						"value": "\"-n\""
					},
					{
						"line": 5853,
						"kind": "enum member",
						"char": 5,
						"name": "masks",
						"protection": "public",
						"value": "\"-m\""
					},
					{
						"line": 5854,
						"kind": "enum member",
						"char": 5,
						"name": "produceQuivaFile",
						"protection": "public",
						"value": "\"-Q\""
					},
					{
						"line": 5855,
						"kind": "enum member",
						"char": 5,
						"name": "produceArrowFile",
						"protection": "public",
						"value": "\"-A\""
					},
					{
						"line": 5856,
						"kind": "enum member",
						"char": 5,
						"name": "upperCase",
						"protection": "public",
						"value": "\"-U\""
					},
					{
						"line": 5857,
						"kind": "enum member",
						"char": 5,
						"name": "fastaLineWidth",
						"protection": "public",
						"value": "\"-w\""
					}
				],
				"name": "DBshowOptions",
				"protection": "public",
				"baseDeco": "Aya",
				"comment": "Options for `DBshow`.\n"
			},
			{
				"line": 5862,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 5864,
						"kind": "enum member",
						"char": 5,
						"name": "verbose",
						"protection": "public",
						"value": "\"-v\""
					},
					{
						"line": 5866,
						"kind": "enum member",
						"char": 5,
						"name": "fromFile",
						"protection": "public",
						"value": "\"-f\"",
						"comment": "Import files listed 1/line in given file.\n"
					},
					{
						"line": 5868,
						"kind": "enum member",
						"char": 5,
						"name": "fromStdin",
						"protection": "public",
						"value": "\"-i\"",
						"comment": "Import data from stdin, use optional name as data source.\n"
					}
				],
				"name": "Fasta2DazzlerOptions",
				"protection": "public",
				"baseDeco": "Aya",
				"comment": "Options for `fasta2DAM` and `fasta2DB`.\n"
			},
			{
				"line": 5885,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 5888,
						"kind": "enum member",
						"char": 5,
						"name": "readDepth",
						"protection": "public",
						"value": "\"-d\"",
						"comment": "Read depth aka. read coverage. (mandatory)\n"
					}
				],
				"name": "ComputeIntrinsicQVOptions",
				"protection": "public",
				"baseDeco": "Aya",
				"comment": "Options for `computeintrinsicqv`.\n"
			},
			{
				"line": 5893,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 5896,
						"kind": "enum member",
						"char": 5,
						"name": "blockSize",
						"protection": "public",
						"value": "\"-s\"",
						"comment": "Target size of blocks (in Mbp).\n"
					},
					{
						"line": 5898,
						"kind": "enum member",
						"char": 5,
						"name": "minReadLength",
						"protection": "public",
						"value": "\"-x\"",
						"comment": "Trimmed DB has reads >= this threshold.\n"
					},
					{
						"line": 5900,
						"kind": "enum member",
						"char": 5,
						"name": "allReads",
						"protection": "public",
						"value": "\"-a\"",
						"comment": "Trimmed DB contains all reads from a well (not just longest).\n"
					},
					{
						"line": 5902,
						"kind": "enum member",
						"char": 5,
						"name": "force",
						"protection": "public",
						"value": "\"-f\"",
						"comment": "Force the split to occur even if already split.\n"
					},
					{
						"line": 5904,
						"kind": "enum member",
						"char": 5,
						"name": "onlyLongest",
						"protection": "public",
						"value": "\"-l\"",
						"comment": "Set primary read for a well to be the longest.\n"
					},
					{
						"line": 5906,
						"kind": "enum member",
						"char": 5,
						"name": "onlyMedian",
						"protection": "public",
						"value": "\"-m\"",
						"comment": "Set primary read for a well to be the median.\n"
					}
				],
				"name": "DbSplitOptions",
				"protection": "public",
				"baseDeco": "Aya",
				"comment": "Options for `DBsplit`.\n"
			}
		],
		"comment": "    Defines bindings to and utilities for the Dazzler tool suite.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.dazzler"
	},
	{
		"kind": "module",
		"file": "source/dentist/package.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"selective": [
					"run"
				],
				"line": 13,
				"name": "dentist.commandline"
			}
		],
		"comment": "    Exposes the `run` function to execute DENTIST commands. It takes an array\n    of CLI arguments to select the command and construct its options.\n\n    See_also: `dentist.commandline.run`, `dentist.commands`\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist"
	},
	{
		"kind": "module",
		"file": "source/dentist/util/algorithm.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "fun"
					}
				],
				"line": 28,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "a"
							},
							{
								"type": "T",
								"name": "b"
							}
						],
						"line": 28,
						"kind": "function",
						"char": 6,
						"name": "orderLexicographically",
						"type": "bool(T a, T b)",
						"endchar": 1,
						"endline": 44
					}
				],
				"name": "orderLexicographically",
				"protection": "public",
				"comment": "    Order `a` and `b` lexicographically by applying each `fun` to them. For\n    unary functions compares `fun(a) < fun(b)`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L47_C1)\n---\nstruct Version\n{\n    int major;\n    int minor;\n}\n\nalias lexOrder = orderLexicographically!(Version,\n    \"a.major\",\n    a => a.minor,\n);\n\nassert(lexOrder(Version(1, 2), Version(2, 0)));\nassert(lexOrder(Version(1, 2), Version(1, 5)));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L47_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "fun"
					}
				],
				"line": 69,
				"kind": "template",
				"char": 5,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "a"
							},
							{
								"type": "T",
								"name": "b"
							}
						],
						"line": 69,
						"kind": "function",
						"char": 5,
						"name": "cmpLexicographically",
						"type": "int(T a, T b)",
						"endchar": 1,
						"endline": 89
					}
				],
				"name": "cmpLexicographically",
				"protection": "public",
				"comment": "    Compare `a` and `b` lexicographically by applying each `fun` to them. For\n    unary functions compares `fun(a) < fun(b)`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L92_C1)\n---\nstruct Version\n{\n    int major;\n    int minor;\n    string build;\n}\n\nalias lexCompare = cmpLexicographically!(Version,\n    \"a.major\",\n    a => a.minor,\n);\n\nassert(lexCompare(Version(1, 2), Version(2, 0)) < 0);\nassert(lexCompare(Version(1, 2), Version(1, 2)) == 0);\nassert(lexCompare(Version(1, 2), Version(1, 0)) > 0);\n\n// `build` attribute is disregarded by `lexCompare`\nassert(lexCompare(Version(1, 2, \"debug\"), Version(1, 2, \"optimized\")) == 0);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L92_C1)\n"
			},
			{
				"constraint": "isDynamicArray!Array",
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Array"
					}
				],
				"line": 146,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "Array",
								"name": "array"
							}
						],
						"line": 146,
						"kind": "function",
						"char": 6,
						"name": "sliceBy",
						"type": "pure nothrow (Array array)",
						"endchar": 1,
						"endline": 150
					}
				],
				"name": "sliceBy",
				"protection": "public",
				"comment": "    Slices an input array into slices of equivalent adjacent elements.\n    In other languages this is often called `partitionBy`, `groupBy`\n    or `sliceWhen`.\n\n    Equivalence is defined by the predicate `pred`, which can be binary,\n    which is passed to `std.functional.binaryFun`. Two range elements\n    `a` and `b` are considered equivalent if `pred(a,b)` is true.\n\n    This predicate must be an equivalence relation, that is, it must be\n    reflexive (`pred(x,x)` is always true), symmetric\n    (`pred(x,y) == pred(y,x)`), and transitive (`pred(x,y) && pred(y,z)`\n    implies `pred(x,z)`). If this is not the case, the range returned by\n    sliceBy may assert at runtime or behave erratically.\n\n    Params:\n     pred = Predicate for determining equivalence.\n     array = An array to be sliced.\n\n    Returns: With a binary predicate, a range of slices is returned in which\n    all elements in a given slice are equivalent under the given predicate.\n\n    Notes:\n\n    Equivalent elements separated by an intervening non-equivalent element will\n    appear in separate subranges; this function only considers adjacent\n    equivalence. Elements in the subranges will always appear in the same order\n    they appear in the original range.\n\n    See_also: `std.algorithm.iteration.chunkBy`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L153_C1)\n---\nimport std.algorithm.comparison : equal;\n\n// Grouping by particular attribute of each element:\nauto data = [\n    [1, 1],\n    [1, 2],\n    [2, 2],\n    [2, 3]\n];\n\nauto r1 = data.sliceBy!((a,b) => a[0] == b[0]);\nassert(r1.equal([\n    data[0 .. 2],\n    data[2 .. 4]\n]));\n\nauto r2 = data.sliceBy!((a,b) => a[1] == b[1]);\nassert(r2.equal([\n    data[0 .. 1],\n    data[1 .. 3],\n    data[3 .. 4],\n]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L153_C1)\n"
			},
			{
				"constraint": "isDynamicArray!Array && !is(const(Needle) == const(Array))",
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "\"a == b\"",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Array"
					},
					{
						"kind": "type",
						"name": "Needle"
					}
				],
				"line": 233,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "Array",
								"name": "haystack"
							},
							{
								"type": "Needle",
								"name": "needle"
							},
							{
								"type": "OpenRight",
								"default": "Yes.openRight",
								"name": "openRight"
							}
						],
						"line": 233,
						"kind": "function",
						"char": 7,
						"name": "sliceUntil",
						"type": "Array(Array haystack, Needle needle, OpenRight openRight = Yes.openRight)",
						"endchar": 1,
						"endline": 247
					}
				],
				"name": "sliceUntil",
				"protection": "public",
				"comment": "Return the prefix of `haystack` where `pred` is not satisfied.\n\nSee_also: `std.algorithm.searching.until`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L286_C1)\n---\nimport std.typecons : No;\n\nint[] a = [ 1, 2, 4, 7, 7, 2, 4, 7, 3, 5];\nassert(a.sliceUntil(7) == [1, 2, 4]);\nassert(a.sliceUntil!\"a == 7\" == [1, 2, 4]);\nassert(a.sliceUntil(7, No.openRight) == [1, 2, 4, 7]);\nassert(a.sliceUntil([7, 7]) == [1, 2, 4]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L286_C1)\n"
			},
			{
				"constraint": "isDynamicArray!Array && is(const(Needle) == const(Array))",
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "\"equal(a, b)\"",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Array"
					},
					{
						"kind": "type",
						"name": "Needle"
					}
				],
				"line": 250,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "Array",
								"name": "haystack"
							},
							{
								"type": "Needle",
								"name": "needle"
							},
							{
								"type": "OpenRight",
								"default": "Yes.openRight",
								"name": "openRight"
							}
						],
						"line": 250,
						"kind": "function",
						"char": 7,
						"name": "sliceUntil",
						"type": "Array(Array haystack, Needle needle, OpenRight openRight = Yes.openRight)",
						"endchar": 1,
						"endline": 267
					}
				],
				"name": "sliceUntil",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"constraint": "isDynamicArray!Array",
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "\"a\"",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Array"
					}
				],
				"line": 270,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "Array",
								"name": "haystack"
							},
							{
								"type": "OpenRight",
								"default": "Yes.openRight",
								"name": "openRight"
							}
						],
						"line": 270,
						"kind": "function",
						"char": 7,
						"name": "sliceUntil",
						"type": "Array(Array haystack, OpenRight openRight = Yes.openRight)",
						"endchar": 1,
						"endline": 283
					}
				],
				"name": "sliceUntil",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"constraint": "isDynamicArray!Array",
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "\"a\"",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Array"
					}
				],
				"line": 305,
				"kind": "template",
				"char": 16,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "Array",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "array"
							}
						],
						"line": 305,
						"kind": "function",
						"char": 16,
						"name": "filterInPlace",
						"type": "ref Array(auto ref Array array)",
						"endchar": 1,
						"endline": 314
					}
				],
				"name": "filterInPlace",
				"protection": "public",
				"comment": "Returns `array` filtered in-place by `pred`.\n\nThis is a shorthand for:\n---\nauto bufferRest = array.filter!pred.copy(array);\narray.length -= bufferRest.length;\n---\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L317_C1)\n---\nalias isEven = n => n % 2 == 0;\nauto arr = [1, 2, 2, 2, 3, 3, 4];\n\nassert(filterInPlace!isEven(arr) == [2, 2, 2, 4]);\n// The input array gets modified.\nassert(arr == [2, 2, 2, 4]);\n\n// Can be called with non-lvalues\nassert(filterInPlace!isEven([1, 2, 2, 2, 3, 3, 4]) == [2, 2, 2, 4]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L317_C1)\n"
			},
			{
				"constraint": "isDynamicArray!Array",
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "\"a == b\"",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Array"
					}
				],
				"line": 338,
				"kind": "template",
				"char": 16,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "Array",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "array"
							}
						],
						"line": 338,
						"kind": "function",
						"char": 16,
						"name": "uniqInPlace",
						"type": "ref Array(auto ref Array array)",
						"endchar": 1,
						"endline": 345
					}
				],
				"name": "uniqInPlace",
				"protection": "public",
				"comment": "Returns array `uniq`ified in-place.\n\nThis is a shorthand for:\n---\nauto bufferRest = array.uniq.copy(array);\narray.length -= bufferRest.length;\n---\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L348_C1)\n---\nauto arr = [1, 2, 2, 2, 3, 3, 4];\n\nassert(uniqInPlace(arr) == [1, 2, 3, 4]);\n// The input array gets modified.\nassert(arr == [1, 2, 3, 4]);\n\n// Can be called with non-lvalues\nassert(uniqInPlace([1, 2, 2, 2, 3, 3, 4]) == [1, 2, 3, 4]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L348_C1)\n"
			},
			{
				"constraint": "isDynamicArray!Array",
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "\"a == b\"",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Array"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"line": 363,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"parameters": [
							{
								"type": "Array",
								"storageClass": [
									"auto",
									"ref"
								],
								"name": "array"
							},
							{
								"type": "E",
								"name": "needle"
							},
							{
								"type": "E",
								"name": "replacement"
							}
						],
						"line": 363,
						"kind": "function",
						"char": 7,
						"name": "replaceInPlace",
						"type": "Array(auto ref Array array, E needle, E replacement)",
						"endchar": 1,
						"endline": 374
					}
				],
				"name": "replaceInPlace",
				"protection": "public",
				"comment": "Replaces the first occurrence of `needle` by `replacement` in `array` if\npresent. Modifies `array`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L377_C1)\n---\nauto arr = [1, 2, 3, 4, 2, 3];\n\nassert(arr.replaceInPlace(2, 7) == [1, 7, 3, 4, 2, 3]);\n// The input array gets modified.\nassert(arr == [1, 7, 3, 4, 2, 3]);\n// Replaces only the first occurrence\nassert(arr.replaceInPlace(2, 7) == [1, 7, 3, 4, 7, 3]);\n\n// Can be called with non-lvalues\nassert([1, 2, 3].replaceInPlace(2, 7) == [1, 7, 3]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L377_C1)\n"
			},
			{
				"constraint": "isInputRange!Range",
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 393,
				"kind": "template",
				"char": 19,
				"members": [
					{
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"line": 393,
						"kind": "function",
						"char": 19,
						"name": "first",
						"type": "ElementType!Range(Range range)",
						"endchar": 1,
						"endline": 398
					}
				],
				"name": "first",
				"protection": "public",
				"comment": "Get the first element in range assuming it to be non-empty.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L401_C1)\n---\nassert(first([1, 2, 3]) == 1);\nassert(first(\"abcd\") == 'a');\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L401_C1)\n"
			},
			{
				"constraint": "isInputRange!Range",
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 409,
				"kind": "template",
				"char": 19,
				"members": [
					{
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"line": 409,
						"kind": "function",
						"char": 19,
						"name": "last",
						"type": "ElementType!Range(Range range)",
						"endchar": 1,
						"endline": 450
					}
				],
				"name": "last",
				"protection": "public",
				"comment": "Get the last element in range assuming it to be non-empty.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L453_C1)\n---\nimport std.algorithm : filter;\nimport std.range : take, takeExactly;\n\nstruct PowersOfTwo(bool shouldSave)\n{\n    size_t i = 1;\n\n    void popFront() pure nothrow\n    {\n        i *= 2;\n    }\n\n    @property size_t front() const pure nothrow\n    {\n        return i + 0;\n    }\n\n    @property bool empty() const pure nothrow\n    {\n        return false;\n    }\n\n    static if (shouldSave)\n    {\n        @property PowersOfTwo save() const pure nothrow\n        {\n            return cast(typeof(return)) this;\n        }\n    }\n}\n\nassert(last([1, 2, 3]) == 3);\nassert(last(PowersOfTwo!true(1).takeExactly(5)) == 16);\nassert(last(PowersOfTwo!true(1).take(5)) == 16);\nassert(last(PowersOfTwo!false(1).take(5)) == 16);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L453_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 495,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"kind": "type",
								"name": "E"
							}
						],
						"line": 497,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "E",
										"name": "switchExpression"
									}
								],
								"line": 497,
								"kind": "function",
								"char": 10,
								"name": "staticPredSwitch",
								"type": "pure nothrow (E switchExpression)",
								"endchar": 5,
								"endline": 512
							}
						],
						"name": "staticPredSwitch"
					}
				],
				"name": "staticPredSwitch",
				"protection": "public",
				"comment": "Returns one of a collection of expressions based on the value of the\nswitch expression.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L516_C1)\n---\nalias numberName = staticPredSwitch!(\n    1, \"one\",\n    2, \"two\",\n    3, \"three\",\n    \"many\",\n);\n\nstatic assert(\"one\" == numberName(1));\nstatic assert(\"two\" == numberName(2));\nstatic assert(\"three\" == numberName(3));\nstatic assert(\"many\" == numberName(4));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L516_C1)\n"
			}
		],
		"comment": "    Some additional alogorithm functions.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.util.algorithm"
	},
	{
		"kind": "module",
		"file": "source/dentist/util/containers.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 22,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 22,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "bool[T]",
								"char": 21,
								"line": 24,
								"name": "_hash"
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 28,
								"kind": "function",
								"char": 10,
								"name": "add",
								"type": "void(T value)",
								"endchar": 5,
								"endline": 31,
								"comment": "Add `value` to this set regardless whether it was present or not.\n"
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 35,
								"kind": "function",
								"char": 10,
								"name": "remove",
								"type": "void(T value)",
								"endchar": 5,
								"endline": 38,
								"comment": "Remove `value` from this set regardless whether it was present or not.\n"
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"line": 42,
								"kind": "function",
								"char": 10,
								"name": "has",
								"type": "const pure bool(T value)",
								"endchar": 5,
								"endline": 45,
								"comment": "Return whether `value` is in this set.\n"
							},
							{
								"constraint": "op == \"in\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 48,
								"kind": "template",
								"char": 10,
								"members": [
									{
										"parameters": [
											{
												"type": "T",
												"name": "value"
											}
										],
										"line": 48,
										"kind": "function",
										"char": 10,
										"name": "opBinaryRight",
										"type": "const pure bool(T value)",
										"endchar": 5,
										"endline": 51
									}
								],
								"name": "opBinaryRight",
								"comment": "ditto\n"
							},
							{
								"line": 55,
								"kind": "function",
								"char": 10,
								"name": "empty",
								"type": "const pure bool()",
								"endchar": 5,
								"endline": 58,
								"comment": "Returns true if this set is empty.\n"
							},
							{
								"line": 62,
								"kind": "function",
								"char": 10,
								"name": "clear",
								"type": "pure void()",
								"endchar": 5,
								"endline": 65,
								"comment": "Remove all elements from this set.\n"
							},
							{
								"line": 69,
								"kind": "function",
								"char": 22,
								"name": "size",
								"type": "const pure @property size_t()",
								"endchar": 5,
								"endline": 72,
								"comment": "Return the number of elements in this set.\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 76,
								"kind": "function",
								"char": 20,
								"name": "elements",
								"type": "@property ()",
								"endchar": 5,
								"endline": 82,
								"comment": "Return a lazy range of the elements in this set.\n"
							}
						],
						"name": "HashSet",
						"protection": "public"
					}
				],
				"name": "HashSet",
				"protection": "public",
				"comment": "A set of `T`s implemented using a hash-table.\n\nIn DENTIST, this is used for situations where the memory footprint of\n`dentist.util.math.NaturalNumberSet` may get too large. They both\nimplement similar interfaces.\n\nSee_also: `hashSet`\n"
			},
			{
				"constraint": "isInputRange!R",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 87,
				"kind": "template",
				"char": 32,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"name": "values"
							}
						],
						"line": 87,
						"kind": "function",
						"char": 32,
						"name": "hashSet",
						"type": "HashSet!(ElementType!R)(R values)",
						"endchar": 1,
						"endline": 95
					}
				],
				"name": "hashSet",
				"protection": "public",
				"comment": "Construct a new `HashSet` from `values`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L98_C1)\n---\nenum numbers = [19, 6, 29, 39, 98, 86, 27, 11, 23, 59, 20, 34, 84, 38, 20];\n\nauto set = hashSet(numbers);\n\nforeach (n; numbers)\n    assert(n in set);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L98_C1)\n"
			}
		],
		"comment": "    Useful containers. Currently only `HashSet`.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.util.containers"
	},
	{
		"kind": "module",
		"file": "source/dentist/util/fasta.d",
		"members": [
			{
				"constraint": "isSomeString!T",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 47,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 47,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 50,
								"kind": "variable",
								"char": 17,
								"name": "headerIndicator",
								"init": "'>'",
								"comment": "FASTA headers start with this character.\n"
							},
							{
								"storageClass": [
									"const"
								],
								"line": 52,
								"kind": "variable",
								"char": 13,
								"name": "data",
								"type": "T",
								"comment": "FASTA data.\n"
							},
							{
								"kind": "variable",
								"type": "size_t[]",
								"char": 22,
								"line": 53,
								"name": "recordIndex"
							},
							{
								"line": 62,
								"kind": "function",
								"char": 10,
								"name": "buildIndex",
								"type": "void()",
								"endchar": 5,
								"endline": 78,
								"comment": "        Build an index in order to give fast access to individual records.\n        This is called implicitly when accessing individual records using\n        `opIndex` or `length`.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "idx"
									}
								],
								"line": 86,
								"kind": "function",
								"char": 19,
								"name": "opIndex",
								"type": "FastaRecord!T(size_t idx)",
								"endchar": 5,
								"endline": 94,
								"comment": "        Get the FASTA record at idx (zero-based).\n\n        Returns: `FastaRecord!T` at index idx.\n"
							},
							{
								"line": 98,
								"kind": "function",
								"char": 22,
								"name": "length",
								"type": "@property size_t()",
								"endchar": 5,
								"endline": 103,
								"comment": "Get the number of FASTA records.\n"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "T",
										"storageClass": [
											"in"
										],
										"name": "line"
									}
								],
								"line": 107,
								"kind": "function",
								"char": 17,
								"name": "isHeaderLine",
								"type": "pure bool(in T line)",
								"endchar": 5,
								"endline": 110,
								"comment": "Returns true iff line starts with '>'.\n"
							}
						],
						"name": "Fasta",
						"protection": "public"
					}
				],
				"name": "Fasta",
				"protection": "public",
				"comment": "    Gives access to FASTA data. Does not copy the input sequence.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L114_C1)\n---\nauto fasta1 = Fasta!string(q\"EOF\n    >sequence1\n    CTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCT\n    AACCCTAACCCTAACCCTAACCCTAACCCTAACAACCCTAACCCTAACCC\n    >sequence2\n    AAGCTGAGCAGGGCTTTAAAGCTATCTTATTAATAATTATTTCTGTATTG\n    TAACCCTAACCCTAAACCTAACCCTAACCCTAACCCTAACAACCCTAACC\nEOF\".outdent);\nauto fasta1Records = [\n    q\"EOF\n        >sequence1\n        CTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCT\n        AACCCTAACCCTAACCCTAACCCTAACCCTAACAACCCTAACCCTAACCC\nEOF\".outdent.parseFastaRecord,\n    q\"EOF\n        >sequence2\n        AAGCTGAGCAGGGCTTTAAAGCTATCTTATTAATAATTATTTCTGTATTG\n        TAACCCTAACCCTAAACCTAACCCTAACCCTAACCCTAACAACCCTAACC\nEOF\".outdent.parseFastaRecord,\n];\n\nassert(fasta1.length == 2, fasta1.length.to!string);\nassert(fasta1[0] == fasta1Records[0]);\nassert(fasta1[1] == fasta1Records[1]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L114_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 144,
				"kind": "template",
				"char": 9,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "data"
							}
						],
						"line": 144,
						"kind": "function",
						"char": 9,
						"name": "parseFasta",
						"type": "Fasta!T(T data)",
						"endchar": 1,
						"endline": 147
					}
				],
				"name": "parseFasta",
				"protection": "public",
				"comment": "Convenience wrapper around `Fasta!T(T data)`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L150_C1)\n---\nstring fastaData = q\"EOF\n    >sequence1\n    CTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCT\n    AACCCTAACCCTAACCCTAACCCTAACCCTAACAACCCTAACCCTAACCC\n    >sequence2\n    AAGCTGAGCAGGGCTTTAAAGCTATCTTATTAATAATTATTTCTGTATTG\n    TAACCCTAACCCTAAACCTAACCCTAACCCTAACCCTAACAACCCTAACC\nEOF\".outdent;\nauto fasta = fastaData.parseFasta();\nauto fastaRecords = [\n    FastaRecord!string(q\"EOF\n        >sequence1\n        CTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCT\n        AACCCTAACCCTAACCCTAACCCTAACCCTAACAACCCTAACCCTAACCC\nEOF\".outdent),\n    FastaRecord!string(q\"EOF\n        >sequence2\n        AAGCTGAGCAGGGCTTTAAAGCTATCTTATTAATAATTATTTCTGTATTG\n        TAACCCTAACCCTAAACCTAACCCTAACCCTAACCCTAACAACCCTAACC\nEOF\".outdent),\n];\n\nassert(fasta.length == 2, fasta.length.to!string);\nassert(fasta[0] == fastaRecords[0]);\nassert(fasta[1] == fastaRecords[1]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L150_C1)\n"
			},
			{
				"constraint": "isSomeString!T",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 183,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 183,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 186,
								"kind": "variable",
								"char": 17,
								"name": "lineSep",
								"init": "\"\\x0a\"",
								"comment": "Unix line separator.\n"
							},
							{
								"kind": "alias",
								"type": "Tuple!(int, int)",
								"char": 13,
								"line": 188,
								"name": "Slice"
							},
							{
								"storageClass": [
									"const"
								],
								"line": 191,
								"kind": "variable",
								"char": 13,
								"name": "data",
								"type": "T",
								"comment": "FASTA data.\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "size_t",
										"storageClass": [
											"in"
										],
										"default": "50",
										"name": "lineWidth"
									}
								],
								"line": 197,
								"kind": "function",
								"char": 10,
								"name": "toFasta",
								"type": "const pure (in size_t lineWidth = 50)",
								"endchar": 5,
								"endline": 202,
								"comment": "Get this record in FASTA format.\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 206,
								"kind": "function",
								"char": 20,
								"name": "header",
								"type": "const pure @property ()",
								"endchar": 5,
								"endline": 209,
								"comment": "Get the complete header line including the leading `>`.\n"
							},
							{
								"line": 213,
								"kind": "function",
								"char": 22,
								"name": "length",
								"type": "const pure @property size_t()",
								"endchar": 5,
								"endline": 216,
								"comment": "Get the length of the sequence (in characters).\n"
							},
							{
								"parameters": [
									{
										"kind": "value",
										"type": "size_t",
										"specValue": "0",
										"name": "dim"
									}
								],
								"line": 219,
								"kind": "template",
								"char": 22,
								"members": [
									{
										"line": 219,
										"kind": "function",
										"char": 22,
										"name": "opDollar",
										"type": "@property size_t()",
										"endchar": 5,
										"endline": 222
									}
								],
								"name": "opDollar",
								"comment": "ditto\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 226,
								"kind": "function",
								"char": 10,
								"name": "opIndex",
								"type": "const pure ()",
								"endchar": 5,
								"endline": 229,
								"comment": "Get the sequence of this FASTA record without newlines.\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"deco": "i",
										"name": "i"
									}
								],
								"line": 233,
								"kind": "function",
								"char": 10,
								"name": "opIndex",
								"type": "const pure (int i)",
								"endchar": 5,
								"endline": 240,
								"comment": "Get the sequence character at index `i` of this FASTA record.\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "Slice",
										"storageClass": [
											"in"
										],
										"name": "slice"
									}
								],
								"line": 244,
								"kind": "function",
								"char": 10,
								"name": "opIndex",
								"type": "const pure (in Slice slice)",
								"endchar": 5,
								"endline": 252,
								"comment": "Get sub-sequence from `i` to `j` (exclusive) of this FASTA record.\n"
							},
							{
								"parameters": [
									{
										"kind": "value",
										"type": "size_t",
										"specValue": "0",
										"name": "dim"
									}
								],
								"line": 255,
								"kind": "template",
								"char": 10,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"deco": "i",
												"name": "i"
											},
											{
												"deco": "i",
												"name": "j"
											}
										],
										"line": 255,
										"kind": "function",
										"char": 10,
										"name": "opSlice",
										"type": "(int i, int j)",
										"endchar": 5,
										"endline": 258
									}
								],
								"name": "opSlice"
							},
							{
								"parameters": [
									{
										"kind": "value",
										"type": "size_t",
										"specValue": "0",
										"name": "dim"
									}
								],
								"line": 260,
								"kind": "template",
								"char": 10,
								"members": [
									{
										"storageClass": [
											"auto"
										],
										"parameters": [
											{
												"type": "size_t",
												"name": "i"
											},
											{
												"type": "size_t",
												"name": "j"
											}
										],
										"line": 260,
										"kind": "function",
										"char": 10,
										"name": "opSlice",
										"type": "(size_t i, size_t j)",
										"endchar": 5,
										"endline": 263
									}
								],
								"name": "opSlice"
							},
							{
								"parameters": [
									{
										"deco": "i",
										"name": "i"
									}
								],
								"line": 266,
								"kind": "function",
								"char": 17,
								"name": "normalizeIndex",
								"type": "const int(int i)",
								"endchar": 5,
								"endline": 274
							}
						],
						"name": "FastaRecord",
						"protection": "public"
					}
				],
				"name": "FastaRecord",
				"protection": "public",
				"comment": "    Gives access to a single FASTA record. Does not copy the input sequence.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L278_C1)\n---\nauto fastaRecord1 = q\"EOF\n    >sequence1\n    CTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCT\n    AACCCTAACCCTAACCCTAACCCTAACCCTAACAACCCTAACCCTAACCC\nEOF\".outdent.parseFastaRecord;\n\nassert(fastaRecord1.header == \">sequence1\");\nassert(fastaRecord1[].equal(\"CTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACAACCCTAACCCTAACCC\"));\nassert(fastaRecord1[0 .. 5].equal(\"CTAAC\"));\nassert(fastaRecord1.toFasta(13).equal(q\"EOF\n    >sequence1\n    CTAACCCTAACCC\n    TAACCCTAACCCT\n    AACCCTAACCCTA\n    ACCCTAACCCTAA\n    CCCTAACCCTAAC\n    CCTAACCCTAACC\n    CTAACAACCCTAA\n    CCCTAACCC\nEOF\".outdent));\n\nauto fastaRecord2 = q\"EOF\n    >sequence2\n    AAGCTGAGCAGGGCTTTAAAGCTATCTTATTAATAATTATTTCTGTATTG\n    TAACCCTAACCCTAAACCTAACCCTAACCCTAACCCTAACAACCCTAACC\nEOF\".outdent.parseFastaRecord;\n\nassert(fastaRecord2.header == \">sequence2\");\nassert(fastaRecord2[].equal(\"AAGCTGAGCAGGGCTTTAAAGCTATCTTATTAATAATTATTTCTGTATTGTAACCCTAACCCTAAACCTAACCCTAACCCTAACCCTAACAACCCTAACC\"));\nassert(fastaRecord2[5 .. 10].equal(\"GAGCA\"));\nassert(fastaRecord2.toFasta(45).equal(q\"EOF\n    >sequence2\n    AAGCTGAGCAGGGCTTTAAAGCTATCTTATTAATAATTATTTCTG\n    TATTGTAACCCTAACCCTAAACCTAACCCTAACCCTAACCCTAAC\n    AACCCTAACC\nEOF\".outdent));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L278_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 320,
				"kind": "template",
				"char": 15,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "data"
							}
						],
						"line": 320,
						"kind": "function",
						"char": 15,
						"name": "parseFastaRecord",
						"type": "FastaRecord!T(T data)",
						"endchar": 1,
						"endline": 323
					}
				],
				"name": "parseFastaRecord",
				"protection": "public",
				"comment": "Convenience wrapper around `FastaRecord!T(T data)`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L326_C1)\n---\nstring fastaRecordData = q\"EOF\n    >sequence1\n    CTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCT\n    AACCCTAACCCTAACCCTAACCCTAACCCTAACAACCCTAACCCTAACCC\nEOF\".outdent;\nauto fastaRecord = fastaRecordData.parseFastaRecord();\n\nassert(fastaRecord.header == \">sequence1\");\nassert(fastaRecord[].equal(\"CTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACAACCCTAACCCTAACCC\"));\nassert(fastaRecord[0 .. 5].equal(\"CTAAC\"));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L326_C1)\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "fastaFile"
					}
				],
				"line": 345,
				"kind": "function",
				"originalType": "size_t(in string fastaFile)",
				"char": 8,
				"name": "getFastaLength",
				"deco": "FIAyaZm",
				"protection": "public",
				"endchar": 1,
				"endline": 351,
				"comment": "    Calculate the sequence length of the first record in `fastaFile`. Returns\n    the length of the next record in `fastaFile` if it is a File object.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L398_C1)\n---\nimport std.process : pipe;\n\nstring fastaRecordData = q\"EOF\n    >sequence1\n    CTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCT\n    AACCCTAACCCTAACCCTAACCCTAACCCTAACAACCCTAACCCTAACCC\nEOF\".outdent;\nauto fastaFile = pipe();\nfastaFile.writeEnd.write(fastaRecordData);\nfastaFile.writeEnd.close();\n\nauto fastaLength = getFastaLength(fastaFile.readEnd);\n\nassert(fastaLength == 100);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L398_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L417_C1)\n---\nimport std.process : pipe;\n\nstring fastaRecordData = q\"EOF\n    >sequence1\n    CTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCT\n    AACCCTAACCCTAACCCTAACCCTAACCCTAACAACCCTAACCCTAACCC\n    >sequence2\n    AACCCTAACCCTAACCCTAACCCTAACCCTAACAACCCTAACCCTAACCC\nEOF\".outdent;\nauto fastaFile = pipe();\nfastaFile.writeEnd.write(fastaRecordData);\nfastaFile.writeEnd.close();\n\nauto fastaLength1 = getFastaLength(fastaFile.readEnd);\nauto fastaLength2 = getFastaLength(fastaFile.readEnd);\n\nassert(fastaLength1 == 100);\nassert(fastaLength2 == 50);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L417_C1)\n"
			},
			{
				"parameters": [
					{
						"deco": "S3std5stdio4File",
						"name": "fastaFile"
					}
				],
				"line": 354,
				"kind": "function",
				"originalType": "size_t(File fastaFile)",
				"char": 8,
				"name": "getFastaLength",
				"deco": "FS3std5stdio4FileZm",
				"protection": "public",
				"endchar": 1,
				"endline": 395,
				"comment": "ditto\n"
			},
			{
				"constraint": "isSomeString!T",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 453,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 453,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 455,
								"kind": "variable",
								"char": 25,
								"name": "headerFormat",
								"init": "\">%s/%d/%d_%d %s\""
							},
							{
								"kind": "variable",
								"line": 458,
								"char": 7,
								"type": "T",
								"comment": "Name of the SMRTÂ© Cell.\n",
								"name": "name"
							},
							{
								"kind": "variable",
								"line": 461,
								"char": 12,
								"type": "size_t",
								"comment": "Index of the well where the read occurred.\n",
								"name": "well"
							},
							{
								"kind": "variable",
								"line": 464,
								"char": 12,
								"type": "size_t",
								"comment": "Begin of the high quality region.\n",
								"name": "qualityRegionBegin"
							},
							{
								"kind": "variable",
								"line": 467,
								"char": 12,
								"type": "size_t",
								"comment": "End of the high quality region.\n",
								"name": "qualityRegionEnd"
							},
							{
								"kind": "variable",
								"line": 470,
								"char": 12,
								"type": "string",
								"comment": "More information, usually `RQ=0.xx`\n",
								"name": "additionalInformation"
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "header"
									}
								],
								"line": 474,
								"kind": "constructor",
								"char": 5,
								"name": "this",
								"type": "(T header)",
								"endchar": 5,
								"endline": 477,
								"comment": "Construct a `PacBioHeader!T` from `header`.\n"
							},
							{
								"parameters": [
									{
										"type": "T",
										"name": "header"
									}
								],
								"line": 481,
								"kind": "function",
								"char": 10,
								"name": "opAssign",
								"type": "void(T header)",
								"endchar": 5,
								"endline": 484,
								"comment": "Assign new `header` data.\n"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"type": "T",
										"name": "S"
									}
								],
								"line": 488,
								"kind": "template",
								"char": 7,
								"members": [
									{
										"line": 488,
										"kind": "function",
										"char": 7,
										"name": "to",
										"type": "const S()",
										"endchar": 5,
										"endline": 491
									}
								],
								"name": "to",
								"comment": "Builds the header string.\n"
							},
							{
								"line": 493,
								"kind": "function",
								"char": 15,
								"name": "buildHeader",
								"type": "const T()",
								"endchar": 5,
								"endline": 502
							},
							{
								"parameters": [
									{
										"type": "T",
										"storageClass": [
											"in"
										],
										"name": "header"
									}
								],
								"line": 504,
								"kind": "function",
								"char": 18,
								"name": "parse",
								"type": "void(in T header)",
								"endchar": 5,
								"endline": 515
							}
						],
						"name": "PacBioHeader",
						"protection": "public"
					}
				],
				"name": "PacBioHeader",
				"protection": "public",
				"comment": "Represents standard PacBio header format:\n`>{smrtId}/{well}/{hqBegin}_{hqEnd} {readQuality}`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L519_C1)\n---\nstring header = \">name/1/0_1337 RQ=0.75\";\nauto pbHeader1 = PacBioHeader!string(header);\n\nassert(pbHeader1.to!string == \">name/1/0_1337 RQ=0.75\");\nassert(pbHeader1.name == \"name\");\nassert(pbHeader1.well == 1);\nassert(pbHeader1.qualityRegionBegin == 0);\nassert(pbHeader1.qualityRegionEnd == 1337);\nassert(pbHeader1.additionalInformation == \"RQ=0.75\");\n\nPacBioHeader!string pbHeader2 = header;\n\nassert(pbHeader2 == pbHeader1);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L519_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 538,
				"kind": "template",
				"char": 16,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "header"
							}
						],
						"line": 538,
						"kind": "function",
						"char": 16,
						"name": "parsePacBioHeader",
						"type": "PacBioHeader!T(T header)",
						"endchar": 1,
						"endline": 541
					}
				],
				"name": "parsePacBioHeader",
				"protection": "public",
				"comment": "Convenience wrapper around `PacBioHeader!T(T header)`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L544_C1)\n---\nstring header = \">name/1/0_1337 RQ=0.75\";\nauto pbHeader1 = header.parsePacBioHeader();\n\nassert(pbHeader1.to!string == \">name/1/0_1337 RQ=0.75\");\nassert(pbHeader1.name == \"name\");\nassert(pbHeader1.well == 1);\nassert(pbHeader1.qualityRegionBegin == 0);\nassert(pbHeader1.qualityRegionEnd == 1337);\nassert(pbHeader1.additionalInformation == \"RQ=0.75\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L544_C1)\n"
			},
			{
				"constraint": "isSomeChar!C",
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"line": 563,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "C",
								"name": "base"
							}
						],
						"line": 563,
						"kind": "function",
						"char": 3,
						"name": "complement",
						"type": "C(C base)",
						"endchar": 1,
						"endline": 580
					}
				],
				"name": "complement",
				"protection": "public",
				"comment": "    Get the complement of a DNA base. Only bases A, T, C, G (case-insensitive)\n    will be translated; all other characters are left as is. Replacement\n    preserves casing of the characters.\n"
			},
			{
				"constraint": "isBidirectionalRange!Range && isSomeChar!(ElementType!Range)",
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 588,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "Range",
								"name": "sequence"
							}
						],
						"line": 588,
						"kind": "function",
						"char": 6,
						"name": "reverseComplementer",
						"type": "(Range sequence)",
						"endchar": 1,
						"endline": 597
					}
				],
				"name": "reverseComplementer",
				"protection": "public",
				"comment": "    Compute the reverse complement of a DNA sequence. Only bases A, T, C, G\n    (case-insensitive) will be translated; all other characters are left as\n    is. Replacement preserves casing of the characters.\n"
			},
			{
				"constraint": "isSomeString!T",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 600,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"in"
								],
								"name": "sequence"
							}
						],
						"line": 600,
						"kind": "function",
						"char": 3,
						"name": "reverseComplement",
						"type": "T(in T sequence)",
						"endchar": 1,
						"endline": 605
					}
				],
				"name": "reverseComplement",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"constraint": "isSomeString!T",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 609,
				"kind": "template",
				"char": 15,
				"members": [
					{
						"parameters": [
							{
								"type": "FastaRecord!T",
								"storageClass": [
									"in"
								],
								"name": "fastaRecord"
							}
						],
						"line": 609,
						"kind": "function",
						"char": 15,
						"name": "reverseComplement",
						"type": "FastaRecord!T(in FastaRecord!T fastaRecord)",
						"endchar": 1,
						"endline": 624
					}
				],
				"name": "reverseComplement",
				"protection": "public",
				"comment": "Return a copy of `fastaRecord` with reverse-complemented sequence.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L627_C1)\n---\nauto seq = \"GGTTGTAAATTGACTGTTGTCTGCT\\ngccaatctactggtgggggagagat\";\nauto revComp = \"atctctcccccaccagtagattggc\\nAGCAGACAACAGTCAATTTACAACC\";\n\nassert(seq.reverseComplement == revComp);\nassert(seq.reverseComplementer.equal(revComp));\n\nauto fastaRecord1 = q\"EOF\n    >sequence1\n    CTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCT\n    AACCCTAACCCTAACCCTAACCCTAACCCTAACAACCCTAACCCTAACCC\nEOF\".outdent.parseFastaRecord;\nauto fastaRecord1RevComp = fastaRecord1.reverseComplement;\n\nassert(fastaRecord1RevComp.header == \">sequence1\");\nassert(fastaRecord1RevComp[].equal(\"GGGTTAGGGTTAGGGTTGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAG\"));\nassert(fastaRecord1RevComp[0 .. 5].equal(\"GGGTT\"));\nassert(fastaRecord1RevComp.toFasta(13).equal(q\"EOF\n    >sequence1\n    GGGTTAGGGTTAG\n    GGTTGTTAGGGTT\n    AGGGTTAGGGTTA\n    GGGTTAGGGTTAG\n    GGTTAGGGTTAGG\n    GTTAGGGTTAGGG\n    TTAGGGTTAGGGT\n    TAGGGTTAG\nEOF\".outdent));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L627_C1)\n"
			}
		],
		"comment": "    Some functions to work with FASTA data.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.util.fasta"
	},
	{
		"kind": "module",
		"file": "source/dentist/util/graphalgo.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "hasEdge"
					}
				],
				"line": 43,
				"kind": "template",
				"char": 12,
				"members": [
					{
						"parameters": [
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"line": 43,
						"kind": "function",
						"char": 12,
						"name": "connectedComponents",
						"type": "size_t[][](size_t n)",
						"endchar": 1,
						"endline": 67
					}
				],
				"name": "connectedComponents",
				"protection": "public",
				"comment": "    Calculate connected components of the graph defined by `hasEdge`.\n\n    Params:\n        hasEdge = Binary predicate taking two nodes of type `size_t` which is\n                  true iff the first node is adjacent to the second node.\n        n =       Number of nodes in the graph. `hasEdge` must be defined for\n                  every pair of integer in `0 .. n`.\n    Returns: Array of components represented as arrays of node indices.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L70_C1)\n---\nimport std.algorithm :\n    equal,\n    min;\n\n//    _____________\n//   /             \\\n// (0) --- (1) --- (2)     (3) --- (4)\nenum n = 5;\nalias connect = (u, v, x, y) => (u == x && v == y) || (u == y && v == x);\nalias hasEdge = (u, v) => connect(u, v, 0, 1) ||\n                          connect(u, v, 1, 2) ||\n                          connect(u, v, 2, 0) ||\n                          connect(u, v, 3, 4);\n\nauto components = connectedComponents!hasEdge(n);\n\nassert(equal(components, [\n    [0, 1, 2],\n    [3, 4],\n]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L70_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L95_C1)\n---\nimport std.algorithm :\n    equal,\n    min;\n\n//    _____________\n//   /             \\\n// (0) --- (1) --- (2)     (3) --- (4)\n//   \\_____________________/\nenum n = 5;\nalias connect = (u, v, x, y) => (u == x && v == y) || (u == y && v == x);\nalias hasEdge = (u, v) => connect(u, v, 0, 1) ||\n                          connect(u, v, 1, 2) ||\n                          connect(u, v, 2, 0) ||\n                          connect(u, v, 0, 3) ||\n                          connect(u, v, 3, 4);\n\nauto components = connectedComponents!hasEdge(n);\n\nimport std.stdio;\nassert(equal(components, [\n    [0, 1, 2, 3, 4],\n]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L95_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "weight_t"
					}
				],
				"line": 164,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 164,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 169,
								"kind": "variable",
								"char": 10,
								"name": "unconnectedWeight",
								"init": "saturatedInfinity!weight_t",
								"comment": "Weight returned if two nodes are not connected.\n\nSee_also: do not use directly but through `isConnected`\n"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 174,
								"kind": "variable",
								"char": 10,
								"name": "noNext",
								"init": "size_t.max",
								"comment": "Weight returned if the end of a path is reached.\n\nSee_also: do not use directly but through `hasNext`\n"
							},
							{
								"kind": "variable",
								"type": "size_t",
								"char": 20,
								"line": 176,
								"name": "_numNodes"
							},
							{
								"kind": "variable",
								"type": "weight_t[]",
								"char": 24,
								"line": 177,
								"name": "_dist"
							},
							{
								"kind": "variable",
								"type": "size_t[]",
								"char": 22,
								"line": 178,
								"name": "_next"
							},
							{
								"line": 183,
								"kind": "function",
								"char": 22,
								"name": "numNodes",
								"type": "const pure nothrow @property @safe size_t()",
								"endchar": 5,
								"endline": 186,
								"comment": "Number of nodes in the graph. This is the limit (exclusive) for\nnode indices.\n"
							},
							{
								"line": 190,
								"kind": "function",
								"char": 10,
								"name": "hasNegativeCycles",
								"type": "const pure nothrow @safe bool()",
								"endchar": 5,
								"endline": 193,
								"comment": "True if a negative cycle was detected.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "u"
									},
									{
										"type": "size_t",
										"name": "v"
									}
								],
								"line": 196,
								"kind": "function",
								"char": 20,
								"name": "idx",
								"type": "const pure nothrow @safe size_t(size_t u, size_t v)",
								"endchar": 5,
								"endline": 200
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "u"
									},
									{
										"type": "size_t",
										"name": "v"
									}
								],
								"line": 204,
								"kind": "function",
								"char": 28,
								"name": "dist",
								"type": "pure nothrow @property ref @safe weight_t(size_t u, size_t v)",
								"endchar": 5,
								"endline": 207,
								"comment": "Get the distance from `u` to `v`.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "u"
									},
									{
										"type": "size_t",
										"name": "v"
									}
								],
								"line": 210,
								"kind": "function",
								"char": 24,
								"name": "dist",
								"type": "const pure nothrow @property @safe weight_t(size_t u, size_t v)",
								"endchar": 5,
								"endline": 213,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "u"
									},
									{
										"type": "size_t",
										"name": "v"
									}
								],
								"line": 217,
								"kind": "function",
								"char": 20,
								"name": "isConnected",
								"type": "const pure nothrow @property @safe bool(size_t u, size_t v)",
								"endchar": 5,
								"endline": 220,
								"comment": "Return true if there is a path from `u` to `v`.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "u"
									},
									{
										"type": "size_t",
										"name": "v"
									}
								],
								"line": 224,
								"kind": "function",
								"char": 26,
								"name": "next",
								"type": "pure nothrow @property ref @safe size_t(size_t u, size_t v)",
								"endchar": 5,
								"endline": 227,
								"comment": "Return the next node after `u` on a shortest path from `u` to `v`.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "u"
									},
									{
										"type": "size_t",
										"name": "v"
									}
								],
								"line": 230,
								"kind": "function",
								"char": 22,
								"name": "next",
								"type": "const pure nothrow @property @safe size_t(size_t u, size_t v)",
								"endchar": 5,
								"endline": 233,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "u"
									},
									{
										"type": "size_t",
										"name": "v"
									}
								],
								"line": 241,
								"kind": "function",
								"char": 20,
								"name": "hasNext",
								"type": "const pure nothrow @property @safe bool(size_t u, size_t v)",
								"endchar": 5,
								"endline": 244,
								"comment": "Returns whether there is a next node after `u` on a shortest path\nfrom `u` to `v`.\n\n`false` is returned if `u == v` or if there is no shortest path\nfrom `u` to `v`.\n"
							},
							{
								"line": 248,
								"kind": "struct",
								"char": 12,
								"members": [
									{
										"kind": "variable",
										"type": "const(FloydWarshallMatrix!weight_t)*",
										"char": 54,
										"line": 250,
										"name": "_matrix"
									},
									{
										"kind": "variable",
										"type": "size_t",
										"char": 24,
										"line": 251,
										"name": "_from"
									},
									{
										"kind": "variable",
										"type": "size_t",
										"char": 24,
										"line": 252,
										"name": "_to"
									},
									{
										"kind": "variable",
										"type": "size_t",
										"char": 24,
										"line": 253,
										"name": "_current"
									},
									{
										"parameters": [
											{
												"type": "const(FloydWarshallMatrix!weight_t)*",
												"name": "matrix"
											},
											{
												"type": "size_t",
												"name": "from"
											},
											{
												"type": "size_t",
												"name": "to"
											}
										],
										"line": 256,
										"kind": "constructor",
										"char": 17,
										"name": "this",
										"type": "(const(FloydWarshallMatrix!weight_t)* matrix, size_t from, size_t to)",
										"endchar": 9,
										"endline": 264
									},
									{
										"line": 268,
										"kind": "function",
										"char": 55,
										"name": "matrix",
										"type": "pure nothrow @property @safe const(FloydWarshallMatrix!weight_t)()",
										"endchar": 9,
										"endline": 271,
										"comment": "Reference to the underlying solution matrix.\n"
									},
									{
										"line": 275,
										"kind": "function",
										"char": 26,
										"name": "from",
										"type": "const pure nothrow @property @safe size_t()",
										"endchar": 9,
										"endline": 278,
										"comment": "Source node of the path.\n"
									},
									{
										"line": 282,
										"kind": "function",
										"char": 26,
										"name": "to",
										"type": "const pure nothrow @property @safe size_t()",
										"endchar": 9,
										"endline": 285,
										"comment": "Destination node of the path.\n"
									},
									{
										"line": 289,
										"kind": "function",
										"char": 24,
										"name": "empty",
										"type": "const pure nothrow @property @safe bool()",
										"endchar": 9,
										"endline": 292,
										"comment": "Range interface.\n"
									},
									{
										"line": 295,
										"kind": "function",
										"char": 26,
										"name": "front",
										"type": "const pure nothrow @property @safe size_t()",
										"endchar": 9,
										"endline": 303,
										"comment": "ditto\n"
									},
									{
										"line": 306,
										"kind": "function",
										"char": 14,
										"name": "popFront",
										"type": "pure nothrow @safe void()",
										"endchar": 9,
										"endline": 313,
										"comment": "ditto\n"
									},
									{
										"line": 316,
										"kind": "function",
										"char": 32,
										"name": "save",
										"type": "const pure nothrow @property @safe ShortestPath()",
										"endchar": 9,
										"endline": 319,
										"comment": "ditto\n"
									}
								],
								"name": "ShortestPath",
								"protection": "public",
								"comment": "Range of nodes that form a shortest path between two nodes.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "from"
									},
									{
										"type": "size_t",
										"name": "to"
									}
								],
								"line": 325,
								"kind": "function",
								"char": 18,
								"name": "shortestPath",
								"type": "const pure nothrow ShortestPath(size_t from, size_t to)",
								"endchar": 5,
								"endline": 328,
								"comment": "Returns a lazy range of nodes that form a shortest path between `from`\nand `to`.\n"
							}
						],
						"name": "FloydWarshallMatrix",
						"protection": "public"
					}
				],
				"name": "FloydWarshallMatrix",
				"protection": "public",
				"comment": "Provides access to the all pairs shortest paths solution.\n\nThis is the result of the Floyd-Warshall algorithm generated by\n`shortestPathsFloydWarshall`.\n"
			},
			{
				"line": 403,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 407,
						"kind": "enum member",
						"char": 5,
						"name": "general",
						"protection": "public",
						"value": "cast(ubyte)0u",
						"comment": "Any weighted graph (directed or undirected). Negative cycles are\nallowed and may be detected after the algorithm finished.\n"
					},
					{
						"line": 411,
						"kind": "enum member",
						"char": 5,
						"name": "DAG",
						"protection": "public",
						"value": "1",
						"comment": "Directed acyclic graph. The algorithm can be faster by a constant\nfactor by first sorting in topological order and than skipping\nirrelevant edges.\n"
					}
				],
				"name": "GraphType",
				"protection": "public",
				"baseDeco": "h",
				"comment": "Specify the type of the graph for performance improvements.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "hasEdge"
					},
					{
						"kind": "alias",
						"name": "weight"
					},
					{
						"kind": "value",
						"deco": "E7dentist4util9graphalgo9GraphType",
						"defaultValue": "GraphType.general",
						"name": "graphType"
					}
				],
				"line": 439,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"line": 439,
						"kind": "function",
						"char": 6,
						"name": "shortestPathsFloydWarshall",
						"type": "(size_t n)",
						"endchar": 1,
						"endline": 448
					}
				],
				"name": "shortestPathsFloydWarshall",
				"protection": "public",
				"comment": "    Calculate all shortest paths between all pairs of nodes. The functions\n    `hasEdge` and `weight` define the graphs structure and weights,\n    respectively. Nodes are represented as `size_t` integers.\n\n    Params:\n        hasEdge = Binary predicate taking two nodes of type `size_t` which is\n                  true iff the first node is adjacent to the second node.\n        weight =  Binary function taking two nodes of type `size_t` which\n                  returns the weight of the edge between the first and the\n                  second node. The function may be undefined if `hasEdge`\n                  returns false for the given arguments.\n        n =       Number of nodes in the graph. `hasEdge` must be defined for\n                  every pair of integer in `0 .. n`.\n        bestConnections =\n                  If given, the array will be populated with the\n                  `bestConnections.length` best connections, that\n                  is the pairs of nodes with optimal distances.\n        graphType =\n                  Specify `GraphType.DAG` to improve performance if the graph\n                  is in fact a directed acyclic graph.\n    Returns: `FloydWarshallMatrix`\n    See_also: $(LINK https://en.wikipedia.org/wiki/Floyd-Warshall_algorithm)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L515_C1)\n---\nimport std.algorithm : equal;\n\n//    _____________   _____________\n//   /             v /             v\n// (0) --> (1) --> (2)     (3) --> (4)\nenum n = 5;\nalias hasEdge = (u, v) => (u + 1 == v && u != 2) ||\n                          (u + 2 == v && u % 2 == 0);\nalias weight = (u, v) => 1;\n\nauto shortestPaths = shortestPathsFloydWarshall!(hasEdge, weight)(n);\n\ndebug (2) shortestPaths.printConnections([[0, 4], [1, 4], [1, 3], [3, 4]]);\n\nassert(equal(shortestPaths.shortestPath(0, 4), [0, 2, 4]));\nassert(shortestPaths.dist(0, 4) == 2);\nassert(equal(shortestPaths.shortestPath(1, 4), [1, 2, 4]));\nassert(shortestPaths.dist(1, 4) == 2);\nassert(equal(shortestPaths.shortestPath(1, 3), size_t[].init));\nassert(!shortestPaths.isConnected(1, 3));\nassert(equal(shortestPaths.shortestPath(3, 4), [3, 4]));\nassert(shortestPaths.dist(3, 4) == 1);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L515_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L542_C1)\n---\nimport std.algorithm : equal;\n\n//    _____-4______   _____-4______\n//   /             v /             v\n// (0) --> (1) --> (2)     (3) --> (4)\n//     -1      -1              -1\nenum n = 5;\nalias hasEdge = (u, v) => (u + 1 == v && u != 2) ||\n                          (u + 2 == v && u % 2 == 0);\nalias weight = (u, v) => -(cast(long) u - cast(long) v)^^2;\n\nauto shortestPaths = shortestPathsFloydWarshall!(hasEdge, weight)(n);\n\ndebug (2) shortestPaths.printConnections([[0, 4], [1, 4], [2, 4], [1, 3], [3, 4]]);\n\nassert(equal(shortestPaths.shortestPath(0, 4), [0, 2, 4]));\nassert(shortestPaths.dist(0, 4) == -8);\nassert(equal(shortestPaths.shortestPath(1, 4), [1, 2, 4]));\nassert(shortestPaths.dist(1, 4) == -5);\nassert(equal(shortestPaths.shortestPath(1, 3), size_t[].init));\nassert(!shortestPaths.isConnected(1, 3));\nassert(equal(shortestPaths.shortestPath(3, 4), [3, 4]));\nassert(shortestPaths.dist(3, 4) == -1);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L542_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L570_C1)\n---\nimport std.algorithm : equal, map;\n\n//    _____-4______   _____-4______\n//   /             v /             v\n// (0) --> (1) --> (2)     (3) --> (4)\n//     -1      -1              -1\nenum n = 5;\nalias hasEdge = (u, v) => (u + 1 == v && u != 2) ||\n                          (u + 2 == v && u % 2 == 0);\nalias weight = (u, v) => -(cast(long) u - cast(long) v)^^2;\n\nenum bestN = 7;\nauto bestConnections = new size_t[2][bestN];\nauto shortestPaths = shortestPathsFloydWarshall!(hasEdge, weight)(n, bestConnections);\n\nassert(equal(bestConnections, [\n    [0, 4],\n    [1, 4],\n    [0, 2],\n    [2, 4],\n    [0, 1],\n    [1, 2],\n    [3, 4],\n]));\nassert(equal(bestConnections.map!(c => shortestPaths.dist(c[0], c[1])), [\n    -8,\n    -5,\n    -4,\n    -4,\n    -1,\n    -1,\n    -1,\n]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L570_C1)\nExample:\nOptimize performance by choosing appropriate `graphType`$(DDOX_UNITTEST_HEADER __unittest_L608_C1)\n---\nimport std.datetime.stopwatch;\n\nenum n = 5;\nalias hasEdge = (u, v) => (u + 1 == v && u != 2) ||\n                          (u + 2 == v && u % 2 == 0);\nalias weight = (u, v) => -(cast(long) u - cast(long) v)^^2;\n\nalias shortestPathsGeneral = () => shortestPathsFloydWarshall!(\n    hasEdge,\n    weight,\n    GraphType.general,\n)(n);\nalias shortestPathsDAG = () => shortestPathsFloydWarshall!(\n    hasEdge,\n    weight,\n    GraphType.DAG,\n)(n);\n\nenum numRounds = 10_000;\nauto result = benchmark!(\n    shortestPathsGeneral,  // => 157.029400ms\n    shortestPathsDAG,      // =>  35.348500ms\n)(numRounds);\n\ndebug (2)\n{\n    import std.stdio : writefln;\n\n    writefln!\"Computed %d rounds:\"(numRounds);\n    writefln!\"shortestPathsGeneral:  %fms\"(result[0].total!\"nsecs\"/1e9*1e3);\n    writefln!\"shortestPathsDAG:      %fms\"(result[1].total!\"nsecs\"/1e9*1e3);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L608_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "hasEdge"
					},
					{
						"kind": "alias",
						"name": "weight"
					},
					{
						"kind": "value",
						"deco": "E7dentist4util9graphalgo9GraphType",
						"defaultValue": "GraphType.general",
						"name": "graphType"
					}
				],
				"line": 451,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "size_t",
								"name": "n"
							},
							{
								"type": "size_t[2][]",
								"storageClass": [
									"ref"
								],
								"name": "bestConnections"
							}
						],
						"line": 451,
						"kind": "function",
						"char": 6,
						"name": "shortestPathsFloydWarshall",
						"type": "(size_t n, ref size_t[2][] bestConnections)",
						"endchar": 1,
						"endline": 509
					}
				],
				"name": "shortestPathsFloydWarshall",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"line": 512,
				"kind": "alias",
				"originalType": "shortestPathsFloydWarshall",
				"char": 1,
				"name": "allPairsShortestPaths",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "weight_t"
					}
				],
				"line": 733,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 733,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 735,
								"kind": "variable",
								"char": 10,
								"name": "unconnectedWeight",
								"init": "saturatedInfinity!weight_t"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 736,
								"kind": "variable",
								"char": 10,
								"name": "noPredecessor",
								"init": "size_t.max"
							},
							{
								"kind": "variable",
								"line": 740,
								"char": 12,
								"type": "size_t",
								"comment": "Source node of the shortest paths problem.\n",
								"name": "startNode"
							},
							{
								"kind": "variable",
								"line": 743,
								"char": 14,
								"type": "size_t[]",
								"comment": "Topologically ordered nodes.\n",
								"name": "topologicalOrder"
							},
							{
								"kind": "variable",
								"type": "weight_t[]",
								"char": 24,
								"line": 745,
								"name": "_distance"
							},
							{
								"kind": "variable",
								"type": "size_t[]",
								"char": 22,
								"line": 746,
								"name": "_predecessor"
							},
							{
								"line": 751,
								"kind": "function",
								"char": 22,
								"name": "numNodes",
								"type": "const pure nothrow @property @safe size_t()",
								"endchar": 5,
								"endline": 754,
								"comment": "Number of nodes in the graph. This is the limit (exclusive) for\nnode indices.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "u"
									}
								],
								"line": 758,
								"kind": "function",
								"char": 20,
								"name": "originalNode",
								"type": "const pure nothrow @safe size_t(size_t u)",
								"endchar": 5,
								"endline": 761,
								"comment": "Returns the original ID of the node at index `u` in topological order.\n"
							},
							{
								"line": 765,
								"kind": "function",
								"char": 33,
								"name": "distances",
								"type": "const pure nothrow @property @safe const(weight_t)[]()",
								"endchar": 5,
								"endline": 768,
								"comment": "Return the array of distances from `startNode` to the indexed node.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "u"
									}
								],
								"line": 772,
								"kind": "function",
								"char": 28,
								"name": "distance",
								"type": "pure nothrow @property ref @safe weight_t(size_t u)",
								"endchar": 5,
								"endline": 775,
								"comment": "Return the distance from `startNode` to `u`.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "u"
									}
								],
								"line": 779,
								"kind": "function",
								"char": 24,
								"name": "distance",
								"type": "const pure nothrow @property @safe weight_t(size_t u)",
								"endchar": 5,
								"endline": 782,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "u"
									}
								],
								"line": 787,
								"kind": "function",
								"char": 20,
								"name": "isConnected",
								"type": "const pure nothrow @property @safe bool(size_t u)",
								"endchar": 5,
								"endline": 790,
								"comment": "Return true if there is a path from `startNode` to `u`.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "u"
									}
								],
								"line": 795,
								"kind": "function",
								"char": 26,
								"name": "predecessor",
								"type": "pure nothrow @property ref @safe size_t(size_t u)",
								"endchar": 5,
								"endline": 798,
								"comment": "Return the predecessor of `u` on a shortest path\nfrom `startNode` to `u`.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "u"
									}
								],
								"line": 801,
								"kind": "function",
								"char": 22,
								"name": "predecessor",
								"type": "const pure nothrow @property @safe size_t(size_t u)",
								"endchar": 5,
								"endline": 804,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "u"
									}
								],
								"line": 812,
								"kind": "function",
								"char": 20,
								"name": "hasPredecessor",
								"type": "const pure nothrow @property @safe bool(size_t u)",
								"endchar": 5,
								"endline": 815,
								"comment": "Returns true if `u` has a predecessor on a shortest path\nfrom `startNode` to `u`.\n\nThis is true if there exists a path from `startNode` to `u` and\n`u != startNode`.\n"
							},
							{
								"line": 824,
								"kind": "struct",
								"char": 12,
								"members": [
									{
										"kind": "variable",
										"type": "const(SingleSourceShortestPathsSolution!weight_t)*",
										"char": 68,
										"line": 826,
										"name": "_solution"
									},
									{
										"kind": "variable",
										"type": "size_t",
										"char": 24,
										"line": 827,
										"name": "_to"
									},
									{
										"kind": "variable",
										"type": "size_t",
										"char": 24,
										"line": 828,
										"name": "_current"
									},
									{
										"parameters": [
											{
												"type": "const(SingleSourceShortestPathsSolution!weight_t)*",
												"name": "solution"
											},
											{
												"type": "size_t",
												"name": "to"
											}
										],
										"line": 831,
										"kind": "constructor",
										"char": 17,
										"name": "this",
										"type": "(const(SingleSourceShortestPathsSolution!weight_t)* solution, size_t to)",
										"endchar": 9,
										"endline": 838
									},
									{
										"line": 842,
										"kind": "function",
										"char": 69,
										"name": "solution",
										"type": "pure nothrow @property @safe const(SingleSourceShortestPathsSolution!weight_t)()",
										"endchar": 9,
										"endline": 845,
										"comment": "Reference to the underlying solution object.\n"
									},
									{
										"line": 849,
										"kind": "function",
										"char": 26,
										"name": "from",
										"type": "const pure nothrow @property @safe size_t()",
										"endchar": 9,
										"endline": 852,
										"comment": "Source node.\n"
									},
									{
										"line": 856,
										"kind": "function",
										"char": 26,
										"name": "to",
										"type": "const pure nothrow @property @safe size_t()",
										"endchar": 9,
										"endline": 859,
										"comment": "Target node.\n"
									},
									{
										"line": 863,
										"kind": "function",
										"char": 24,
										"name": "empty",
										"type": "const pure nothrow @property @safe bool()",
										"endchar": 9,
										"endline": 866,
										"comment": "Range interface.\n"
									},
									{
										"line": 869,
										"kind": "function",
										"char": 26,
										"name": "front",
										"type": "const pure nothrow @property @safe size_t()",
										"endchar": 9,
										"endline": 877,
										"comment": "ditto\n"
									},
									{
										"line": 880,
										"kind": "function",
										"char": 14,
										"name": "popFront",
										"type": "pure nothrow @safe void()",
										"endchar": 9,
										"endline": 887,
										"comment": "ditto\n"
									}
								],
								"name": "ReverseShortestPath",
								"protection": "public",
								"comment": "Reverse range of nodes that form a shortest path starting in\n`startNode` and ending in `to`.\n\nThe order is reversed because solutions to the single source shortest\npaths problem always from a tree that is tersely represented by a\npredecessor list.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "to"
									}
								],
								"line": 893,
								"kind": "function",
								"char": 25,
								"name": "reverseShortestPath",
								"type": "const pure nothrow ReverseShortestPath(size_t to)",
								"endchar": 5,
								"endline": 896,
								"comment": "Returns a lazy range of nodes that form a reversed shortest path\nfrom `startNode` to `to`.\n"
							}
						],
						"name": "SingleSourceShortestPathsSolution",
						"protection": "public"
					}
				],
				"name": "SingleSourceShortestPathsSolution",
				"protection": "public",
				"comment": "Provides access to the single source shortest paths solution.\n\nSee_also: `dagSingleSourceShortestPaths`.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "hasEdge"
					},
					{
						"kind": "alias",
						"name": "weight"
					}
				],
				"line": 926,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "size_t",
								"name": "start"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"line": 926,
						"kind": "function",
						"char": 6,
						"name": "dagSingleSourceShortestPaths",
						"type": "(size_t start, size_t n)",
						"endchar": 1,
						"endline": 962
					}
				],
				"name": "dagSingleSourceShortestPaths",
				"protection": "public",
				"comment": "    Calculate all shortest paths in a DAG starting at `start`.\n\n    The functions `hasEdge` and `weight` define the graphs structure and\n    weights, respectively. Nodes are represented as `0 .. n`. The graph must\n    be directed and acyclic (DAG).\n\n    The implementation uses `topologicalSort`ing achieving linear time\n    consumption `Î(n + m)` where `m` is the number of edges.\n\n    Params:\n        hasEdge = Binary predicate taking two nodes of type `size_t` which is\n                  true iff the first node is adjacent to the second node.\n        weight =  Binary function taking two nodes of type `size_t` which\n                  returns the weight of the edge between the first and the\n                  second node. The function is only evaluated if `hasEdge`\n                  is true.\n        start =   Source node.\n        n =       Number of nodes in the graph. `hasEdge` must be defined for\n                  every pair of integer in `0 .. n`.\n    Returns: `SingleSourceShortestPathsSolution`\n    See_also: $(UL\n        $(LI `topologicalSort`)\n        $(LI $(LINK https://en.wikipedia.org/wiki/Topological_sorting#Application_to_shortest_path_finding))\n    )\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L965_C1)\n---\nimport std.algorithm : equal;\n\n//    _____________   _____________\n//   /             v /             v\n// (0) --> (1) --> (2)     (3) --> (4)\nenum n = 5;\nalias hasEdge = (u, v) => (u + 1 == v && u != 2) ||\n                          (u + 2 == v && u % 2 == 0);\nalias weight = (u, v) => 1;\n\nauto shortestPaths = dagSingleSourceShortestPaths!(hasEdge, weight)(0, n);\n\nassert(equal(shortestPaths.reverseShortestPath(4), [4, 2, 0]));\nassert(shortestPaths.distance(4) == 2);\nassert(equal(shortestPaths.reverseShortestPath(2), [2, 0]));\nassert(shortestPaths.distance(2) == 1);\nassert(equal(shortestPaths.reverseShortestPath(1), [1, 0]));\nassert(shortestPaths.distance(1) == 1);\nassert(equal(shortestPaths.reverseShortestPath(3), size_t[].init));\nassert(!shortestPaths.isConnected(3));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L965_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "hasEdge"
					}
				],
				"line": 1011,
				"kind": "template",
				"char": 10,
				"members": [
					{
						"parameters": [
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"line": 1011,
						"kind": "function",
						"char": 10,
						"name": "topologicalSort",
						"type": "size_t[](size_t n)",
						"endchar": 1,
						"endline": 1054
					}
				],
				"name": "topologicalSort",
				"protection": "public",
				"comment": "    Topologically sort a DAG.\n\n    The binary predicate `hasEdge` defines the graphs structure. Nodes are\n    represented as `0 .. n`. The graph must be directed and acyclic (DAG).\n\n    The sorting is implemented using a linear time algorithm based on\n    depth-first search describe by Cormen et al. (2001).\n\n    Returns: array of nodes in topological order.\n    Params:\n        hasEdge = Binary predicate taking two nodes of type `size_t` which is\n                  true iff the first node is adjacent to the second node.\n        n =       Number of nodes in the graph. `hasEdge` must be defined for\n                  every pair of integer in `0 .. n`.\n    Throws: `NoDAG` if a cycle was detected\n    See_also: $(UL\n        $(LI $(LINK https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search))\n        $(LI Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001), \"Section 22.4: Topological sort\", Introduction to Algorithms (2nd ed.), MIT Press and McGraw-Hill, pp. 549â552, ISBN 0-262-03293-7)\n    )\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1057_C1)\n---\nimport std.algorithm : equal;\n\n//    _____________   _____________\n//   /             v /             v\n// (0) --> (1) --> (2)     (3) --> (4)\nenum n = 5;\nalias hasEdge = (u, v) => (u + 1 == v && u != 2) ||\n                          (u + 2 == v && u % 2 == 0);\n\nauto topologicalOrder = topologicalSort!hasEdge(n);\n\nassert(equal(topologicalOrder, [3, 0, 1, 2, 4]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1057_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1074_C1)\n---\nimport std.exception : assertThrown;\n\n//    _____________   _____________\n//   /             v /             v\n// (0) --> (1) --> (2)     (3) --> (4)\n//   ^_____________________________/\nenum n = 5;\nalias hasEdge = (u, v) => (u + 1 == v && u != 2) ||\n                          (u + 2 == v && u % 2 == 0) ||\n                          u == 4 && v == 0;\n\nassertThrown!NoDAG(topologicalSort!hasEdge(n));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1074_C1)\n"
			},
			{
				"line": 1092,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"line": 1094,
						"kind": "constructor",
						"originalType": "(string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 5,
						"name": "this",
						"deco": "FAyamC6object9ThrowableZC7dentist4util9graphalgo5NoDAG",
						"protection": "public",
						"endchar": 5,
						"endline": 1097
					}
				],
				"name": "NoDAG",
				"protection": "public",
				"comment": "Thrown if a cycle was detected.\n"
			}
		],
		"comment": "    A selection of graph algorithms.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.util.graphalgo"
	},
	{
		"kind": "module",
		"file": "source/dentist/util/log.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "E7dentist4util3log8LogLevel",
						"name": "level"
					}
				],
				"line": 27,
				"kind": "function",
				"char": 6,
				"name": "setLogLevel",
				"deco": "FNbE7dentist4util3log8LogLevelZv",
				"protection": "public",
				"endchar": 1,
				"endline": 31,
				"comment": "Sets the minimum log level to be printed.\n"
			},
			{
				"line": 35,
				"kind": "function",
				"char": 10,
				"name": "getLogLevel",
				"deco": "FZE7dentist4util3log8LogLevel",
				"protection": "public",
				"endchar": 1,
				"endline": 38,
				"comment": "Get the minimum log level to be printed. Use `shouldLog` for conditionals.\n"
			},
			{
				"parameters": [
					{
						"deco": "E7dentist4util3log8LogLevel",
						"name": "logLevel"
					}
				],
				"line": 42,
				"kind": "function",
				"char": 6,
				"name": "shouldLog",
				"deco": "FE7dentist4util3log8LogLevelZb",
				"protection": "public",
				"endchar": 1,
				"endline": 45,
				"comment": "Check whether message of `logLevel` should be logged.\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 77,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 77,
						"kind": "function",
						"char": 6,
						"name": "logJsonDebug",
						"type": "nothrow void(lazy T args)",
						"endchar": 1,
						"endline": 80
					}
				],
				"name": "logJsonDebug",
				"protection": "public",
				"comment": "    Logs a message in compressed single-line JSON format.\n\n    Produces a JSON object with the key-value pairs given as `args` and\n    default fields `\"thread\"`, `\"timestamp\"` and `\"logLevel\"`.\n\n\n    Example:\n    ---\n    logJsonInfo(\n        \"action\", \"findTheTruth\",\n        \"answer\", 42,\n        \"elapsedSecs\", 1337,\n    );\n\n    // --> (real output is compressed in a single line)\n    // {\n    //     \"action\": \"findTheTruth\",\n    //     \"answer\": 42,\n    //     \"elapsedSecs\": 1337\n    //     \"thread\": 123467890,\n    //     \"timestamp\", 123467890\n    //     \"logLevel\", \"info\"\n    // }\n    ---\n\n    Params:\n        args = pairs of `name` (`string`) and `value`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L154_C1)\n---\nimport std.stdio : File, stderr;\nimport vibe.data.json : Json, parseJsonString;\n\nauto origStderr = stderr;\nstderr = File.tmpfile();\nscope (exit)\n{\n    stderr.close();\n    stderr = origStderr;\n}\n\nlogJsonError(\n    \"error\", \"mysterious observation\",\n    \"secret\", 42,\n);\n\nstderr.rewind();\nauto observed = parseJsonString(stderr.readln);\n\nassert(observed[\"thread\"].type == Json.Type.int_);\nassert(observed[\"timestamp\"].type == Json.Type.int_);\nassert(observed[\"error\"] == \"mysterious observation\");\nassert(observed[\"secret\"] == 42);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L154_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 82,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 82,
						"kind": "function",
						"char": 6,
						"name": "logJsonDiagnostic",
						"type": "nothrow void(lazy T args)",
						"endchar": 1,
						"endline": 85
					}
				],
				"name": "logJsonDiagnostic",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 87,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 87,
						"kind": "function",
						"char": 6,
						"name": "logJsonInfo",
						"type": "nothrow void(lazy T args)",
						"endchar": 1,
						"endline": 90
					}
				],
				"name": "logJsonInfo",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 92,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 92,
						"kind": "function",
						"char": 6,
						"name": "logJsonWarn",
						"type": "nothrow void(lazy T args)",
						"endchar": 1,
						"endline": 95
					}
				],
				"name": "logJsonWarn",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 97,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 97,
						"kind": "function",
						"char": 6,
						"name": "logJsonError",
						"type": "nothrow void(lazy T args)",
						"endchar": 1,
						"endline": 100
					}
				],
				"name": "logJsonError",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 103,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "LogLevel",
								"name": "level"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 103,
						"kind": "function",
						"char": 6,
						"name": "logJson",
						"type": "nothrow void(LogLevel level, lazy T args)",
						"endchar": 1,
						"endline": 151
					}
				],
				"name": "logJson",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 188,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 188,
						"kind": "function",
						"char": 6,
						"name": "logDebug",
						"type": "nothrow void(string fmt, lazy T args)",
						"endchar": 1,
						"endline": 191
					}
				],
				"name": "logDebug",
				"protection": "public",
				"comment": "    Logs a message.\n\n    Params:\n        level = The log level for the logged message\n        fmt = See $(LINK http://dlang.org/phobos/std_format.html#format-string)\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 193,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 193,
						"kind": "function",
						"char": 6,
						"name": "logDiagnostic",
						"type": "nothrow void(string fmt, lazy T args)",
						"endchar": 1,
						"endline": 196
					}
				],
				"name": "logDiagnostic",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 198,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 198,
						"kind": "function",
						"char": 6,
						"name": "logInfo",
						"type": "nothrow void(string fmt, lazy T args)",
						"endchar": 1,
						"endline": 201
					}
				],
				"name": "logInfo",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 203,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 203,
						"kind": "function",
						"char": 6,
						"name": "logWarn",
						"type": "nothrow void(string fmt, lazy T args)",
						"endchar": 1,
						"endline": 206
					}
				],
				"name": "logWarn",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 208,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "string",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 208,
						"kind": "function",
						"char": 6,
						"name": "logError",
						"type": "nothrow void(string fmt, lazy T args)",
						"endchar": 1,
						"endline": 211
					}
				],
				"name": "logError",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 214,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "LogLevel",
								"name": "level"
							},
							{
								"type": "string",
								"name": "fmt"
							},
							{
								"type": "T",
								"storageClass": [
									"lazy"
								],
								"name": "args"
							}
						],
						"line": 214,
						"kind": "function",
						"char": 6,
						"name": "log",
						"type": "nothrow void(LogLevel level, string fmt, lazy T args)",
						"endchar": 1,
						"endline": 248
					}
				],
				"name": "log",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"line": 251,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 253,
						"kind": "enum member",
						"char": 5,
						"name": "debug_",
						"protection": "public",
						"value": "0"
					},
					{
						"line": 254,
						"kind": "enum member",
						"char": 5,
						"name": "diagnostic",
						"protection": "public",
						"value": "1"
					},
					{
						"line": 255,
						"kind": "enum member",
						"char": 5,
						"name": "info",
						"protection": "public",
						"value": "2"
					},
					{
						"line": 256,
						"kind": "enum member",
						"char": 5,
						"name": "warn",
						"protection": "public",
						"value": "3"
					},
					{
						"line": 257,
						"kind": "enum member",
						"char": 5,
						"name": "error",
						"protection": "public",
						"value": "4"
					},
					{
						"line": 258,
						"kind": "enum member",
						"char": 5,
						"name": "fatal",
						"protection": "public",
						"value": "5"
					},
					{
						"line": 259,
						"kind": "enum member",
						"char": 5,
						"name": "none",
						"protection": "public",
						"value": "6"
					}
				],
				"name": "LogLevel",
				"protection": "public",
				"baseDeco": "i",
				"comment": "Specifies the log level for a particular log message.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "E7dentist4util3log8LogLevel",
						"defaultValue": "LogLevel.diagnostic",
						"name": "logLevel"
					}
				],
				"line": 264,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 264,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "string",
								"char": 12,
								"line": 269,
								"name": "functionName"
							},
							{
								"kind": "variable",
								"type": "StopWatch",
								"char": 15,
								"line": 270,
								"name": "timer"
							},
							{
								"parameters": [
									{
										"deco": "i",
										"name": "dummy"
									},
									{
										"type": "string",
										"default": "__FUNCTION__",
										"name": "fnName"
									}
								],
								"line": 272,
								"kind": "constructor",
								"char": 5,
								"name": "this",
								"type": "(int dummy, string fnName = __FUNCTION__)",
								"endchar": 5,
								"endline": 283
							},
							{
								"line": 285,
								"kind": "destructor",
								"char": 5,
								"name": "~this",
								"endchar": 5,
								"endline": 295
							}
						],
						"name": "ExecutionTracer",
						"protection": "public"
					}
				],
				"name": "ExecutionTracer",
				"protection": "public",
				"comment": "Do not use directly. Use `mixin(traceExecution)` instead.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "E7dentist4util3log8LogLevel",
						"defaultValue": "LogLevel.diagnostic",
						"name": "logLevel"
					}
				],
				"line": 338,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"line": 338,
						"kind": "function",
						"char": 8,
						"name": "traceExecution",
						"type": "string()",
						"endchar": 1,
						"endline": 351
					}
				],
				"name": "traceExecution",
				"protection": "public",
				"comment": "Print JSON log entries upon entering and leaving the function reporting\nthe execution time.\n\nExample:\n---\nvoid foo()\n{\nmixin(traceExecution);\n\nlogJsonInfo(\"info\", \"working on foo()\")\n}\n\nvoid main()\n{\nfoo();\n// --> (real output is compressed in a single line)\n// {\n//     \"function\": \"foo\",\n//     \"state\": \"enter\",\n//     \"thread\": 123467890,\n//     \"timestamp\", 123467890\n//     \"logLevel\", \"info\"\n// }\n// {\n//     \"info\": \"working on foo()\",\n//     \"thread\": 123467890,\n//     \"timestamp\", 123467890\n//     \"logLevel\", \"info\"\n// }\n// {\n//     \"function\": \"foo\",\n//     \"state\": \"exit\",\n//     \"timeElapsed\": 1234567890,\n//     \"thread\": 123467890,\n//     \"timestamp\", 123467890\n//     \"logLevel\", \"info\"\n// }\n}\n---\n"
			},
			{
				"line": 401,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 418,
						"kind": "enum",
						"char": 5,
						"members": [
							{
								"line": 420,
								"kind": "enum member",
								"char": 9,
								"name": "auto_",
								"protection": "public",
								"value": "Tuple(0LU, '\\x00')"
							},
							{
								"line": 421,
								"kind": "enum member",
								"char": 9,
								"name": "one",
								"protection": "public",
								"value": "Tuple(1LU, ' ')"
							},
							{
								"line": 422,
								"kind": "enum member",
								"char": 9,
								"name": "kilo",
								"protection": "public",
								"value": "Tuple(1000LU, 'k')"
							},
							{
								"line": 423,
								"kind": "enum member",
								"char": 9,
								"name": "mega",
								"protection": "public",
								"value": "Tuple(1000000LU, 'M')"
							},
							{
								"line": 424,
								"kind": "enum member",
								"char": 9,
								"name": "giga",
								"protection": "public",
								"value": "Tuple(1000000000LU, 'G')"
							},
							{
								"line": 425,
								"kind": "enum member",
								"char": 9,
								"name": "peta",
								"protection": "public",
								"value": "Tuple(18446744072982171648LU, 'P')"
							},
							{
								"line": 426,
								"kind": "enum member",
								"char": 9,
								"name": "min",
								"protection": "public",
								"value": "Tuple(1LU, ' ')"
							},
							{
								"line": 427,
								"kind": "enum member",
								"char": 9,
								"name": "max",
								"protection": "public",
								"value": "Tuple(18446744072982171648LU, 'P')"
							}
						],
						"name": "Unit",
						"protection": "public",
						"baseDeco": "S3std8typecons__T5TupleTmVAyaa10_6d756c7469706c696572TaVQBea4_6e616d65ZQCc",
						"comment": "Available display units for the progress meter.\n"
					},
					{
						"line": 432,
						"kind": "enum",
						"char": 5,
						"members": [
							{
								"line": 436,
								"kind": "enum member",
								"char": 9,
								"name": "human",
								"protection": "public",
								"value": "cast(ubyte)0u",
								"comment": "Displays a single line that is updated regularly. This is suitable\nfor terminal output.\n"
							},
							{
								"line": 441,
								"kind": "enum member",
								"char": 9,
								"name": "json",
								"protection": "public",
								"value": "1",
								"comment": "Produces a series of compressed, single-line JSON object\ndescribing the progress. This is suitable for output to a regular\nfile.\n"
							}
						],
						"name": "Format",
						"protection": "public",
						"baseDeco": "h",
						"comment": "Display format of the progress meter.\n"
					},
					{
						"line": 446,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "printEveryMsecs",
						"deco": "m",
						"init": "500LU",
						"protection": "public",
						"offset": 0,
						"comment": "Wait at least the amount of milliseconds before updating the status.\n"
					},
					{
						"line": 449,
						"kind": "variable",
						"char": 10,
						"name": "unit",
						"deco": "E7dentist4util3log13ProgressMeter4Unit",
						"protection": "public",
						"offset": 8,
						"comment": "Display ticks in this unit.\n"
					},
					{
						"line": 452,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "precision",
						"deco": "m",
						"init": "3LU",
						"protection": "public",
						"offset": 24,
						"comment": "Use `precision` digits after the decimal point.\n"
					},
					{
						"line": 456,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "totalTicks",
						"deco": "m",
						"protection": "public",
						"offset": 32,
						"comment": "Specifies the 100% mark if given. No percentage is displayed if this\nis zero.\n"
					},
					{
						"line": 459,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "numTicks",
						"deco": "m",
						"protection": "public",
						"offset": 40,
						"comment": "Number of ticks until now.\n"
					},
					{
						"line": 462,
						"kind": "variable",
						"originalType": "Flag!\"silent\"",
						"char": 19,
						"name": "silent",
						"deco": "E3std8typecons__T4FlagVAyaa6_73696c656e74ZQz",
						"protection": "public",
						"offset": 48,
						"comment": "Suppress output but still track the progress.\n"
					},
					{
						"line": 465,
						"kind": "variable",
						"char": 12,
						"name": "format",
						"deco": "E7dentist4util3log13ProgressMeter6Format",
						"protection": "public",
						"offset": 49,
						"comment": "Choose display format.\n"
					},
					{
						"parameters": [
							{
								"deco": "S3std5stdio4File",
								"name": "output"
							}
						],
						"line": 475,
						"kind": "function",
						"char": 20,
						"name": "output",
						"deco": "FNdS3std5stdio4FileZv",
						"protection": "public",
						"endchar": 5,
						"endline": 479,
						"comment": "Set the output file to write status updates to. Default it to use\n`std.stdio.stderr`.\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 483,
						"kind": "function",
						"originalType": "@property ref File()",
						"char": 29,
						"name": "output",
						"deco": "FNcNdZS3std5stdio4File",
						"protection": "public",
						"endchar": 5,
						"endline": 489,
						"comment": "Get a reference to the output file.\n"
					},
					{
						"line": 495,
						"kind": "function",
						"char": 10,
						"name": "start",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 506,
						"comment": "Start the timer.\n\nThis implicitly resets the timer and tick count.\n"
					},
					{
						"line": 510,
						"kind": "function",
						"char": 10,
						"name": "tick",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 516,
						"comment": "Add a single tick.\n"
					},
					{
						"line": 520,
						"kind": "function",
						"char": 10,
						"name": "stop",
						"deco": "FZv",
						"protection": "public",
						"endchar": 5,
						"endline": 526,
						"comment": "Stop the timer and print a last status update.\n"
					},
					{
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "timeUnit"
							}
						],
						"line": 530,
						"kind": "template",
						"char": 17,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 530,
								"kind": "variable",
								"char": 17,
								"name": "isValidTimeUnit",
								"init": "is(typeof(timer.peek.total!timeUnit))"
							}
						],
						"name": "isValidTimeUnit",
						"protection": "public",
						"comment": "Check if `timeUnit` is allowed by `std.datetime.stopwatch.StopWatch.peek.total`.\n"
					},
					{
						"constraint": "isValidTimeUnit!timeUnit",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "timeUnit"
							}
						],
						"line": 535,
						"kind": "template",
						"char": 20,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"line": 535,
								"kind": "function",
								"char": 20,
								"name": "elapsed",
								"type": "const nothrow @property @safe ()",
								"endchar": 5,
								"endline": 538
							}
						],
						"name": "elapsed",
						"protection": "public",
						"comment": "Get the number of elapsed `timeUnit`s.\n"
					},
					{
						"constraint": "isValidTimeUnit!timeUnit",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "timeUnit"
							}
						],
						"line": 544,
						"kind": "template",
						"char": 20,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"line": 544,
								"kind": "function",
								"char": 20,
								"name": "ticksPer",
								"type": "const nothrow @property @safe ()",
								"endchar": 5,
								"endline": 547
							}
						],
						"name": "ticksPer",
						"protection": "public",
						"comment": "Get the average throughput in ticks per `timeUnit`.\n\nBugs: this will cause an arithmetic error if no time has elapsed.\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"line": 551,
						"kind": "function",
						"originalType": "const nothrow @property @safe ()",
						"char": 20,
						"name": "hasETA",
						"deco": "xFNaNbNdNiNfZb",
						"protection": "public",
						"endchar": 5,
						"endline": 554,
						"comment": "True if the estimated time of arrival (ETA) can be calculated.\n"
					},
					{
						"line": 556,
						"kind": "alias",
						"originalType": "hasETA",
						"char": 5,
						"name": "hasEstimatedTimeOfArrival",
						"protection": "public"
					},
					{
						"constraint": "isValidTimeUnit!timeUnit",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "timeUnit"
							}
						],
						"line": 563,
						"kind": "template",
						"char": 20,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"line": 563,
								"kind": "function",
								"char": 20,
								"name": "eta",
								"type": "const nothrow @property @safe ()",
								"endchar": 5,
								"endline": 566
							}
						],
						"name": "eta",
						"protection": "public",
						"comment": "Calculate the estimated time of arrival (ETA).\n\nThis simply assumes that the current average throughput\n(`ticksPer!timeUnit`) will not change.\n"
					},
					{
						"line": 569,
						"kind": "alias",
						"originalType": "eta",
						"char": 5,
						"name": "estimatedTimeOfArrival",
						"protection": "public",
						"comment": "ditto\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "m",
								"name": "number"
							}
						],
						"line": 574,
						"kind": "function",
						"originalType": "pure nothrow @safe Unit(size_t number)",
						"char": 17,
						"name": "selectUnitFor",
						"deco": "FNaNbNfmZE7dentist4util3log13ProgressMeter4Unit",
						"protection": "public",
						"endchar": 5,
						"endline": 582,
						"comment": "Select the smallest unit such that the number of decimal digits\nis up to three.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L585_C5)\n---\nassert(selectUnitFor(1) == Unit.one);\nassert(selectUnitFor(25 * 1024) == Unit.kilo);\nassert(selectUnitFor(13 * 1024*1024) == Unit.mega);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L585_C5)\n"
					},
					{
						"line": 401,
						"kind": "destructor",
						"char": 1,
						"name": "~this",
						"deco": "FNeZv",
						"protection": "public"
					},
					{
						"parameters": [
							{
								"deco": "S7dentist4util3log13ProgressMeter",
								"name": "p"
							}
						],
						"line": 401,
						"kind": "generated function",
						"originalType": "ref ProgressMeter(ProgressMeter p) return",
						"char": 1,
						"name": "opAssign",
						"deco": "FNcNjS7dentist4util3log13ProgressMeterZQBi",
						"protection": "public"
					}
				],
				"name": "ProgressMeter",
				"protection": "public",
				"comment": "Tracks progress and outputs information regularly.\n\n`ProgressMeter.Format` can be used to choose a format suitable for\nterminals (`ProgressMeter.Format.human`) or for log files\n(`ProgressMeter.Format.json`).\n"
			}
		],
		"comment": "    Central logging facility for DENTIST.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.util.log"
	},
	{
		"kind": "module",
		"file": "source/dentist/util/math.d",
		"members": [
			{
				"constraint": "isForwardRange!Range",
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 62,
				"kind": "template",
				"char": 19,
				"members": [
					{
						"parameters": [
							{
								"type": "Range",
								"name": "values"
							}
						],
						"line": 62,
						"kind": "function",
						"char": 19,
						"name": "mean",
						"type": "ElementType!Range(Range values)",
						"endchar": 1,
						"endline": 68
					}
				],
				"name": "mean",
				"protection": "public",
				"comment": "Calculate the mean of `values`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L71_C1)\n---\n{\n    auto values = [2, 4, 8];\n    assert(values.mean == 4);\n}\n{\n    auto values = [1.0, 2.0, 3.0, 4.0];\n    assert(values.mean == 2.5);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L71_C1)\n"
			},
			{
				"constraint": "isInputRange!Values && isForwardRange!Weights",
				"parameters": [
					{
						"kind": "type",
						"name": "Values"
					},
					{
						"kind": "type",
						"name": "Weights"
					}
				],
				"line": 85,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "Values",
								"name": "values"
							},
							{
								"type": "Weights",
								"name": "weights"
							}
						],
						"line": 85,
						"kind": "function",
						"char": 8,
						"name": "mean",
						"type": "double(Values values, Weights weights)",
						"endchar": 1,
						"endline": 96
					}
				],
				"name": "mean",
				"protection": "public",
				"comment": "Calculate the weighted mean of `values`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L99_C1)\n---\n{\n    auto values = [2, 4, 6];\n    auto equalWeights = [1, 1, 1];\n    auto weights = [3, 4, 1];\n\n    assert(mean(values, equalWeights) == mean(values));\n    assert(mean(values, weights) == 3.5);\n}\n{\n    auto values = [1.0, 2.0, 3.0, 4.0];\n    auto weights = [4.0, 3.0, 2.0, 1.0];\n\n    assert(mean(values, weights) == 2.0);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L99_C1)\n"
			},
			{
				"constraint": "__traits(compiles, sort(values))",
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 119,
				"kind": "template",
				"char": 19,
				"members": [
					{
						"parameters": [
							{
								"type": "Range",
								"name": "values"
							}
						],
						"line": 119,
						"kind": "function",
						"char": 19,
						"name": "median",
						"type": "ElementType!Range(Range values)",
						"endchar": 1,
						"endline": 130
					}
				],
				"name": "median",
				"protection": "public",
				"comment": "Calculate the median of `values`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L133_C1)\n---\n{\n    auto values = [4, 2, 8];\n    assert(values.median == 4);\n}\n{\n    auto values = [4, 3, 2, 8];\n    assert(values.median == 3);\n}\n{\n    auto values = [4, 6, 2, 8];\n    assert(values.median == 5);\n}\n{\n    auto values = [2, 1, 3, 0, 4, 9, 8, 5, 6, 3, 9];\n    assert(values.median == 4);\n}\n{\n    auto values = [2.0, 1.0, 4.0, 3.0];\n    assert(values.median == 2.5);\n}\n{\n    auto values = [2.0, 1.0, 4.0, 3.0, 5.0];\n    assert(values.median == 3.0);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L133_C1)\n"
			},
			{
				"constraint": "__traits(compiles, sort(values))",
				"parameters": [
					{
						"kind": "value",
						"deco": "e",
						"name": "xx"
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "Num"
					}
				],
				"line": 163,
				"kind": "template",
				"char": 19,
				"members": [
					{
						"parameters": [
							{
								"type": "Range",
								"name": "values"
							},
							{
								"type": "Num",
								"name": "totalSize"
							}
						],
						"line": 163,
						"kind": "function",
						"char": 19,
						"name": "N",
						"type": "ElementType!Range(Range values, Num totalSize)",
						"endchar": 1,
						"endline": 178
					}
				],
				"name": "N",
				"protection": "public",
				"comment": "Calculate the N`xx` (e.g. N50) of `values`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L181_C1)\n---\n{\n    auto totalSize = 54;\n    auto values = [2, 3, 4, 5, 6, 7, 8, 9, 10];\n    enum N50 = 8;\n    enum N10 = 10;\n\n    assert(N!50(values, totalSize) == N50);\n    assert(N!10(values, totalSize) == N10);\n}\n{\n    auto totalSize = 32;\n    auto values = [2, 2, 2, 3, 3, 4, 8, 8];\n    enum N50 = 8;\n\n    assert(N!50(values, totalSize) == N50);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L181_C1)\n"
			},
			{
				"line": 203,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 206,
						"kind": "enum member",
						"char": 5,
						"name": "floor",
						"protection": "public",
						"value": "cast(byte)0",
						"comment": "Round towards `-inf`.\n"
					},
					{
						"line": 208,
						"kind": "enum member",
						"char": 5,
						"name": "round",
						"protection": "public",
						"value": "1",
						"comment": "Round towards the nearest integer; `0.5` is rounded up.\n"
					},
					{
						"line": 210,
						"kind": "enum member",
						"char": 5,
						"name": "ceil",
						"protection": "public",
						"value": "2",
						"comment": "Round towards `+inf`.\n"
					}
				],
				"name": "RoundingMode",
				"protection": "public",
				"baseDeco": "g",
				"comment": "Specify a rounding mode.\n"
			},
			{
				"constraint": "isIntegral!Integer",
				"parameters": [
					{
						"kind": "type",
						"name": "Integer"
					}
				],
				"line": 220,
				"kind": "template",
				"char": 9,
				"members": [
					{
						"parameters": [
							{
								"type": "Integer",
								"storageClass": [
									"in"
								],
								"name": "x"
							},
							{
								"type": "Integer",
								"storageClass": [
									"in"
								],
								"name": "base"
							}
						],
						"line": 220,
						"kind": "function",
						"char": 9,
						"name": "ceil",
						"type": "pure nothrow Integer(in Integer x, in Integer base)",
						"endchar": 1,
						"endline": 226
					}
				],
				"name": "ceil",
				"protection": "public",
				"comment": "    Round `x` towards `+inf` according to `base`, i.e. returns the next\n    integer larger or equal to `x` which is divisible by `base`.\n\n    Returns: `x` rounded towards `+inf` according to `base`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L229_C1)\n---\nassert(ceil(8, 10) == 10);\nassert(ceil(32, 16) == 32);\nassert(ceil(101, 100) == 200);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L229_C1)\n"
			},
			{
				"constraint": "isIntegral!Integer",
				"parameters": [
					{
						"kind": "type",
						"name": "Integer"
					}
				],
				"line": 243,
				"kind": "template",
				"char": 9,
				"members": [
					{
						"parameters": [
							{
								"type": "Integer",
								"storageClass": [
									"in"
								],
								"name": "x"
							},
							{
								"type": "Integer",
								"storageClass": [
									"in"
								],
								"name": "base"
							}
						],
						"line": 243,
						"kind": "function",
						"char": 9,
						"name": "floor",
						"type": "pure nothrow Integer(in Integer x, in Integer base)",
						"endchar": 1,
						"endline": 247
					}
				],
				"name": "floor",
				"protection": "public",
				"comment": "    Round `x` towards `-inf` according to `base`, i.e. returns the next\n    integer smaller or equal to `x` which is divisible by `base`.\n\n    Returns: `x` rounded towards `-inf` according to `base`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L250_C1)\n---\nassert(floor(8, 10) == 0);\nassert(floor(32, 16) == 32);\nassert(floor(101, 100) == 100);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L250_C1)\n"
			},
			{
				"constraint": "isNumeric!Num",
				"parameters": [
					{
						"kind": "type",
						"name": "Num"
					}
				],
				"line": 259,
				"kind": "template",
				"char": 5,
				"members": [
					{
						"parameters": [
							{
								"type": "Num",
								"storageClass": [
									"in"
								],
								"name": "a"
							},
							{
								"type": "Num",
								"storageClass": [
									"in"
								],
								"name": "b"
							}
						],
						"line": 259,
						"kind": "function",
						"char": 5,
						"name": "absdiff",
						"type": "pure nothrow Num(in Num a, in Num b)",
						"endchar": 1,
						"endline": 264
					}
				],
				"name": "absdiff",
				"protection": "public",
				"comment": "Returns the absolute difference between two numbers.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L267_C1)\n---\nassert(absdiff(2UL, 3UL) == 1UL);\nassert(absdiff(-42, 13) == 55);\nassert(absdiff(2.5, 5) == 2.5);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L267_C1)\n"
			},
			{
				"constraint": "isIntegral!Integer",
				"parameters": [
					{
						"kind": "type",
						"name": "Integer"
					}
				],
				"line": 276,
				"kind": "template",
				"char": 9,
				"members": [
					{
						"parameters": [
							{
								"type": "Integer",
								"storageClass": [
									"in"
								],
								"name": "a"
							},
							{
								"type": "Integer",
								"storageClass": [
									"in"
								],
								"name": "b"
							}
						],
						"line": 276,
						"kind": "function",
						"char": 9,
						"name": "ceildiv",
						"type": "pure nothrow Integer(in Integer a, in Integer b)",
						"endchar": 1,
						"endline": 283
					}
				],
				"name": "ceildiv",
				"protection": "public",
				"comment": "Returns the result of `ceil(a / b)` but uses integer arithmetic only.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L286_C1)\n---\nassert(ceildiv(0, 3) == 0);\nassert(ceildiv(1UL, 3UL) == 1UL);\nassert(ceildiv(2L, 3L) == 1L);\nassert(ceildiv(3U, 3U) == 1U);\nassert(ceildiv(4, 3) == 2);\nassert(ceildiv(-4, 4) == -1);\nassert(ceildiv(-4, 3) == -1);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L286_C1)\n"
			},
			{
				"line": 299,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "nextInChain"
							}
						],
						"line": 301,
						"kind": "constructor",
						"originalType": "pure nothrow @nogc @safe (string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
						"char": 30,
						"name": "this",
						"deco": "FNaNbNiNfAyamC6object9ThrowableZC7dentist4util4math19EdgeExistsException",
						"protection": "public",
						"endchar": 5,
						"endline": 308
					}
				],
				"name": "EdgeExistsException",
				"protection": "public",
				"comment": "Thrown if attempting to insert an edge into a `Graph` that already exists.\n"
			},
			{
				"line": 313,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "nextInChain"
							}
						],
						"line": 315,
						"kind": "constructor",
						"originalType": "pure nothrow @nogc @safe (string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
						"char": 30,
						"name": "this",
						"deco": "FNaNbNiNfAyamC6object9ThrowableZC7dentist4util4math20MissingEdgeException",
						"protection": "public",
						"endchar": 5,
						"endline": 322
					}
				],
				"name": "MissingEdgeException",
				"protection": "public",
				"comment": "Thrown if attempting to access an edge from a `Graph` that does not exist.\n"
			},
			{
				"line": 327,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "nextInChain"
							}
						],
						"line": 329,
						"kind": "constructor",
						"originalType": "pure nothrow @nogc @safe (string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
						"char": 30,
						"name": "this",
						"deco": "FNaNbNiNfAyamC6object9ThrowableZC7dentist4util4math20MissingNodeException",
						"protection": "public",
						"endchar": 5,
						"endline": 336
					}
				],
				"name": "MissingNodeException",
				"protection": "public",
				"comment": "Thrown if attempting to access a node from a `Graph` that does not exist.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Node"
					},
					{
						"kind": "type",
						"defaultDeco": "v",
						"name": "Weight"
					},
					{
						"kind": "value",
						"deco": "E3std8typecons__T4FlagVAyaa10_69734469726563746564ZQBi",
						"defaultValue": "No.isDirected",
						"name": "isDirected"
					},
					{
						"kind": "type",
						"defaultDeco": "v",
						"name": "EdgePayload"
					}
				],
				"line": 347,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 347,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 355,
								"kind": "variable",
								"char": 17,
								"name": "isWeighted",
								"init": "!is(Weight == void)",
								"comment": "True if edges have weights.\n"
							},
							{
								"storageClass": [
									"enum"
								],
								"line": 358,
								"kind": "variable",
								"char": 17,
								"name": "hasEdgePayload",
								"init": "!is(EdgePayload == void)",
								"comment": "True if edges have payloads.\n"
							},
							{
								"line": 365,
								"kind": "struct",
								"char": 12,
								"members": [
									{
										"kind": "variable",
										"type": "Node",
										"char": 24,
										"line": 367,
										"name": "_start"
									},
									{
										"kind": "variable",
										"type": "Node",
										"char": 24,
										"line": 368,
										"name": "_end"
									},
									{
										"kind": "variable",
										"line": 373,
										"char": 20,
										"type": "Weight",
										"comment": "Weight associated with this edge. This is taken into account\nin comparisons between edges.\n",
										"name": "weight"
									},
									{
										"kind": "variable",
										"line": 378,
										"char": 25,
										"type": "EdgePayload",
										"comment": "Payload associated with this edge. This is NOT taken into\naccount in comparisons between edges.\n",
										"name": "payload"
									},
									{
										"parameters": [
											{
												"type": "Node",
												"name": "start"
											},
											{
												"type": "Node",
												"name": "end"
											}
										],
										"line": 385,
										"kind": "constructor",
										"char": 9,
										"name": "this",
										"type": "(Node start, Node end)",
										"endchar": 9,
										"endline": 397,
										"comment": "Construct an edge.\n\n`start` and `end` will be stored such that `start <= end` for\nundirected edges.\n"
									},
									{
										"parameters": [
											{
												"type": "Node",
												"name": "start"
											},
											{
												"type": "Node",
												"name": "end"
											},
											{
												"type": "Weight",
												"name": "weight"
											}
										],
										"line": 402,
										"kind": "constructor",
										"char": 13,
										"name": "this",
										"type": "(Node start, Node end, Weight weight)",
										"endchar": 13,
										"endline": 406,
										"comment": "ditto\n"
									},
									{
										"parameters": [
											{
												"type": "Node",
												"name": "start"
											},
											{
												"type": "Node",
												"name": "end"
											},
											{
												"type": "EdgePayload",
												"name": "payload"
											}
										],
										"line": 412,
										"kind": "constructor",
										"char": 13,
										"name": "this",
										"type": "(Node start, Node end, EdgePayload payload)",
										"endchar": 13,
										"endline": 416,
										"comment": "ditto\n"
									},
									{
										"parameters": [
											{
												"type": "Node",
												"name": "start"
											},
											{
												"type": "Node",
												"name": "end"
											},
											{
												"type": "Weight",
												"name": "weight"
											},
											{
												"type": "EdgePayload",
												"name": "payload"
											}
										],
										"line": 422,
										"kind": "constructor",
										"char": 13,
										"name": "this",
										"type": "(Node start, Node end, Weight weight, EdgePayload payload)",
										"endchar": 13,
										"endline": 427,
										"comment": "ditto\n"
									},
									{
										"line": 433,
										"kind": "function",
										"char": 24,
										"name": "start",
										"type": "const pure nothrow @property Node()",
										"endchar": 9,
										"endline": 436,
										"comment": "Get the start of this edge. For undirected graphs this is the\nsmaller of both incident nodes.\n"
									},
									{
										"line": 440,
										"kind": "function",
										"char": 24,
										"name": "end",
										"type": "const pure nothrow @property Node()",
										"endchar": 9,
										"endline": 443,
										"comment": "Get the end of this edge. For undirected graphs this is the\nlarger of both incident nodes.\n"
									},
									{
										"parameters": [
											{
												"type": "Node",
												"name": "from"
											}
										],
										"line": 452,
										"kind": "function",
										"char": 14,
										"name": "target",
										"type": "const Node(Node from)",
										"endchar": 9,
										"endline": 480,
										"comment": "            Get target of this edge beginning at node `from`. For undirected\n            graphs returns the other node of this edge.\n\n            Throws: `MissingNodeException` if this edge does not start in\n                node `from`.\n"
									},
									{
										"parameters": [
											{
												"type": "Node",
												"name": "from"
											}
										],
										"line": 492,
										"kind": "function",
										"char": 18,
										"name": "source",
										"type": "const Node(Node from)",
										"endchar": 13,
										"endline": 502,
										"comment": "            Get source of this edge beginning at node `from`. For undirected\n            graphs returns the other node of this edge.\n\n            Throws: `MissingNodeException` if this edge does not end in\n                node `from`.\n"
									},
									{
										"parameters": [
											{
												"type": "Edge",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 512,
										"kind": "function",
										"char": 14,
										"name": "opEquals",
										"type": "const pure nothrow bool(in Edge other)",
										"endchar": 9,
										"endline": 523,
										"comment": "Two edges are equal iff their incident nodes (and weight) are the\nsame.\n"
									},
									{
										"parameters": [
											{
												"type": "Edge",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 527,
										"kind": "function",
										"char": 13,
										"name": "opCmp",
										"type": "const pure nothrow int(in Edge other)",
										"endchar": 9,
										"endline": 546,
										"comment": "Orders edge lexicographically by `start`, `end`(, `weight`).\n"
									},
									{
										"parameters": [
											{
												"type": "Edge",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 549,
										"kind": "function",
										"char": 21,
										"name": "compareNodes",
										"type": "const pure nothrow int(in Edge other)",
										"endchar": 9,
										"endline": 556
									},
									{
										"parameters": [
											{
												"type": "Edge",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 567,
										"kind": "function",
										"char": 14,
										"name": "getConnectingNode",
										"type": "const Node(in Edge other)",
										"endchar": 9,
										"endline": 589,
										"comment": "            Returns the node that connects `this` edge with `other` edge. In\n            case of undirected graphs this is just the common node of both\n            edges; in directed case this is the end node of `this` edge if it\n            matches the start node of `other` edge.\n\n            Throws: `MissingNodeException` if the connecting node is undefined.\n"
									}
								],
								"name": "Edge",
								"protection": "public",
								"comment": "An edge in the graph.\n\nEdges may be directed or undirected, weighted or unweighted and have\nan additional payload or not.\n"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "Edge",
										"storageClass": [
											"in"
										],
										"name": "a"
									},
									{
										"type": "Edge",
										"storageClass": [
											"in"
										],
										"name": "b"
									}
								],
								"line": 594,
								"kind": "function",
								"char": 17,
								"name": "orderByNodes",
								"type": "pure nothrow bool(in Edge a, in Edge b)",
								"endchar": 5,
								"endline": 597,
								"comment": "Same as `a < b` but disregards the weight in weighted graphs.\n"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "Edge",
										"storageClass": [
											"in"
										],
										"name": "a"
									},
									{
										"type": "Edge",
										"storageClass": [
											"in"
										],
										"name": "b"
									}
								],
								"line": 601,
								"kind": "function",
								"char": 17,
								"name": "groupByNodes",
								"type": "pure nothrow bool(in Edge a, in Edge b)",
								"endchar": 5,
								"endline": 604,
								"comment": "Same as `a == b` but disregards the weight in weighted graphs.\n"
							},
							{
								"parameters": [
									{
										"kind": "tuple",
										"name": "T"
									}
								],
								"line": 608,
								"kind": "template",
								"char": 17,
								"members": [
									{
										"parameters": [
											{
												"type": "T",
												"name": "args"
											}
										],
										"line": 608,
										"kind": "function",
										"char": 17,
										"name": "edge",
										"type": "Edge(T args)",
										"endchar": 5,
										"endline": 611
									}
								],
								"name": "edge",
								"comment": "Construct an edge for this graph.\n"
							},
							{
								"kind": "variable",
								"type": "Node[]",
								"char": 22,
								"line": 614,
								"name": "_nodes"
							},
							{
								"kind": "variable",
								"type": "Appender!(Edge[])",
								"char": 33,
								"line": 615,
								"name": "_edges"
							},
							{
								"line": 619,
								"kind": "function",
								"char": 29,
								"name": "nodes",
								"type": "const pure nothrow @property const(Node[])()",
								"endchar": 5,
								"endline": 622,
								"comment": "The set (ordered list) of nodes.\n"
							},
							{
								"parameters": [
									{
										"type": "Node[]",
										"name": "nodes"
									}
								],
								"line": 624,
								"kind": "function",
								"char": 28,
								"name": "nodes",
								"type": "@property void(Node[] nodes)",
								"endchar": 5,
								"endline": 629
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 633,
								"kind": "function",
								"char": 20,
								"name": "edges",
								"type": "pure nothrow @property ()",
								"endchar": 5,
								"endline": 637,
								"comment": "Get the set (ordered list) of edges in this graph.\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 640,
								"kind": "function",
								"char": 20,
								"name": "edges",
								"type": "const pure nothrow @property ()",
								"endchar": 5,
								"endline": 644,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "Node[]",
										"name": "nodes"
									}
								],
								"line": 656,
								"kind": "constructor",
								"char": 5,
								"name": "this",
								"type": "(Node[] nodes)",
								"endchar": 5,
								"endline": 659,
								"comment": "        Construct a graph from a set of nodes (and edges). Makes a copy\n        `nodes` and removes duplicates.\n\n        Throws: `MissingNodeException` if an edge has a node that is not\n            present in this graph .\n        Throws: `EdgeExistsException` if an edge already exists when trying\n            inserting it, i.e. an edge occurs twice or more in `edges`.\n"
							},
							{
								"parameters": [
									{
										"type": "Node[]",
										"name": "nodes"
									},
									{
										"type": "Edge[]",
										"name": "edges"
									}
								],
								"line": 662,
								"kind": "constructor",
								"char": 5,
								"name": "this",
								"type": "(Node[] nodes, Edge[] edges)",
								"endchar": 5,
								"endline": 671,
								"comment": "ditto\n"
							},
							{
								"constraint": "isInputRange!R && is(ElementType!R == Edge)",
								"parameters": [
									{
										"kind": "type",
										"name": "R"
									}
								],
								"line": 684,
								"kind": "template",
								"char": 10,
								"members": [
									{
										"parameters": [
											{
												"type": "R",
												"name": "edges"
											}
										],
										"line": 684,
										"kind": "function",
										"char": 10,
										"name": "bulkAddForce",
										"type": "void(R edges)",
										"endchar": 5,
										"endline": 688
									}
								],
								"name": "bulkAddForce",
								"comment": "Add a set of edges to this graph without any checks.\n\nThis is intended to speed up construction of the graph if it is known\nthat `edges` does not contain duplicates. Results in  undefined\nbehavior if `edges` contains duplicate edges.\n"
							},
							{
								"constraint": "op == \"~\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 694,
								"kind": "template",
								"char": 10,
								"members": [
									{
										"parameters": [
											{
												"type": "Edge",
												"name": "edge"
											}
										],
										"line": 694,
										"kind": "function",
										"char": 10,
										"name": "opOpAssign",
										"type": "void(Edge edge)",
										"endchar": 5,
										"endline": 697
									}
								],
								"name": "opOpAssign",
								"comment": "Add an `edge` to this graph.\n\nSee_Also: `add`\n"
							},
							{
								"line": 701,
								"kind": "struct",
								"char": 12,
								"members": [
									{
										"storageClass": [
											"static"
										],
										"parameters": [
											{
												"type": "Edge",
												"name": "existingEdge"
											},
											{
												"type": "Edge",
												"name": "newEdge"
											}
										],
										"line": 707,
										"kind": "function",
										"char": 25,
										"name": "sumWeights",
										"type": "Edge(Edge existingEdge, Edge newEdge)",
										"endchar": 13,
										"endline": 712,
										"comment": "Return an edge with sum of both weights. If given payload will be\nkept from existingEdge .\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L715_C13)\n---\nauto g1 = Graph!(int, int)([1, 2]);\nalias CS = g1.ConflictStrategy;\n\ng1 ~= g1.edge(1, 2, 1);\n\nauto addedEdge = g1.add!(CS.sumWeights)(g1.edge(1, 2, 1));\n\nassert(addedEdge.weight == 2);\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L715_C13)\n"
									},
									{
										"storageClass": [
											"static"
										],
										"parameters": [
											{
												"type": "inout(Edge)",
												"name": "existingEdge"
											},
											{
												"type": "inout(Edge)",
												"name": "newEdge"
											}
										],
										"line": 729,
										"kind": "function",
										"char": 28,
										"name": "error",
										"type": "inout(Edge)(inout(Edge) existingEdge, inout(Edge) newEdge)",
										"endchar": 9,
										"endline": 732,
										"comment": "Throw `EdgeExistsException`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L735_C9)\n---\nauto g1 = Graph!int([1, 2]);\nalias CS = g1.ConflictStrategy;\n\ng1 ~= g1.edge(1, 2);\n\nassertThrown!EdgeExistsException(g1.add!(CS.error)(g1.edge(1, 2)));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L735_C9)\n"
									},
									{
										"storageClass": [
											"static"
										],
										"parameters": [
											{
												"type": "inout(Edge)",
												"name": "existingEdge"
											},
											{
												"type": "inout(Edge)",
												"name": "newEdge"
											}
										],
										"line": 746,
										"kind": "function",
										"char": 28,
										"name": "replace",
										"type": "inout(Edge)(inout(Edge) existingEdge, inout(Edge) newEdge)",
										"endchar": 9,
										"endline": 749,
										"comment": "Replace the `existingEdge` by `newEdge`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L752_C9)\n---\nauto g1 = Graph!(int, int)([1, 2]);\nalias CS = g1.ConflictStrategy;\n\ng1 ~= g1.edge(1, 2, 1);\n\nauto addedEdge = g1.add!(CS.replace)(g1.edge(1, 2, 2));\n\nassert(addedEdge.weight == 2);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L752_C9)\n"
									},
									{
										"storageClass": [
											"static"
										],
										"parameters": [
											{
												"type": "inout(Edge)",
												"name": "existingEdge"
											},
											{
												"type": "inout(Edge)",
												"name": "newEdge"
											}
										],
										"line": 766,
										"kind": "function",
										"char": 28,
										"name": "keep",
										"type": "inout(Edge)(inout(Edge) existingEdge, inout(Edge) newEdge)",
										"endchar": 9,
										"endline": 769,
										"comment": "Keep `existingEdge` â discard `newEdge`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L772_C9)\n---\nauto g1 = Graph!(int, int)([1, 2]);\nalias CS = g1.ConflictStrategy;\n\ng1 ~= g1.edge(1, 2, 1);\n\nauto addedEdge = g1.add!(CS.keep)(g1.edge(1, 2, 2));\n\nassert(addedEdge.weight == 1);\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L772_C9)\n"
									}
								],
								"name": "ConflictStrategy",
								"protection": "public",
								"comment": "Some pre-defined conflict handlers for `add`.\n"
							},
							{
								"parameters": [
									{
										"type": "Edge",
										"name": "edge"
									}
								],
								"line": 790,
								"kind": "function",
								"char": 20,
								"name": "forceAdd",
								"type": "Edge(Edge edge)",
								"endchar": 5,
								"endline": 796,
								"comment": "Forcibly add `edge` to this graph.\n\nThis is intended to speed up construction of a graph. Results in\nundefined behavior if `edge` is already contained in this graph.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"storageClass": [
											"in"
										],
										"name": "edgeIdx"
									},
									{
										"type": "Edge",
										"name": "newEdge"
									}
								],
								"line": 800,
								"kind": "function",
								"char": 20,
								"name": "replaceEdge",
								"type": "Edge(in size_t edgeIdx, Edge newEdge)",
								"endchar": 5,
								"endline": 812,
								"comment": "Replace an edge in this graph.\n"
							},
							{
								"constraint": "op == \"in\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 817,
								"kind": "template",
								"char": 10,
								"members": [
									{
										"parameters": [
											{
												"type": "Node",
												"storageClass": [
													"in"
												],
												"name": "node"
											}
										],
										"line": 817,
										"kind": "function",
										"char": 10,
										"name": "opBinaryRight",
										"type": "const pure nothrow bool(in Node node)",
										"endchar": 5,
										"endline": 822
									}
								],
								"name": "opBinaryRight",
								"comment": "Check if edge/node exists in this graph. Ignores the edge weight\nif weighted.\n"
							},
							{
								"parameters": [
									{
										"type": "Node",
										"storageClass": [
											"in"
										],
										"name": "node"
									}
								],
								"line": 825,
								"kind": "function",
								"char": 10,
								"name": "has",
								"type": "const pure nothrow bool(in Node node)",
								"endchar": 5,
								"endline": 828,
								"comment": "ditto\n"
							},
							{
								"constraint": "op == \"in\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 831,
								"kind": "template",
								"char": 10,
								"members": [
									{
										"parameters": [
											{
												"type": "Edge",
												"storageClass": [
													"in"
												],
												"name": "edge"
											}
										],
										"line": 831,
										"kind": "function",
										"char": 10,
										"name": "opBinaryRight",
										"type": "const pure nothrow bool(in Edge edge)",
										"endchar": 5,
										"endline": 836
									}
								],
								"name": "opBinaryRight",
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "Edge",
										"storageClass": [
											"in"
										],
										"name": "edge"
									}
								],
								"line": 839,
								"kind": "function",
								"char": 10,
								"name": "has",
								"type": "const pure nothrow bool(in Edge edge)",
								"endchar": 5,
								"endline": 842,
								"comment": "ditto\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "Edge",
										"storageClass": [
											"in"
										],
										"name": "edge"
									}
								],
								"line": 847,
								"kind": "function",
								"char": 14,
								"name": "get",
								"type": "ref (in Edge edge)",
								"endchar": 5,
								"endline": 860,
								"comment": "Get the designated `edge` from this graph. Only the `start` and `end`\nnode will be compared.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L863_C5)\n---\nauto g1 = Graph!(int, int)([1, 2]);\n\nauto e1 = g1.edge(1, 2, 1);\n\ng1 ~= e1;\n\nassert(g1.get(g1.edge(1, 2)) == e1);\nassertThrown!MissingEdgeException(g1.get(g1.edge(1, 1)));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L863_C5)\n"
							},
							{
								"parameters": [
									{
										"type": "Node",
										"storageClass": [
											"in"
										],
										"name": "n"
									}
								],
								"line": 880,
								"kind": "function",
								"char": 12,
								"name": "indexOf",
								"type": "const size_t(in Node n)",
								"endchar": 5,
								"endline": 891,
								"comment": "Returns the index of node `n` in the list of nodes.\n\nUses `std.range.SortedRange.trisect`to locate `n` in the list of\nnodes.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L894_C5)\n---\nauto g1 = Graph!(int, int)([1, 2]);\n\nassert(g1.indexOf(1) == 0);\nassert(g1.indexOf(2) == 1);\nassertThrown!MissingNodeException(g1.indexOf(3));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L894_C5)\n"
							},
							{
								"parameters": [
									{
										"type": "Edge",
										"storageClass": [
											"in"
										],
										"name": "edge"
									}
								],
								"line": 908,
								"kind": "function",
								"char": 12,
								"name": "indexOf",
								"type": "const size_t(in Edge edge)",
								"endchar": 5,
								"endline": 919,
								"comment": "Returns the index of edge `n` in the list of edges.\n\nUses `std.range.SortedRange.trisect`to locate `n` in the list of\nnodes.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L922_C5)\n---\nauto g1 = Graph!(int, int)([1, 2]);\n\nauto e1 = g1.edge(1, 2, 1);\n\ng1 ~= e1;\n\nassert(g1.indexOf(g1.edge(1, 2)) == 0);\nassertThrown!MissingEdgeException(g1.indexOf(g1.edge(1, 1)));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L922_C5)\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "Node",
										"name": "n"
									}
								],
								"line": 938,
								"kind": "function",
								"char": 14,
								"name": "inEdges",
								"type": "pure nothrow (Node n)",
								"endchar": 9,
								"endline": 941,
								"comment": "Returns a range of in/outgoing edges of node `n`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L962_C9)\n---\nimport std.algorithm : equal;\n\nauto g1 = Graph!(int, void, Yes.isDirected)([1, 2, 3]);\n\ng1 ~= g1.edge(1, 1);\ng1 ~= g1.edge(1, 2);\ng1 ~= g1.edge(2, 2);\ng1 ~= g1.edge(2, 3);\n\nassert(g1.inEdges(1).equal([\n    g1.edge(1, 1),\n]));\nassert(g1.outEdges(1).equal([\n    g1.edge(1, 1),\n    g1.edge(1, 2),\n]));\nassert(g1.inEdges(2).equal([\n    g1.edge(1, 2),\n    g1.edge(2, 2),\n]));\nassert(g1.outEdges(2).equal([\n    g1.edge(2, 2),\n    g1.edge(2, 3),\n]));\nassert(g1.inEdges(3).equal([\n    g1.edge(2, 3),\n]));\nassert(g1.outEdges(3).empty);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L962_C9)\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "Node",
										"name": "n"
									}
								],
								"line": 944,
								"kind": "function",
								"char": 14,
								"name": "inEdges",
								"type": "const pure nothrow (Node n)",
								"endchar": 9,
								"endline": 947,
								"comment": "ditto\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "Node",
										"name": "n"
									}
								],
								"line": 950,
								"kind": "function",
								"char": 14,
								"name": "outEdges",
								"type": "pure nothrow (Node n)",
								"endchar": 9,
								"endline": 953,
								"comment": "ditto\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "Node",
										"name": "n"
									}
								],
								"line": 956,
								"kind": "function",
								"char": 14,
								"name": "outEdges",
								"type": "const pure nothrow (Node n)",
								"endchar": 9,
								"endline": 959,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"type": "Node",
										"name": "n"
									}
								],
								"line": 995,
								"kind": "function",
								"char": 16,
								"name": "inDegree",
								"type": "const pure nothrow size_t(Node n)",
								"endchar": 9,
								"endline": 998,
								"comment": "Get the in/out degree of node `n`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1007_C9)\n---\nauto g1 = Graph!(int, void, Yes.isDirected)([1, 2, 3]);\n\ng1 ~= g1.edge(1, 1);\ng1 ~= g1.edge(1, 2);\ng1 ~= g1.edge(2, 2);\ng1 ~= g1.edge(2, 3);\n\nassert(g1.inDegree(1) == 1);\nassert(g1.outDegree(1) == 2);\nassert(g1.inDegree(2) == 2);\nassert(g1.outDegree(2) == 2);\nassert(g1.inDegree(3) == 1);\nassert(g1.outDegree(3) == 0);\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1007_C9)\n"
							},
							{
								"parameters": [
									{
										"type": "Node",
										"name": "n"
									}
								],
								"line": 1001,
								"kind": "function",
								"char": 16,
								"name": "outDegree",
								"type": "const pure nothrow size_t(Node n)",
								"endchar": 9,
								"endline": 1004,
								"comment": "ditto\n"
							}
						],
						"name": "Graph",
						"protection": "public"
					}
				],
				"name": "Graph",
				"protection": "public",
				"comment": "This structure represents a graph with optional edge payloads. The graph\nis represented as a list of edges which is particularly suited for sparse\ngraphs. While the set of nodes is fixed the set of edges is mutable.\n\nA graph may have directed or undirected edges. The edges may have weight\nand/or payloads associated with them. This difference between the two is\nthat weights are considered in comparisons whereas payloads are not.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1339_C1)\n---\n//   +-+  +-+\n//   \\ /  \\ /\n//   (1)--(2)\nauto g1 = Graph!int([1, 2]);\n\ng1 ~= g1.edge(1, 1);\ng1 ~= g1.edge(1, 2);\ng1.add(g1.edge(2, 2));\n\nassert(g1.edge(1, 1) in g1);\nassert(g1.edge(1, 2) in g1);\nassert(g1.edge(2, 1) in g1);\nassert(g1.has(g1.edge(2, 2)));\nassert(g1.allDegrees().degrees == [2, 2]);\nassert(g1.allIncidentEdges().incidentEdges == [\n    [g1.edge(1, 1), g1.edge(1, 2)],\n    [g1.edge(1, 2), g1.edge(2, 2)],\n]);\n\n//   0.5     0.5\n//   +-+     +-+\n//   \\ /     \\ /\n//   (1)-----(2)\n//       1.0\nauto g2 = Graph!(int, double)([1, 2]);\n\ng2 ~= g2.edge(1, 1, 0.5);\ng2 ~= g2.edge(1, 2, 1.0);\ng2.add(g2.edge(2, 2, 0.5));\n\nassert(g2.edge(1, 1) in g2);\nassert(g2.edge(1, 2) in g2);\nassert(g2.edge(2, 1) in g2);\nassert(g2.has(g2.edge(2, 2)));\nassert(g2.allDegrees().degrees == [2, 2]);\nassert(g2.allIncidentEdges().incidentEdges == [\n    [g2.edge(1, 1, 0.5), g2.edge(1, 2, 1.0)],\n    [g2.edge(1, 2, 1.0), g2.edge(2, 2, 0.5)],\n]);\n\n//   0.5     0.5\n//   +-+     +-+\n//   \\ v     v /\n//   (1)---->(2)\n//       1.0\nauto g3 = Graph!(int, double, Yes.isDirected)([1, 2]);\n\ng3 ~= g3.edge(1, 1, 0.5);\ng3 ~= g3.edge(1, 2, 1.0);\ng3.add(g3.edge(2, 2, 0.5));\n\nassert(g3.edge(1, 1) in g3);\nassert(g3.edge(1, 2) in g3);\nassert(!(g3.edge(2, 1) in g3));\nassert(g3.has(g3.edge(2, 2)));\n\n//   +-+   +-+\n//   \\ v   v /\n//   (1)-->(2)\nauto g4 = Graph!(int, void, Yes.isDirected)([1, 2]);\n\ng4 ~= g4.edge(1, 1);\ng4 ~= g4.edge(1, 2);\ng4.add(g4.edge(2, 2));\n\nassert(g4.edge(1, 1) in g4);\nassert(g4.edge(1, 2) in g4);\nassert(!(g4.edge(2, 1) in g4));\nassert(g4.has(g4.edge(2, 2)));\n\n//   +-+  +-+\n//   \\ /  \\ /\n//   (1)--(2)\n//\n// payload(1, 1) = [1];\n// payload(1, 2) = [2];\n// payload(2, 2) = [3];\nauto g5 = Graph!(int, void, No.isDirected, int[])([1, 2]);\n\ng5 ~= g5.edge(1, 1, [1]);\ng5 ~= g5.edge(1, 2, [2]);\ng5.add(g5.edge(2, 2, [3]));\n\nassert(g5.edge(1, 1) in g5);\nassert(g5.get(g5.edge(1, 1)).payload == [1]);\nassert(g5.edge(1, 2) in g5);\nassert(g5.get(g5.edge(1, 2)).payload == [2]);\nassert(g5.edge(2, 1) in g5);\nassert(g5.get(g5.edge(2, 1)).payload == [2]);\nassert(g5.has(g5.edge(2, 2)));\nassert(g5.get(g5.edge(2, 2)).payload == [3]);\nassert(g5.allDegrees().degrees == [2, 2]);\nassert(g5.allIncidentEdges().incidentEdges == [\n    [g5.edge(1, 1), g5.edge(1, 2)],\n    [g5.edge(1, 2), g5.edge(2, 2)],\n]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1339_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1440_C1)\n---\n//     -1     1         1\n// (1)----(2)---(3) (4)---(5) (6)\nuint[] contigs = [1, 2, 3, 4, 5, 6];\nauto contigGraph = Graph!(uint, int)([1, 2, 3, 4, 5, 6]);\n\ncontigGraph.add(contigGraph.edge(1, 2, -1));\ncontigGraph.add(contigGraph.edge(2, 3, 1));\ncontigGraph.add(contigGraph.edge(4, 5, 1));\n\nforeach (contig; contigs)\n{\n    assert(contigGraph.degree(contig) <= 2);\n}\nassert(contigGraph.allDegrees().degrees == [1, 2, 1, 1, 1, 0]);\nassert(contigGraph.allIncidentEdges().incidentEdges == [\n    [contigGraph.edge(1, 2, -1)],\n    [contigGraph.edge(1, 2, -1), contigGraph.edge(2, 3, 1)],\n    [contigGraph.edge(2, 3, 1)],\n    [contigGraph.edge(4, 5, 1)],\n    [contigGraph.edge(4, 5, 1)],\n    [],\n]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1440_C1)\n"
			},
			{
				"constraint": "is(G : Graph!Params, Params...) && isInputRange!R && is(ElementType!R == G.Edge)",
				"parameters": [
					{
						"kind": "alias",
						"name": "merge"
					},
					{
						"kind": "type",
						"name": "G"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 1467,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "G",
								"storageClass": [
									"ref"
								],
								"name": "graph"
							},
							{
								"type": "R",
								"name": "edges"
							}
						],
						"line": 1467,
						"kind": "function",
						"char": 6,
						"name": "bulkAdd",
						"type": "void(ref G graph, R edges)",
						"endchar": 1,
						"endline": 1483
					}
				],
				"name": "bulkAdd",
				"protection": "public",
				"comment": "Add a set of edges to this graph and merge mutli-edges using `merge`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1486_C1)\n---\nauto g1 = Graph!(int, int)([1, 2]);\n\nstatic g1.Edge sumWeights(g1.Edge[] multiEdge)\n{\n    auto sumOfWeights = multiEdge.map!\"a.weight\".sum;\n    auto mergedEdge = multiEdge[0];\n    mergedEdge.weight = sumOfWeights;\n\n    return mergedEdge;\n}\n\nauto edges = [\n    g1.edge(1, 2, 1),\n    g1.edge(1, 2, 1),\n    g1.edge(1, 2, 1),\n    g1.edge(2, 3, 2),\n    g1.edge(2, 3, 2),\n    g1.edge(3, 4, 3),\n];\ng1.bulkAdd!sumWeights(edges);\nassert(g1.edges == [\n    g1.edge(1, 2, 3),\n    g1.edge(2, 3, 4),\n    g1.edge(3, 4, 3),\n]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1486_C1)\n"
			},
			{
				"constraint": "is(G : Graph!Params, Params...)",
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "1337",
						"name": "handleConflict"
					},
					{
						"kind": "type",
						"name": "G"
					}
				],
				"line": 1521,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "G",
								"storageClass": [
									"ref"
								],
								"name": "graph"
							},
							{
								"type": "G.Edge",
								"name": "edge"
							}
						],
						"line": 1521,
						"kind": "function",
						"char": 8,
						"name": "add",
						"type": "G.Edge(ref G graph, G.Edge edge)",
						"endchar": 1,
						"endline": 1549
					}
				],
				"name": "add",
				"protection": "public",
				"comment": "Add `edge` to `graph` and handle existing edges with `handleConflict`.\n\nThe handler must have this signature `Edge handleConflict(Edge, Edge)`.\n\nSee_also: `Graph.ConflictStrategy`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1552_C1)\n---\nauto g1 = Graph!(int, int)([1, 2]);\n\nauto e1 = g1.edge(1, 2, 1);\nauto e2 = g1.edge(1, 2, 2);\n\ng1 ~= e1;\n\nassertThrown!EdgeExistsException(g1.add(e2));\n\nwith (g1.ConflictStrategy)\n{\n    g1.add!replace(e2);\n\n    assert(g1.get(g1.edge(1, 2)) == e2);\n\n    g1.add!keep(e1);\n\n    assert(g1.get(g1.edge(1, 2)) == e2);\n\n    g1.add!sumWeights(e2);\n\n    assert(g1.get(g1.edge(1, 2)).weight == 2 * e2.weight);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1552_C1)\n"
			},
			{
				"constraint": "is(G : Graph!Params, Params...)",
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "G"
					}
				],
				"line": 1581,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "G",
								"storageClass": [
									"ref"
								],
								"name": "graph"
							}
						],
						"line": 1581,
						"kind": "function",
						"char": 6,
						"name": "filterEdges",
						"type": "void(ref G graph)",
						"endchar": 1,
						"endline": 1589
					}
				],
				"name": "filterEdges",
				"protection": "public",
				"comment": "Filter edges of `graph` by `pred` in-place.\n"
			},
			{
				"constraint": "is(G : Graph!Params, Params...)",
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "type",
						"name": "G"
					}
				],
				"line": 1596,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "G",
								"storageClass": [
									"ref"
								],
								"name": "graph"
							}
						],
						"line": 1596,
						"kind": "function",
						"char": 6,
						"name": "mapEdges",
						"type": "void(ref G graph)",
						"endchar": 1,
						"endline": 1602
					}
				],
				"name": "mapEdges",
				"protection": "public",
				"comment": "Modify edges of `graph` with `fun` in-place.\n\nThe resulting list of edges will be sorted but not checked for duplicates.\nIntroducing duplicate edges results in undefined behavior.\n"
			},
			{
				"line": 1608,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							}
						],
						"line": 1610,
						"kind": "constructor",
						"originalType": "(string msg)",
						"char": 5,
						"name": "this",
						"deco": "FAyaZC7dentist4util4math17EmptySetException",
						"protection": "public",
						"endchar": 5,
						"endline": 1613
					}
				],
				"name": "EmptySetException",
				"protection": "public",
				"comment": "Thrown if set operations the require elements are called.\n\nSee_also: `NaturalNumberSet.minElement`, `NaturalNumberSet.maxElement`\n"
			},
			{
				"line": 1620,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "m",
								"name": "initialNumElements"
							},
							{
								"deco": "E3std8typecons__T4FlagVAyaa6_616464416c6cZQz",
								"default": "Flag.no",
								"name": "addAll"
							}
						],
						"line": 1636,
						"kind": "constructor",
						"originalType": "ref (size_t initialNumElements, Flag!\"addAll\" addAll = No.addAll)",
						"char": 5,
						"name": "this",
						"deco": "FNcmE3std8typecons__T4FlagVAyaa6_616464416c6cZQzZS7dentist4util4math16NaturalNumberSet",
						"protection": "public",
						"endchar": 5,
						"endline": 1647,
						"comment": "Create a new set that can hold `initialNumElements` without resizing.\n\nIf `addAll` is given the first `initialNumElements` will be\nefficiently inserted into the set.\n"
					},
					{
						"storageClass": [
							"static"
						],
						"parameters": [
							{
								"deco": "Am",
								"name": "initialElements"
							}
						],
						"line": 1651,
						"kind": "function",
						"originalType": "NaturalNumberSet(size_t[] initialElements...)",
						"char": 29,
						"name": "create",
						"deco": "FAmXS7dentist4util4math16NaturalNumberSet",
						"protection": "public",
						"endchar": 5,
						"endline": 1662,
						"comment": "Efficiently create a new set from `initialElements`.\n"
					},
					{
						"parameters": [
							{
								"deco": "xm",
								"storageClass": [
									"in"
								],
								"name": "n"
							}
						],
						"line": 1684,
						"kind": "function",
						"originalType": "void(in size_t n)",
						"char": 10,
						"name": "reserveFor",
						"deco": "FImZv",
						"protection": "public",
						"endchar": 5,
						"endline": 1697,
						"comment": "Make sure the set can hold `n` without resizing.\n"
					},
					{
						"line": 1701,
						"kind": "function",
						"originalType": "const pure nothrow @property size_t()",
						"char": 22,
						"name": "capacity",
						"deco": "xFNaNbNdZm",
						"protection": "public",
						"endchar": 5,
						"endline": 1704,
						"comment": "Return the largest integer that can be inserted without resizing.\n"
					},
					{
						"parameters": [
							{
								"deco": "xm",
								"storageClass": [
									"in"
								],
								"name": "n"
							}
						],
						"line": 1736,
						"kind": "function",
						"originalType": "void(in size_t n)",
						"char": 10,
						"name": "add",
						"deco": "FImZv",
						"protection": "public",
						"endchar": 5,
						"endline": 1741,
						"comment": "Add `n` to this set regardless whether it was present or not.\n\nAdditional memory will be allocated if the set is not large enough to\nhold `n`;\n"
					},
					{
						"parameters": [
							{
								"deco": "xm",
								"storageClass": [
									"in"
								],
								"name": "n"
							}
						],
						"line": 1745,
						"kind": "function",
						"originalType": "void(in size_t n)",
						"char": 10,
						"name": "remove",
						"deco": "FImZv",
						"protection": "public",
						"endchar": 5,
						"endline": 1753,
						"comment": "Remove `n` from this set regardless whether it was present or not.\n"
					},
					{
						"parameters": [
							{
								"deco": "xm",
								"storageClass": [
									"in"
								],
								"name": "n"
							}
						],
						"line": 1757,
						"kind": "function",
						"originalType": "const pure nothrow bool(in size_t n)",
						"char": 10,
						"name": "has",
						"deco": "xFNaNbImZb",
						"protection": "public",
						"endchar": 5,
						"endline": 1765,
						"comment": "Return whether `n` is in this set.\n"
					},
					{
						"constraint": "op == \"in\"",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 1768,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"storageClass": [
											"in"
										],
										"name": "n"
									}
								],
								"line": 1768,
								"kind": "function",
								"char": 10,
								"name": "opBinaryRight",
								"type": "const pure nothrow bool(in size_t n)",
								"endchar": 5,
								"endline": 1771
							}
						],
						"name": "opBinaryRight",
						"protection": "public",
						"comment": "ditto\n"
					},
					{
						"line": 1775,
						"kind": "function",
						"char": 10,
						"name": "empty",
						"deco": "xFNaNbZb",
						"protection": "public",
						"endchar": 5,
						"endline": 1778,
						"comment": "Returns true if this set is empty.\n"
					},
					{
						"line": 1782,
						"kind": "function",
						"char": 10,
						"name": "clear",
						"deco": "FNaNbZv",
						"protection": "public",
						"endchar": 5,
						"endline": 1786,
						"comment": "Remove all elements from this set.\n"
					},
					{
						"constraint": "op == \"==\"",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 1793,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"parameters": [
									{
										"type": "NaturalNumberSet",
										"storageClass": [
											"in"
										],
										"name": "other"
									}
								],
								"line": 1793,
								"kind": "function",
								"char": 10,
								"name": "opBinary",
								"type": "const pure nothrow bool(in NaturalNumberSet other)",
								"endchar": 5,
								"endline": 1818
							}
						],
						"name": "opBinary",
						"protection": "public",
						"comment": "Compare sets for equality.\n\nTwo sets are equal if they contain the same elements. The length of\nthe underlying bit vector is ignored.\n"
					},
					{
						"constraint": "op == \"in\"",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 1825,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"parameters": [
									{
										"type": "NaturalNumberSet",
										"storageClass": [
											"in"
										],
										"name": "other"
									}
								],
								"line": 1825,
								"kind": "function",
								"char": 10,
								"name": "opBinary",
								"type": "const pure nothrow bool(in NaturalNumberSet other)",
								"endchar": 5,
								"endline": 1846
							}
						],
						"name": "opBinary",
						"protection": "public",
						"comment": "Compare sets for containment.\n\nThis set is contained in `other` if `other` contains every element\nfrom this set. The length of the underlying bit vector is ignored.\n"
					},
					{
						"constraint": "op.among(\"|\", \"^\", \"&\", \"-\")",
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"line": 1857,
						"kind": "template",
						"char": 22,
						"members": [
							{
								"parameters": [
									{
										"type": "NaturalNumberSet",
										"storageClass": [
											"in"
										],
										"name": "other"
									}
								],
								"line": 1857,
								"kind": "function",
								"char": 22,
								"name": "opBinary",
								"type": "const pure nothrow NaturalNumberSet(in NaturalNumberSet other)",
								"endchar": 5,
								"endline": 1890
							}
						],
						"name": "opBinary",
						"protection": "public",
						"comment": "Perform set operation.\n\nOperations: $(UL\n$(LI `|` â set union)\n$(LI `&` â set intersection)\n$(LI `-` â set difference)\n$(LI `^` â symmetric set difference)\n)\n"
					},
					{
						"parameters": [
							{
								"deco": "xS7dentist4util4math16NaturalNumberSet",
								"storageClass": [
									"in"
								],
								"name": "other"
							}
						],
						"line": 1894,
						"kind": "function",
						"char": 10,
						"name": "intersects",
						"deco": "xFNaNbIS7dentist4util4math16NaturalNumberSetZb",
						"protection": "public",
						"endchar": 5,
						"endline": 1905,
						"comment": "Return true if `this` and `other` share at least one element.\n"
					},
					{
						"line": 1909,
						"kind": "function",
						"originalType": "const pure nothrow @property size_t()",
						"char": 22,
						"name": "size",
						"deco": "xFNaNbNdZm",
						"protection": "public",
						"endchar": 5,
						"endline": 1927,
						"comment": "Return the number of elements in this set.\n"
					},
					{
						"line": 1933,
						"kind": "function",
						"originalType": "const size_t()",
						"char": 12,
						"name": "minElement",
						"deco": "xFZm",
						"protection": "public",
						"endchar": 5,
						"endline": 1951,
						"comment": "Return the smallest element in this set.\n\nThrows: `EmptySetException` if set is empty.\n"
					},
					{
						"line": 1957,
						"kind": "function",
						"originalType": "const size_t()",
						"char": 12,
						"name": "maxElement",
						"deco": "xFZm",
						"protection": "public",
						"endchar": 5,
						"endline": 1975,
						"comment": "Return the largest element in this set.\n\nThrows: `EmptySetException` if set is empty.\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"deco": "m",
								"default": "0LU",
								"name": "fromElement"
							},
							{
								"deco": "m",
								"default": "18446744073709551615LU",
								"name": "toElement"
							}
						],
						"line": 2101,
						"kind": "function",
						"originalType": "const pure nothrow @property (size_t fromElement = 0, size_t toElement = size_t.max)",
						"char": 20,
						"name": "elements",
						"deco": "xFNaNbNdmmZS7dentist4util4math16NaturalNumberSet__T13ElementsRangeTxSQCfQCaQByQBwZQBf",
						"protection": "public",
						"endchar": 5,
						"endline": 2105,
						"comment": "Returns a range of the elements in this set.\n\nThe elements are ordered ascending. The elements are guaranteed to\nfulfill `fromElement <= front` and `front < toElement`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L2115_C5)\n---\nimport std.algorithm : equal;\nimport std.range : iota;\n\nNaturalNumberSet set;\nauto someNumbers = iota(set.partSize).filter!\"a % 3 == 0\";\n\nforeach (i; someNumbers)\n{\n    set.add(i);\n}\n\nassert(equal(someNumbers, set.elements));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L2115_C5)\nExample:\nThe set may be modified while iterating:$(DDOX_UNITTEST_HEADER __unittest_L2132_C5)\n---\nimport std.algorithm : equal;\nimport std.range : iota;\n\nenum numElements = 64;\nauto set = NaturalNumberSet(numElements, Yes.addAll);\n\nforeach (i; set.elements)\n{\n    if (i % 10 == 0)\n        set.remove(i + 1);\n}\n\nauto expectedNumbers = iota(numElements).filter!\"a == 0 || !((a - 1) % 10 == 0)\";\nassert(equal(expectedNumbers, set.elements));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L2132_C5)\nExample:\nLimits `fromElement .. toElement` may be given$(DDOX_UNITTEST_HEADER __unittest_L2151_C5)\n---\nimport std.algorithm : equal;\nimport std.range : iota;\n\nNaturalNumberSet set;\nauto someNumbers = iota(set.partSize).filter!\"a % 3 == 0\";\n\nforeach (i; someNumbers)\n{\n    set.add(i);\n}\n\nenum from = 3;\nenum to = 16;\nassert(equal(\n    someNumbers.filter!(n => from <= n && n < to),\n    set.elements(from, to),\n));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L2151_C5)\n"
					},
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"deco": "m",
								"default": "0LU",
								"name": "fromElement"
							},
							{
								"deco": "m",
								"default": "18446744073709551615LU",
								"name": "toElement"
							}
						],
						"line": 2108,
						"kind": "function",
						"originalType": "pure nothrow @property (size_t fromElement = 0, size_t toElement = size_t.max)",
						"char": 20,
						"name": "elements",
						"deco": "FNaNbNdmmZS7dentist4util4math16NaturalNumberSet__T13ElementsRangeTSQCeQBzQBxQBvZQBe",
						"protection": "public",
						"endchar": 5,
						"endline": 2112,
						"comment": "ditto\n"
					},
					{
						"line": 2174,
						"kind": "function",
						"char": 12,
						"name": "toString",
						"deco": "xFNaZAya",
						"protection": "public",
						"endchar": 5,
						"endline": 2177,
						"comment": "Generate a string representation of this set.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L2180_C5)\n---\nauto set = NaturalNumberSet.create([1, 2, 3, 5, 8, 13]);\n\nassert(set.toString == \"[1,2,3,5,8,13]\");\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L2180_C5)\n"
					},
					{
						"parameters": [
							{
								"deco": "S7dentist4util4math16NaturalNumberSet",
								"name": "p"
							}
						],
						"line": 1620,
						"kind": "generated function",
						"char": 1,
						"name": "opAssign",
						"deco": "FNaNbNcNiNjNeS7dentist4util4math16NaturalNumberSetZQBm",
						"protection": "public"
					}
				],
				"name": "NaturalNumberSet",
				"protection": "public",
				"comment": "A set of natural numbers represented as a variable-length bit vector.\n\nAdditional space is allocated as required.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "isConnected"
					}
				],
				"line": 2243,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"name": "numNodes"
							}
						],
						"line": 2243,
						"kind": "function",
						"char": 6,
						"name": "findMaximallyConnectedComponents",
						"type": "(in size_t numNodes)",
						"endchar": 1,
						"endline": 2246
					}
				],
				"name": "findMaximallyConnectedComponents",
				"protection": "public",
				"comment": "    Find all maximally connected components of a graph. The predicate\n    `isConnected` will be evaluated `O(n^^2)` times in the worst-case\n    and `Î©(n)` in the best case. In expectation it will be evaluated\n    `Î¸(n*log(n))`.\n\n    Returns: lazy range of maximally connected components represented as\n        `NaturalNumberSet`s\n    Params:\n        isConnected =   binary predicate that evaluates to true iff two nodes,\n                        represented as indices, are connected\n        numNodes    =   total number of nodes in the graph\n\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L2249_C1)\n---\nimport std.algorithm : equal;\nimport std.range : only;\n\nalias modEqv(size_t m) = (a, b) => (a % m) == (b % m);\nalias clusterByThreshold(size_t t) = (a, b) => (a < t) == (b < t);\n\nassert(equal(\n    findMaximallyConnectedComponents!(modEqv!5)(15),\n    only(\n        NaturalNumberSet.create(0, 5, 10),\n        NaturalNumberSet.create(1, 6, 11),\n        NaturalNumberSet.create(2, 7, 12),\n        NaturalNumberSet.create(3, 8, 13),\n        NaturalNumberSet.create(4, 9, 14),\n    ),\n));\nassert(equal(\n    findMaximallyConnectedComponents!(modEqv!3)(15),\n    only(\n        NaturalNumberSet.create(0, 3, 6, 9, 12),\n        NaturalNumberSet.create(1, 4, 7, 10, 13),\n        NaturalNumberSet.create(2, 5, 8, 11, 14),\n    ),\n));\nassert(equal(\n    findMaximallyConnectedComponents!(clusterByThreshold!10)(15),\n    only(\n        NaturalNumberSet.create(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),\n        NaturalNumberSet.create(10, 11, 12, 13, 14),\n    ),\n));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L2249_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L2285_C1)\n---\nimport std.algorithm : equal;\nimport std.range : only;\n\nauto connectivity = [\n    [false, false, false, true ],\n    [false, false, true , false],\n    [false, true , false, false],\n    [true , false, false, false],\n];\nalias isConnected = (i, j) => connectivity[i][j];\n\nassert(equal(\n    findMaximallyConnectedComponents!isConnected(4),\n    only(\n        NaturalNumberSet.create(0, 3),\n        NaturalNumberSet.create(1, 2),\n    ),\n));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L2285_C1)\n"
			},
			{
				"constraint": "is(G : Graph!Params, Params...)",
				"parameters": [
					{
						"kind": "type",
						"name": "G"
					}
				],
				"line": 2380,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "G",
								"name": "graph"
							},
							{
								"type": "G.IncidentEdgesCache",
								"default": "G.IncidentEdgesCache.init",
								"name": "incidentEdgesCache"
							}
						],
						"line": 2380,
						"kind": "function",
						"char": 6,
						"name": "findCyclicSubgraphs",
						"type": "(G graph, G.IncidentEdgesCache incidentEdgesCache = G.IncidentEdgesCache.init)",
						"endchar": 1,
						"endline": 2488
					}
				],
				"name": "findCyclicSubgraphs",
				"protection": "public",
				"comment": "    Find a cycle base of an undirected graph using the Paton's\n    algorithm.\n\n    The algorithm is described in\n\n    $(I K. Paton, An algorithm for finding a fundamental set of cycles\n    for an undirected linear graph, Comm. ACM 12 (1969), pp. 514-518.)\n\n    and the implementation is adapted from the Java implementation of\n    K. Paton [1] originally licensed under Apache License 2.0 [2].\n\n    [1]: $(LINK https://code.google.com/archive/p/niographs/)$(BR)\n    [2]: $(LINK http://www.apache.org/licenses/LICENSE-2.0)\n\n    Returns: range of cycles in the graph represented as arrays of node indices\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L2491_C1)\n---\nalias G = Graph!int;\n\n//   __\n//   \\ \\\n//    `-0 -- 1 -- 2 -- 3\n//      |       / |    |\n//      |      /  |    |\n//      4 -- 5 -- 6    7\nauto g = G([0, 1, 2, 3, 4, 5, 6, 7], [\n    G.edge(0, 0),\n    G.edge(0, 1),\n    G.edge(0, 4),\n    G.edge(1, 2),\n    G.edge(2, 3),\n    G.edge(2, 5),\n    G.edge(2, 6),\n    G.edge(3, 7),\n    G.edge(4, 5),\n    G.edge(5, 6),\n]);\nauto cycles = g.findCyclicSubgraphs();\n\nimport std.algorithm : equal;\n\nassert(cycles.equal([\n    [0],\n    [2, 6, 5],\n    [1, 2, 5, 4, 0],\n]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L2491_C1)\n"
			},
			{
				"storageClass": [
					"auto"
				],
				"parameters": [
					{
						"deco": "xAAm",
						"storageClass": [
							"in"
						],
						"name": "adjacencyList"
					}
				],
				"line": 2535,
				"kind": "function",
				"originalType": "(in size_t[][] adjacencyList)",
				"char": 6,
				"name": "findAllCliques",
				"deco": "FNaNbNiNfIAAmZS7dentist4util4math20BronKerboschVersion1",
				"protection": "public",
				"endchar": 1,
				"endline": 2538,
				"comment": "    Find all maximal cliques in a graph represented by `adjacencyList`.\n    The implementation is based on version 1 of the Bron-Kerbosch algorithm [1].\n\n    [1]: $(I Bron, C.; Kerbosch, J. (1973), \"Algorithm 457: finding all cliques\n         of an undirected graph\", Communications of the ACM, 16 (9): 575â577,\n         doi:10.1145/362342.362367.)\n\n    Returns: list of sets of nodes each representing a maximal clique\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L2541_C1)\n---\nauto g = Graph!int([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\ng.add(g.edge(0, 1));\ng.add(g.edge(0, 2));\ng.add(g.edge(1, 2));\ng.add(g.edge(1, 7));\ng.add(g.edge(1, 8));\ng.add(g.edge(2, 3));\ng.add(g.edge(3, 4));\ng.add(g.edge(3, 5));\ng.add(g.edge(3, 6));\ng.add(g.edge(4, 5));\ng.add(g.edge(4, 6));\ng.add(g.edge(5, 6));\ng.add(g.edge(6, 7));\ng.add(g.edge(7, 8));\n\nauto cliques = array(findAllCliques(g.adjacencyList()));\n\nassert(cliques == [\n    [0, 1, 2],\n    [1, 7, 8],\n    [2, 3],\n    [3, 4, 5, 6],\n    [6, 7],\n    [9],\n]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L2541_C1)\n"
			},
			{
				"constraint": "isRandomAccessRange!Range",
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "\"a < b\"",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 2638,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "Range",
								"name": "sequence"
							}
						],
						"line": 2638,
						"kind": "function",
						"char": 6,
						"name": "longestIncreasingSubsequence",
						"type": "(Range sequence)",
						"endchar": 1,
						"endline": 2699
					}
				],
				"name": "longestIncreasingSubsequence",
				"protection": "public",
				"comment": "    Calculate a longest increasing subsequence of `sequence`. This subsequence\n    is not necessarily contiguous, or unique. Given a `sequence` of `n`\n    elements the algorithm uses `O(n log n)` evaluation of `pred`.\n\n    See_Also: $(LINK https://en.wikipedia.org/wiki/Longest_increasing_subsequence)\nExample:\nExample from Wikipedia$(DDOX_UNITTEST_HEADER __unittest_L2702_C1)\n---\nimport std.algorithm : equal;\n\nauto inputSequence = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];\nauto expectedOutput = [0, 2, 6, 9, 11, 15];\n\nassert(inputSequence.longestIncreasingSubsequence.equal(expectedOutput));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L2702_C1)\nExample:\nExample using a different `pred`$(DDOX_UNITTEST_HEADER __unittest_L2713_C1)\n---\nimport std.algorithm : equal;\nimport std.range : retro;\n\nauto inputSequence = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];\nauto expectedOutput = [12, 10, 9, 5, 3];\n\nassert(inputSequence.longestIncreasingSubsequence!\"a > b\".equal(expectedOutput));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L2713_C1)\n"
			}
		],
		"comment": "    Some additional mathematical functions.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.util.math"
	},
	{
		"kind": "module",
		"file": "source/dentist/util/process.d",
		"members": [
			{
				"constraint": "isInputRange!Range && isSomeString!(ElementType!Range)",
				"parameters": [
					{
						"kind": "value",
						"deco": "E3std8typecons__T4FlagVAyaa10_69734275666665726564ZQBi",
						"defaultValue": "No.isBuffered",
						"name": "isBuffered"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 39,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "Range",
								"name": "command"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "null",
								"name": "workdir"
							}
						],
						"line": 39,
						"kind": "function",
						"char": 6,
						"name": "pipeLines",
						"type": "(Range command, in string workdir = null)",
						"endchar": 1,
						"endline": 48
					}
				],
				"name": "pipeLines",
				"protection": "public",
				"comment": "Execute `command` and return a range of output lines.\n\nParams:\ncommand = range of `string`s that is executed directly. `null` values\nare automatically removed before execution.\nworkdir = change working directory for `command`\nisBuffered = allocate memory for each line or use a single buffer\nSee_also: `LinesPipe`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L57_C1)\n---\nimport std.algorithm : equal;\nimport std.range : only, take;\n\nauto cheers = pipeLines(\"yes 'Cheers!'\");\nassert(cheers.take(5).equal([\n    \"Cheers!\",\n    \"Cheers!\",\n    \"Cheers!\",\n    \"Cheers!\",\n    \"Cheers!\",\n]));\n\nauto helloWorld = pipeLines(only(\"echo\", \"Hello World!\"));\nassert(helloWorld.equal([\"Hello World!\"]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L57_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "E3std8typecons__T4FlagVAyaa10_69734275666665726564ZQBi",
						"defaultValue": "No.isBuffered",
						"name": "isBuffered"
					}
				],
				"line": 51,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"name": "shellCommand"
							},
							{
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "null",
								"name": "workdir"
							}
						],
						"line": 51,
						"kind": "function",
						"char": 6,
						"name": "pipeLines",
						"type": "(in string shellCommand, in string workdir = null)",
						"endchar": 1,
						"endline": 54
					}
				],
				"name": "pipeLines",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "CommandInfo"
					},
					{
						"kind": "value",
						"deco": "E3std8typecons__T4FlagVAyaa10_69734275666665726564ZQBi",
						"name": "isBuffered"
					}
				],
				"line": 90,
				"kind": "template",
				"char": 7,
				"members": [
					{
						"line": 90,
						"kind": "class",
						"char": 7,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 93,
								"kind": "variable",
								"char": 17,
								"name": "lineTerminator",
								"init": "\"\\x0a\"",
								"comment": "Only Linux-line endings supported.\n"
							},
							{
								"kind": "alias",
								"line": 97,
								"char": 9,
								"type": "char[]",
								"comment": "Type of lines. Depends on `isBuffered`.\n",
								"name": "line_t"
							},
							{
								"kind": "variable",
								"type": "CommandInfo",
								"char": 25,
								"line": 101,
								"name": "processInfo"
							},
							{
								"kind": "variable",
								"type": "ProcessPipes",
								"char": 26,
								"line": 102,
								"name": "process"
							},
							{
								"kind": "variable",
								"type": "line_t",
								"char": 20,
								"line": 103,
								"name": "currentLine"
							},
							{
								"parameters": [
									{
										"type": "CommandInfo",
										"name": "processInfo"
									}
								],
								"line": 106,
								"kind": "constructor",
								"char": 13,
								"name": "this",
								"type": "(CommandInfo processInfo)",
								"endchar": 5,
								"endline": 109
							},
							{
								"line": 111,
								"kind": "destructor",
								"char": 5,
								"name": "~this",
								"endchar": 5,
								"endline": 115
							},
							{
								"line": 121,
								"kind": "function",
								"char": 10,
								"name": "releaseProcess",
								"type": "void()",
								"endchar": 5,
								"endline": 140,
								"comment": "Close pipe and kill process.\n\nBlocks until the process is killed.\n"
							},
							{
								"line": 143,
								"kind": "function",
								"char": 18,
								"name": "ensureInitialized",
								"type": "void()",
								"endchar": 5,
								"endline": 159
							},
							{
								"line": 163,
								"kind": "function",
								"char": 30,
								"name": "launchProcess",
								"type": "ProcessPipes()",
								"endchar": 9,
								"endline": 172
							},
							{
								"line": 187,
								"kind": "function",
								"char": 10,
								"name": "popFront",
								"type": "void()",
								"endchar": 5,
								"endline": 209,
								"comment": "Range interface.\n"
							},
							{
								"line": 212,
								"kind": "function",
								"char": 22,
								"name": "front",
								"type": "@property line_t()",
								"endchar": 5,
								"endline": 218,
								"comment": "ditto\n"
							},
							{
								"line": 221,
								"kind": "function",
								"char": 20,
								"name": "empty",
								"type": "@property bool()",
								"endchar": 5,
								"endline": 235,
								"comment": "ditto\n"
							}
						],
						"name": "LinesPipe",
						"protection": "public"
					}
				],
				"name": "LinesPipe",
				"protection": "public",
				"comment": "Range of output lines from an external command. Construct using\n`pipeLines`.\n"
			},
			{
				"parameters": [
					{
						"deco": "Aya",
						"storageClass": [
							"scope"
						],
						"name": "name"
					},
					{
						"deco": "E3std8typecons__T4FlagVAyaa10_73656172636850617468ZQBi",
						"default": "Flag.yes",
						"name": "searchPath"
					}
				],
				"line": 248,
				"kind": "function",
				"originalType": "bool(scope string name, Flag!\"searchPath\" searchPath = Yes.searchPath)",
				"char": 22,
				"name": "isExecutable",
				"deco": "FMAyaE3std8typecons__T4FlagVQBaa10_73656172636850617468ZQBiZb",
				"protection": "public",
				"endchar": 1,
				"endline": 258,
				"comment": "    Returns true iff `name` can be executed via the process function in\n    `std.process`. By default, `PATH` will be searched if `name` does not\n    contain directory separators.\n\n    Params:\n        name       = Path to file or name of executable\n        searchPath = Determines wether or not the path should be searched.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L261_C17)\n---\nassert(isExecutable(\"/bin/sh\", No.searchPath));\nassert(isExecutable(\"/bin/sh\", Yes.searchPath));\nassert(isExecutable(\"sh\"));\nassert(!isExecutable(\"does-not-exist-anywhere\"));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L261_C17)\n"
			}
		],
		"comment": "    Convenience wrappers for executing subprocesses.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.util.process"
	},
	{
		"kind": "module",
		"file": "source/dentist/util/range.d",
		"members": [
			{
				"constraint": "isInputRange!Source",
				"parameters": [
					{
						"kind": "type",
						"name": "Source"
					}
				],
				"line": 29,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "Source",
								"name": "range"
							},
							{
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"name": "chunkSize"
							}
						],
						"line": 29,
						"kind": "function",
						"char": 6,
						"name": "arrayChunks",
						"type": "(Source range, in size_t chunkSize)",
						"endchar": 1,
						"endline": 87
					}
				],
				"name": "arrayChunks",
				"protection": "public",
				"comment": "    This range iterates over fixed-sized chunks of size `chunkSize` of a\n    source `range`.\n\n    Params:\n        range = input range\n        chunkSize = integer greater than zero.\n    See Also: `std.range.chunks`\n    Returns: Range of chunk arrays, ie. `ElementType!Source[]`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L90_C1)\n---\nimport std.array : array;\nimport std.range : iota;\n\nauto chunks = iota(10).arrayChunks(2);\nassert(chunks.array == [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L90_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "m",
						"name": "chunkSize"
					}
				],
				"line": 101,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"constraint": "args.length >= chunkSize",
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"line": 103,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "T",
										"name": "args"
									}
								],
								"line": 103,
								"kind": "function",
								"char": 10,
								"name": "chunks",
								"type": "pure nothrow @safe (T args)",
								"endchar": 5,
								"endline": 106
							}
						],
						"name": "chunks"
					},
					{
						"constraint": "0 < args.length && (args.length < chunkSize)",
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"line": 108,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "T",
										"name": "args"
									}
								],
								"line": 108,
								"kind": "function",
								"char": 10,
								"name": "chunks",
								"type": "pure nothrow @safe (T args)",
								"endchar": 5,
								"endline": 112
							}
						],
						"name": "chunks"
					},
					{
						"constraint": "args.length == 0",
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"line": 114,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "T",
										"name": "args"
									}
								],
								"line": 114,
								"kind": "function",
								"char": 10,
								"name": "chunks",
								"type": "pure nothrow @safe (T args)",
								"endchar": 5,
								"endline": 117
							}
						],
						"name": "chunks"
					}
				],
				"name": "chunks",
				"protection": "public",
				"comment": "Generate a tuple of tuples of `chunkSize`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L121_C1)\n---\nauto c1 = chunks!2(0, 1, 2, 3, 4, 5);\n\nassert(c1 == tuple(tuple(0, 1), tuple(2, 3), tuple(4, 5)));\n\nauto c2 = chunks!3(false, \"1\", 2.0, 3, '4', 5);\n\nassert(c2 == tuple(tuple(false, \"1\", 2.0), tuple(3, '4', 5)));\n\nenum c4 = chunks!4(false, \"1\", 2.0, 3, '4', 5);\n\nstatic assert(c4 == tuple(tuple(false, \"1\", 2.0, 3), tuple('4', 5)));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L121_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "m",
						"name": "chunkSize"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"line": 138,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "AliasSeq!(Chunk!(T[0 .. chunkSize]), Chunks!(chunkSize, T[chunkSize .. __dollar]))",
						"char": 9,
						"line": 142,
						"name": "Chunks"
					}
				],
				"name": "Chunks",
				"protection": "public",
				"comment": "Split a list of aliases into chunks of `chunkSize`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L159_C1)\n---\nalias c1 = Chunks!(2, AliasSeq!(int, int, int, int, int, int));\n\nstatic assert(is(c1 == AliasSeq!(Chunk!(int, int), Chunk!(int, int), Chunk!(int, int))));\nstatic foreach (pair; c1)\n{\n    static foreach (type; pair.chunks)\n    {\n        static assert(is(type == int));\n    }\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L159_C1)\n"
			},
			{
				"constraint": "pred.length == 1",
				"parameters": [
					{
						"kind": "tuple",
						"name": "pred"
					}
				],
				"line": 184,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							},
							{
								"kind": "type",
								"default": "S",
								"name": "T"
							}
						],
						"line": 187,
						"kind": "template",
						"char": 9,
						"members": [
							{
								"parameters": [
									{
										"type": "S",
										"storageClass": [
											"in"
										],
										"name": "a"
									},
									{
										"type": "T",
										"storageClass": [
											"in"
										],
										"name": "b"
									}
								],
								"line": 187,
								"kind": "function",
								"char": 9,
								"name": "compare",
								"type": "int(in S a, in T b)",
								"endchar": 5,
								"endline": 199
							}
						],
						"name": "compare",
						"comment": "Return comparison value akin to `opCmp`.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							},
							{
								"kind": "type",
								"default": "S",
								"name": "T"
							}
						],
						"line": 202,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"parameters": [
									{
										"type": "S",
										"storageClass": [
											"in"
										],
										"name": "a"
									},
									{
										"type": "T",
										"storageClass": [
											"in"
										],
										"name": "b"
									}
								],
								"line": 202,
								"kind": "function",
								"char": 10,
								"name": "lt",
								"type": "bool(in S a, in T b)",
								"endchar": 5,
								"endline": 205
							}
						],
						"name": "lt",
						"comment": "Return `true` iff `a < b`.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							},
							{
								"kind": "type",
								"default": "S",
								"name": "T"
							}
						],
						"line": 208,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"parameters": [
									{
										"type": "S",
										"storageClass": [
											"in"
										],
										"name": "a"
									},
									{
										"type": "T",
										"storageClass": [
											"in"
										],
										"name": "b"
									}
								],
								"line": 208,
								"kind": "function",
								"char": 10,
								"name": "le",
								"type": "bool(in S a, in T b)",
								"endchar": 5,
								"endline": 211
							}
						],
						"name": "le",
						"comment": "Return `true` iff `a <= b`.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							},
							{
								"kind": "type",
								"default": "S",
								"name": "T"
							}
						],
						"line": 214,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"parameters": [
									{
										"type": "S",
										"storageClass": [
											"in"
										],
										"name": "a"
									},
									{
										"type": "T",
										"storageClass": [
											"in"
										],
										"name": "b"
									}
								],
								"line": 214,
								"kind": "function",
								"char": 10,
								"name": "eq",
								"type": "bool(in S a, in T b)",
								"endchar": 5,
								"endline": 217
							}
						],
						"name": "eq",
						"comment": "Return `true` iff `a == b`.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							},
							{
								"kind": "type",
								"default": "S",
								"name": "T"
							}
						],
						"line": 220,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"parameters": [
									{
										"type": "S",
										"storageClass": [
											"in"
										],
										"name": "a"
									},
									{
										"type": "T",
										"storageClass": [
											"in"
										],
										"name": "b"
									}
								],
								"line": 220,
								"kind": "function",
								"char": 10,
								"name": "ge",
								"type": "bool(in S a, in T b)",
								"endchar": 5,
								"endline": 223
							}
						],
						"name": "ge",
						"comment": "Return `true` iff `a >= b`.\n"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							},
							{
								"kind": "type",
								"default": "S",
								"name": "T"
							}
						],
						"line": 226,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"parameters": [
									{
										"type": "S",
										"storageClass": [
											"in"
										],
										"name": "a"
									},
									{
										"type": "T",
										"storageClass": [
											"in"
										],
										"name": "b"
									}
								],
								"line": 226,
								"kind": "function",
								"char": 10,
								"name": "gt",
								"type": "bool(in S a, in T b)",
								"endchar": 5,
								"endline": 229
							}
						],
						"name": "gt",
						"comment": "Return `true` iff `a > b`.\n"
					}
				],
				"name": "Comparator",
				"protection": "public",
				"comment": "Build a comparator according to `pred`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L233_C1)\n---\nalias compareSquares = Comparator!\"a ^^ 2\".compare;\n\nassert(compareSquares(1, 2) < 0);\nassert(compareSquares(1, -2) < 0);\nassert(compareSquares(-1, 1) == 0);\nassert(compareSquares(-2.0, 1) > 0);\n\nalias compareByLength = Comparator!\"a.length\".compare;\n\nassert(compareByLength([], [1]) < 0);\nassert(compareByLength([1, 2], [1]) > 0);\nassert(compareByLength([1, 2], [\"1\", \"2\"]) == 0);\n\nalias compareAbsInts = Comparator!(\"a > 0 ? a : -a\").compare!(int);\n\nassert(compareSquares(1, 2) < 0);\nassert(compareSquares(1, -2) < 0);\nassert(compareSquares(-1, 1) == 0);\nassert(compareSquares(-2, 1) > 0);\nstatic assert(!__traits(compiles, compareAbsInts(-2.0, 1.0)));\n\nalias ltSquared = Comparator!(\"a ^^ 2\").lt;\n\nassert(ltSquared(1, 2));\nassert(ltSquared(1, -2));\nassert(!ltSquared(-2, -1));\n\nalias eqSquared = Comparator!(\"a ^^ 2\").eq;\n\nassert(eqSquared(1, 1));\nassert(eqSquared(1, -1));\nassert(!eqSquared(1, 2));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L233_C1)\n"
			},
			{
				"constraint": "isInputRange!R",
				"parameters": [
					{
						"kind": "value",
						"deco": "m",
						"name": "n"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 276,
				"kind": "template",
				"char": 18,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"name": "range"
							}
						],
						"line": 276,
						"kind": "function",
						"char": 18,
						"name": "takeExactly",
						"type": "ElementType!R[n](R range)",
						"endchar": 1,
						"endline": 292
					}
				],
				"name": "takeExactly",
				"protection": "public",
				"comment": "Take exactly `n` element from range. Throws an exception if range has not\nenough elements.\n\nThis works without allocating heap memory.\n\nThrows: `Exception` if range has less than `n` elements.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L295_C1)\n---\nimport std.exception : assertThrown;\nimport std.range : iota;\n\nstatic assert(is(typeof(iota(10).takeExactly!5) == int[5]));\nassert(iota(10).takeExactly!5 == [0, 1, 2, 3, 4]);\n\nassertThrown!Exception(iota(2).takeExactly!5);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L295_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 350,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "R",
								"name": "output"
							},
							{
								"type": "size_t",
								"name": "lineWidth"
							}
						],
						"line": 350,
						"kind": "function",
						"char": 6,
						"name": "wrapLines",
						"type": "(R output, size_t lineWidth)",
						"endchar": 1,
						"endline": 353
					}
				],
				"name": "wrapLines",
				"protection": "public",
				"comment": "Wrap an output range `output` wrapping lines at `lineWidth`.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "tuple",
						"name": "Types"
					}
				],
				"line": 369,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "Types",
								"storageClass": [
									"in"
								],
								"name": "values"
							}
						],
						"line": 369,
						"kind": "function",
						"char": 6,
						"name": "tupleMap",
						"type": "(in Types values)",
						"endchar": 1,
						"endline": 383
					}
				],
				"name": "tupleMap",
				"protection": "public",
				"comment": "Return a tuple of `fun` applied to each value of `tuple`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L386_C1)\n---\nimport std.conv : to;\nimport std.typecons : tuple;\n\nassert(\n    tupleMap!\"2*a\"(1, 2, 3.0) ==\n    tuple(2, 4, 6.0)\n);\nassert(\n    tupleMap!(x => to!string(x))(1, '2', 3.0) ==\n    tuple(\"1\", \"2\", \"3\")\n);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L386_C1)\n"
			}
		],
		"comment": "    Some additional range functions.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.util.range"
	},
	{
		"kind": "module",
		"file": "source/dentist/util/region.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 22,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "variable",
						"type": "T",
						"char": 15,
						"line": 24,
						"name": "instance"
					},
					{
						"kind": "alias",
						"type": "typeof(instance.tag)",
						"char": 5,
						"line": 26,
						"name": "TagType"
					}
				],
				"name": "TagType",
				"protection": "public",
				"comment": "Returns the type of the property `tag` of `T`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L30_C1)\n---\nstruct Taggable\n{\n    int tag;\n}\n\nstatic assert(is(TagType!Taggable == int));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L30_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 42,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 44,
						"kind": "variable",
						"char": 10,
						"name": "isTaggable",
						"init": "is(TagType!T)"
					}
				],
				"name": "isTaggable",
				"protection": "public",
				"comment": "Checks if T has a property `tag` implicitly convertible to `Tag` âÂ if given.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L48_C1)\n---\nstruct Taggable\n{\n    int tag;\n}\n\nstatic assert(isTaggable!Taggable);\nstatic assert(!isTaggable!int);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L48_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Tag"
					}
				],
				"line": 61,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"line": 61,
						"kind": "class",
						"char": 8,
						"members": [
							{
								"kind": "variable",
								"type": "const(Tag[2])",
								"char": 19,
								"line": 63,
								"name": "tags"
							},
							{
								"parameters": [
									{
										"type": "Tag",
										"storageClass": [
											"in"
										],
										"name": "tagA"
									},
									{
										"type": "Tag",
										"storageClass": [
											"in"
										],
										"name": "tagB"
									}
								],
								"line": 65,
								"kind": "constructor",
								"char": 5,
								"name": "this",
								"type": "(in Tag tagA, in Tag tagB)",
								"endchar": 5,
								"endline": 70
							}
						],
						"name": "MismatchingTagsException",
						"protection": "public"
					}
				],
				"name": "MismatchingTagsException",
				"protection": "public",
				"comment": "Thrown if two operands require the same tag but different were provided.\n"
			},
			{
				"constraint": "isTaggable!Taggable",
				"parameters": [
					{
						"kind": "type",
						"name": "Taggable"
					}
				],
				"line": 79,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "Taggable",
								"storageClass": [
									"in"
								],
								"name": "taggableA"
							},
							{
								"type": "Taggable",
								"storageClass": [
									"in"
								],
								"name": "taggableB"
							}
						],
						"line": 79,
						"kind": "function",
						"char": 6,
						"name": "enforceMatchingTags",
						"type": "pure void(in Taggable taggableA, in Taggable taggableB)",
						"endchar": 1,
						"endline": 86
					}
				],
				"name": "enforceMatchingTags",
				"protection": "public"
			},
			{
				"line": 90,
				"kind": "class",
				"char": 8,
				"base": "object.Exception",
				"members": [
					{
						"line": 92,
						"kind": "constructor",
						"originalType": "()",
						"char": 5,
						"name": "this",
						"deco": "FZC7dentist4util6region20EmptyRegionException",
						"protection": "public",
						"endchar": 5,
						"endline": 95
					}
				],
				"name": "EmptyRegionException",
				"protection": "public",
				"comment": "Thrown if regions is unexpectedly empty.\n"
			},
			{
				"constraint": "is(R : Region!Args, Args...)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 104,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"storageClass": [
									"in"
								],
								"name": "region"
							}
						],
						"line": 104,
						"kind": "function",
						"char": 6,
						"name": "enforceNonEmpty",
						"type": "void(in R region)",
						"endchar": 1,
						"endline": 108
					}
				],
				"name": "enforceNonEmpty",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "Number"
					},
					{
						"kind": "type",
						"name": "Tag"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"defaultValue": "null",
						"name": "tagAlias"
					},
					{
						"kind": "value",
						"type": "Tag",
						"defaultValue": "Tag.init",
						"name": "emptyTag"
					}
				],
				"line": 114,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 114,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"storageClass": [
									"enum"
								],
								"line": 120,
								"kind": "variable",
								"char": 21,
								"name": "numberSup",
								"init": "Number.infinity",
								"comment": "Supremum of `Number` values.\n"
							},
							{
								"line": 127,
								"kind": "struct",
								"char": 12,
								"members": [
									{
										"line": 130,
										"kind": "variable",
										"char": 13,
										"name": "tag",
										"init": "emptyTag",
										"type": "Tag",
										"comment": "Tag of this point.\n"
									},
									{
										"kind": "variable",
										"line": 137,
										"char": 16,
										"type": "Number",
										"comment": "Value of this point.\n",
										"name": "value"
									},
									{
										"constraint": "op == \"==\"",
										"parameters": [
											{
												"kind": "value",
												"type": "string",
												"name": "op"
											}
										],
										"line": 141,
										"kind": "template",
										"char": 14,
										"members": [
											{
												"parameters": [
													{
														"type": "TaggedPoint",
														"storageClass": [
															"auto",
															"const",
															"ref"
														],
														"name": "other"
													}
												],
												"line": 141,
												"kind": "function",
												"char": 14,
												"name": "opBinary",
												"type": "const pure nothrow bool(auto const ref TaggedPoint other)",
												"endchar": 9,
												"endline": 146
											}
										],
										"name": "opBinary",
										"comment": "True if both points have the same `tag` and `value`.\n"
									},
									{
										"parameters": [
											{
												"type": "TaggedPoint",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 150,
										"kind": "function",
										"char": 13,
										"name": "opCmp",
										"type": "const pure nothrow int(in TaggedPoint other)",
										"endchar": 9,
										"endline": 156,
										"comment": "Compare two points by `tag` and `value`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L159_C9)\n---\nalias R = Region!(int, int);\nalias TP = R.TaggedPoint;\n\nassert(TP(0, 10) > TP(0, 0));\nassert(TP(0, 10) > TP(0, 5));\nassert(TP(0, 10) < TP(0, 12));\nassert(TP(0, 10) < TP(0, 15));\nassert(TP(0, 10) == TP(0, 10));\nassert(TP(0, 10) < TP(0, 25));\nassert(TP(0, 10) < TP(1, 25));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L159_C9)\n"
									},
									{
										"constraint": "op == \"in\"",
										"parameters": [
											{
												"kind": "value",
												"type": "string",
												"name": "op"
											}
										],
										"line": 175,
										"kind": "template",
										"char": 14,
										"members": [
											{
												"parameters": [
													{
														"type": "TaggedInterval",
														"storageClass": [
															"in"
														],
														"name": "interval"
													}
												],
												"line": 175,
												"kind": "function",
												"char": 14,
												"name": "opBinary",
												"type": "const pure nothrow bool(in TaggedInterval interval)",
												"endchar": 9,
												"endline": 180
											}
										],
										"name": "opBinary",
										"comment": "Returns true iff `this` is in `interval`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L183_C9)\n---\nalias R = Region!(int, int);\nalias TP = R.TaggedPoint;\nalias TI = R.TaggedInterval;\n\nenum interval = TI(0, 10, 20);\n\nassert(TP(0, 10)  in interval);\nassert(TP(1, 10) !in interval);\nassert(TP(0,  0) !in interval);\nassert(TP(0, 20) !in interval);\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L183_C9)\n"
									}
								],
								"name": "TaggedPoint",
								"protection": "public",
								"comment": "        This represents a single tagged point.\n"
							},
							{
								"line": 204,
								"kind": "struct",
								"char": 12,
								"members": [
									{
										"line": 207,
										"kind": "variable",
										"char": 13,
										"name": "tag",
										"init": "emptyTag",
										"type": "Tag",
										"comment": "Tag of this interval.\n"
									},
									{
										"kind": "variable",
										"line": 214,
										"char": 16,
										"type": "Number",
										"comment": "Begin of this interval (inclusive).\n",
										"name": "begin"
									},
									{
										"kind": "variable",
										"line": 217,
										"char": 16,
										"type": "Number",
										"comment": "End of this interval (exclusive).\n",
										"name": "end"
									},
									{
										"line": 227,
										"kind": "function",
										"char": 26,
										"name": "size",
										"type": "const pure nothrow @property Number()",
										"endchar": 9,
										"endline": 230,
										"comment": "Returns the size of this interval.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L233_C9)\n---\nassert(Region!(int, int).TaggedInterval().size == 0);\nassert(TaggedInterval(1, 10, 20).size == 10);\nassert(TaggedInterval(2, 20, 40).size == 20);\nassert(TaggedInterval(3, 30, 60).size == 30);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L233_C9)\n"
									},
									{
										"line": 244,
										"kind": "function",
										"char": 24,
										"name": "empty",
										"type": "const pure nothrow @property bool()",
										"endchar": 9,
										"endline": 247,
										"comment": "Returns true iff the interval is empty. An interval is empty iff\n`begin == end`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L250_C9)\n---\nassert(TaggedInterval().empty);\nassert(!TaggedInterval(1, 10, 20).empty);\nassert(!TaggedInterval(2, 20, 40).empty);\nassert(TaggedInterval(3, 60, 60).empty);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L250_C9)\n"
									},
									{
										"constraint": "op == \"==\"",
										"parameters": [
											{
												"kind": "value",
												"type": "string",
												"name": "op"
											}
										],
										"line": 260,
										"kind": "template",
										"char": 14,
										"members": [
											{
												"parameters": [
													{
														"type": "TaggedInterval",
														"storageClass": [
															"auto",
															"const",
															"ref"
														],
														"name": "other"
													}
												],
												"line": 260,
												"kind": "function",
												"char": 14,
												"name": "opBinary",
												"type": "const pure nothrow bool(auto const ref TaggedInterval other)",
												"endchar": 9,
												"endline": 268
											}
										],
										"name": "opBinary",
										"comment": "True if `tag`, `begin` and `end` of both intervals are equal.\n"
									},
									{
										"storageClass": [
											"static"
										],
										"parameters": [
											{
												"type": "TaggedInterval[]",
												"storageClass": [
													"in"
												],
												"name": "intervals"
											}
										],
										"line": 276,
										"kind": "function",
										"char": 31,
										"name": "convexHull",
										"type": "pure TaggedInterval(in TaggedInterval[] intervals...)",
										"endchar": 9,
										"endline": 307,
										"comment": "            Returns the convex hull of the intervals.\n\n            Throws: `MismatchingTagsException` if `tag`s differ.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L310_C9)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nassert(TI.convexHull(TI(0, 10, 20), TI(0, 0, 5)) == TI(0, 0, 20));\nassert(TI.convexHull(TI(0, 10, 20), TI(0, 5, 15)) == TI(0, 5, 20));\nassert(TI.convexHull(TI(0, 10, 20), TI(0, 12, 18)) == TI(0, 10, 20));\nassert(TI.convexHull(TI(0, 10, 20), TI(0, 10, 20)) == TI(0, 10, 20));\nassert(TI.convexHull(TI(0, 10, 20), TI(0, 15, 25)) == TI(0, 10, 25));\nassert(TI.convexHull(TI(0, 10, 20), TI(0, 25, 30)) == TI(0, 10, 30));\nassertThrown!(MismatchingTagsException!int)(TI.convexHull(TI(0, 10, 20), TI(1, 25, 30)));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L310_C9)\n"
									},
									{
										"constraint": "op == \"&\"",
										"parameters": [
											{
												"kind": "value",
												"type": "string",
												"name": "op"
											}
										],
										"line": 326,
										"kind": "template",
										"char": 24,
										"members": [
											{
												"parameters": [
													{
														"type": "TaggedInterval",
														"storageClass": [
															"in"
														],
														"name": "other"
													}
												],
												"line": 326,
												"kind": "function",
												"char": 24,
												"name": "opBinary",
												"type": "const pure nothrow TaggedInterval(in TaggedInterval other)",
												"endchar": 9,
												"endline": 347
											}
										],
										"name": "opBinary",
										"comment": "Returns the intersection of both intervals; empty if `tag`s differ.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L364_C9)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nassert((TI(0, 10, 20) & TI(0, 0, 5)).empty);\nassert((TI(0, 10, 20) & TI(0, 5, 15)) == TI(0, 10, 15));\nassert((TI(0, 10, 20) & TI(0, 12, 18)) == TI(0, 12, 18));\nassert((TI(0, 10, 20) & TI(0, 10, 20)) == TI(0, 10, 20));\nassert((TI(0, 10, 20) & TI(0, 15, 25)) == TI(0, 15, 20));\nassert((TI(0, 10, 20) & TI(0, 25, 30)).empty);\nassert((TI(0, 10, 20) & TI(1, 25, 30)).empty);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L364_C9)\n"
									},
									{
										"constraint": "op == \"&\"",
										"parameters": [
											{
												"kind": "value",
												"type": "string",
												"name": "op"
											}
										],
										"line": 350,
										"kind": "template",
										"char": 24,
										"members": [
											{
												"parameters": [
													{
														"type": "TaggedInterval",
														"storageClass": [
															"in"
														],
														"name": "other"
													}
												],
												"line": 350,
												"kind": "function",
												"char": 24,
												"name": "opOpAssign",
												"type": "TaggedInterval(in TaggedInterval other)",
												"endchar": 9,
												"endline": 361
											}
										],
										"name": "opOpAssign",
										"comment": "ditto\n"
									},
									{
										"constraint": "op == \"-\"",
										"parameters": [
											{
												"kind": "value",
												"type": "string",
												"name": "op"
											}
										],
										"line": 380,
										"kind": "template",
										"char": 16,
										"members": [
											{
												"parameters": [
													{
														"type": "TaggedInterval",
														"storageClass": [
															"in"
														],
														"name": "other"
													}
												],
												"line": 380,
												"kind": "function",
												"char": 16,
												"name": "opBinary",
												"type": "const Region(in TaggedInterval other)",
												"endchar": 9,
												"endline": 403
											}
										],
										"name": "opBinary",
										"comment": "Returns the difference of both intervals.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L406_C9)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nassert(TI(0, 10, 20) - TI(0, 0, 5) == R([TI(0, 10, 20)]));\nassert(TI(0, 10, 20) - TI(0, 5, 15) == R([TI(0, 15, 20)]));\nassert(TI(0, 10, 20) - TI(0, 12, 18) == R([TI(0, 10, 12), TI(0, 18, 20)]));\nassert(TI(0, 10, 20) - TI(0, 10, 20) == R([]));\nassert(TI(0, 10, 20) - TI(0, 15, 25) == R([TI(0, 10, 15)]));\nassert(TI(0, 10, 20) - TI(0, 25, 30) == R([TI(0, 10, 20)]));\nassert(TI(0, 10, 20) - TI(1, 25, 30) == R([TI(0, 10, 20)]));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L406_C9)\n"
									},
									{
										"constraint": "op == \"^\"",
										"parameters": [
											{
												"kind": "value",
												"type": "string",
												"name": "op"
											}
										],
										"line": 422,
										"kind": "template",
										"char": 16,
										"members": [
											{
												"parameters": [
													{
														"type": "TaggedInterval",
														"storageClass": [
															"in"
														],
														"name": "other"
													}
												],
												"line": 422,
												"kind": "function",
												"char": 16,
												"name": "opBinary",
												"type": "const Region(in TaggedInterval other)",
												"endchar": 9,
												"endline": 430
											}
										],
										"name": "opBinary",
										"comment": "Returns the symmetric difference of both intervals.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L433_C9)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nassert((TI(0, 10, 20) ^ TI(0, 0, 5)) == R([TI(0, 0, 5), TI(0, 10, 20)]));\nassert((TI(0, 10, 20) ^ TI(0, 5, 15)) == R([TI(0, 5, 10), TI(0, 15, 20)]));\nassert((TI(0, 10, 20) ^ TI(0, 12, 18)) == R([TI(0, 10, 12), TI(0, 18, 20)]));\nassert((TI(0, 10, 20) ^ TI(0, 10, 20)) == R([]));\nassert((TI(0, 10, 20) ^ TI(0, 15, 25)) == R([TI(0, 10, 15), TI(0, 20, 25)]));\nassert((TI(0, 10, 20) ^ TI(0, 25, 30)) == R([TI(0, 10, 20), TI(0, 25, 30)]));\nassert((TI(0, 10, 20) ^ TI(1, 25, 30)) == R([TI(0, 10, 20), TI(1, 25, 30)]));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L433_C9)\n"
									},
									{
										"parameters": [
											{
												"type": "TaggedInterval",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 449,
										"kind": "function",
										"char": 13,
										"name": "opCmp",
										"type": "const pure nothrow int(in TaggedInterval other)",
										"endchar": 9,
										"endline": 455,
										"comment": "Compare both intervals by `tag`, `begin` and `end`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L458_C9)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nassert(TI(0, 10, 20) > TI(0, 0, 5));\nassert(TI(0, 10, 20) > TI(0, 5, 15));\nassert(TI(0, 10, 20) < TI(0, 12, 18));\nassert(TI(0, 10, 20) < TI(0, 15, 25));\nassert(TI(0, 10, 20) == TI(0, 10, 20));\nassert(TI(0, 10, 20) < TI(0, 25, 30));\nassert(TI(0, 10, 20) < TI(1, 25, 30));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L458_C9)\n"
									},
									{
										"parameters": [
											{
												"type": "TaggedInterval",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 474,
										"kind": "function",
										"char": 14,
										"name": "intersects",
										"type": "const pure nothrow bool(in TaggedInterval other)",
										"endchar": 9,
										"endline": 477,
										"comment": "Returns true iff the tagged intervals intersect.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L480_C9)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nassert(!TI(0, 10, 20).intersects(TI(0, 0, 5)));\nassert(TI(0, 10, 20).intersects(TI(0, 5, 15)));\nassert(TI(0, 10, 20).intersects(TI(0, 12, 18)));\nassert(TI(0, 10, 20).intersects(TI(0, 15, 25)));\nassert(TI(0, 10, 20).intersects(TI(0, 10, 20)));\nassert(!TI(0, 10, 20).intersects(TI(0, 25, 30)));\nassert(!TI(0, 10, 20).intersects(TI(1, 25, 30)));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L480_C9)\n"
									},
									{
										"parameters": [
											{
												"type": "TaggedInterval",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 496,
										"kind": "function",
										"char": 14,
										"name": "contains",
										"type": "const pure nothrow bool(in TaggedInterval other)",
										"endchar": 9,
										"endline": 499,
										"comment": "Returns true iff this interval contains other.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L502_C9)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nassert(!TI(0, 10, 20).contains(TI(0, 0, 5)));\nassert(!TI(0, 10, 20).contains(TI(0, 5, 15)));\nassert(TI(0, 10, 20).contains(TI(0, 12, 18)));\nassert(!TI(0, 10, 20).contains(TI(0, 15, 25)));\nassert(TI(0, 10, 20).contains(TI(0, 10, 20)));\nassert(!TI(0, 10, 20).contains(TI(0, 25, 30)));\nassert(!TI(0, 10, 20).contains(TI(1, 25, 30)));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L502_C9)\n"
									},
									{
										"constraint": "op == \"in\"",
										"parameters": [
											{
												"kind": "value",
												"type": "string",
												"name": "op"
											}
										],
										"line": 518,
										"kind": "template",
										"char": 14,
										"members": [
											{
												"parameters": [
													{
														"type": "TaggedInterval",
														"storageClass": [
															"in"
														],
														"name": "other"
													}
												],
												"line": 518,
												"kind": "function",
												"char": 14,
												"name": "opBinary",
												"type": "const pure nothrow bool(in TaggedInterval other)",
												"endchar": 9,
												"endline": 521
											}
										],
										"name": "opBinary",
										"comment": "Returns true iff `this` is a subset of `other`, ie. fully included _in_.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L524_C9)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nassert(TI(0, 0, 5) !in TI(0, 10, 20));\nassert(TI(0, 5, 15) !in TI(0, 10, 20));\nassert(TI(0, 12, 18) in TI(0, 10, 20));\nassert(TI(0, 15, 25) !in TI(0, 10, 20));\nassert(TI(0, 10, 20) in TI(0, 10, 20));\nassert(TI(0, 25, 30) !in TI(0, 10, 20));\nassert(TI(1, 12, 18) !in TI(0, 10, 20));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L524_C9)\n"
									},
									{
										"parameters": [
											{
												"type": "TaggedInterval",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 540,
										"kind": "function",
										"char": 14,
										"name": "isStrictlyBefore",
										"type": "const pure nothrow bool(in TaggedInterval other)",
										"endchar": 9,
										"endline": 543,
										"comment": "Returns true iff the tagged intervals do not intersect and `this < other`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L546_C9)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nassert(!TI(0, 10, 20).isStrictlyBefore(TI(0, 0, 5)));\nassert(!TI(0, 10, 20).isStrictlyBefore(TI(0, 5, 15)));\nassert(!TI(0, 10, 20).isStrictlyBefore(TI(0, 12, 18)));\nassert(!TI(0, 10, 20).isStrictlyBefore(TI(0, 15, 25)));\nassert(!TI(0, 10, 20).isStrictlyBefore(TI(0, 10, 20)));\nassert(TI(0, 10, 20).isStrictlyBefore(TI(0, 25, 30)));\nassert(TI(0, 10, 20).isStrictlyBefore(TI(1, 25, 30)));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L546_C9)\n"
									},
									{
										"parameters": [
											{
												"type": "TaggedInterval",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 562,
										"kind": "function",
										"char": 14,
										"name": "isStrictlyAfter",
										"type": "const pure nothrow bool(in TaggedInterval other)",
										"endchar": 9,
										"endline": 565,
										"comment": "Returns true iff the tagged intervals do not intersect and `this > other`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L568_C9)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nassert(TI(0, 10, 20).isStrictlyAfter(TI(0, 0, 5)));\nassert(!TI(0, 10, 20).isStrictlyAfter(TI(0, 5, 15)));\nassert(!TI(0, 10, 20).isStrictlyAfter(TI(0, 12, 18)));\nassert(!TI(0, 10, 20).isStrictlyAfter(TI(0, 15, 25)));\nassert(!TI(0, 10, 20).isStrictlyAfter(TI(0, 10, 20)));\nassert(!TI(0, 10, 20).isStrictlyAfter(TI(0, 25, 30)));\nassert(!TI(0, 10, 20).isStrictlyAfter(TI(1, 25, 30)));\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L568_C9)\n"
									}
								],
								"name": "TaggedInterval",
								"protection": "public",
								"comment": "        This is a right-open interval `[begin, end)` tagged with `tag`.\n        If `tagAlias` is given then the tag may be access as a property of\n        that name.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L584_C5)\n---\nstatic enum emptyTag = 42;\nalias R = Region!(int, int, \"bucketId\", emptyTag);\nalias TI = R.TaggedInterval;\n\nTI emptyInterval;\n\n// Default constructor produces empty interval.\nassert((emptyInterval).empty);\nassert(emptyInterval.tag == emptyTag);\n\nauto ti1 = TI(1, 0, 10);\n\n// The tag can be aliased:\nassert(ti1.tag == ti1.bucketId);\n\nauto ti2 = TI(1, 5, 15);\n\n// Tagged intervals with the same tag behave like regular intervals:\nassert((ti1 & ti2) == TI(1, 5, 10));\n\nauto ti3 = TI(2, 0, 10);\n\n// Tagged intervals with different tags are distinct:\nassert((ti1 & ti3).empty);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L584_C5)\n"
							},
							{
								"kind": "variable",
								"type": "TaggedInterval[]",
								"char": 30,
								"line": 613,
								"name": "_intervals"
							},
							{
								"parameters": [
									{
										"type": "TaggedInterval[]",
										"name": "intervals"
									}
								],
								"line": 620,
								"kind": "constructor",
								"char": 5,
								"name": "this",
								"type": "(TaggedInterval[] intervals)",
								"endchar": 5,
								"endline": 624,
								"comment": "Construct a region from `intervals`.\n\nThe newly constructed `Region` assumes ownership over `intervals`.\nModifying them outside of the struct leads to undefined behavior.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L627_C5)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nauto region = R([TI(0, 15, 20), TI(0, 5, 10), TI(0, 0, 10)]);\n\n// Intervals get implicitly normalized.\nassert(region.intervals == [TI(0, 0, 10), TI(0, 15, 20)]);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L627_C5)\n"
							},
							{
								"parameters": [
									{
										"type": "TaggedInterval",
										"name": "interval"
									}
								],
								"line": 640,
								"kind": "constructor",
								"char": 5,
								"name": "this",
								"type": "(TaggedInterval interval)",
								"endchar": 5,
								"endline": 643,
								"comment": "Construct a region from a single `interval`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L646_C5)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nR region = TI(0, 15, 20);\n\nassert(region.intervals == [TI(0, 15, 20)]);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L646_C5)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L663_C5)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nauto region = R(0, 15, 20);\n\nassert(region.intervals == [TI(0, 15, 20)]);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L663_C5)\n"
							},
							{
								"parameters": [
									{
										"type": "Tag",
										"name": "tag"
									},
									{
										"type": "Number",
										"name": "begin"
									},
									{
										"type": "Number",
										"name": "end"
									}
								],
								"line": 657,
								"kind": "constructor",
								"char": 5,
								"name": "this",
								"type": "(Tag tag, Number begin, Number end)",
								"endchar": 5,
								"endline": 660,
								"comment": "ditto\n"
							},
							{
								"line": 692,
								"kind": "function",
								"char": 39,
								"name": "intervals",
								"type": "const pure nothrow @property const(TaggedInterval)[]()",
								"endchar": 5,
								"endline": 695,
								"comment": "Return a list of the tagged intervals in this region.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L698_C5)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nR emptyRegion;\nauto region1 = R(0, 5, 10);\nauto region2 = R([TI(0, 5, 10), TI(0, 15, 20)]);\n\nassert(emptyRegion.intervals == []);\nassert(region1.intervals == [TI(0, 5, 10)]);\nassert(region2.intervals == [TI(0, 5, 10), TI(0, 15, 20)]);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L698_C5)\n"
							},
							{
								"line": 717,
								"kind": "function",
								"char": 22,
								"name": "releaseIntervals",
								"type": "pure nothrow TaggedInterval[]()",
								"endchar": 5,
								"endline": 724,
								"comment": "Release the list of the tagged intervals in this region.\n\nThis returns the internal intervals array and removes all references\nto it.\n"
							},
							{
								"line": 728,
								"kind": "function",
								"char": 12,
								"name": "size",
								"type": "const pure nothrow Number()",
								"endchar": 5,
								"endline": 731,
								"comment": "Returns the size of this region.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L734_C5)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nR emptyRegion;\nauto region1 = R(0, 0, 10);\nauto region2 = R([TI(0, 0, 10), TI(0, 20, 30)]);\nauto region3 = R([TI(0, 0, 20), TI(0, 10, 30)]);\n\nassert(emptyRegion.size == 0);\nassert(region1.size == 10);\nassert(region2.size == 20);\nassert(region3.size == 30);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L734_C5)\n"
							},
							{
								"line": 752,
								"kind": "function",
								"char": 10,
								"name": "empty",
								"type": "const pure nothrow bool()",
								"endchar": 5,
								"endline": 755,
								"comment": "Returns true iff the region is empty.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L758_C5)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nR emptyRegion1;\nauto emptyRegion2 = R([TI(0, 0, 0), TI(0, 10, 10)]);\nauto emptyRegion3 = R([TI(0, 0, 0), TI(1, 0, 0)]);\nauto region1 = R(0, 0, 10);\n\nassert(emptyRegion1.empty);\nassert(emptyRegion2.empty);\nassert(emptyRegion3.empty);\nassert(!region1.empty);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L758_C5)\n"
							},
							{
								"line": 776,
								"kind": "function",
								"char": 20,
								"name": "normalize",
								"type": "void()",
								"endchar": 5,
								"endline": 816,
								"comment": "Merge overlapping or touching intervals.\n"
							},
							{
								"constraint": "op == \"|\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 858,
								"kind": "template",
								"char": 12,
								"members": [
									{
										"parameters": [
											{
												"type": "Region",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 858,
										"kind": "function",
										"char": 12,
										"name": "opBinary",
										"type": "const Region(in Region other)",
										"endchar": 5,
										"endline": 861
									}
								],
								"name": "opBinary",
								"comment": "Computes the union of all tagged intervals.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L870_C5)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nassert((R(0, 10, 20) | R(0, 0, 5)) == R([TI(0, 10, 20), TI(0, 0, 5)]));\nassert((R(0, 10, 20) | R(0, 5, 15)) == R(0, 5, 20));\nassert((R(0, 10, 20) | R(0, 12, 18)) == R(0, 10, 20));\nassert((R(0, 10, 20) | R(0, 10, 20)) == R(0, 10, 20));\nassert((R(0, 10, 20) | R(0, 15, 25)) == R(0, 10, 25));\nassert((R(0, 10, 20) | R(0, 25, 30)) == R([TI(0, 10, 20), TI(0, 25, 30)]));\nassert((R(0, 10, 20) | R(1, 25, 30)) == R([TI(0, 10, 20), TI(1, 25, 30)]));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L870_C5)\n"
							},
							{
								"constraint": "op == \"|\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 864,
								"kind": "template",
								"char": 12,
								"members": [
									{
										"parameters": [
											{
												"type": "TaggedInterval",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 864,
										"kind": "function",
										"char": 12,
										"name": "opBinary",
										"type": "const Region(in TaggedInterval other)",
										"endchar": 5,
										"endline": 867
									}
								],
								"name": "opBinary",
								"comment": "ditto\n"
							},
							{
								"constraint": "op == \"&\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 886,
								"kind": "template",
								"char": 12,
								"members": [
									{
										"parameters": [
											{
												"type": "Region",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 886,
										"kind": "function",
										"char": 12,
										"name": "opBinary",
										"type": "const Region(in Region other)",
										"endchar": 5,
										"endline": 945
									}
								],
								"name": "opBinary",
								"comment": "Computes the intersection of the two regions.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L954_C5)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nassert((R(0, 10, 20) & R(0, 0, 5)) == R([]));\nassert((R(0, 10, 20) & R(0, 5, 15)) == R(0, 10, 15));\nassert((R(0, 10, 20) & R(0, 12, 18)) == R(0, 12, 18));\nassert((R(0, 10, 20) & R(0, 10, 20)) == R(0, 10, 20));\nassert((R(0, 10, 20) & R(0, 15, 25)) == R(0, 15, 20));\nassert((R(0, 10, 20) & R(0, 25, 30)) == R([]));\nassert((R(0, 10, 20) & R(1, 25, 30)) == R([]));\n// R1:       [-------)   [-------)   [-------)\n// R2:             [-------)   [-------)   [-------)\n// R1 & R2:        [-)   [-)   [-)   [-)   [-)\nassert((R([\n    TI(0, 0, 30),\n    TI(0, 40, 70),\n    TI(0, 80, 110),\n]) & R([\n    TI(0, 20, 50),\n    TI(0, 60, 90),\n    TI(0, 100, 130),\n])) == R([\n    TI(0, 20, 30),\n    TI(0, 40, 50),\n    TI(0, 60, 70),\n    TI(0, 80, 90),\n    TI(0, 100, 110),\n]));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L954_C5)\n"
							},
							{
								"constraint": "op == \"&\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 948,
								"kind": "template",
								"char": 12,
								"members": [
									{
										"parameters": [
											{
												"type": "TaggedInterval",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 948,
										"kind": "function",
										"char": 12,
										"name": "opBinary",
										"type": "const Region(in TaggedInterval other)",
										"endchar": 5,
										"endline": 951
									}
								],
								"name": "opBinary",
								"comment": "ditto\n"
							},
							{
								"constraint": "op == \"-\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 988,
								"kind": "template",
								"char": 12,
								"members": [
									{
										"parameters": [
											{
												"type": "TaggedInterval",
												"storageClass": [
													"in"
												],
												"name": "interval"
											}
										],
										"line": 988,
										"kind": "function",
										"char": 12,
										"name": "opBinary",
										"type": "const Region(in TaggedInterval interval)",
										"endchar": 5,
										"endline": 1015
									}
								],
								"name": "opBinary",
								"comment": "Computes the difference of the two regions.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1056_C5)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nassert((R(0, 10, 20) - R(0, 0, 5)) == R(0, 10, 20));\nassert((R(0, 10, 20) - R(0, 5, 15)) == R(0, 15, 20));\nassert((R(0, 10, 20) - R(0, 12, 18)) == R([TI(0, 10, 12), TI(0, 18, 20)]));\nassert((R(0, 10, 20) - R(0, 10, 20)).empty);\nassert((R(0, 10, 20) - R(0, 15, 25)) == R(0, 10, 15));\nassert((R(0, 10, 20) - R(0, 25, 30)) == R(0, 10, 20));\nassert((R(0, 10, 20) - R(1, 25, 30)) == R(0, 10, 20));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1056_C5)\n"
							},
							{
								"constraint": "op == \"-\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 1018,
								"kind": "template",
								"char": 12,
								"members": [
									{
										"parameters": [
											{
												"type": "Region",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 1018,
										"kind": "function",
										"char": 12,
										"name": "opBinary",
										"type": "const Region(in Region other)",
										"endchar": 5,
										"endline": 1053
									}
								],
								"name": "opBinary",
								"comment": "ditto\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "Region",
										"storageClass": [
											"in"
										],
										"name": "other"
									}
								],
								"line": 1071,
								"kind": "function",
								"char": 18,
								"name": "getDifferenceCandidates",
								"type": "const pure nothrow (in Region other)",
								"endchar": 5,
								"endline": 1085
							},
							{
								"constraint": "is(T : Region) || is(T : TaggedInterval)",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 1091,
								"kind": "template",
								"char": 12,
								"members": [
									{
										"parameters": [
											{
												"type": "T",
												"storageClass": [
													"in"
												],
												"name": "other"
											}
										],
										"line": 1091,
										"kind": "function",
										"char": 12,
										"name": "opOpAssign",
										"type": "Region(in T other)",
										"endchar": 5,
										"endline": 1106
									}
								],
								"name": "opOpAssign",
								"comment": "Compute the operation and place the result in this region.\n\nSee_also: `opBinary!\"|\"`, `opBinary!\"&\"`, `opBinary!\"-\"`\n"
							},
							{
								"constraint": "op == \"in\"",
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"line": 1154,
								"kind": "template",
								"char": 10,
								"members": [
									{
										"parameters": [
											{
												"type": "TaggedPoint",
												"storageClass": [
													"in"
												],
												"name": "point"
											}
										],
										"line": 1154,
										"kind": "function",
										"char": 10,
										"name": "opBinaryRight",
										"type": "const pure nothrow bool(in TaggedPoint point)",
										"endchar": 5,
										"endline": 1174
									}
								],
								"name": "opBinaryRight",
								"comment": "Returns true iff point is in this region.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1180_C5)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\nalias TP = R.TaggedPoint;\n\nR emptyRegion;\nauto region = R([TI(0, 0, 10), TI(1, 0, 10)]);\n\nassert(TP(0, 0) !in emptyRegion);\nassert(TP(0, 5) !in emptyRegion);\nassert(TP(0, 10) !in emptyRegion);\nassert(TP(0, 20) !in emptyRegion);\nassert(TP(0, 0) in region);\nassert(TP(0, 5) in region);\nassert(TP(0, 10) !in region);\nassert(TP(0, 20) !in region);\nassert(TP(1, 0) in region);\nassert(TP(1, 5) in region);\nassert(TP(1, 10) !in region);\nassert(TP(1, 20) !in region);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1180_C5)\n"
							},
							{
								"kind": "alias",
								"line": 1177,
								"char": 5,
								"type": "opBinaryRight!\"in\"",
								"comment": "ditto\n",
								"name": "includes"
							},
							{
								"line": 1207,
								"kind": "function",
								"char": 10,
								"name": "toJson",
								"type": "const @safe Json()",
								"endchar": 5,
								"endline": 1212,
								"comment": "Convert to/from `vibed.data.json.Json`.\n"
							},
							{
								"storageClass": [
									"static"
								],
								"parameters": [
									{
										"type": "Json",
										"name": "json"
									}
								],
								"line": 1215,
								"kind": "function",
								"char": 25,
								"name": "fromJson",
								"type": "@safe typeof(this)(Json json)",
								"endchar": 5,
								"endline": 1220,
								"comment": "ditto\n"
							}
						],
						"name": "Region",
						"protection": "public"
					}
				],
				"name": "Region",
				"protection": "public",
				"comment": "    A Region is a set of tagged intervals where differently tagged intervals are distinct.\n"
			},
			{
				"constraint": "is(T : Region!Args, Args...) || is(T : Region!Args.TaggedInterval, Args...)",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1236,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"storageClass": [
									"in"
								],
								"name": "thing"
							}
						],
						"line": 1236,
						"kind": "function",
						"char": 6,
						"name": "empty",
						"type": "pure nothrow bool(in T thing)",
						"endchar": 1,
						"endline": 1240
					}
				],
				"name": "empty",
				"protection": "public",
				"comment": "    Returns true iff `thing` is empty.\n\n    See_Also: `Region.empty`, `Region.TaggedInterval.empty`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1243_C1)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nR emptyRegion;\nTI emptyTI;\nauto region = R(0, 0, 10);\nauto ti = TI(0, 0, 10);\n\nassert(empty(emptyRegion));\nassert(empty(emptyTI));\nassert(!empty(region));\nassert(!empty(ti));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1243_C1)\n"
			},
			{
				"constraint": "isInputRange!Range && is(ElementType!Range : Region!Args, Args...)",
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"line": 1265,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "Range",
								"name": "regions"
							}
						],
						"line": 1265,
						"kind": "function",
						"char": 6,
						"name": "union_",
						"type": "(Range regions)",
						"endchar": 1,
						"endline": 1273
					}
				],
				"name": "union_",
				"protection": "public",
				"comment": "    Returns the union of all elements.\n\n    See_Also: `Region.opBinary!\"|\"`, `Region.TaggedInterval.opBinary!\"|\"`\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1276_C1)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nR emptyRegion;\nTI emptyTI;\nauto region = R(0, 0, 10);\nauto ti = TI(0, 0, 10);\n\nassert(empty(emptyRegion));\nassert(empty(emptyTI));\nassert(!empty(region));\nassert(!empty(ti));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1276_C1)\n"
			},
			{
				"constraint": "is(R : Region!Args, Args...)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 1300,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "R",
								"name": "region"
							}
						],
						"line": 1300,
						"kind": "function",
						"char": 6,
						"name": "min",
						"type": "(R region)",
						"endchar": 1,
						"endline": 1306
					}
				],
				"name": "min",
				"protection": "public",
				"comment": "    Returns the minimum/supremum point of the region. Both minimum and\n    supremum are undefined for empty regions.\n\n    Throws: `MismatchingTagsException` if `tag`s differ.\n    Throws: `EmptyRegionException` if `region` is empty.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1318_C1)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nR emptyRegion;\nauto region1 = R([TI(0, 0, 10), TI(0, 20, 30)]);\nauto region2 = R([TI(0, 0, 10), TI(1, 0, 10)]);\n\nassert(min(region1) == 0);\nassert(sup(region1) == 30);\nassertThrown!EmptyRegionException(min(emptyRegion));\nassertThrown!EmptyRegionException(sup(emptyRegion));\nassertThrown!(MismatchingTagsException!int)(min(region2));\nassertThrown!(MismatchingTagsException!int)(sup(region2));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1318_C1)\n"
			},
			{
				"constraint": "is(R : Region!Args, Args...)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 1309,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "R",
								"name": "region"
							}
						],
						"line": 1309,
						"kind": "function",
						"char": 6,
						"name": "sup",
						"type": "(R region)",
						"endchar": 1,
						"endline": 1315
					}
				],
				"name": "sup",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"constraint": "is(R : Region!Args, Args...)",
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"line": 1341,
				"kind": "template",
				"char": 18,
				"members": [
					{
						"parameters": [
							{
								"type": "R",
								"name": "region"
							}
						],
						"line": 1341,
						"kind": "function",
						"char": 18,
						"name": "convexHull",
						"type": "R.TaggedInterval(R region)",
						"endchar": 1,
						"endline": 1351
					}
				],
				"name": "convexHull",
				"protection": "public",
				"comment": "    Returns convex hull of the region.\n\n    Throws: `MismatchingTagsException` if `tag`s differ.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1354_C1)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\n\nR emptyRegion;\nauto region1 = R([TI(0, 0, 10), TI(0, 20, 30)]);\nauto region2 = R([TI(0, 0, 10), TI(1, 0, 10)]);\n\nassert(convexHull(region1) == TI(0, 0, 30));\nassert(convexHull(emptyRegion).empty);\nassertThrown!(MismatchingTagsException!int)(convexHull(region2));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1354_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "N"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 1372,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 1372,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"line": 1375,
								"char": 7,
								"type": "R",
								"comment": "Region covered by the tiling.\n",
								"name": "region"
							},
							{
								"kind": "variable",
								"line": 1378,
								"char": 7,
								"type": "N",
								"comment": "Sum of all overlaps.\n",
								"name": "totalOverlap"
							},
							{
								"kind": "variable",
								"line": 1381,
								"char": 9,
								"type": "T[]",
								"comment": "Elements included in the tiling.\n",
								"name": "elements"
							}
						],
						"name": "Tiling",
						"protection": "public"
					}
				],
				"name": "Tiling",
				"protection": "public",
				"comment": "Tiling solution.\n\nSee_also: `findTilings`\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"name": "toInterval"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "N"
					}
				],
				"line": 1397,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"auto"
						],
						"parameters": [
							{
								"type": "T[]",
								"name": "elements"
							},
							{
								"type": "N",
								"storageClass": [
									"in"
								],
								"name": "maxLocalOverlap"
							},
							{
								"type": "N",
								"storageClass": [
									"in"
								],
								"default": "N.max",
								"name": "maxGlobalOverlap"
							}
						],
						"line": 1397,
						"kind": "function",
						"char": 6,
						"name": "findTilings",
						"type": "(T[] elements, in N maxLocalOverlap, in N maxGlobalOverlap = N.max)",
						"endchar": 1,
						"endline": 1447
					}
				],
				"name": "findTilings",
				"protection": "public",
				"comment": "Find all valid tilings of elements.\n\nA tiling of `elements` is a sub-sequence of `elements` such that the\npair-wise overlap is no more than `maxLocalOverlap` and the sum of\noverlaps is no more than `maxGlobalOverlap`.\n\nThis uses a depth-first search of the solution space pruning (greedily)\nif one of the tiling conditions is violated. `elements` are translated\nto intervals by `toInterval` which is potentially called `O(n!)` times\nwhere `n = elements.length` .\n\nReturns: `Tiling[]` of all valid tilings.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1450_C1)\n---\nalias R = Region!(int, int);\nalias TI = R.TaggedInterval;\nauto elements = [\n    [1, 5],\n    [3, 9],\n    [7, 10],\n    [1, 10],\n];\nauto tilings = findTilings!(\n    interval => TI(0, interval[0], interval[1])\n)(\n    elements,\n    2,\n    4,\n);\n\nimport std.stdio;\n\nassert(tilings == [\n    Tiling!(R, int, int[])(\n        R([]),\n        0,\n        [],\n    ),\n    Tiling!(R, int, int[])(\n        R([TI(0, 1, 5)]),\n        0,\n        [[1, 5]],\n    ),\n    Tiling!(R, int, int[])(\n        R([TI(0, 1, 9)]),\n        2,\n        [[1, 5], [3, 9]],\n    ),\n    Tiling!(R, int, int[])(\n        R([TI(0, 1, 10)]),\n        4,\n        [[1, 5], [3, 9], [7, 10]],\n    ),\n    Tiling!(R, int, int[])(\n        R([TI(0, 1, 5), TI(0, 7, 10)]),\n        0,\n        [[1, 5], [7, 10]],\n    ),\n    Tiling!(R, int, int[])(\n        R([TI(0, 3, 9)]),\n        0,\n        [[3, 9]],\n    ),\n    Tiling!(R, int, int[])(\n        R([TI(0, 3, 10)]),\n        2,\n        [[3, 9], [7, 10]],\n    ),\n    Tiling!(R, int, int[])(\n        R([TI(0, 7, 10)]),\n        0,\n        [[7, 10]],\n    ),\n    Tiling!(R, int, int[])(\n        R([TI(0, 1, 10)]),\n        0,\n        [[1, 10]],\n    ),\n]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1450_C1)\n"
			}
		],
		"comment": "    Defines `Region` and common operation with these. A `Region` is a set of\n    tagged intervals where differently tagged intervals are distinct.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.util.region"
	},
	{
		"kind": "module",
		"file": "source/dentist/util/saturationmath.d",
		"members": [
			{
				"constraint": "isNumeric!T",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 15,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 18,
						"kind": "variable",
						"char": 14,
						"name": "saturatedInfinity",
						"init": "T.infinity"
					}
				],
				"name": "saturatedInfinity",
				"protection": "public",
				"comment": "Defines +/-infinity as interpreted by this module.\n"
			},
			{
				"constraint": "isNumeric!T",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 24,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 27,
						"kind": "variable",
						"char": 14,
						"name": "saturatedInfinty",
						"init": "-T.infinity"
					}
				],
				"name": "saturatedMinusInfinity",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"constraint": "isFloatingPoint!T",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 36,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "a"
							},
							{
								"type": "T",
								"name": "b"
							}
						],
						"line": 36,
						"kind": "function",
						"char": 3,
						"name": "saturatedAdd",
						"type": "T(T a, T b)",
						"endchar": 1,
						"endline": 39
					}
				],
				"name": "saturatedAdd",
				"protection": "public",
				"comment": "Computes the result of `a + b` limited to the natural min/max value of `T`.\nAdditionally the min/max value of `T` are treated as -/+infinity,\nrespectively.\nExample:\nditto$(DDOX_UNITTEST_HEADER __unittest_L108_C1)\n---\nassert(saturatedAdd(42L, 1337L) == 42L + 1337L);\nassert(saturatedAdd(0, -4) == -4);\nassert(saturatedAdd(long.max, 0L) == long.max);\nassert(saturatedAdd(long.max, 1L) == long.max);\nassert(saturatedAdd(long.max, long.max) == long.max);\nassert(saturatedAdd(long.min, -0L) == long.min);\nassert(saturatedAdd(long.min, -1L) == long.min);\nassert(saturatedAdd(long.min, long.min) == long.min);\n\nassert(saturatedAdd(long.max, -1L) == long.max);\nassert(saturatedAdd(long.min, 1L) == long.min);\nassert(saturatedAdd(-1L, long.max) == long.max);\nassert(saturatedAdd(1L, long.min) == long.min);\nassert(saturatedAdd(long.max, long.min) == 0);\nassert(saturatedAdd(long.min, long.max) == 0);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L108_C1)\n"
			},
			{
				"constraint": "isIntegral!T && isUnsigned!T",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 42,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "a"
							},
							{
								"type": "T",
								"name": "b"
							}
						],
						"line": 42,
						"kind": "function",
						"char": 3,
						"name": "saturatedAdd",
						"type": "T(T a, T b)",
						"endchar": 1,
						"endline": 54
					}
				],
				"name": "saturatedAdd",
				"protection": "public",
				"comment": "ditto\n"
			},
			{
				"constraint": "isIntegral!T && isSigned!T",
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 65,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "a"
							},
							{
								"type": "T",
								"name": "b"
							}
						],
						"line": 65,
						"kind": "function",
						"char": 3,
						"name": "saturatedAdd",
						"type": "T(T a, T b)",
						"endchar": 1,
						"endline": 105
					}
				],
				"name": "saturatedAdd",
				"protection": "public",
				"comment": "ditto\n"
			}
		],
		"comment": "    Efficient implementation of saturation math.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.util.saturationmath"
	},
	{
		"kind": "module",
		"file": "source/dentist/util/string.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "camelCase"
					}
				],
				"line": 52,
				"kind": "template",
				"char": 6,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 52,
						"kind": "variable",
						"char": 6,
						"name": "dashCaseCT",
						"init": "camelCase.snakeCaseCT.tr(\"_\", \"-\")"
					}
				],
				"name": "dashCaseCT",
				"protection": "public",
				"comment": "Convert a string to `dash-case` at compile time.\n"
			},
			{
				"constraint": "isSomeString!S",
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"line": 61,
				"kind": "template",
				"char": 3,
				"members": [
					{
						"parameters": [
							{
								"type": "S",
								"name": "str"
							},
							{
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "4",
								"name": "indentSize"
							}
						],
						"line": 61,
						"kind": "function",
						"char": 3,
						"name": "indent",
						"type": "S(S str, in size_t indentSize = 4)",
						"endchar": 1,
						"endline": 73
					}
				],
				"name": "indent",
				"protection": "public",
				"comment": "    Adds one level of indentation for a multi-line string. Adds `indentSize`\n    spaces to each non-empty line.\n\n    Returns: indented string\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L76_C1)\n---\nassert(\"a\\nb\".indent == \"    a\\n    b\");\nassert(\"a\\nb\\n\\n\".indent == \"    a\\n    b\\n\\n\");\nassert(\"a\\nb\\n\".indent(2) == \"  a\\n  b\\n\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L76_C1)\n"
			},
			{
				"line": 87,
				"kind": "class",
				"char": 1,
				"base": "object.Exception",
				"members": [
					{
						"kind": "mixin",
						"line": 90,
						"protection": "public",
						"char": 5,
						"comment": "\n",
						"name": "basicExceptionCtors!()"
					}
				],
				"name": "AlignmentException",
				"protection": "public",
				"comment": "Thrown on errors during sequence alignment.\n\nSee_also: `findAlignment`, `SequenceAlignment`\n"
			},
			{
				"line": 97,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 99,
						"kind": "enum member",
						"char": 5,
						"name": "substitution",
						"protection": "public",
						"value": "cast(byte)0"
					},
					{
						"line": 100,
						"kind": "enum member",
						"char": 5,
						"name": "deletetion",
						"protection": "public",
						"value": "1"
					},
					{
						"line": 101,
						"kind": "enum member",
						"char": 5,
						"name": "insertion",
						"protection": "public",
						"value": "2"
					}
				],
				"name": "EditOp",
				"protection": "public",
				"baseDeco": "g",
				"comment": "One edit operation of the Needleman-Wunsch algorithm.\n\nSee_also: `findAlignment`, `SequenceAlignment`\n"
			},
			{
				"line": 106,
				"kind": "alias",
				"char": 1,
				"name": "score_t",
				"deco": "k",
				"protection": "public",
				"comment": "Type used for alignment scores.\n"
			},
			{
				"line": 112,
				"kind": "enum",
				"char": 8,
				"members": [
					{
						"line": 115,
						"kind": "enum member",
						"char": 5,
						"name": "none",
						"protection": "public",
						"value": "cast(byte)0",
						"comment": "Do not strip anything.\n"
					},
					{
						"line": 118,
						"kind": "enum member",
						"char": 5,
						"name": "back",
						"protection": "public",
						"value": "cast(byte)1",
						"comment": "Strip insertions at the end of the alignment.\n"
					},
					{
						"line": 121,
						"kind": "enum member",
						"char": 5,
						"name": "front",
						"protection": "public",
						"value": "cast(byte)2",
						"comment": "Strip insertions at the beginning of the alignment.\n"
					},
					{
						"line": 124,
						"kind": "enum member",
						"char": 5,
						"name": "both",
						"protection": "public",
						"value": "cast(byte)3",
						"comment": "Strip insertions at the beginning and end of the alignment.\n"
					}
				],
				"name": "Strip",
				"protection": "public",
				"baseDeco": "g",
				"comment": "Used for partial alignments.\n\nSee_also: `SequenceAlignment.partial`\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "alias",
						"defaultAlias": "\"a == b ? 0 : 1\"",
						"name": "scoreFun"
					}
				],
				"line": 129,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 129,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "binaryFun!scoreFun",
								"char": 13,
								"line": 131,
								"name": "getScore"
							},
							{
								"kind": "variable",
								"line": 134,
								"char": 13,
								"type": "score_t",
								"comment": "Total score of this alignment.\n",
								"name": "score"
							},
							{
								"kind": "variable",
								"line": 137,
								"char": 14,
								"type": "EditOp[]",
								"comment": "Edit path.\n",
								"name": "editPath"
							},
							{
								"kind": "variable",
								"line": 140,
								"char": 7,
								"type": "S",
								"comment": "Reference sequence.\n",
								"name": "reference"
							},
							{
								"kind": "variable",
								"line": 143,
								"char": 7,
								"type": "S",
								"comment": "Query sequence.\n",
								"name": "query"
							},
							{
								"kind": "variable",
								"line": 146,
								"char": 13,
								"type": "score_t",
								"comment": "Penalty score for insertions and deletions.\n",
								"name": "indelPenalty"
							},
							{
								"kind": "variable",
								"line": 150,
								"char": 22,
								"type": "Flag!\"freeShift\"",
								"comment": "Whether this is a free shift alignment. Indels at the boundaries\nare scored neutrally if true.\n",
								"name": "freeShift"
							},
							{
								"line": 154,
								"kind": "function",
								"char": 13,
								"name": "computeScore",
								"type": "const pure score_t()",
								"endchar": 5,
								"endline": 163,
								"comment": "Compute alignment score.\n"
							},
							{
								"line": 167,
								"kind": "function",
								"char": 10,
								"name": "isValid",
								"type": "const pure nothrow bool()",
								"endchar": 5,
								"endline": 172,
								"comment": "Check if the edit ops, score and sequences match with each other.\n"
							},
							{
								"parameters": [
									{
										"type": "WalkResult",
										"storageClass": [
											"in"
										],
										"name": "walkResult"
									}
								],
								"line": 175,
								"kind": "function",
								"char": 18,
								"name": "isValid",
								"type": "const pure nothrow bool(in WalkResult walkResult)",
								"endchar": 5,
								"endline": 180
							},
							{
								"line": 183,
								"kind": "struct",
								"char": 20,
								"members": [
									{
										"kind": "variable",
										"type": "score_t",
										"char": 17,
										"line": 185,
										"name": "computedScore"
									},
									{
										"kind": "variable",
										"type": "size_t",
										"char": 16,
										"line": 186,
										"name": "i"
									},
									{
										"kind": "variable",
										"type": "size_t",
										"char": 19,
										"line": 186,
										"name": "j"
									}
								],
								"name": "WalkResult",
								"protection": "public"
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 190,
								"kind": "function",
								"char": 18,
								"name": "walkEditOps",
								"type": "const pure nothrow ()",
								"endchar": 5,
								"endline": 230
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "Strip",
										"name": "strip"
									}
								],
								"line": 233,
								"kind": "function",
								"char": 10,
								"name": "stripInsertions",
								"type": "inout pure nothrow (Strip strip)",
								"endchar": 5,
								"endline": 236,
								"comment": "Strip leading/trailing insertions.\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "size_t",
										"storageClass": [
											"in"
										],
										"name": "begin"
									},
									{
										"type": "size_t",
										"storageClass": [
											"in"
										],
										"name": "end"
									},
									{
										"type": "Strip",
										"default": "Strip.none",
										"name": "stripInsertions"
									}
								],
								"line": 239,
								"kind": "function",
								"char": 10,
								"name": "partial",
								"type": "inout pure nothrow (in size_t begin, in size_t end, Strip stripInsertions = Strip.none)",
								"endchar": 5,
								"endline": 320,
								"comment": "Get a partial alignment with respect to `reference`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L329_C5)\n---\nenum indelPenalty = 1;\nauto alignment = findAlignment(\"GCATGCT\", \"GATTACA\", indelPenalty);\n\nassert(alignment.score == 4);\nassert(alignment.toString ==\n    \"GCAT-GCT\\n\" ~\n    \"| || *|*\\n\" ~\n    \"G-ATTACA\");\n\nauto partialAlignment = alignment[1 .. 5];\n\nassert(partialAlignment.score == 3);\nassert(partialAlignment.toString ==\n    \"CAT-G\\n\" ~\n    \" || *\\n\" ~\n    \"-ATTA\");\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L329_C5)\n"
							},
							{
								"storageClass": [
									"auto"
								],
								"parameters": [
									{
										"type": "size_t[2]",
										"storageClass": [
											"in"
										],
										"name": "slice"
									}
								],
								"line": 323,
								"kind": "function",
								"char": 10,
								"name": "opIndex",
								"type": "inout pure nothrow (in size_t[2] slice)",
								"endchar": 5,
								"endline": 326,
								"comment": "ditto\n"
							},
							{
								"parameters": [
									{
										"kind": "value",
										"type": "size_t",
										"name": "dim"
									}
								],
								"line": 350,
								"kind": "template",
								"char": 15,
								"members": [
									{
										"parameters": [
											{
												"type": "size_t",
												"storageClass": [
													"in"
												],
												"name": "begin"
											},
											{
												"type": "size_t",
												"storageClass": [
													"in"
												],
												"name": "end"
											}
										],
										"line": 350,
										"kind": "function",
										"char": 15,
										"name": "opSlice",
										"type": "const pure nothrow size_t[2](in size_t begin, in size_t end)",
										"endchar": 5,
										"endline": 353
									}
								],
								"name": "opSlice"
							},
							{
								"storageClass": [
									"auto"
								],
								"line": 357,
								"kind": "function",
								"char": 10,
								"name": "opDollar",
								"type": "const pure nothrow ()",
								"endchar": 5,
								"endline": 360,
								"comment": "Returns `reference.length` for use with slicing operator.\n"
							},
							{
								"parameters": [
									{
										"kind": "alias",
										"defaultAlias": "'|'",
										"name": "matchSymbol"
									},
									{
										"kind": "alias",
										"defaultAlias": "'*'",
										"name": "substitutionSymbol"
									},
									{
										"kind": "alias",
										"defaultAlias": "' '",
										"name": "indelSymbol"
									},
									{
										"kind": "alias",
										"defaultAlias": "'-'",
										"name": "gapSymbol"
									}
								],
								"line": 365,
								"kind": "template",
								"char": 12,
								"members": [
									{
										"parameters": [
											{
												"type": "size_t",
												"storageClass": [
													"in"
												],
												"default": "0",
												"name": "width"
											}
										],
										"line": 365,
										"kind": "function",
										"char": 12,
										"name": "toString",
										"type": "const pure string(in size_t width = 0)",
										"endchar": 5,
										"endline": 426
									}
								],
								"name": "toString",
								"comment": "Get a string representation of this alignment. Visual alignment breaks\nunless elements of the sequences convert to single chars via `to!string`.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L429_C5)\n---\nauto alignment = findAlignment(\"ACGTC\", \"AGTC\", 1);\nassert(alignment.toString ==\n    \"ACGTC\\n\" ~\n    \"| |||\\n\" ~\n    \"A-GTC\");\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L429_C5)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L439_C5)\n---\nauto alignment = findAlignment(\"GCATGCT\", \"GATTACA\", 1);\n\nassert(alignment.toString ==\n    \"GCAT-GCT\\n\" ~\n    \"| || *|*\\n\" ~\n    \"G-ATTACA\");\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L439_C5)\n"
							}
						],
						"name": "SequenceAlignment",
						"protection": "public"
					}
				],
				"name": "SequenceAlignment",
				"protection": "public",
				"comment": "Represents an alignment of two sequences.\n"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "\"a == b ? 0 : 1\"",
						"name": "scoreFun"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"line": 478,
				"kind": "template",
				"char": 40,
				"members": [
					{
						"parameters": [
							{
								"type": "S",
								"storageClass": [
									"in"
								],
								"name": "reference"
							},
							{
								"type": "S",
								"storageClass": [
									"in"
								],
								"name": "query"
							},
							{
								"type": "score_t",
								"storageClass": [
									"in"
								],
								"name": "indelPenalty"
							},
							{
								"type": "Flag!\"freeShift\"",
								"default": "No.freeShift",
								"name": "freeShift"
							},
							{
								"type": "size_t",
								"default": "2 ^^ 20",
								"name": "memoryLimit"
							}
						],
						"line": 478,
						"kind": "function",
						"char": 40,
						"name": "findAlignment",
						"type": "SequenceAlignment!(const(S), scoreFun)(in S reference, in S query, in score_t indelPenalty, Flag!\"freeShift\" freeShift = No.freeShift, size_t memoryLimit = 2 ^^ 20)",
						"endchar": 1,
						"endline": 520
					}
				],
				"name": "findAlignment",
				"protection": "public",
				"comment": "    Compute an alignment of `query` against `reference` using the\n    Needleman-Wunsch algorithm with non-negative scores and constant\n    indel penalty. Optionally, the `freeShift` mode may be activated\n    as to allow large indels at the beginning and end of the alignment.\n\n*Implementation Notes:** The current implementation needs\n    `O(reference.length * query.length)` in time and memory. As the\n    memory requirement easily exceeds available memory it can be\n    limited for now. This may change in future and an implementation\n    using `O(max(reference.length, query.length))` memory will be\n    silently selected for large inputs.\n\n    Params:\n        scoreFun =     calculate score for a 'substitution' at `i, j` using\n                       `scoreFun(reference[i], reference[j])`\n        reference =    Sequence to compare `query` against\n        query =        Sequence to compare against `reference`\n        indelPenalty = Penalize each indel with this value\n        freeShift =    Allow indels at the beginning and end of the alignment\n        memoryLimit =  throw an error if the calculation would require more\n                       than `memoryLimit` bytes.\n    Throws: AlignmentException if the calculation would require more than\n            `memoryLimit` bytes.\n\n    See_Also: $(LINK http://en.wikipedia.org/wiki/Needleman-Wunsch_algorithm)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L523_C1)\n---\nauto alignment = findAlignment(\"ACGTC\", \"AGTC\", 1);\n\n    //   - A G T C\n    // - 0 1 2 3 4\n    // A 1 0 1 2 3\n    // C 2 1 1 2 2\n    // G 3 2 1 2 3\n    // T 4 3 2 1 2\n    // C 5 4 3 2 1\n    //\n    // ACGTC\n    // | |||\n    // A-GTC\n\nassert(alignment.score == 1);\nassert(alignment.editPath == [\n    EditOp.substitution,\n    EditOp.deletetion,\n    EditOp.substitution,\n    EditOp.substitution,\n    EditOp.substitution,\n]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L523_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L550_C1)\n---\nauto alignment = findAlignment(\"GCATGCT\", \"GATTACA\", 1);\n\n//   - G A T T A C A\n// - 0 1 2 3 4 5 6 7\n// G 1 0 1 2 3 4 5 6\n// C 2 1 2 3 4 5 4 5\n// A 3 2 1 2 3 4 5 4\n// T 4 3 2 1 2 3 6 5\n// G 5 4 3 2 3 4 5 6\n// C 6 5 4 3 4 5 4 5\n// T 7 6 5 4 3 6 5 6\n//\n// GCAT-GCT\n// | || *|*\n// G-ATTACA\nassert(alignment.score == 4);\nassert(alignment.editPath == [\n    EditOp.substitution,\n    EditOp.deletetion,\n    EditOp.substitution,\n    EditOp.substitution,\n    EditOp.insertion,\n    EditOp.substitution,\n    EditOp.substitution,\n    EditOp.substitution,\n]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L550_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L581_C1)\n---\nauto alignment = findAlignment!\"a == b ? 0 : 1\"(\n    \"tgaggacagaagggtcataggtttaattctggtcacaggcacattcctgg\" ~\n    \"gttgcaggtttgatctccacctggtcggggcacatgca\",\n    \"tgaggacagaagggtcatggtttaattctggtcacaggcacattcctggg\" ~\n    \"ttgtaggctcaattcccacccggtcggggccacatgca\",\n    1,\n);\n\nassert(alignment.toString(50) ==\n    \"tgaggacagaagggtcataggtttaattctggtcacaggcacattcctgg\\n\" ~\n    \"|||||||||||||||||| |||||||||||||||||||||||||||||||\\n\" ~\n    \"tgaggacagaagggtcat-ggtttaattctggtcacaggcacattcctgg\\n\" ~\n    \"\\n\" ~\n    \"gttgcaggtttgatctcc-acctggtcggggc-acatgca\\n\" ~\n    \"||||*|||*|**|| ||| |||*||||||||| |||||||\\n\" ~\n    \"gttgtaggctcaat-tcccacccggtcggggccacatgca\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L581_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L602_C1)\n---\nauto alignment = findAlignment(\n    \"tgaggacagaagggtcataggtttaattctggtcacaggcacattcctgg\" ~\n    \"gttgcaggtttgatctccacctggtcggggcacatgca\",\n    \"aatgaacagctgaggacagaagggtcatggtttaattctggtcacaggca\" ~\n    \"cattcctgggttgtaggctcaattcccacccggtcggggccacatgca\",\n    1,\n    Yes.freeShift,\n);\n\nassert(alignment.toString(50) ==\n    \"----------tgaggacagaagggtcataggtttaattctggtcacaggc\\n\" ~\n    \"          |||||||||||||||||| |||||||||||||||||||||\\n\" ~\n    \"aatgaacagctgaggacagaagggtcat-ggtttaattctggtcacaggc\\n\" ~\n    \"\\n\" ~\n    \"acattcctgggttgcaggtttgatctcc-acctggtcggggc-acatgca\\n\" ~\n    \"||||||||||||||*|||*|**|| ||| |||*||||||||| |||||||\\n\" ~\n    \"acattcctgggttgtaggctcaat-tcccacccggtcggggccacatgca\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L602_C1)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L624_C1)\n---\nauto alignment = findAlignment(\n    \"tatcctcaggtgaggactaacaacaaatatatatatatttatatctaaca\" ~\n    \"acatatgatttctaaaatttcaaaaatcttaaggctgaattaat\",\n    \"tatcctcaggtgaggcttaacaacaaatatatatatactgtaatatctaa\" ~\n    \"caacatatgattctaaaatttcaaaatgcttaaaggtctga\",\n    1,\n    Yes.freeShift,\n);\n\nassert(alignment.toString(50) ==\n    \"tatcctcaggtgaggact-aacaacaaatatatatata-ttta-tatcta\\n\" ~\n    \"||||||||||||||| || ||||||||||||||||||| |*|| ||||||\\n\" ~\n    \"tatcctcaggtgagg-cttaacaacaaatatatatatactgtaatatcta\\n\" ~\n    \"\\n\" ~\n    \"acaacatatgatttctaaaatttcaaaaatcttaa-gg-ctgaattaat\\n\" ~\n    \"||||||||||||| ||||||||||||||**||||| || ||||      \\n\" ~\n    \"acaacatatgatt-ctaaaatttcaaaatgcttaaaggtctga------\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L624_C1)\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"line": 756,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "S",
								"storageClass": [
									"in"
								],
								"name": "reference"
							},
							{
								"type": "S",
								"storageClass": [
									"in"
								],
								"name": "query"
							}
						],
						"line": 756,
						"kind": "function",
						"char": 8,
						"name": "memoryRequired",
						"type": "size_t(in S reference, in S query)",
						"endchar": 1,
						"endline": 764
					}
				],
				"name": "memoryRequired",
				"protection": "public",
				"comment": "Returns the amount of memory required to compute an alignment between\n`reference` and `query`.\n"
			},
			{
				"parameters": [
					{
						"deco": "m",
						"name": "memoryLimit"
					}
				],
				"line": 768,
				"kind": "function",
				"originalType": "pure size_t(size_t memoryLimit)",
				"char": 8,
				"name": "longestInputsLength",
				"deco": "FNamZm",
				"protection": "public",
				"endchar": 1,
				"endline": 771,
				"comment": "Returns longest `query` and `reference` length possible with `memoryLimit`.\n"
			},
			{
				"constraint": "isFloatingPoint!Float",
				"parameters": [
					{
						"kind": "type",
						"name": "Float"
					}
				],
				"line": 995,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "Float",
								"storageClass": [
									"in"
								],
								"name": "value"
							},
							{
								"deco": "k",
								"storageClass": [
									"in"
								],
								"name": "precision"
							}
						],
						"line": 995,
						"kind": "function",
						"char": 8,
						"name": "toString",
						"type": "pure nothrow string(in Float value, in uint precision)",
						"endchar": 1,
						"endline": 1018
					}
				],
				"name": "toString",
				"protection": "public",
				"comment": "$(B Experimental!) Convert a floating point number to a base-10 string at\ncompile time. This function is very crude and will not always work!\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L1021_C1)\n---\nenum x = 42.0;\nenum y = -13.37f;\nenum z = 0.9;\n\nstatic assert(float.nan.toString(0) == \"nan\");\nstatic assert(double.infinity.toString(0) == \"inf\");\nstatic assert((-double.infinity).toString(0) == \"-inf\");\nstatic assert(x.toString(0) == \"42\");\nstatic assert(x.toString(1) == \"42.0\");\nstatic assert(y.toString(2) == \"-13.37\");\nstatic assert(y.toString(1) == \"-13.4\");\nstatic assert(y.toString(0) == \"-13\");\nstatic assert(z.toString(1) == \"0.9\");\nstatic assert(z.toString(0) == \"1\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L1021_C1)\n"
			}
		],
		"comment": "    Some additional string functions.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.util.string"
	},
	{
		"kind": "module",
		"file": "source/dentist/util/tempfile.d",
		"members": [
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "templateString"
					}
				],
				"line": 30,
				"kind": "function",
				"char": 12,
				"name": "mkdtemp",
				"deco": "FNeIAyaZAya",
				"protection": "public",
				"endchar": 5,
				"endline": 45,
				"comment": "        Generates a uniquely named temporary directory from `templateString`.\n\n        The last six characters of template must be XXXXXX and these are\n        replaced with a string that makes the directory name unique. The\n        directory is then created with permissions 0700.\n\n        Returns: The generated directory name.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L48_C5)\n---\nimport std.algorithm : startsWith;\nimport std.file : isDir, rmdir;\n\nstring tempDir = mkdtemp(\".unittest-XXXXXX\");\n\ntry\n{\n    assert(isDir(tempDir));\n    assert(tempDir.startsWith(\".unittest-\"));\n}\nfinally\n{\n    rmdir(tempDir);\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L48_C5)\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "templateString"
					}
				],
				"line": 82,
				"kind": "function",
				"char": 42,
				"name": "mkstemp",
				"deco": "FNeIAyaZS3std8typecons__T5TupleTSQy5stdio4FileVAyaa4_66696c65TQpVQsa4_6e616d65ZQCc",
				"protection": "public",
				"endchar": 5,
				"endline": 102,
				"comment": "        Generates a unique temporary filename from `templateString`, creates\n        and opens the file, and returns the open file and generated name.\n\n        The last six characters of template must be \"XXXXXX\" and these are\n        replaced with a string that makes the filename unique.\n\n        The optional `templateSuffix` will be appended to the file name.\n\n        Returns: The open file and generated name.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L105_C5)\n---\nimport std.algorithm : startsWith;\nimport std.file : remove;\n\nauto tempFile = mkstemp(\".unittest-XXXXXX\");\nscope (exit)\n    remove(tempFile.name);\n\nassert(tempFile.name.startsWith(\".unittest-\"));\nassert(tempFile.file.isOpen);\nassert(!tempFile.file.error);\ntempFile.file.writeln(\"foobar\");\ntempFile.file.flush();\ntempFile.file.rewind();\nassert(tempFile.file.readln() == \"foobar\\n\");\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L105_C5)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_L145_C5)\n---\nimport std.algorithm : endsWith, startsWith;\nimport std.file : remove;\n\nauto tempFile = mkstemp(\".unittest-XXXXXX\", \".ext\");\nscope (exit)\n    remove(tempFile.name);\n\nassert(tempFile.name.startsWith(\".unittest-\"));\nassert(tempFile.name.endsWith(\".ext\"));\nassert(tempFile.file.isOpen);\nassert(!tempFile.file.error);\ntempFile.file.writeln(\"foobar\");\ntempFile.file.flush();\ntempFile.file.rewind();\nassert(tempFile.file.readln() == \"foobar\\n\");\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L145_C5)\n"
			},
			{
				"parameters": [
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "templateString"
					},
					{
						"deco": "xAya",
						"storageClass": [
							"in"
						],
						"name": "templateSuffix"
					}
				],
				"line": 124,
				"kind": "function",
				"char": 42,
				"name": "mkstemp",
				"deco": "FNeIAyaIQeZS3std8typecons__T5TupleTSQy5stdio4FileVAyaa4_66696c65TQpVQsa4_6e616d65ZQCc",
				"protection": "public",
				"endchar": 5,
				"endline": 142,
				"comment": "ditto\n"
			}
		],
		"comment": "    Create temporary files and folders. These are wrappers around the\n    corresponding functions in `core.sys.posix.stdlib`.\n\n    Copyright: Â© 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
		"name": "dentist.util.tempfile"
	}
]