[
 {
  "name" : "app",
  "kind" : "module",
  "file" : "source/app.d",
  "comment" : "    Application entry point.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "main",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Start `dentist` with the given set of arguments.\n\nSee_also: `dentist.commandline.run()`\n",
    "line" : 22,
    "char" : 13,
    "deco" : "FAAyaZi",
    "parameters" : [
     {
      "name" : "args",
      "deco" : "AAya"
     }
    ],
    "endline" : 27,
    "endchar" : 9
   },
   {
    "name" : "_d_cmain!()",
    "kind" : "mixin",
    "protection" : "public",
    "line" : 22,
    "char" : 13
   }
  ]
 },
 {
  "name" : "dentist.commandline",
  "kind" : "module",
  "file" : "source/dentist/commandline.d",
  "comment" : "    Defines the behavior of the DENTIST command line client. The central\n    component of this file is `OptionsFor` which encapsulates the complete\n    CLI interface.\n\n    See_also: `dentist.commands`\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "darg",
    "kind" : "import",
    "line" : 14,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ArgParseError",
     "ArgParseHelp",
     "Argument",
     "ArgumentsParser",
     "handleArg",
     "Help",
     "helpString",
     "MetaVar",
     "Multiplicity",
     "Option",
     "OptionFlag",
     "parseArgs",
     "usageString"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 28,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isTesting",
     "OutputCoordinate",
     "testingOnly"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 32,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "arithmetic_t",
     "ChainingOptions",
     "coord_t",
     "id_t",
     "trace_point_t"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 38,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand",
     "dentistCommands",
     "TestingCommand"
    ]
   },
   {
    "name" : "dentist.common.configfile",
    "kind" : "import",
    "line" : 42,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "retroInitFromConfig",
     "fromBytes",
     "SizeUnit",
     "toBytes"
    ]
   },
   {
    "name" : "dentist.common.binio",
    "kind" : "import",
    "line" : 47,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "PileUpDb"
    ]
   },
   {
    "name" : "dentist.common.external",
    "kind" : "import",
    "line" : 48,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ExternalDependency",
     "externalDependencies"
    ]
   },
   {
    "name" : "dentist.common.scaffold",
    "kind" : "import",
    "line" : 51,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "JoinPolicy"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 52,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DaccordOptions",
     "DalignerOptions",
     "DamapperOptions",
     "DatanderOptions",
     "dbdustMaskName",
     "DbSplitOptions",
     "forceLargeTracePointType",
     "getHiddenDbFiles",
     "getMaskFiles",
     "getNumContigs",
     "getTracePointDistance",
     "lasEmpty",
     "minAverageCorrelationRate",
     "OptionModifier",
     "withOption"
    ]
   },
   {
    "name" : "dentist.util.process",
    "kind" : "import",
    "line" : 68,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isExecutable"
    ]
   },
   {
    "name" : "dentist.swinfo",
    "kind" : "import",
    "line" : 69,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "copyright",
     "description",
     "executableName",
     "gitCommit",
     "license",
     "version_"
    ]
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 76,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "staticPredSwitch"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 77,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.tempfile",
    "kind" : "import",
    "line" : 78,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "mkdtemp"
    ]
   },
   {
    "name" : "dentist.util.string",
    "kind" : "import",
    "line" : 79,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "dashCaseCT",
     "toString"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 80,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "among",
     "canFind",
     "each",
     "endsWith",
     "filter",
     "find",
     "map",
     "max",
     "sort",
     "startsWith",
     "sum",
     "swap"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 93,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array",
     "split"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 96,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 97,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assumeWontThrow",
     "basicExceptionCtors",
     "enforce",
     "ErrnoException"
    ]
   },
   {
    "name" : "std.file",
    "kind" : "import",
    "line" : 102,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "exists",
     "FileException",
     "getcwd",
     "isDir",
     "mkdirRecurse",
     "tempDir",
     "remove",
     "rmdirRecurse"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 111,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format",
     "formattedRead"
    ]
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 114,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "log_e" : "log"
    },
    "selective" : [
     "ceil",
     "exp",
     "floor"
    ]
   },
   {
    "name" : "std.meta",
    "kind" : "import",
    "line" : 119,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Alias",
     "AliasSeq",
     "allSatisfy",
     "staticMap",
     "staticSort"
    ]
   },
   {
    "name" : "std.parallelism",
    "kind" : "import",
    "line" : 125,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "defaultPoolThreads",
     "totalCPUs"
    ]
   },
   {
    "name" : "std.path",
    "kind" : "import",
    "line" : 128,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "absolutePath",
     "buildPath"
    ]
   },
   {
    "name" : "std.process",
    "kind" : "import",
    "line" : 131,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Config",
     "environment",
     "execute"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 135,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ElementType",
     "enumerate",
     "only",
     "takeOne"
    ]
   },
   {
    "name" : "std.regex",
    "kind" : "import",
    "line" : 140,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ctRegex",
     "matchFirst",
     "replaceAll"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 144,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "File",
     "stderr",
     "stdin"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 148,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "join",
     "lineSplitter",
     "stripLeft",
     "outdent",
     "replace",
     "strip",
     "toUpper",
     "tr",
     "wrap"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 158,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "arity",
     "EnumMembers",
     "getSymbolsByUDA",
     "getUDAs",
     "isArray",
     "isAssignable",
     "isCallable",
     "isDynamicArray",
     "isFloatingPoint",
     "isIntegral",
     "isSomeString",
     "isStaticArray",
     "isUnsigned",
     "Parameters",
     "ReturnType"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 174,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "BitFlags",
     "Flag",
     "No",
     "tuple",
     "Yes"
    ]
   },
   {
    "name" : "transforms",
    "kind" : "import",
    "line" : 180,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "camelCase"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 181,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    },
    "selective" : [
     "serializeToJsonString"
    ]
   },
   {
    "name" : "ReturnCode",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Possible returns codes of the command line execution.\n",
    "line" : 187,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "ok",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 189,
      "char" : 5
     },
     {
      "name" : "commandlineError",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 190,
      "char" : 5
     },
     {
      "name" : "runtimeError",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 191,
      "char" : 5
     }
    ]
   },
   {
    "name" : "run",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Start DENTIST with the given set of arguments.\n",
    "line" : 195,
    "char" : 12,
    "deco" : "FIAAyaZE7dentist11commandline10ReturnCode",
    "parameters" : [
     {
      "name" : "args",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 288,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L290_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 290,
    "char" : 1,
    "endline" : 313,
    "endchar" : 1
   },
   {
    "name" : "printExternalDependencies",
    "kind" : "function",
    "protection" : "protected",
    "comment" : "Print a list of all external dependencies and their availability to\nstandard output (called by `dentist --dependencies`).\n",
    "line" : 313,
    "char" : 16,
    "deco" : "FZv",
    "endline" : 324,
    "endchar" : 1
   },
   {
    "name" : "assertExternalToolsAvailable",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Assert availability of all external dependencies. This is called before\nany command is executed.\n\nThrows: `CLIException` if one or more external dependencies are not found.\n",
    "line" : 331,
    "char" : 6,
    "deco" : "FZv",
    "endline" : 345,
    "endchar" : 1
   },
   {
    "name" : "printListOfAllOptions",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Print a list of all CLI options formatted using Markdown (called by\n`dentist --list-options`).\n",
    "line" : 350,
    "char" : 6,
    "deco" : "FZv",
    "endline" : 461,
    "endchar" : 1
   },
   {
    "name" : "htmlEscape",
    "kind" : "function",
    "protection" : "private",
    "line" : 464,
    "char" : 16,
    "deco" : "FNaNbNfAyaZQe",
    "parameters" : [
     {
      "name" : "str",
      "deco" : "Aya"
     }
    ],
    "endline" : 470,
    "endchar" : 1
   },
   {
    "name" : "htmlUnescape",
    "kind" : "function",
    "protection" : "private",
    "line" : 473,
    "char" : 16,
    "deco" : "FNaNbNfAyaZQe",
    "parameters" : [
     {
      "name" : "str",
      "deco" : "Aya"
     }
    ],
    "endline" : 479,
    "endchar" : 1
   },
   {
    "name" : "markdownHtmlUnescape",
    "kind" : "function",
    "protection" : "private",
    "line" : 482,
    "char" : 16,
    "deco" : "FNbNfAyaZQe",
    "parameters" : [
     {
      "name" : "str",
      "deco" : "Aya"
     }
    ],
    "endline" : 489,
    "endchar" : 1
   },
   {
    "name" : "parseCommandName",
    "kind" : "function",
    "protection" : "private",
    "line" : 492,
    "char" : 16,
    "deco" : "FIAAyaZAya",
    "parameters" : [
     {
      "name" : "args",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 506,
    "endchar" : 1
   },
   {
    "name" : "printBaseHelp",
    "kind" : "function",
    "protection" : "private",
    "line" : 509,
    "char" : 14,
    "deco" : "FZv",
    "endline" : 516,
    "endchar" : 1
   },
   {
    "name" : "printCommandsSummary",
    "kind" : "function",
    "protection" : "private",
    "line" : 519,
    "char" : 14,
    "deco" : "FZv",
    "endline" : 522,
    "endchar" : 1
   },
   {
    "name" : "printVersion",
    "kind" : "function",
    "protection" : "private",
    "line" : 525,
    "char" : 14,
    "deco" : "FZv",
    "endline" : 532,
    "endchar" : 1
   },
   {
    "name" : "UsageRequested",
    "kind" : "class",
    "protection" : "private",
    "line" : 535,
    "char" : 9,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 537,
      "char" : 30,
      "deco" : "FNaNbNiNfAyaQdmC6object9ThrowableZC7dentist11commandline14UsageRequested",
      "originalType" : "pure nothrow @nogc @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
      "parameters" : [
       {
        "name" : "msg",
        "deco" : "Aya"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "m",
        "default" : "cast(ulong)__LINE__"
       },
       {
        "name" : "nextInChain",
        "deco" : "C6object9Throwable",
        "default" : "null"
       }
      ],
      "endline" : 541,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Options for the different commands. See the source code,\n`dentist <command> --help` or `dentist --list-options` for\na description of the options.\n\nNote, due to a limitation of D's documentation generation the API doc\nis rather useless because it does not capture the decorators (`@Option`,\n`@Argument`, ...) that actually describe the CLI.\n",
    "line" : 552,
    "char" : 1,
    "name" : "OptionsFor",
    "parameters" : [
     {
      "name" : "_command",
      "kind" : "value",
      "deco" : "E7dentist6common8commands14DentistCommand"
     }
    ],
    "members" : [
     {
      "name" : "OptionsFor",
      "kind" : "struct",
      "protection" : "public",
      "line" : 552,
      "char" : 1,
      "members" : [
       {
        "name" : "command",
        "kind" : "variable",
        "line" : 554,
        "char" : 10,
        "storageClass" : [
         "enum"
        ],
        "init" : "_command"
       },
       {
        "name" : "commandName",
        "kind" : "variable",
        "line" : 555,
        "char" : 10,
        "storageClass" : [
         "enum"
        ],
        "init" : "dentistCommands[_command]"
       },
       {
        "name" : "needTmpdir",
        "kind" : "variable",
        "line" : 557,
        "char" : 17,
        "storageClass" : [
         "enum"
        ],
        "init" : "command.among(DentistCommand.collectPileUps, DentistCommand.processPileUps, TestingCommand.checkResults)"
       },
       {
        "name" : "needChainingOptions",
        "kind" : "variable",
        "line" : 563,
        "char" : 17,
        "storageClass" : [
         "enum"
        ],
        "init" : "command.among(DentistCommand.chainLocalAlignments, DentistCommand.processPileUps, TestingCommand.checkResults)"
       },
       {
        "name" : "executableVersion",
        "kind" : "variable",
        "line" : 570,
        "char" : 12,
        "type" : "string",
        "init" : "version_"
       },
       {
        "name" : "parseArguments",
        "kind" : "function",
        "line" : 579,
        "char" : 14,
        "storageClass" : [
         "auto"
        ],
        "type" : "(const(string)[] leftOver)",
        "parameters" : [
         {
          "name" : "leftOver",
          "type" : "const(string)[]"
         }
        ],
        "endline" : 616,
        "endchar" : 9
       },
       {
        "name" : "trueAssemblyDb",
        "kind" : "variable",
        "line" : 629,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "refDb",
        "kind" : "variable",
        "line" : 651,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "numReferenceContigs",
        "kind" : "function",
        "line" : 654,
        "char" : 24,
        "type" : "inout @property id_t()",
        "endline" : 662,
        "endchar" : 9
       },
       {
        "name" : "contigsExtraName",
        "kind" : "variable",
        "line" : 665,
        "char" : 14,
        "storageClass" : [
         "enum"
        ],
        "init" : "\"contigs\""
       },
       {
        "name" : "readsExtraName",
        "kind" : "variable",
        "line" : 666,
        "char" : 14,
        "storageClass" : [
         "enum"
        ],
        "init" : "\"reads\""
       },
       {
        "name" : "argReadsMultiplicity",
        "kind" : "variable",
        "line" : 683,
        "char" : 18,
        "storageClass" : [
         "enum"
        ],
        "init" : "Multiplicity.optional"
       },
       {
        "name" : "readsDb",
        "kind" : "variable",
        "line" : 690,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "validateReadsDb",
        "kind" : "function",
        "line" : 692,
        "char" : 21,
        "storageClass" : [
         "static"
        ],
        "type" : "void(string readsDb)",
        "parameters" : [
         {
          "name" : "readsDb",
          "type" : "string"
         }
        ],
        "endline" : 696,
        "endchar" : 9
       },
       {
        "name" : "hasReadsDb",
        "kind" : "function",
        "line" : 698,
        "char" : 24,
        "type" : "const pure nothrow @property bool()",
        "endline" : 701,
        "endchar" : 9
       },
       {
        "name" : "resultDb",
        "kind" : "variable",
        "line" : 712,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "dbAlignmentFile",
        "kind" : "variable",
        "line" : 724,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "readsAlignmentFile",
        "kind" : "variable",
        "line" : 737,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "readsAlignmentFile",
        "kind" : "variable",
        "line" : 752,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "pileUpsFile",
        "kind" : "variable",
        "line" : 763,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "regions",
        "kind" : "variable",
        "line" : 773,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "inMask",
        "kind" : "variable",
        "line" : 783,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "masks",
        "kind" : "variable",
        "line" : 793,
        "char" : 18,
        "type" : "string[]"
       },
       {
        "name" : "mappedRegionsMask",
        "kind" : "variable",
        "line" : 806,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "contigAlignmentsCache",
        "kind" : "variable",
        "line" : 816,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "readsMap",
        "kind" : "variable",
        "line" : 829,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "insertionsFile",
        "kind" : "variable",
        "line" : 840,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "assemblyGraphFile",
        "kind" : "variable",
        "line" : 854,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "coordStrings",
        "kind" : "variable",
        "line" : 870,
        "char" : 18,
        "type" : "string[]"
       },
       {
        "name" : "outputCoordinates",
        "kind" : "variable",
        "line" : 872,
        "char" : 28,
        "type" : "OutputCoordinate[]"
       },
       {
        "name" : "hookParseCoordStrings",
        "kind" : "function",
        "line" : 875,
        "char" : 14,
        "type" : "void()",
        "endline" : 880,
        "endchar" : 9
       },
       {
        "name" : "outMask",
        "kind" : "variable",
        "line" : 890,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "outMask",
        "kind" : "variable",
        "line" : 900,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "pileUpsFile",
        "kind" : "variable",
        "line" : 910,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "repeatMask",
        "kind" : "variable",
        "line" : 921,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "chainedAlignments",
        "kind" : "variable",
        "line" : 931,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "insertionsFile",
        "kind" : "variable",
        "line" : 941,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "mergedInsertionsFile",
        "kind" : "variable",
        "line" : 951,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "insertionsFiles",
        "kind" : "variable",
        "line" : 957,
        "char" : 18,
        "type" : "string[]"
       },
       {
        "name" : "outMask",
        "kind" : "variable",
        "line" : 967,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "inMasks",
        "kind" : "variable",
        "line" : 972,
        "char" : 18,
        "type" : "string[]"
       },
       {
        "name" : "resultFile",
        "kind" : "variable",
        "line" : 982,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "resultFile",
        "kind" : "variable",
        "line" : 992,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "agpVersion",
        "kind" : "variable",
        "line" : 999,
        "char" : 14,
        "storageClass" : [
         "enum"
        ],
        "init" : "\"2.1\""
       },
       {
        "name" : "agpFile",
        "kind" : "variable",
        "line" : 1003,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "allowSingleReads",
        "kind" : "variable",
        "line" : 1012,
        "char" : 20,
        "type" : "OptionFlag"
       },
       {
        "name" : "numAuxiliaryThreads",
        "kind" : "variable",
        "line" : 1027,
        "char" : 14,
        "deco" : "k"
       },
       {
        "name" : "hookInitDaccordThreads",
        "kind" : "function",
        "line" : 1030,
        "char" : 14,
        "type" : "void()",
        "endline" : 1036,
        "endchar" : 9
       },
       {
        "name" : "numAuxiliaryThreads",
        "kind" : "variable",
        "line" : 1043,
        "char" : 16,
        "type" : "string",
        "init" : "\"{threads}\""
       },
       {
        "name" : "badFraction",
        "kind" : "variable",
        "line" : 1060,
        "char" : 16,
        "deco" : "d",
        "init" : "0.08"
       },
       {
        "name" : "parseReferenceContigBatch",
        "kind" : "function",
        "line" : 1076,
        "char" : 14,
        "type" : "pure void(string batchString)",
        "parameters" : [
         {
          "name" : "batchString",
          "type" : "string"
         }
        ],
        "endline" : 1094,
        "endchar" : 9
       },
       {
        "name" : "referenceContigBatch",
        "kind" : "variable",
        "line" : 1098,
        "char" : 17,
        "type" : "id_t[2]"
       },
       {
        "name" : "validateReferenceContigBatchRange",
        "kind" : "function",
        "line" : 1100,
        "char" : 21,
        "storageClass" : [
         "static"
        ],
        "type" : "void(id_t[2] referenceContigBatch, OptionsFor!command options)",
        "parameters" : [
         {
          "name" : "referenceContigBatch",
          "type" : "id_t[2]"
         },
         {
          "name" : "options",
          "type" : "OptionsFor!command"
         }
        ],
        "endline" : 1111,
        "endchar" : 9
       },
       {
        "name" : "hookEnsurePresenceOfBatchRange",
        "kind" : "function",
        "line" : 1114,
        "char" : 14,
        "type" : "void()",
        "endline" : 1120,
        "endchar" : 9
       },
       {
        "name" : "referenceContigBatchSize",
        "kind" : "function",
        "line" : 1122,
        "char" : 24,
        "type" : "const pure nothrow @property id_t()",
        "endline" : 1125,
        "endchar" : 9
       },
       {
        "name" : "parsePileUpBatch",
        "kind" : "function",
        "line" : 1144,
        "char" : 14,
        "type" : "pure void(string batchString)",
        "parameters" : [
         {
          "name" : "batchString",
          "type" : "string"
         }
        ],
        "endline" : 1151,
        "endchar" : 9
       },
       {
        "name" : "parsePileUpIdxSpec",
        "kind" : "function",
        "line" : 1153,
        "char" : 24,
        "storageClass" : [
         "static"
        ],
        "type" : "pure id_t[2](string idxSpec)",
        "parameters" : [
         {
          "name" : "idxSpec",
          "type" : "string"
         }
        ],
        "endline" : 1173,
        "endchar" : 9
       },
       {
        "name" : "pileUpLength",
        "kind" : "function",
        "line" : 1175,
        "char" : 24,
        "type" : "inout @property id_t()",
        "endline" : 1185,
        "endchar" : 9
       },
       {
        "name" : "pileUpBatches",
        "kind" : "variable",
        "line" : 1190,
        "char" : 19,
        "type" : "id_t[2][]"
       },
       {
        "name" : "validatePileUpBatches",
        "kind" : "function",
        "line" : 1192,
        "char" : 21,
        "storageClass" : [
         "static"
        ],
        "type" : "void(id_t[2][] pileUpBatches, OptionsFor!command options)",
        "parameters" : [
         {
          "name" : "pileUpBatches",
          "type" : "id_t[2][]"
         },
         {
          "name" : "options",
          "type" : "OptionsFor!command"
         }
        ],
        "endline" : 1198,
        "endchar" : 9
       },
       {
        "name" : "validatePileUpBatchRange",
        "kind" : "function",
        "line" : 1200,
        "char" : 21,
        "storageClass" : [
         "static"
        ],
        "type" : "void(id_t[2] pileUpBatch, OptionsFor!command options)",
        "parameters" : [
         {
          "name" : "pileUpBatch",
          "type" : "id_t[2]"
         },
         {
          "name" : "options",
          "type" : "OptionsFor!command"
         }
        ],
        "endline" : 1211,
        "endchar" : 9
       },
       {
        "name" : "validatePileUpBatchesDontIntersect",
        "kind" : "function",
        "line" : 1213,
        "char" : 21,
        "storageClass" : [
         "static"
        ],
        "type" : "void(id_t[2][] pileUpBatches, OptionsFor!command options)",
        "parameters" : [
         {
          "name" : "pileUpBatches",
          "type" : "id_t[2][]"
         },
         {
          "name" : "options",
          "type" : "OptionsFor!command"
         }
        ],
        "endline" : 1229,
        "endchar" : 9
       },
       {
        "name" : "hookEnsurePresenceOfBatchRanges",
        "kind" : "function",
        "line" : 1232,
        "char" : 14,
        "type" : "void()",
        "endline" : 1237,
        "endchar" : 9
       },
       {
        "name" : "hookOptimizeBatchRanges",
        "kind" : "function",
        "line" : 1240,
        "char" : 14,
        "type" : "void()",
        "endline" : 1254,
        "endchar" : 9
       },
       {
        "name" : "numPileUps",
        "kind" : "function",
        "line" : 1256,
        "char" : 24,
        "type" : "const pure nothrow @property id_t()",
        "endline" : 1261,
        "endchar" : 9
       },
       {
        "name" : "bedFile",
        "kind" : "variable",
        "line" : 1271,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "openBedFile",
        "kind" : "function",
        "line" : 1273,
        "char" : 14,
        "type" : "const File()",
        "endline" : 1279,
        "endchar" : 9
       },
       {
        "name" : "bedFileName",
        "kind" : "function",
        "line" : 1281,
        "char" : 26,
        "type" : "const @property string()",
        "endline" : 1287,
        "endchar" : 9
       },
       {
        "name" : "bestPileUpMargin",
        "kind" : "variable",
        "line" : 1303,
        "char" : 16,
        "deco" : "d",
        "init" : "3.0"
       },
       {
        "name" : "bucketSize",
        "kind" : "variable",
        "line" : 1314,
        "char" : 17,
        "type" : "coord_t",
        "init" : "500"
       },
       {
        "name" : "contigAlignmentsCache",
        "kind" : "variable",
        "line" : 1330,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "cacheOnly",
        "kind" : "variable",
        "line" : 1343,
        "char" : 20,
        "type" : "OptionFlag"
       },
       {
        "name" : "closedGapsBedFile",
        "kind" : "variable",
        "line" : 1352,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "configHelpString",
        "kind" : "variable",
        "line" : 1355,
        "char" : 10,
        "storageClass" : [
         "enum"
        ],
        "init" : "\"\\x0a        provide configuration values in a YAML or JSON file. See README.md for\\x0a        usage and examples.\\x0a    \""
       },
       {
        "name" : "configFile",
        "kind" : "variable",
        "line" : 1366,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "contigCutoff",
        "kind" : "variable",
        "line" : 1399,
        "char" : 17,
        "type" : "coord_t",
        "init" : "1000"
       },
       {
        "name" : "cropAlignment",
        "kind" : "variable",
        "line" : 1415,
        "char" : 17,
        "type" : "coord_t",
        "init" : "0"
       },
       {
        "name" : "cropAmbiguous",
        "kind" : "variable",
        "line" : 1430,
        "char" : 17,
        "type" : "coord_t",
        "init" : "100"
       },
       {
        "name" : "addAdditionalDaccordOptions",
        "kind" : "function",
        "line" : 1441,
        "char" : 14,
        "type" : "void(string option)",
        "parameters" : [
         {
          "name" : "option",
          "type" : "string"
         }
        ],
        "endline" : 1444,
        "endchar" : 9
       },
       {
        "name" : "additionalDaccordOptions",
        "kind" : "variable",
        "line" : 1447,
        "char" : 18,
        "type" : "string[]"
       },
       {
        "name" : "addAdditionalConsensusAlignmentOptions",
        "kind" : "function",
        "line" : 1458,
        "char" : 14,
        "type" : "void(string option)",
        "parameters" : [
         {
          "name" : "option",
          "type" : "string"
         }
        ],
        "endline" : 1461,
        "endchar" : 9
       },
       {
        "name" : "additionalConsensusAlignmentOptions",
        "kind" : "variable",
        "line" : 1464,
        "char" : 18,
        "type" : "string[]"
       },
       {
        "name" : "addAdditionalReadsVsReadsAlignmentOptions",
        "kind" : "function",
        "line" : 1475,
        "char" : 14,
        "type" : "void(string option)",
        "parameters" : [
         {
          "name" : "option",
          "type" : "string"
         }
        ],
        "endline" : 1478,
        "endchar" : 9
       },
       {
        "name" : "additionalReadsVsReadsAlignmentOptions",
        "kind" : "variable",
        "line" : 1481,
        "char" : 18,
        "type" : "string[]"
       },
       {
        "name" : "addAdditionalSelfAlignmentOptions",
        "kind" : "function",
        "line" : 1493,
        "char" : 14,
        "type" : "void(string option)",
        "parameters" : [
         {
          "name" : "option",
          "type" : "string"
         }
        ],
        "endline" : 1496,
        "endchar" : 9
       },
       {
        "name" : "additionalSelfAlignmentOptions",
        "kind" : "variable",
        "line" : 1499,
        "char" : 18,
        "type" : "string[]"
       },
       {
        "name" : "addAdditionalRefVsReadsAlignmentOptions",
        "kind" : "function",
        "line" : 1511,
        "char" : 14,
        "type" : "void(string option)",
        "parameters" : [
         {
          "name" : "option",
          "type" : "string"
         }
        ],
        "endline" : 1514,
        "endchar" : 9
       },
       {
        "name" : "additionalRefVsReadsAlignmentOptions",
        "kind" : "variable",
        "line" : 1517,
        "char" : 18,
        "type" : "string[]"
       },
       {
        "name" : "dataComments",
        "kind" : "variable",
        "line" : 1529,
        "char" : 20,
        "type" : "OptionFlag"
       },
       {
        "name" : "addAdditionalTandemAlignmentOptions",
        "kind" : "function",
        "line" : 1541,
        "char" : 14,
        "type" : "void(string option)",
        "parameters" : [
         {
          "name" : "option",
          "type" : "string"
         }
        ],
        "endline" : 1544,
        "endchar" : 9
       },
       {
        "name" : "additionalTandemAlignmentOptions",
        "kind" : "variable",
        "line" : 1547,
        "char" : 18,
        "type" : "string[]"
       },
       {
        "name" : "intermediatePileUpsStem",
        "kind" : "variable",
        "line" : 1558,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "debugRepeatMasks",
        "kind" : "variable",
        "line" : 1567,
        "char" : 20,
        "type" : "OptionFlag"
       },
       {
        "name" : "dustMask",
        "kind" : "variable",
        "line" : 1581,
        "char" : 16,
        "type" : "string",
        "init" : "\"dust\""
       },
       {
        "name" : "fixDefaultDustMask",
        "kind" : "function",
        "line" : 1584,
        "char" : 14,
        "type" : "void()",
        "endline" : 1597,
        "endchar" : 9
       },
       {
        "name" : "addAdditionalReadsDustOptions",
        "kind" : "function",
        "line" : 1608,
        "char" : 14,
        "type" : "void(string option)",
        "parameters" : [
         {
          "name" : "option",
          "type" : "string"
         }
        ],
        "endline" : 1611,
        "endchar" : 9
       },
       {
        "name" : "additionalReadsDustOptions",
        "kind" : "variable",
        "line" : 1614,
        "char" : 18,
        "type" : "string[]"
       },
       {
        "name" : "addAdditionalRefDustOptions",
        "kind" : "function",
        "line" : 1625,
        "char" : 14,
        "type" : "void(string option)",
        "parameters" : [
         {
          "name" : "option",
          "type" : "string"
         }
        ],
        "endline" : 1628,
        "endchar" : 9
       },
       {
        "name" : "additionalRefDustOptions",
        "kind" : "variable",
        "line" : 1631,
        "char" : 18,
        "type" : "string[]"
       },
       {
        "name" : "existingGapBonus",
        "kind" : "variable",
        "line" : 1645,
        "char" : 16,
        "deco" : "d",
        "init" : "6.0"
       },
       {
        "name" : "fastaLineWidth",
        "kind" : "variable",
        "line" : 1656,
        "char" : 16,
        "type" : "size_t",
        "init" : "50"
       },
       {
        "name" : "gapDetailsJson",
        "kind" : "variable",
        "line" : 1667,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "gapDetailsContext",
        "kind" : "variable",
        "line" : 1677,
        "char" : 17,
        "type" : "coord_t"
       },
       {
        "name" : "help",
        "kind" : "variable",
        "line" : 1682,
        "char" : 16,
        "type" : "OptionFlag"
       },
       {
        "name" : "joinPolicy",
        "kind" : "variable",
        "line" : 1698,
        "char" : 20,
        "type" : "JoinPolicy",
        "init" : "JoinPolicy.scaffoldGaps"
       },
       {
        "name" : "useJson",
        "kind" : "variable",
        "line" : 1711,
        "char" : 20,
        "type" : "OptionFlag"
       },
       {
        "name" : "keepTemp",
        "kind" : "variable",
        "line" : 1718,
        "char" : 20,
        "type" : "OptionFlag"
       },
       {
        "name" : "addMask",
        "kind" : "function",
        "line" : 1734,
        "char" : 14,
        "type" : "pure void(string mask)",
        "parameters" : [
         {
          "name" : "mask",
          "type" : "string"
         }
        ],
        "endline" : 1737,
        "endchar" : 9
       },
       {
        "name" : "repeatMasks",
        "kind" : "variable",
        "line" : 1746,
        "char" : 18,
        "type" : "string[]"
       },
       {
        "name" : "maxAlignmentError",
        "kind" : "variable",
        "line" : 1764,
        "char" : 16,
        "deco" : "d",
        "init" : "1.0 - minAverageCorrelationRate"
       },
       {
        "name" : "maxChainGapBps",
        "kind" : "variable",
        "line" : 1775,
        "char" : 17,
        "type" : "coord_t",
        "init" : "10000"
       },
       {
        "name" : "numBubblesEscapeNodes",
        "kind" : "variable",
        "line" : 1782,
        "char" : 14,
        "storageClass" : [
         "enum"
        ],
        "init" : "2"
       },
       {
        "name" : "nodePerContig",
        "kind" : "variable",
        "line" : 1783,
        "char" : 14,
        "storageClass" : [
         "enum"
        ],
        "init" : "2"
       },
       {
        "name" : "numIntermediateContigs",
        "kind" : "variable",
        "line" : 1784,
        "char" : 14,
        "storageClass" : [
         "enum"
        ],
        "init" : "3"
       },
       {
        "name" : "maxBubbleSize",
        "kind" : "variable",
        "comment" : "Consider cyclic subgraphs of up to the size when detecting\n_bubbles_ aka. _skipping pile ups.\n",
        "line" : 1789,
        "char" : 15,
        "deco" : "h",
        "init" : "numBubblesEscapeNodes + nodePerContig * numIntermediateContigs"
       },
       {
        "name" : "maxBubbleResolverIterations",
        "kind" : "variable",
        "comment" : "Run the solver at most this number of times\n",
        "line" : 1793,
        "char" : 15,
        "deco" : "h",
        "init" : "1 + numIntermediateContigs"
       },
       {
        "name" : "maxCoverageReads",
        "kind" : "variable",
        "line" : 1808,
        "char" : 14,
        "type" : "id_t",
        "init" : "id_t.max"
       },
       {
        "name" : "hasMaxCoverageReads",
        "kind" : "function",
        "line" : 1810,
        "char" : 24,
        "type" : "const pure nothrow @property @safe bool()",
        "endline" : 1813,
        "endchar" : 9
       },
       {
        "name" : "coverageBoundsReads",
        "kind" : "variable",
        "line" : 1816,
        "char" : 17,
        "type" : "id_t[2]"
       },
       {
        "name" : "setCoverageBoundsReads",
        "kind" : "function",
        "line" : 1819,
        "char" : 14,
        "type" : "void()",
        "endline" : 1846,
        "endchar" : 9
       },
       {
        "name" : "maxCoverageSelf",
        "kind" : "variable",
        "line" : 1861,
        "char" : 14,
        "type" : "id_t",
        "init" : "4"
       },
       {
        "name" : "coverageBoundsSelf",
        "kind" : "variable",
        "line" : 1864,
        "char" : 17,
        "type" : "id_t[2]"
       },
       {
        "name" : "setCoverageBoundsSelf",
        "kind" : "function",
        "line" : 1867,
        "char" : 14,
        "type" : "void()",
        "endline" : 1873,
        "endchar" : 9
       },
       {
        "name" : "maxImproperCoverageReads",
        "kind" : "variable",
        "line" : 1888,
        "char" : 14,
        "type" : "id_t",
        "init" : "id_t.max"
       },
       {
        "name" : "hasMaxImproperCoverageReads",
        "kind" : "function",
        "line" : 1890,
        "char" : 24,
        "type" : "const pure nothrow @property @safe bool()",
        "endline" : 1893,
        "endchar" : 9
       },
       {
        "name" : "improperCoverageBoundsReads",
        "kind" : "variable",
        "line" : 1896,
        "char" : 17,
        "type" : "id_t[2]"
       },
       {
        "name" : "setImproperCoverageBoundsReads",
        "kind" : "function",
        "line" : 1899,
        "char" : 14,
        "type" : "void()",
        "endline" : 1927,
        "endchar" : 9
       },
       {
        "name" : "maxIndelBps",
        "kind" : "variable",
        "line" : 1938,
        "char" : 17,
        "type" : "coord_t",
        "init" : "1000"
       },
       {
        "name" : "maxInsertionError",
        "kind" : "variable",
        "line" : 1953,
        "char" : 16,
        "deco" : "d",
        "init" : "0.1"
       },
       {
        "name" : "maxRelativeOverlap",
        "kind" : "variable",
        "line" : 1970,
        "char" : 16,
        "deco" : "d",
        "init" : "0.3"
       },
       {
        "name" : "minAnchorLength",
        "kind" : "variable",
        "line" : 1992,
        "char" : 17,
        "type" : "coord_t",
        "init" : "500"
       },
       {
        "name" : "minCoverageReads",
        "kind" : "variable",
        "line" : 2006,
        "char" : 14,
        "type" : "id_t",
        "init" : "id_t.max"
       },
       {
        "name" : "hasMinCoverageReads",
        "kind" : "function",
        "line" : 2008,
        "char" : 24,
        "type" : "const pure nothrow @property @safe bool()",
        "endline" : 2011,
        "endchar" : 9
       },
       {
        "name" : "coverageBoundsReads",
        "kind" : "variable",
        "line" : 2014,
        "char" : 17,
        "type" : "id_t[2]"
       },
       {
        "name" : "setCoverageBoundsReads",
        "kind" : "function",
        "line" : 2017,
        "char" : 14,
        "type" : "void()",
        "endline" : 2044,
        "endchar" : 9
       },
       {
        "name" : "minExtensionLength",
        "kind" : "variable",
        "line" : 2056,
        "char" : 16,
        "type" : "size_t",
        "init" : "100"
       },
       {
        "name" : "minGapSize",
        "kind" : "variable",
        "line" : 2067,
        "char" : 17,
        "type" : "coord_t"
       },
       {
        "name" : "minIntervalSize",
        "kind" : "variable",
        "line" : 2078,
        "char" : 17,
        "type" : "coord_t"
       },
       {
        "name" : "defaultMinSpanningReads",
        "kind" : "variable",
        "line" : 2081,
        "char" : 17,
        "storageClass" : [
         "enum"
        ],
        "init" : "3"
       },
       {
        "name" : "minReadsPerPileUp",
        "kind" : "variable",
        "line" : 2092,
        "char" : 16,
        "type" : "size_t",
        "init" : "defaultMinSpanningReads"
       },
       {
        "name" : "minRelativeScore",
        "kind" : "variable",
        "line" : 2109,
        "char" : 16,
        "deco" : "d",
        "init" : "1.0"
       },
       {
        "name" : "minScore",
        "kind" : "variable",
        "line" : 2121,
        "char" : 22,
        "type" : "arithmetic_t"
       },
       {
        "name" : "hookEnsurePresenceOfMinScore",
        "kind" : "function",
        "line" : 2124,
        "char" : 14,
        "type" : "void()",
        "endline" : 2130,
        "endchar" : 9
       },
       {
        "name" : "minSpanningReads",
        "kind" : "variable",
        "line" : 2143,
        "char" : 16,
        "type" : "size_t",
        "init" : "defaultMinSpanningReads"
       },
       {
        "name" : "reportAll",
        "kind" : "variable",
        "line" : 2152,
        "char" : 20,
        "type" : "OptionFlag"
       },
       {
        "name" : "noHighlightInsertions",
        "kind" : "variable",
        "line" : 2164,
        "char" : 20,
        "type" : "OptionFlag"
       },
       {
        "name" : "noMergeExtensions",
        "kind" : "variable",
        "line" : 2173,
        "char" : 20,
        "type" : "OptionFlag"
       },
       {
        "name" : "mergeExtensions",
        "kind" : "function",
        "line" : 2175,
        "char" : 24,
        "type" : "const pure nothrow @property bool()",
        "endline" : 2178,
        "endchar" : 9
       },
       {
        "name" : "onlyFlag",
        "kind" : "variable",
        "line" : 2192,
        "char" : 18,
        "type" : "OnlyFlag"
       },
       {
        "name" : "OnlyFlag",
        "kind" : "enum",
        "line" : 2194,
        "char" : 9,
        "baseDeco" : "i",
        "members" : [
         {
          "name" : "spanning",
          "kind" : "enum member",
          "value" : "1 << 0",
          "line" : 2196,
          "char" : 13
         },
         {
          "name" : "extending",
          "kind" : "enum member",
          "value" : "1 << 1",
          "line" : 2197,
          "char" : 13
         },
         {
          "name" : "both",
          "kind" : "enum member",
          "value" : "spanning | extending",
          "line" : 2198,
          "char" : 13
         }
        ]
       },
       {
        "name" : "OnlyFlags",
        "kind" : "alias",
        "line" : 2201,
        "char" : 9,
        "type" : "BitFlags!(OnlyFlag, Yes.unsafe)"
       },
       {
        "name" : "onlyFlags",
        "kind" : "variable",
        "line" : 2203,
        "char" : 19,
        "type" : "OnlyFlags"
       },
       {
        "name" : "initOnlyFlags",
        "kind" : "function",
        "line" : 2206,
        "char" : 14,
        "type" : "pure nothrow void()",
        "endline" : 2209,
        "endchar" : 9
       },
       {
        "name" : "ploidy",
        "kind" : "variable",
        "line" : 2218,
        "char" : 14,
        "type" : "id_t"
       },
       {
        "name" : "printProgress",
        "kind" : "variable",
        "line" : 2227,
        "char" : 20,
        "type" : "OptionFlag"
       },
       {
        "name" : "printProgressEvery",
        "kind" : "variable",
        "line" : 2234,
        "char" : 14,
        "deco" : "k",
        "init" : "500"
       },
       {
        "name" : "progressFormat",
        "kind" : "variable",
        "line" : 2244,
        "char" : 30,
        "type" : "ProgressMeter.Format",
        "init" : "ProgressMeter.Format.human"
       },
       {
        "name" : "createProgressMeter",
        "kind" : "function",
        "line" : 2247,
        "char" : 23,
        "type" : "const @safe ProgressMeter()",
        "endline" : 2259,
        "endchar" : 9
       },
       {
        "name" : "properAlignmentAllowance",
        "kind" : "variable",
        "line" : 2276,
        "char" : 17,
        "type" : "coord_t"
       },
       {
        "name" : "hookEnsurePresenceOfProperAlignmentAllowance",
        "kind" : "function",
        "line" : 2279,
        "char" : 14,
        "type" : "void()",
        "endline" : 2285,
        "endchar" : 9
       },
       {
        "name" : "quiet",
        "kind" : "variable",
        "line" : 2293,
        "char" : 16,
        "type" : "OptionFlag"
       },
       {
        "name" : "readCoverage",
        "kind" : "variable",
        "line" : 2311,
        "char" : 16,
        "deco" : "d"
       },
       {
        "name" : "hasReadCoverage",
        "kind" : "function",
        "line" : 2314,
        "char" : 24,
        "type" : "const pure nothrow @property @safe bool()",
        "endline" : 2319,
        "endchar" : 9
       },
       {
        "name" : "recoverImperfectContigs",
        "kind" : "variable",
        "line" : 2328,
        "char" : 20,
        "type" : "OptionFlag"
       },
       {
        "name" : "maxImperfectContigError",
        "kind" : "variable",
        "line" : 2335,
        "char" : 16,
        "deco" : "d",
        "init" : "0.015"
       },
       {
        "name" : "recoverImperfectContigsAlignmentOptions",
        "kind" : "function",
        "line" : 2337,
        "char" : 28,
        "type" : "const @property string[]()",
        "endline" : 2350,
        "endchar" : 9
       },
       {
        "name" : "regionContext",
        "kind" : "variable",
        "line" : 2364,
        "char" : 17,
        "type" : "coord_t",
        "init" : "1000"
       },
       {
        "name" : "addRevertOption",
        "kind" : "function",
        "line" : 2374,
        "char" : 10,
        "type" : "void(string optionName)",
        "parameters" : [
         {
          "name" : "optionName",
          "type" : "string"
         }
        ],
        "endline" : 2377,
        "endchar" : 5
       },
       {
        "name" : "revertOptionNames",
        "kind" : "variable",
        "line" : 2379,
        "char" : 14,
        "type" : "string[]"
       },
       {
        "name" : "revertOptions",
        "kind" : "function",
        "line" : 2382,
        "char" : 10,
        "type" : "void()",
        "endline" : 2386,
        "endchar" : 5
       },
       {
        "name" : "revertOption",
        "kind" : "function",
        "line" : 2388,
        "char" : 10,
        "type" : "void(string optionName)",
        "parameters" : [
         {
          "name" : "optionName",
          "type" : "string"
         }
        ],
        "endline" : 2437,
        "endchar" : 5
       },
       {
        "name" : "weakCoverageWindow",
        "kind" : "variable",
        "line" : 2450,
        "char" : 17,
        "type" : "coord_t",
        "init" : "500"
       },
       {
        "name" : "assemblyGraphFile",
        "kind" : "variable",
        "line" : 2461,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "parseSkipGaps",
        "kind" : "function",
        "line" : 2477,
        "char" : 14,
        "type" : "pure void(string skipGapsString)",
        "parameters" : [
         {
          "name" : "skipGapsString",
          "type" : "string"
         }
        ],
        "endline" : 2484,
        "endchar" : 9
       },
       {
        "name" : "skipGapsFile",
        "kind" : "variable",
        "line" : 2493,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "hookReadSkipGapsFile",
        "kind" : "function",
        "line" : 2496,
        "char" : 14,
        "type" : "void()",
        "endline" : 2509,
        "endchar" : 9
       },
       {
        "name" : "parseGapSpec",
        "kind" : "function",
        "line" : 2512,
        "char" : 24,
        "storageClass" : [
         "static"
        ],
        "type" : "pure id_t[2](string gapSpec)",
        "parameters" : [
         {
          "name" : "gapSpec",
          "type" : "string"
         }
        ],
        "endline" : 2519,
        "endchar" : 9
       },
       {
        "name" : "skipGaps",
        "kind" : "variable",
        "line" : 2523,
        "char" : 19,
        "type" : "id_t[2][]"
       },
       {
        "name" : "validateSkipGaps",
        "kind" : "function",
        "line" : 2525,
        "char" : 21,
        "storageClass" : [
         "static"
        ],
        "type" : "void(id_t[2][] skipGaps, OptionsFor!command options)",
        "parameters" : [
         {
          "name" : "skipGaps",
          "type" : "id_t[2][]"
         },
         {
          "name" : "options",
          "type" : "OptionsFor!command"
         }
        ],
        "endline" : 2529,
        "endchar" : 9
       },
       {
        "name" : "validatePileUpSkipGap",
        "kind" : "function",
        "line" : 2531,
        "char" : 21,
        "storageClass" : [
         "static"
        ],
        "type" : "void(id_t[2] skipGap, OptionsFor!command options)",
        "parameters" : [
         {
          "name" : "skipGap",
          "type" : "id_t[2]"
         },
         {
          "name" : "options",
          "type" : "OptionsFor!command"
         }
        ],
        "endline" : 2549,
        "endchar" : 9
       },
       {
        "name" : "hookSortSkipGaps",
        "kind" : "function",
        "line" : 2552,
        "char" : 14,
        "type" : "void()",
        "endline" : 2559,
        "endchar" : 9
       },
       {
        "name" : "tracePointDistance",
        "kind" : "variable",
        "line" : 2574,
        "char" : 23,
        "type" : "trace_point_t"
       },
       {
        "name" : "hookGetTracePointDistance",
        "kind" : "function",
        "line" : 2577,
        "char" : 14,
        "type" : "void()",
        "endline" : 2599,
        "endchar" : 9
       },
       {
        "name" : "numThreads",
        "kind" : "variable",
        "line" : 2611,
        "char" : 14,
        "deco" : "k"
       },
       {
        "name" : "hookInitThreads",
        "kind" : "function",
        "line" : 2614,
        "char" : 14,
        "type" : "void()",
        "endline" : 2620,
        "endchar" : 9
       },
       {
        "name" : "tmpdirTemplate",
        "kind" : "variable",
        "comment" : "            Last part of the working directory name. A directory in the temp\n            directory as returned by `std.file.tmpDir` with the naming scheme will\n            be created to hold all data for the computation.\n",
        "line" : 2630,
        "char" : 14,
        "storageClass" : [
         "enum"
        ],
        "init" : "format!\"dentist-%s-XXXXXX\"(command)"
       },
       {
        "name" : "tmpdir",
        "kind" : "variable",
        "comment" : "This is a temporary directory to store all working data.\n",
        "line" : 2635,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "hookCreateTmpdir",
        "kind" : "function",
        "line" : 2638,
        "char" : 14,
        "type" : "void()",
        "endline" : 2679,
        "endchar" : 9
       },
       {
        "name" : "hookCleanTmpdir",
        "kind" : "function",
        "line" : 2682,
        "char" : 14,
        "type" : "const void()",
        "endline" : 2695,
        "endchar" : 9
       },
       {
        "name" : "requestUsage",
        "kind" : "function",
        "line" : 2700,
        "char" : 10,
        "type" : "pure void()",
        "endline" : 2703,
        "endchar" : 5
       },
       {
        "name" : "increaseVerbosity",
        "kind" : "function",
        "line" : 2711,
        "char" : 10,
        "type" : "pure void()",
        "endline" : 2714,
        "endchar" : 5
       },
       {
        "name" : "verbosity",
        "kind" : "variable",
        "line" : 2721,
        "char" : 12,
        "type" : "size_t",
        "init" : "0"
       },
       {
        "name" : "hookInitLogLevel",
        "kind" : "function",
        "line" : 2724,
        "char" : 10,
        "type" : "void()",
        "endline" : 2748,
        "endchar" : 5
       },
       {
        "name" : "weakCoverageMask",
        "kind" : "variable",
        "line" : 2762,
        "char" : 16,
        "type" : "string"
       },
       {
        "name" : "chainingOptions",
        "kind" : "function",
        "line" : 2768,
        "char" : 35,
        "type" : "const @property ChainingOptions()",
        "endline" : 2777,
        "endchar" : 9
       },
       {
        "name" : "selfAlignmentOptions",
        "kind" : "function",
        "line" : 2788,
        "char" : 28,
        "type" : "const @property string[]()",
        "endline" : 2802,
        "endchar" : 9
       },
       {
        "name" : "tandemAlignmentOptions",
        "kind" : "function",
        "line" : 2813,
        "char" : 28,
        "type" : "const @property string[]()",
        "endline" : 2824,
        "endchar" : 9
       },
       {
        "name" : "pileUpAlignmentOptions",
        "kind" : "function",
        "line" : 2834,
        "char" : 28,
        "type" : "const @property string[]()",
        "endline" : 2850,
        "endchar" : 9
       },
       {
        "name" : "pileUpDustOptions",
        "kind" : "function",
        "line" : 2852,
        "char" : 28,
        "type" : "const @property string[]()",
        "endline" : 2855,
        "endchar" : 9
       },
       {
        "name" : "flankingContigsRepeatMaskName",
        "kind" : "variable",
        "line" : 2864,
        "char" : 14,
        "storageClass" : [
         "enum"
        ],
        "init" : "\"rep\""
       },
       {
        "name" : "postConsensusAlignmentOptions",
        "kind" : "function",
        "line" : 2866,
        "char" : 28,
        "type" : "const @property string[]()",
        "endline" : 2883,
        "endchar" : 9
       },
       {
        "name" : "refVsReadsAlignmentOptions",
        "kind" : "function",
        "line" : 2891,
        "char" : 28,
        "type" : "const @property string[]()",
        "endline" : 2903,
        "endchar" : 9
       },
       {
        "name" : "AnchorSkippingPileUpsOptions",
        "kind" : "struct",
        "protection" : "public",
        "line" : 2908,
        "char" : 20,
        "members" : [
         {
          "name" : "damapperOptions",
          "kind" : "variable",
          "line" : 2910,
          "char" : 26,
          "type" : "string[]"
         },
         {
          "name" : "dbsplitOptions",
          "kind" : "variable",
          "line" : 2911,
          "char" : 26,
          "type" : "string[]"
         },
         {
          "name" : "tmpdir",
          "kind" : "variable",
          "line" : 2912,
          "char" : 24,
          "type" : "string"
         }
        ]
       },
       {
        "name" : "anchorSkippingPileUpsOptions",
        "kind" : "function",
        "line" : 2915,
        "char" : 28,
        "storageClass" : [
         "auto"
        ],
        "type" : "const @property ()",
        "endline" : 2925,
        "endchar" : 13
       },
       {
        "name" : "ConsensusOptions",
        "kind" : "struct",
        "protection" : "public",
        "line" : 2934,
        "char" : 16,
        "members" : [
         {
          "name" : "daccordOptions",
          "kind" : "variable",
          "line" : 2936,
          "char" : 22,
          "type" : "string[]"
         },
         {
          "name" : "dalignerOptions",
          "kind" : "variable",
          "line" : 2937,
          "char" : 22,
          "type" : "string[]"
         },
         {
          "name" : "dbsplitOptions",
          "kind" : "variable",
          "line" : 2938,
          "char" : 22,
          "type" : "string[]"
         },
         {
          "name" : "dbdustOptions",
          "kind" : "variable",
          "line" : 2939,
          "char" : 22,
          "type" : "string[]"
         },
         {
          "name" : "tmpdir",
          "kind" : "variable",
          "line" : 2940,
          "char" : 20,
          "type" : "string"
         },
         {
          "name" : "properAlignmentAllowance",
          "kind" : "variable",
          "line" : 2941,
          "char" : 21,
          "type" : "coord_t"
         }
        ]
       },
       {
        "name" : "daccordOptions",
        "kind" : "function",
        "line" : 2944,
        "char" : 24,
        "storageClass" : [
         "auto"
        ],
        "type" : "const @property ()",
        "endline" : 2957,
        "endchar" : 9
       },
       {
        "name" : "consensusOptions",
        "kind" : "function",
        "line" : 2960,
        "char" : 24,
        "storageClass" : [
         "auto"
        ],
        "type" : "const @property ()",
        "endline" : 2978,
        "endchar" : 9
       },
       {
        "kind" : "template",
        "line" : 2981,
        "char" : 17,
        "name" : "defaultValue",
        "parameters" : [
         {
          "name" : "property",
          "kind" : "alias"
         }
        ],
        "members" : [
         {
          "name" : "defaultValue",
          "kind" : "function",
          "line" : 2981,
          "char" : 17,
          "storageClass" : [
           "auto"
          ],
          "type" : "pure nothrow (in uint precision = 2)",
          "parameters" : [
           {
            "name" : "precision",
            "deco" : "k",
            "storageClass" : [
             "in"
            ],
            "default" : "2"
           }
          ],
          "endline" : 2991,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "numArguments",
        "kind" : "function",
        "line" : 2993,
        "char" : 17,
        "storageClass" : [
         "auto",
         "static"
        ],
        "type" : "pure nothrow ()",
        "endline" : 3012,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 3016,
    "char" : 16,
    "name" : "RevertField",
    "parameters" : [
     {
      "name" : "_fieldName",
      "kind" : "value",
      "deco" : "Aya"
     }
    ],
    "members" : [
     {
      "name" : "RevertField",
      "kind" : "struct",
      "protection" : "public",
      "line" : 3016,
      "char" : 16,
      "members" : [
       {
        "name" : "fieldName",
        "kind" : "variable",
        "line" : 3018,
        "char" : 10,
        "storageClass" : [
         "enum"
        ],
        "init" : "_fieldName"
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 3022,
    "char" : 16,
    "name" : "RevertWith",
    "parameters" : [
     {
      "name" : "_revert",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "RevertWith",
      "kind" : "struct",
      "protection" : "public",
      "line" : 3022,
      "char" : 16,
      "members" : [
       {
        "name" : "revert",
        "kind" : "alias",
        "line" : 3024,
        "char" : 5,
        "type" : "_revert"
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 3027,
    "char" : 14,
    "name" : "hasValidOptionNames",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "hasValidOptionNames",
      "kind" : "function",
      "line" : 3027,
      "char" : 14,
      "type" : "pure nothrow bool()",
      "endline" : 3044,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L3049_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 3049,
    "char" : 1,
    "endline" : 3059,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "A short summary for each command to be output underneath the usage.\n",
    "line" : 3059,
    "char" : 6,
    "name" : "commandSummary",
    "parameters" : [
     {
      "name" : "command",
      "kind" : "value",
      "deco" : "E7dentist6common8commands14DentistCommand"
     }
    ],
    "members" : [
     {
      "name" : "commandSummary",
      "kind" : "variable",
      "line" : 3059,
      "char" : 6,
      "storageClass" : [
       "enum"
      ],
      "init" : "makeCommandSummary!command"
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 3061,
    "char" : 16,
    "name" : "makeCommandSummary",
    "parameters" : [
     {
      "name" : "command",
      "kind" : "value",
      "deco" : "E7dentist6common8commands14DentistCommand"
     }
    ],
    "members" : [
     {
      "name" : "makeCommandSummary",
      "kind" : "function",
      "line" : 3061,
      "char" : 16,
      "type" : "pure @safe string()",
      "endline" : 3077,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "commandsSummary",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "A summary of all commands with a short description.\n",
    "line" : 3081,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "['A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', ' ', 'c', 'o', 'm', 'm', 'a', 'n', 'd', 's', ':', '\\x0a', 'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', '-', 'c', 'o', 'n', 'f', 'i', 'g', ' ', ' ', ' ', ' ', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', ' ', 'c', 'o', 'n', 'f', 'i', 'g', ' ', 'f', 'i', 'l', 'e', '.', '\\x0a', 'b', 'u', 'i', 'l', 'd', '-', 'p', 'a', 'r', 't', 'i', 'a', 'l', '-', 'a', 's', 's', 'e', 'm', 'b', 'l', 'y', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'B', 'u', 'i', 'l', 'd', ' ', 'a', ' ', 'p', 'a', 'r', 't', 'i', 'a', 'l', ' ', 'a', 's', 's', 'e', 'm', 'b', 'l', 'y', ' ', 'f', 'r', 'o', 'm', ' ', 'a', ' ', 'm', 'a', 's', 'k', '.', '\\x0a', 'f', 'i', 'n', 'd', '-', 'c', 'l', 'o', 's', 'a', 'b', 'l', 'e', '-', 'g', 'a', 'p', 's', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'i', 'n', 'd', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'g', 'a', 'p', 's', ' ', 'a', 'r', 'e', ' ', 'c', 'l', 'o', 's', 'a', 'b', 'l', 'e', ',', ' ', 'i', '.', 'e', '.', '\\x0a', 'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', '-', 'd', 'a', 'z', 'z', 'l', 'e', 'r', '-', 'o', 'p', 't', 'i', 'o', 'n', 's', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'O', 'u', 't', 'p', 'u', 't', 's', ' ', 'a', 'd', 'v', 'i', 'c', 'e', ' ', 'o', 'n', ' ', 'h', 'o', 'w', ' ', 't', 'o', ' ', 'c', 'a', 'l', 'l', ' ', 's', 'o', 'm', 'e', ' ', 'o', 'f', ' ', 't', 'h', 'e', ' ', 'D', 'a', 'z', 'z', 'l', 'e', 'r', ' ', 't', 'o', 'o', 'l', 's', '.', '\\x0a', 'm', 'a', 's', 'k', '-', 'r', 'e', 'p', 'e', 't', 'i', 't', 'i', 'v', 'e', '-', 'r', 'e', 'g', 'i', 'o', 'n', 's', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'M', 'a', 's', 'k', ' ', 'r', 'e', 'g', 'i', 'o', 'n', 's', ' ', 't', 'h', 'a', 't', ' ', 'h', 'a', 'v', 'e', ' ', 'a', ' ', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', ' ', 'c', 'o', 'v', 'e', 'r', 'a', 'g', 'e', ' ', 't', 'h', 'a', 't', ' ', 'i', 's', ' ', 'o', 'u', 't', ' ', 'o', 'f', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'o', 'u', 'n', 'd', 's', '.', '\\x0a', 'p', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'e', '-', 'm', 'a', 's', 'k', ' ', ' ', ' ', ' ', ' ', 'P', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'e', ' ', 'm', 'a', 's', 'k', 'e', 'd', ' ', 'r', 'e', 'g', 'i', 'o', 'n', 's', ' ', 't', 'h', 'r', 'o', 'u', 'g', 'h', ' ', 't', 'h', 'e', ' ', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'd', ' ', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', '.', '\\x0a', 'f', 'i', 'l', 't', 'e', 'r', '-', 'm', 'a', 's', 'k', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'i', 'l', 't', 'e', 'r', ' ', 'a', ' ', 'D', 'a', 'z', 'z', 'l', 'e', 'r', ' ', 'm', 'a', 's', 'k', '.', '\\x0a', 'm', 'e', 'r', 'g', 'e', '-', 'm', 'a', 's', 'k', 's', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'M', 'e', 'r', 'g', 'e', ' ', 's', 'e', 'v', 'e', 'r', 'a', 'l', ' ', 'm', 'a', 's', 'k', 's', ' ', 'i', 'n', 't', 'o', ' ', 'a', ' ', 's', 'i', 'n', 'g', 'l', 'e', ' ', 'o', 'n', 'e', ' ', 'w', 'i', 't', 'h', ' ', 'n', 'o', 'n', '-', 'o', 'v', 'e', 'r', 'l', 'a', 'p', 'p', 'i', 'n', 'g', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'n', 't', 'e', 'r', 'v', 'a', 'l', 's', '.', '\\x0a', 's', 'h', 'o', 'w', '-', 'm', 'a', 's', 'k', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'S', 'h', 'o', 'w', ' ', 'a', ' ', 's', 'h', 'o', 'r', 't', ' ', 's', 'u', 'm', 'm', 'a', 'r', 'y', ' ', 'o', 'f', ' ', 'a', ' ', 'm', 'a', 's', 'k', '.', '\\x0a', 'b', 'e', 'd', '2', 'm', 'a', 's', 'k', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'v', 'e', 'r', 't', ' ', 'a', ' ', 'B', 'E', 'D', ' ', 'f', 'i', 'l', 'e', ' ', 't', 'o', ' ', 'a', ' ', 'D', 'a', 'z', 'z', 'l', 'e', 'r', ' ', 'm', 'a', 's', 'k', '.', '\\x0a', 'c', 'h', 'a', 'i', 'n', '-', 'l', 'o', 'c', 'a', 'l', '-', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 's', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'h', 'a', 'i', 'n', ' ', 'l', 'o', 'c', 'a', 'l', ' ', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 's', '.', '\\x0a', 'c', 'o', 'l', 'l', 'e', 'c', 't', '-', 'p', 'i', 'l', 'e', '-', 'u', 'p', 's', ' ', ' ', ' ', 'B', 'u', 'i', 'l', 'd', ' ', 'a', 'n', 'd', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', ' ', 'p', 'i', 'l', 'e', ' ', 'u', 'p', 's', ' ', 'o', 'f', ' ', 'r', 'e', 'a', 'd', 's', ' ', 't', 'h', 'a', 't', ' ', 'a', 'r', 'e', ' ', 'c', 'a', 'n', 'd', 'i', 'd', 'a', 't', 'e', 's', ' ', 'f', 'o', 'r', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', 'a', 'p', ' ', 'c', 'l', 'o', 's', 'i', 'n', 'g', '.', '\\x0a', 's', 'h', 'o', 'w', '-', 'p', 'i', 'l', 'e', '-', 'u', 'p', 's', ' ', ' ', ' ', ' ', ' ', ' ', 'S', 'h', 'o', 'w', ' ', 'a', ' ', 's', 'h', 'o', 'r', 't', ' ', 's', 'u', 'm', 'm', 'a', 'r', 'y', ' ', 'o', 'f', ' ', 't', 'h', 'e', ' ', 'p', 'i', 'l', 'e', ' ', 'u', 'p', 's', '.', '\\x0a', 'p', 'r', 'o', 'c', 'e', 's', 's', '-', 'p', 'i', 'l', 'e', '-', 'u', 'p', 's', ' ', ' ', ' ', 'F', 'i', 'l', 't', 'e', 'r', ' ', 'a', 'n', 'd', ' ', 'p', 'r', 'o', 'c', 'e', 's', 's', ' ', 'p', 'i', 'l', 'e', ' ', 'u', 'p', 's', ' ', 'i', 'n', 't', 'o', ' ', 'i', 'n', 's', 'e', 'r', 't', 'i', 'o', 'n', 's', ' ', 'f', 'o', 'r', ' ', 'g', 'a', 'p', ' ', 'c', 'l', 'o', 's', 'i', 'n', 'g', '.', '\\x0a', 's', 'h', 'o', 'w', '-', 'i', 'n', 's', 'e', 'r', 't', 'i', 'o', 'n', 's', ' ', ' ', ' ', ' ', 'S', 'h', 'o', 'w', ' ', 'a', ' ', 's', 'h', 'o', 'r', 't', ' ', 's', 'u', 'm', 'm', 'a', 'r', 'y', ' ', 'o', 'f', ' ', 't', 'h', 'e', ' ', 'i', 'n', 's', 'e', 'r', 't', 'i', 'o', 'n', 's', '.', '\\x0a', 'm', 'e', 'r', 'g', 'e', '-', 'i', 'n', 's', 'e', 'r', 't', 'i', 'o', 'n', 's', ' ', ' ', ' ', 'M', 'e', 'r', 'g', 'e', ' ', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'e', ' ', 'i', 'n', 's', 'e', 'r', 't', 'i', 'o', 'n', 's', ' ', 'f', 'i', 'l', 'e', 's', ' ', 'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'd', ' ', 'b', 'y', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '`', 'p', 'r', 'o', 'c', 'e', 's', 's', '-', 'p', 'i', 'l', 'e', '-', 'u', 'p', 's', '`', ' ', 'i', 'n', 't', 'o', ' ', 'a', ' ', 's', 'i', 'n', 'g', 'l', 'e', ' ', 'o', 'n', 'e', '.', '\\x0a', 'o', 'u', 't', 'p', 'u', 't', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'G', 'e', 'n', 'e', 'r', 'a', 't', 'e', ' ', 't', 'h', 'e', ' ', 'o', 'u', 't', 'p', 'u', 't', ' ', 'a', 's', 's', 'e', 'm', 'b', 'l', 'y', ' ', 'b', 'y', ' ', 'c', 'l', 'o', 's', 'i', 'n', 'g', ' ', 'g', 'a', 'p', 's', '.', '\\x0a', 't', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '-', 'c', 'o', 'o', 'r', 'd', 's', ' ', ' ', ' ', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', ' ', 'c', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 's', ' ', 'o', 'f', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', 'a', 's', 's', 'e', 'm', 'b', 'l', 'y', ' ', 't', 'o', ' ', 'c', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 's', ' ', 'o', 'f', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'n', 'p', 'u', 't', ' ', 'a', 's', 's', 'e', 'm', 'b', 'l', 'y', '.', '\\x0a', 'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', '-', 'r', 'e', 'g', 'i', 'o', 'n', 's', ' ', ' ', ' ', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', 's', ' ', 't', 'h', 'a', 't', ' ', 'g', 'i', 'v', 'e', 'n', ' ', 'r', 'e', 'g', 'i', 'o', 'n', 's', ' ', 'l', 'o', 'o', 'k', ' ', 'p', 'r', 'o', 'p', 'e', 'r', ',', ' ', 'i', 'n', ' ', 'p', 'a', 'r', 't', 'i', 'c', 'u', 'l', 'a', 'r', ',', ' ', 't', 'h', 'i', 's', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'a', 'y', ' ', 'b', 'e', ' ', 'u', 's', 'e', 'd', ' ', 't', 'o', ' ', 'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', ' ', 'c', 'l', 'o', 's', 'e', 'd', ' ', 'g', 'a', 'p', 's', '.', '\\x0a', 'c', 'h', 'e', 'c', 'k', '-', 'r', 'e', 's', 'u', 'l', 't', 's', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'h', 'e', 'c', 'k', ' ', 'r', 'e', 's', 'u', 'l', 't', 's', ' ', 'o', 'f', ' ', 's', 'o', 'm', 'e', ' ', 'g', 'a', 'p', ' ', 'c', 'l', 'o', 's', 'i', 'n', 'g', ' ', 'p', 'r', 'o', 'c', 'e', 'd', 'u', 'r', 'e', '.', '\\x0a', 'c', 'h', 'e', 'c', 'k', '-', 's', 'c', 'a', 'f', 'f', 'o', 'l', 'd', 'i', 'n', 'g', '\\x0a', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'h', 'e', 'c', 'k', ' ', 'r', 'e', 's', 'u', 'l', 't', 's', ' ', 'o', 'f', ' ', 's', 'o', 'm', 'e', ' ', 's', 'c', 'a', 'f', 'f', 'o', 'l', 'd', 'i', 'n', 'g', ' ', '+', ' ', 'g', 'a', 'p', ' ', 'c', 'l', 'o', 's', 'i', 'n', 'g', ' ', 'p', 'r', 'o', 'c', 'e', 'd', 'u', 'r', 'e', '.', '\\x0a', '\\x0a', 'U', 's', 'e', ' ', '`', 'd', 'e', 'n', 't', 'i', 's', 't', ' ', '<', 'c', 'o', 'm', 'm', 'a', 'n', 'd', '>', ' ', '-', '-', 'h', 'e', 'l', 'p', '`', ' ', 'f', 'o', 'r', ' ', 'm', 'o', 'r', 'e', ' ', 'i', 'n', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', ' ', 'a', 'b', 'o', 'u', 't', ' ', 'a', ' ', 'c', 'o', 'm', 'm', 'a', 'n', 'd', '.']"
   },
   {
    "name" : "makeCommandsSummary",
    "kind" : "function",
    "protection" : "private",
    "line" : 3083,
    "char" : 16,
    "deco" : "FNaNfZAya",
    "endline" : 3112,
    "endchar" : 1
   },
   {
    "name" : "BaseOptions",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "This describes the basic, ie. non-command-specific, options of DENTIST.\nSee source code or run `dentist --help` for a description of the fields.\n",
    "line" : 3117,
    "char" : 1,
    "members" : [
     {
      "name" : "listCommands",
      "kind" : "variable",
      "protection" : "public",
      "line" : 3121,
      "char" : 16,
      "deco" : "E4darg10OptionFlag",
      "offset" : 0
     },
     {
      "name" : "listDependencies",
      "kind" : "variable",
      "protection" : "public",
      "line" : 3128,
      "char" : 16,
      "deco" : "E4darg10OptionFlag",
      "offset" : 1
     },
     {
      "name" : "help",
      "kind" : "variable",
      "protection" : "public",
      "line" : 3132,
      "char" : 16,
      "deco" : "E4darg10OptionFlag",
      "offset" : 2
     },
     {
      "name" : "listOptions",
      "kind" : "variable",
      "protection" : "public",
      "line" : 3136,
      "char" : 16,
      "deco" : "E4darg10OptionFlag",
      "offset" : 3
     },
     {
      "name" : "requestUsage",
      "kind" : "function",
      "protection" : "public",
      "line" : 3140,
      "char" : 10,
      "deco" : "FNaZv",
      "endline" : 3143,
      "endchar" : 5
     },
     {
      "name" : "version_",
      "kind" : "variable",
      "protection" : "public",
      "line" : 3147,
      "char" : 16,
      "deco" : "E4darg10OptionFlag",
      "offset" : 4
     },
     {
      "name" : "command",
      "kind" : "variable",
      "protection" : "public",
      "line" : 3154,
      "char" : 20,
      "deco" : "E7dentist6common8commands14DentistCommand",
      "offset" : 8
     },
     {
      "name" : "commandOptions",
      "kind" : "variable",
      "protection" : "public",
      "line" : 3158,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 16
     }
    ]
   },
   {
    "name" : "CLIException",
    "kind" : "class",
    "protection" : "protected",
    "comment" : "Used to signal errors during the processing of CLI arguments.\n",
    "line" : 3164,
    "char" : 5,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "protection" : "public",
      "comment" : "\n",
      "line" : 3167,
      "char" : 9
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "Parse args of `command` and execute it.\n",
    "line" : 3172,
    "char" : 16,
    "name" : "runCommand",
    "parameters" : [
     {
      "name" : "command",
      "kind" : "value",
      "deco" : "E7dentist6common8commands14DentistCommand"
     }
    ],
    "members" : [
     {
      "name" : "runCommand",
      "kind" : "function",
      "line" : 3172,
      "char" : 16,
      "type" : "ReturnCode(in string[] args)",
      "parameters" : [
       {
        "name" : "args",
        "type" : "string[]",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 3232,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "line" : 3234,
    "char" : 10,
    "name" : "getUDA",
    "parameters" : [
     {
      "name" : "symbol",
      "kind" : "alias"
     },
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "getUDA",
      "kind" : "variable",
      "line" : 3234,
      "char" : 10,
      "storageClass" : [
       "enum"
      ],
      "init" : "getUDAs!(symbol, T)[0]"
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "Decorate options with validations. Validations shall throw an\nexception if the option value is considered invalid.\n",
    "line" : 3238,
    "char" : 5,
    "name" : "Validate",
    "parameters" : [
     {
      "name" : "_validate",
      "kind" : "alias"
     },
     {
      "name" : "isEnabled",
      "kind" : "value",
      "deco" : "b",
      "defaultValue" : "true"
     },
     {
      "name" : "file",
      "kind" : "value",
      "deco" : "Aya",
      "defaultValue" : "__FILE__"
     },
     {
      "name" : "line",
      "kind" : "value",
      "deco" : "m",
      "defaultValue" : "__LINE__"
     }
    ],
    "members" : [
     {
      "name" : "Validate",
      "kind" : "struct",
      "protection" : "public",
      "line" : 3238,
      "char" : 5,
      "members" : [
       {
        "name" : "validate",
        "kind" : "alias",
        "line" : 3245,
        "char" : 13,
        "type" : "_validate"
       },
       {
        "kind" : "template",
        "line" : 3249,
        "char" : 21,
        "name" : "__truth",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "type"
         }
        ],
        "members" : [
         {
          "name" : "__truth",
          "kind" : "function",
          "line" : 3249,
          "char" : 21,
          "type" : "bool(T)",
          "parameters" : [
           {
            "type" : "T"
           }
          ],
          "endline" : 3249,
          "endchar" : 50
         }
        ]
       },
       {
        "name" : "sourceLocation",
        "kind" : "variable",
        "line" : 3251,
        "char" : 14,
        "storageClass" : [
         "enum"
        ],
        "init" : "format!\"%s:%d\"(file, line)"
       }
      ]
     }
    ]
   },
   {
    "name" : "Priority",
    "kind" : "enum",
    "protection" : "protected",
    "comment" : "Used to determine execution order of `PreValidate`, `PostValidate` and\n`CleanUp` hooks.\n",
    "line" : 3256,
    "char" : 5,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "low",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 3258,
      "char" : 9
     },
     {
      "name" : "medium",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 3259,
      "char" : 9
     },
     {
      "name" : "high",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 3260,
      "char" : 9
     }
    ]
   },
   {
    "name" : "PreValidate",
    "kind" : "struct",
    "protection" : "protected",
    "comment" : "Mark method as hook that is executed before validations.\n",
    "line" : 3264,
    "char" : 5,
    "members" : [
     {
      "name" : "priority",
      "kind" : "variable",
      "protection" : "public",
      "line" : 3265,
      "char" : 18,
      "deco" : "E7dentist11commandline8Priority",
      "offset" : 0
     }
    ]
   },
   {
    "name" : "PostValidate",
    "kind" : "struct",
    "protection" : "protected",
    "comment" : "Mark method as hook that is executed after validations.\n",
    "line" : 3269,
    "char" : 5,
    "members" : [
     {
      "name" : "priority",
      "kind" : "variable",
      "protection" : "public",
      "line" : 3270,
      "char" : 18,
      "deco" : "E7dentist11commandline8Priority",
      "offset" : 0
     }
    ]
   },
   {
    "name" : "CleanUp",
    "kind" : "struct",
    "protection" : "protected",
    "comment" : "Mark method as hook that is executed before termination of the\nprogram.\n",
    "line" : 3275,
    "char" : 5,
    "members" : [
     {
      "name" : "priority",
      "kind" : "variable",
      "protection" : "public",
      "line" : 3276,
      "char" : 18,
      "deco" : "E7dentist11commandline8Priority",
      "offset" : 0
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "line" : 3279,
    "char" : 5,
    "name" : "cmpPriority",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "kind" : "template",
      "line" : 3281,
      "char" : 14,
      "name" : "cmpPriority",
      "parameters" : [
       {
        "name" : "a",
        "kind" : "alias"
       },
       {
        "name" : "b",
        "kind" : "alias"
       }
      ],
      "members" : [
       {
        "name" : "cmpPriority",
        "kind" : "variable",
        "line" : 3281,
        "char" : 14,
        "storageClass" : [
         "enum"
        ],
        "init" : "getUDA!(a, T).priority > getUDA!(b, T).priority"
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L3284_C5",
    "kind" : "function",
    "protection" : "protected",
    "line" : 3284,
    "char" : 5,
    "endline" : 3317,
    "endchar" : 5
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "Implementation of validations and hooks for options processing.\n\nSee_also: `Validate`, `Priority`, `PreValidate`, `PostValidate`\n",
    "line" : 3317,
    "char" : 13,
    "name" : "processOptions",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "processOptions",
      "kind" : "function",
      "line" : 3317,
      "char" : 13,
      "type" : "Options(Options options)",
      "parameters" : [
       {
        "name" : "options",
        "type" : "Options"
       }
      ],
      "endline" : 3390,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "__unittest_L3392_C5",
    "kind" : "function",
    "protection" : "protected",
    "line" : 3392,
    "char" : 5,
    "endline" : 3443,
    "endchar" : 5
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "Run all `CleanUp` hooks of `options`. Use with `scope` statement:\n\n---\nscope(exit)\ncleanUp(options);\n---\n",
    "line" : 3443,
    "char" : 13,
    "name" : "cleanUp",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "cleanUp",
      "kind" : "function",
      "line" : 3443,
      "char" : 13,
      "type" : "Options(Options options)",
      "parameters" : [
       {
        "name" : "options",
        "type" : "Options"
       }
      ],
      "endline" : 3456,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "__unittest_L3458_C5",
    "kind" : "function",
    "protection" : "protected",
    "line" : 3458,
    "char" : 5,
    "endline" : 3495,
    "endchar" : 5
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "Parse integer range of form `from..to`. Result is written into `dest`\nor returned.\n",
    "line" : 3495,
    "char" : 10,
    "name" : "parseRange",
    "parameters" : [
     {
      "name" : "dest",
      "kind" : "alias"
     },
     {
      "name" : "msg",
      "kind" : "value",
      "deco" : "Aya",
      "defaultValue" : "\"ill-formatted range\""
     }
    ],
    "constraint" : "isStaticArray!(typeof(dest)) && (dest.length == 2)",
    "members" : [
     {
      "name" : "parseRange",
      "kind" : "function",
      "line" : 3495,
      "char" : 10,
      "type" : "pure void(in string rangeString)",
      "parameters" : [
       {
        "name" : "rangeString",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 3506,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "ditto\n",
    "line" : 3509,
    "char" : 14,
    "name" : "parseRange",
    "parameters" : [
     {
      "name" : "DestType",
      "kind" : "type"
     },
     {
      "name" : "msg",
      "kind" : "value",
      "deco" : "Aya",
      "defaultValue" : "\"ill-formatted range\""
     }
    ],
    "constraint" : "isStaticArray!DestType && (DestType.init.length == 2)",
    "members" : [
     {
      "name" : "parseRange",
      "kind" : "function",
      "line" : 3509,
      "char" : 14,
      "type" : "pure DestType(in string rangeString)",
      "parameters" : [
       {
        "name" : "rangeString",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 3524,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "validate",
    "kind" : "alias",
    "protection" : "protected",
    "comment" : "Throw an exception unless the condition is met.\n\nThrows: `CLIException` if validation fails.\nSee_also: `std.exception.enforce`\n",
    "line" : 3531,
    "char" : 5,
    "originalType" : "enforce!CLIException"
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "Validate `value > 0` or\n",
    "line" : 3535,
    "char" : 10,
    "name" : "validatePositive",
    "parameters" : [
     {
      "name" : "option",
      "kind" : "value",
      "deco" : "Aya"
     },
     {
      "name" : "V",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "validatePositive",
      "kind" : "function",
      "line" : 3535,
      "char" : 10,
      "type" : "void(V value)",
      "parameters" : [
       {
        "name" : "value",
        "type" : "V"
       }
      ],
      "endline" : 3541,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "Validate that files exist.\n",
    "line" : 3545,
    "char" : 10,
    "name" : "validateFilesExist",
    "parameters" : [
     {
      "name" : "msg",
      "kind" : "value",
      "deco" : "Aya",
      "defaultValue" : "null"
     }
    ],
    "members" : [
     {
      "name" : "validateFilesExist",
      "kind" : "function",
      "line" : 3545,
      "char" : 10,
      "type" : "void(in string[] files)",
      "parameters" : [
       {
        "name" : "files",
        "type" : "string[]",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 3554,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "ditto\n",
    "line" : 3557,
    "char" : 10,
    "name" : "validateFileExists",
    "parameters" : [
     {
      "name" : "msg",
      "kind" : "value",
      "deco" : "Aya",
      "defaultValue" : "\"cannot open file `%s`\""
     }
    ],
    "members" : [
     {
      "name" : "validateFileExists",
      "kind" : "function",
      "line" : 3557,
      "char" : 10,
      "type" : "void(in string file)",
      "parameters" : [
       {
        "name" : "file",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 3560,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 3563,
    "char" : 13,
    "name" : "typeOf",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "typeOf",
      "kind" : "alias",
      "line" : 3563,
      "char" : 13,
      "type" : "typeof(T)"
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "Validate `file` ends with one of the given `extensions`.\n",
    "line" : 3567,
    "char" : 10,
    "name" : "validateFileExtension",
    "parameters" : [
     {
      "name" : "extensions",
      "kind" : "tuple"
     }
    ],
    "constraint" : "allSatisfy!(isSomeString, staticMap!(typeOf, extensions))",
    "members" : [
     {
      "name" : "validateFileExtension",
      "kind" : "function",
      "line" : 3567,
      "char" : 10,
      "type" : "void(in string file, string msg = \"expected %-(%s or %) but got %s\")",
      "parameters" : [
       {
        "name" : "file",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "msg",
        "type" : "string",
        "default" : "\"expected %-(%s or %) but got %s\""
       }
      ],
      "endline" : 3577,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "Validate `dbFile` is the stub of a Dazzler DB or DAM.\n",
    "line" : 3581,
    "char" : 10,
    "name" : "validateDB",
    "parameters" : [
     {
      "name" : "extension",
      "kind" : "value",
      "deco" : "Aya",
      "defaultValue" : "null"
     }
    ],
    "constraint" : "extension is null || extension.among(\".dam\", \".db\")",
    "members" : [
     {
      "name" : "validateDB",
      "kind" : "function",
      "line" : 3581,
      "char" : 10,
      "type" : "void(in string dbFile)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 3596,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "validateLasFile",
    "kind" : "function",
    "protection" : "protected",
    "comment" : "Validate `lasFile` looks like a valid LAS file and is not empty unless\n`allowEmpty`.\n",
    "line" : 3601,
    "char" : 10,
    "deco" : "FIAyaIE3std8typecons__T4FlagVAyaa10_616c6c6f77456d707479ZQBiZv",
    "originalType" : "void(in string lasFile, in Flag!\"allowEmpty\" allowEmpty = No.allowEmpty)",
    "parameters" : [
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "allowEmpty",
      "deco" : "xE3std8typecons__T4FlagVAyaa10_616c6c6f77456d707479ZQBi",
      "storageClass" : [
       "in"
      ],
      "default" : "Flag.no"
     }
    ],
    "endline" : 3614,
    "endchar" : 5
   },
   {
    "name" : "validateInputMasks",
    "kind" : "function",
    "protection" : "protected",
    "comment" : "Validate hidden mask files exist.\n",
    "line" : 3618,
    "char" : 10,
    "deco" : "FIAyaIAQfE3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBiZv",
    "originalType" : "void(in string dbFile, in string[] masks, Flag!\"allowBlock\" allowBlock = No.allowBlock)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "masks",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "allowBlock",
      "deco" : "E3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBi",
      "default" : "Flag.no"
     }
    ],
    "endline" : 3626,
    "endchar" : 5
   },
   {
    "name" : "validateInputMask",
    "kind" : "function",
    "protection" : "protected",
    "comment" : "ditto\n",
    "line" : 3629,
    "char" : 10,
    "deco" : "FIAyaIQeE3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBiZv",
    "originalType" : "void(in string dbFile, in string mask, Flag!\"allowBlock\" allowBlock = No.allowBlock)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "mask",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "allowBlock",
      "deco" : "E3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBi",
      "default" : "Flag.no"
     }
    ],
    "endline" : 3637,
    "endchar" : 5
   },
   {
    "name" : "validateOutputMask",
    "kind" : "function",
    "protection" : "protected",
    "comment" : "Validate hidden mask files can be opened for writing.\n",
    "line" : 3641,
    "char" : 10,
    "deco" : "FIAyaIQeE3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBiZv",
    "originalType" : "void(in string dbFile, in string maskDestination, Flag!\"allowBlock\" allowBlock = No.allowBlock)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "maskDestination",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "allowBlock",
      "deco" : "E3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBi",
      "default" : "Flag.no"
     }
    ],
    "endline" : 3649,
    "endchar" : 5
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "Validate file can be opened for writing.\n",
    "line" : 3653,
    "char" : 10,
    "name" : "validateFileWritable",
    "parameters" : [
     {
      "name" : "msg",
      "kind" : "value",
      "deco" : "Aya",
      "defaultValue" : "\"cannot open file `%s` for writing: %s\""
     }
    ],
    "members" : [
     {
      "name" : "validateFileWritable",
      "kind" : "function",
      "line" : 3653,
      "char" : 10,
      "type" : "void(string fileName)",
      "parameters" : [
       {
        "name" : "fileName",
        "type" : "string"
       }
      ],
      "endline" : 3681,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "validateCoordStrings",
    "kind" : "function",
    "protection" : "protected",
    "comment" : "Validate `coordString` has the expected format.\n\nSee_also: `parseCoordString`\n",
    "line" : 3687,
    "char" : 10,
    "deco" : "FAAyaZv",
    "parameters" : [
     {
      "name" : "coordStrings",
      "deco" : "AAya"
     }
    ],
    "endline" : 3691,
    "endchar" : 5
   },
   {
    "name" : "parseCoordString",
    "kind" : "function",
    "protection" : "protected",
    "comment" : "Parse a string of form `[scaffold/<scaff>/][contig/<contig>/]<coord>`\ninto an `OutputCoordinate`.\n\nThrows: `CLIException` if the string is ill-formatted or one of\n<scaff>, <contig> or <coord> is less than or equal to zero.\n",
    "line" : 3699,
    "char" : 22,
    "deco" : "FAyaZS7dentist6common16OutputCoordinate",
    "parameters" : [
     {
      "name" : "coordString",
      "deco" : "Aya"
     }
    ],
    "endline" : 3730,
    "endchar" : 5
   },
   {
    "name" : "__unittest_L3732_C5",
    "kind" : "function",
    "protection" : "protected",
    "line" : 3732,
    "char" : 5,
    "endline" : 3779,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.commands.bed2mask",
  "kind" : "module",
  "file" : "source/dentist/commands/bed2mask.d",
  "comment" : "    The `bed2mask` command creates a Dazzler mask from a BED file.\n\n    Command_Summary:\n\n    ---\n    Convert a BED file to a Dazzler mask. Implements 'data comments' -- a\n    special feature for DENTIST.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 18,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Convert a BED file to a Dazzler mask. Implements 'data comments' -- a\\x0a    special feature for DENTIST.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ReferenceInterval"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "coord_t",
     "id_t"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 28,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 29,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ContigSegment",
     "dazzExtra",
     "getScaffoldStructure",
     "writeDazzExtra",
     "writeMask"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 35,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 36,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "chunkBy",
     "filter",
     "joiner",
     "min",
     "map",
     "max"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 43,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array",
     "split"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 46,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ConvException",
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 49,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enforce"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 50,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 51,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "chain",
     "enumerate",
     "only",
     "tee"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 56,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.regex",
    "kind" : "import",
    "line" : 57,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ctRegex",
     "matchFirst"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 60,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "File"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 61,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Tuple"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 62,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    }
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `bed2mask` command.\n",
    "line" : 66,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi9ZQCa",
    "originalType" : "OptionsFor!(DentistCommand.bed2mask)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `bed2mask` command with `options`.\n",
    "line" : 70,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi9ZQCaZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi9ZQCa",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 87,
    "endchar" : 1
   },
   {
    "name" : "getContigsByScaffold",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns an associative array containing an array of `ContigSegment`s for\neach scaffold identified by its FASTA header (without leading `>`).\n",
    "line" : 92,
    "char" : 25,
    "deco" : "FAyaZHQfAS7dentist7dazzler13ContigSegment",
    "parameters" : [
     {
      "name" : "refDb",
      "deco" : "Aya"
     }
    ],
    "endline" : 105,
    "endchar" : 1
   },
   {
    "name" : "AugmentedReferenceInterval",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "`ReferenceInterval` with optional supplementary data.\n\nSee_also: `parseDataComment`\n",
    "line" : 111,
    "char" : 1,
    "deco" : "S3std8typecons__T5TupleTS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalVQBva8_696e74657276616cTAkVQCva9_636f6e746967496473TQBcVQDya7_72656164496473ZQGk",
    "originalType" : "Tuple!(ReferenceInterval, \"interval\", id_t[], \"contigIds\", id_t[], \"readIds\")"
   },
   {
    "name" : "readBedFile",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Main procedure that converts BED entries into an array of\n`AugmentedReferenceInterval`s. The returned intervals have Dazzler\ncoordinates and contain data from the comment column if\n`parseDataComments`.\n\nParams:\nbedFile = `File` that contains the BED data.\nbedFileName = file name that is displayed in error messages\ncontigsByScaffold = index of Dazzler DB (see `getContigsByScaffold`)\nparseDataComments = expected 4th column in BED to be a data comment if true.\nSee_also: `getContigsByScaffold`, `parseDataComment`\n",
    "line" : 129,
    "char" : 30,
    "deco" : "FS3std5stdio4FileAyaHQeAS7dentist7dazzler13ContigSegmentbZASQCg8typecons__T5TupleTSQCg4util6region__T6RegionTmTmVQDsa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalVQFna8_696e74657276616cTAkVQGna9_636f6e746967496473TQBcVQHqa7_72656164496473ZQGf",
    "originalType" : "AugmentedReferenceInterval[](File bedFile, string bedFileName, ContigSegment[][string] contigsByScaffold, bool parseDataComments)",
    "parameters" : [
     {
      "name" : "bedFile",
      "deco" : "S3std5stdio4File"
     },
     {
      "name" : "bedFileName",
      "deco" : "Aya"
     },
     {
      "name" : "contigsByScaffold",
      "deco" : "HAyaAS7dentist7dazzler13ContigSegment"
     },
     {
      "name" : "parseDataComments",
      "deco" : "b"
     }
    ],
    "endline" : 182,
    "endchar" : 1
   },
   {
    "name" : "getOverlappingContigs",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Find contigs that overlap with the interval `[begin, end]` on `scaffold`.\n\nSee_also: `getContigsByScaffold`\n",
    "line" : 188,
    "char" : 17,
    "deco" : "FMHAyaAS7dentist7dazzler13ContigSegmentMQBlkkZQBo",
    "originalType" : "ContigSegment[](scope ContigSegment[][string] contigsByScaffold, scope string scaffoldName, coord_t begin, coord_t end)",
    "parameters" : [
     {
      "name" : "contigsByScaffold",
      "deco" : "HAyaAS7dentist7dazzler13ContigSegment",
      "storageClass" : [
       "scope"
      ]
     },
     {
      "name" : "scaffoldName",
      "deco" : "Aya",
      "storageClass" : [
       "scope"
      ]
     },
     {
      "name" : "begin",
      "deco" : "k"
     },
     {
      "name" : "end",
      "deco" : "k"
     }
    ],
    "endline" : 203,
    "endchar" : 1
   },
   {
    "name" : "parseDataComment",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Parse data from `comment` into `contigIds` and `readIds`, respectively.\nIf multiple parts of the same type are given later parts overwrite\nprevious parts.\n\nGrammar:\n---\n<data-comment>   ::== <part> | <part> \"|\" <data-comment>\n<part>           ::== <contigs-part> | <reads-part>\n<contigs-part>   ::== \"contigs-\" <id> \"-\" <id>\n<reads-part>     ::== \"reads\" <id-list>\n<id-list>        ::== \"-\" <id> | \"-\" <id> <id-list>\n<id>             ::== <positive-digit> | <positive-digit> <digits>\n<digits>         ::== <digit> | <digit> <digits>\n<positive-digit> ::== \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n<digit>          ::== \"0\" | <positive-digit>\n---\n\nParams:\ncomment = comment column (4th) from BED file\nfilename = filename to report in errors\nlineNumber = line number to report in errors\ncontigIds = destination for contig IDs\nreadIds = destination for read IDs\n",
    "line" : 229,
    "char" : 6,
    "deco" : "FxAaAyamKAkKQdZv",
    "originalType" : "void(const char[] comment, string filename, size_t lineNumber, ref id_t[] contigIds, ref id_t[] readIds)",
    "parameters" : [
     {
      "name" : "comment",
      "deco" : "xAa"
     },
     {
      "name" : "filename",
      "deco" : "Aya"
     },
     {
      "name" : "lineNumber",
      "deco" : "m"
     },
     {
      "name" : "contigIds",
      "deco" : "Ak",
      "storageClass" : [
       "ref"
      ]
     },
     {
      "name" : "readIds",
      "deco" : "Ak",
      "storageClass" : [
       "ref"
      ]
     }
    ],
    "endline" : 287,
    "endchar" : 1
   },
   {
    "name" : "writeDazzlerMask",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Create Dazzler mask of intervals in `augmentedMask` adding extra tracks\nif `hasDataComments` is true.\n\nOverwrites existing mask without asking.\n\nParams:\nrefDb = Dazzler DB for which the track is created\nmaskName = name of the mask\naugmentedMask = mask data\nhasDataComments = create mask track extras for contig and read IDs\n\nSee_also: `dentist.dazzler.writeMask`, `dentist.dazzler.dazzExtra`,\n`dentist.dazzler.writeDazzExtra`\n",
    "line" : 303,
    "char" : 6,
    "deco" : "FAyaQdAS3std8typecons__T5TupleTS7dentist4util6region__T6RegionTmTmVQCoa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalVQEja8_696e74657276616cTAkVQFja9_636f6e746967496473TQBcVQGma7_72656164496473ZQGkbZv",
    "originalType" : "void(string refDb, string maskName, AugmentedReferenceInterval[] augmentedMask, bool hasDataComments)",
    "parameters" : [
     {
      "name" : "refDb",
      "deco" : "Aya"
     },
     {
      "name" : "maskName",
      "deco" : "Aya"
     },
     {
      "name" : "augmentedMask",
      "deco" : "AS3std8typecons__T5TupleTS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalVQBva8_696e74657276616cTAkVQCva9_636f6e746967496473TQBcVQDya7_72656164496473ZQGk"
     },
     {
      "name" : "hasDataComments",
      "deco" : "b"
     }
    ],
    "endline" : 333,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.commands.buildPartialAssembly",
  "kind" : "module",
  "file" : "source/dentist/commands/buildPartialAssembly.d",
  "comment" : "    This is the `buildPartialAssembly` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Build a partial assembly from a mask.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 17,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"Build a partial assembly from a mask.\""
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 19,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isTesting"
    ]
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ReferenceInterval",
     "ReferenceRegion"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 27,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "id_t"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 28,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "TestingCommand"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 29,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "getNumContigs",
     "getFastaSequence",
     "readMask"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 33,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.range",
    "kind" : "import",
    "line" : 34,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "wrapLines"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 35,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "copy"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 36,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assumeSorted",
     "chain",
     "only",
     "repeat",
     "slide",
     "takeExactly"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 44,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "File",
     "stdout"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 45,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "No"
    ]
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `buildPartialAssembly` command.\n",
    "line" : 49,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi1ZQCa",
    "originalType" : "OptionsFor!(TestingCommand.buildPartialAssembly)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `buildPartialAssembly` command with `options`.\n",
    "line" : 53,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi1ZQCaZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi1ZQCa",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 58,
    "endchar" : 1
   },
   {
    "name" : "Translocator",
    "kind" : "struct",
    "protection" : "private",
    "line" : 60,
    "char" : 9,
    "members" : [
     {
      "name" : "FastaWriter",
      "kind" : "alias",
      "protection" : "public",
      "line" : 62,
      "char" : 5,
      "deco" : "C7dentist4util5range__T13WrapLinesImplTS3std5stdio4File17LockingTextWriterZQCa",
      "originalType" : "typeof(wrapLines(stdout.lockingTextWriter, 0))"
     },
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "public",
      "line" : 64,
      "char" : 20,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi1ZQCa",
      "originalType" : "const(Options)",
      "offset" : 0
     },
     {
      "name" : "mappedRegions",
      "kind" : "variable",
      "protection" : "public",
      "line" : 65,
      "char" : 21,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "ReferenceRegion",
      "offset" : 120
     },
     {
      "name" : "resultFile",
      "kind" : "variable",
      "protection" : "public",
      "line" : 66,
      "char" : 10,
      "deco" : "S3std5stdio4File",
      "offset" : 136
     },
     {
      "name" : "writer",
      "kind" : "variable",
      "protection" : "public",
      "line" : 67,
      "char" : 17,
      "deco" : "C7dentist4util5range__T13WrapLinesImplTS3std5stdio4File17LockingTextWriterZQCa",
      "originalType" : "FastaWriter",
      "offset" : 160
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 69,
      "char" : 5,
      "deco" : "FNcIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi1ZQCaZSQDdQBk20buildPartialAssembly12Translocator",
      "originalType" : "ref (in Options options)",
      "parameters" : [
       {
        "name" : "options",
        "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi1ZQCa",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 76,
      "endchar" : 5
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 78,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 87,
      "endchar" : 5
     },
     {
      "name" : "writeOutputAssembly",
      "kind" : "function",
      "protection" : "protected",
      "line" : 89,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 127,
      "endchar" : 5
     },
     {
      "name" : "getScaffoldHeader",
      "kind" : "function",
      "protection" : "protected",
      "line" : 129,
      "char" : 29,
      "storageClass" : [
       "static"
      ],
      "deco" : "FImZAya",
      "originalType" : "string(in size_t scaffoldId)",
      "parameters" : [
       {
        "name" : "scaffoldId",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 132,
      "endchar" : 5
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 60,
      "char" : 9,
      "deco" : "FNeZv"
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.commands.chainLocalAlignments",
  "kind" : "module",
  "file" : "source/dentist/commands/chainLocalAlignments.d",
  "comment" : "    This is the `chainLocalAlignments` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Chain local alignments. Right now this produces just the single\n    best chain per combination of A-read and B-read.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 18,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Chain local alignments. Right now this produces just the single\\x0a    best chain per combination of A-read and B-read.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AlignmentChain",
     "ChainingOptions",
     "chainLocalAlignments"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 28,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 29,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AlignmentHeader",
     "BufferMode",
     "getFlatLocalAlignments",
     "writeAlignments"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 34,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 35,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "sort"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 36,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "tee"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Yes"
    ]
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `chainLocalAlignments` command.\n",
    "line" : 41,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi10ZQCb",
    "originalType" : "OptionsFor!(DentistCommand.chainLocalAlignments)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `chainLocalAlignments` command with `options`.\n",
    "line" : 45,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi10ZQCbZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi10ZQCb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 50,
    "endchar" : 1
   },
   {
    "name" : "CLIChainer",
    "kind" : "class",
    "protection" : "public",
    "line" : 53,
    "char" : 1,
    "members" : [
     {
      "name" : "FlatLocalAlignments",
      "kind" : "alias",
      "protection" : "public",
      "line" : 55,
      "char" : 5,
      "deco" : "C7dentist7dazzler20LocalAlignmentReader",
      "originalType" : "typeof(getFlatLocalAlignments(\"\", \"\"))"
     },
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "public",
      "line" : 57,
      "char" : 19,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi10ZQCb",
      "originalType" : "Options",
      "offset" : 16
     },
     {
      "name" : "chainingOptions",
      "kind" : "variable",
      "protection" : "public",
      "line" : 58,
      "char" : 27,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist6common10alignments8chaining15ChainingOptions",
      "originalType" : "ChainingOptions",
      "offset" : 192
     },
     {
      "name" : "alignments",
      "kind" : "variable",
      "protection" : "public",
      "line" : 59,
      "char" : 25,
      "deco" : "C7dentist7dazzler20LocalAlignmentReader",
      "originalType" : "FlatLocalAlignments",
      "offset" : 224
     },
     {
      "name" : "progress",
      "kind" : "variable",
      "protection" : "public",
      "line" : 60,
      "char" : 19,
      "deco" : "S7dentist4util3log13ProgressMeter",
      "offset" : 232
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 63,
      "char" : 5,
      "deco" : "FxS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi10ZQCbZCQDeQBl20chainLocalAlignments10CLIChainer",
      "originalType" : "(const Options options)",
      "parameters" : [
       {
        "name" : "options",
        "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi10ZQCb"
       }
      ],
      "endline" : 68,
      "endchar" : 5
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 71,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 77,
      "endchar" : 5
     },
     {
      "name" : "readAlignments",
      "kind" : "function",
      "protection" : "public",
      "line" : 80,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 90,
      "endchar" : 5
     },
     {
      "name" : "chainLocalAlignments",
      "kind" : "function",
      "protection" : "public",
      "line" : 93,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 106,
      "endchar" : 5
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 53,
      "char" : 1,
      "deco" : "FNeZv"
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.commands.checkResults",
  "kind" : "module",
  "file" : "source/dentist/commands/checkResults.d",
  "comment" : "    This is the `checkResults` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Check results of some gap closing procedure.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 17,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"Check results of some gap closing procedure.\""
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 19,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isTesting"
    ]
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "dentistEnforce",
     "ReferenceInterval",
     "ReferenceRegion",
     "ReferencePoint"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 29,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AlignmentChain",
     "chainLocalAlignments",
     "coord_t",
     "diff_t",
     "id_t"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 35,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "TestingCommand"
    ]
   },
   {
    "name" : "dentist.common.external",
    "kind" : "import",
    "line" : 36,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ExternalDependency"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "buildDamFile",
     "ContigSegment",
     "DBdumpOptions",
     "GapSegment",
     "getBlockSize",
     "getContigCutoff",
     "getDalignment",
     "getFastaSequence",
     "getFlatLocalAlignments",
     "getDbRecords",
     "getLasFile",
     "getNumBlocks",
     "getScaffoldStructure",
     "LAmerge",
     "readMask",
     "ScaffoldSegment",
     "stripDbExtension"
    ]
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 55,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "filterInPlace",
     "first",
     "last",
     "orderLexicographically",
     "sliceBy",
     "uniqInPlace"
    ]
   },
   {
    "name" : "dentist.util.fasta",
    "kind" : "import",
    "line" : 62,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "getFastaLength"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 63,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 64,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ceildiv",
     "mean",
     "median",
     "N",
     "NaturalNumberSet"
    ]
   },
   {
    "name" : "dentist.util.process",
    "kind" : "import",
    "line" : 70,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "pipeLines"
    ]
   },
   {
    "name" : "dentist.util.range",
    "kind" : "import",
    "line" : 71,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "tupleMap"
    ]
   },
   {
    "name" : "dentist.util.string",
    "kind" : "import",
    "line" : 72,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "findAlignment",
     "Strip"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 75,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "all",
     "among",
     "copy",
     "count",
     "countUntil",
     "cumulativeFold",
     "filter",
     "find",
     "group",
     "joiner",
     "map",
     "max",
     "maxElement",
     "min",
     "minElement",
     "setDifference",
     "sort",
     "startsWith",
     "sum",
     "until"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 96,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array",
     "minimallyInitializedArray",
     "split"
    ]
   },
   {
    "name" : "std.ascii",
    "kind" : "import",
    "line" : 100,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "newline",
     "toLower"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 103,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 104,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enforce"
    ]
   },
   {
    "name" : "std.file",
    "kind" : "import",
    "line" : 105,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "exists",
     "getSize",
     "read",
     "write"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 110,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format",
     "formattedRead"
    ]
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 113,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ceil",
     "log10"
    ]
   },
   {
    "name" : "std.parallelism",
    "kind" : "import",
    "line" : 116,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "parallel",
     "taskPool"
    ]
   },
   {
    "name" : "std.path",
    "kind" : "import",
    "line" : 119,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "baseName",
     "buildPath",
     "stripExtension"
    ]
   },
   {
    "name" : "std.process",
    "kind" : "import",
    "line" : 123,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "escapeShellFileName",
     "executeShell"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 126,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assumeSorted",
     "chain",
     "chunks",
     "enumerate",
     "evenChunks",
     "iota",
     "only",
     "repeat",
     "retro",
     "slide",
     "StoppingPolicy",
     "tee",
     "zip"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 140,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.regex",
    "kind" : "import",
    "line" : 141,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ctRegex",
     "replaceAll"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 144,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "File",
     "toFile",
     "writeln"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 148,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "join",
     "outdent",
     "splitLines",
     "tr"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 153,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Unqual"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 154,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Flag",
     "No",
     "tuple",
     "Tuple",
     "Yes"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 160,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson",
     "toJsonCompressed" : "serializeToJsonString",
     "toJsonString" : "serializeToPrettyJson"
    },
    "selective" : [
     "Json",
     "JSONException",
     "parseJson"
    ]
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `checkResults` command.\n",
    "line" : 170,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi19ZQCb",
    "originalType" : "OptionsFor!(TestingCommand.checkResults)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `checkResults` command with `options`.\n",
    "line" : 173,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi19ZQCbZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi19ZQCb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 190,
    "endchar" : 1
   },
   {
    "name" : "StopExecution",
    "kind" : "class",
    "protection" : "public",
    "line" : 192,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 194,
      "char" : 5,
      "deco" : "FZC7dentist8commands12checkResults13StopExecution",
      "originalType" : "()",
      "endline" : 196,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "Complement",
    "kind" : "alias",
    "protection" : "public",
    "line" : 199,
    "char" : 1,
    "deco" : "E3std8typecons__T4FlagVAyaa10_636f6d706c656d656e74ZQBi",
    "originalType" : "Flag!\"complement\""
   },
   {
    "name" : "DuplicateQueryContig",
    "kind" : "alias",
    "protection" : "public",
    "line" : 200,
    "char" : 1,
    "deco" : "E3std8typecons__T4FlagVAyaa20_6475706c69636174655175657279436f6e746967ZQCc",
    "originalType" : "Flag!\"duplicateQueryContig\""
   },
   {
    "name" : "ContigMapping",
    "kind" : "struct",
    "protection" : "public",
    "line" : 202,
    "char" : 1,
    "members" : [
     {
      "name" : "reference",
      "kind" : "variable",
      "protection" : "public",
      "line" : 204,
      "char" : 23,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
      "originalType" : "ReferenceInterval",
      "offset" : 0
     },
     {
      "name" : "referenceContigLength",
      "kind" : "variable",
      "protection" : "public",
      "line" : 205,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 24
     },
     {
      "name" : "queryContigId",
      "kind" : "variable",
      "protection" : "public",
      "line" : 206,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 28
     },
     {
      "name" : "duplicateQueryContig",
      "kind" : "variable",
      "protection" : "public",
      "line" : 207,
      "char" : 26,
      "deco" : "E3std8typecons__T4FlagVAyaa20_6475706c69636174655175657279436f6e746967ZQCc",
      "originalType" : "DuplicateQueryContig",
      "offset" : 32
     },
     {
      "name" : "complement",
      "kind" : "variable",
      "protection" : "public",
      "line" : 208,
      "char" : 16,
      "deco" : "E3std8typecons__T4FlagVAyaa10_636f6d706c656d656e74ZQBi",
      "originalType" : "Complement",
      "offset" : 33
     },
     {
      "name" : "alignmentError",
      "kind" : "variable",
      "protection" : "public",
      "line" : 209,
      "char" : 12,
      "deco" : "d",
      "offset" : 40
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 211,
      "char" : 7,
      "name" : "opCast",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "is(bool : T)",
      "members" : [
       {
        "name" : "opCast",
        "kind" : "function",
        "line" : 211,
        "char" : 7,
        "type" : "const pure nothrow T()",
        "endline" : 214,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "queryOrder",
    "kind" : "alias",
    "protection" : "public",
    "line" : 217,
    "char" : 8,
    "originalType" : "orderLexicographically!(const(ContigMapping), (mapping) => mapping.queryContigId)"
   },
   {
    "name" : "queryEquiv",
    "kind" : "alias",
    "protection" : "public",
    "line" : 220,
    "char" : 8
   },
   {
    "name" : "ResultAnalyzer",
    "kind" : "struct",
    "protection" : "private",
    "line" : 224,
    "char" : 9,
    "members" : [
     {
      "name" : "identityLevels",
      "kind" : "variable",
      "protection" : "public",
      "line" : 226,
      "char" : 17,
      "storageClass" : [
       "static",
       "enum"
      ],
      "deco" : "Ad",
      "init" : "[1.0, 0.999, 0.99, 0.95, 0.9, 0.7]"
     },
     {
      "name" : "InsertionMapping",
      "kind" : "struct",
      "protection" : "public",
      "line" : 228,
      "char" : 12,
      "members" : [
       {
        "name" : "trueAssembly",
        "kind" : "variable",
        "protection" : "public",
        "line" : 230,
        "char" : 27,
        "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
        "originalType" : "ReferenceInterval",
        "offset" : 0
       },
       {
        "name" : "resultBegin",
        "kind" : "variable",
        "protection" : "public",
        "line" : 231,
        "char" : 24,
        "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPoint",
        "originalType" : "ReferencePoint",
        "offset" : 24
       },
       {
        "name" : "resultEnd",
        "kind" : "variable",
        "protection" : "public",
        "line" : 232,
        "char" : 24,
        "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPoint",
        "originalType" : "ReferencePoint",
        "offset" : 40
       },
       {
        "name" : "leftRefContig",
        "kind" : "variable",
        "protection" : "public",
        "line" : 233,
        "char" : 14,
        "deco" : "k",
        "originalType" : "id_t",
        "offset" : 56
       },
       {
        "name" : "rightRefContig",
        "kind" : "variable",
        "protection" : "public",
        "line" : 234,
        "char" : 14,
        "deco" : "k",
        "originalType" : "id_t",
        "offset" : 60
       },
       {
        "name" : "complement",
        "kind" : "variable",
        "protection" : "public",
        "line" : 235,
        "char" : 20,
        "deco" : "E3std8typecons__T4FlagVAyaa10_636f6d706c656d656e74ZQBi",
        "originalType" : "Complement",
        "offset" : 64
       }
      ]
     },
     {
      "name" : "GapState",
      "kind" : "enum",
      "protection" : "public",
      "line" : 238,
      "char" : 12,
      "baseDeco" : "h",
      "members" : [
       {
        "name" : "unkown",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "cast(ubyte)0u",
        "comment" : "Unsure what happened; probably due to an assembly error.\n",
        "line" : 241,
        "char" : 9
       },
       {
        "name" : "broken",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "1",
        "comment" : "Flanking contigs could be found but not in the expected configuration.\n",
        "line" : 243,
        "char" : 9
       },
       {
        "name" : "unclosed",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "2",
        "comment" : "Flanking contigs could be found and no sequence was inserted.\n",
        "line" : 245,
        "char" : 9
       },
       {
        "name" : "partiallyClosed",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "3",
        "comment" : "Flanking contigs could be found and sequence was inserted but a gap remains.\n",
        "line" : 247,
        "char" : 9
       },
       {
        "name" : "closed",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "4",
        "comment" : "Flanking contigs could be found and contiguous sequence was inserted.\n",
        "line" : 249,
        "char" : 9
       },
       {
        "name" : "ignored",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "5",
        "comment" : "This is not a gap – ignore it.\n",
        "line" : 251,
        "char" : 9
       }
      ]
     },
     {
      "name" : "GapSummary",
      "kind" : "struct",
      "protection" : "public",
      "line" : 254,
      "char" : 12,
      "members" : [
       {
        "name" : "lhsContigId",
        "kind" : "variable",
        "protection" : "public",
        "line" : 256,
        "char" : 14,
        "deco" : "k",
        "originalType" : "id_t",
        "offset" : 0
       },
       {
        "name" : "state",
        "kind" : "variable",
        "protection" : "public",
        "line" : 257,
        "char" : 18,
        "deco" : "E7dentist8commands12checkResults14ResultAnalyzer8GapState",
        "offset" : 4
       },
       {
        "name" : "gapLength",
        "kind" : "variable",
        "protection" : "public",
        "line" : 258,
        "char" : 17,
        "deco" : "k",
        "originalType" : "coord_t",
        "offset" : 8
       },
       {
        "name" : "alignment",
        "kind" : "variable",
        "protection" : "public",
        "line" : 259,
        "char" : 28,
        "deco" : "S7dentist8commands12checkResults18StretcherAlignment",
        "offset" : 16
       },
       {
        "name" : "numDustOps",
        "kind" : "variable",
        "protection" : "public",
        "line" : 260,
        "char" : 17,
        "deco" : "k",
        "originalType" : "coord_t",
        "offset" : 88
       },
       {
        "name" : "numDustMatches",
        "kind" : "variable",
        "protection" : "public",
        "line" : 261,
        "char" : 17,
        "deco" : "k",
        "originalType" : "coord_t",
        "offset" : 92
       },
       {
        "name" : "numNoneDustOps",
        "kind" : "variable",
        "protection" : "public",
        "line" : 262,
        "char" : 17,
        "deco" : "k",
        "originalType" : "coord_t",
        "offset" : 96
       },
       {
        "name" : "numNoneDustMatches",
        "kind" : "variable",
        "protection" : "public",
        "line" : 263,
        "char" : 17,
        "deco" : "k",
        "originalType" : "coord_t",
        "offset" : 100
       },
       {
        "name" : "dustPercentIdentity",
        "kind" : "function",
        "protection" : "public",
        "line" : 266,
        "char" : 26,
        "deco" : "xFNaNbNdZd",
        "endline" : 269,
        "endchar" : 9
       },
       {
        "name" : "noneDustPercentIdentity",
        "kind" : "function",
        "protection" : "public",
        "line" : 271,
        "char" : 26,
        "deco" : "xFNaNbNdZd",
        "endline" : 274,
        "endchar" : 9
       },
       {
        "name" : "rhsContigId",
        "kind" : "function",
        "protection" : "public",
        "line" : 276,
        "char" : 24,
        "deco" : "xFNaNbNdZk",
        "originalType" : "const pure nothrow @property id_t()",
        "endline" : 279,
        "endchar" : 9
       },
       {
        "name" : "lhsContigMapping",
        "kind" : "variable",
        "protection" : "public",
        "line" : 281,
        "char" : 23,
        "deco" : "S7dentist8commands12checkResults13ContigMapping",
        "offset" : 104
       },
       {
        "name" : "rhsContigMapping",
        "kind" : "variable",
        "protection" : "public",
        "line" : 282,
        "char" : 23,
        "deco" : "S7dentist8commands12checkResults13ContigMapping",
        "offset" : 152
       }
      ]
     },
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "public",
      "line" : 285,
      "char" : 20,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi19ZQCb",
      "originalType" : "const(Options)",
      "offset" : 0
     },
     {
      "name" : "trueAssemblyScaffoldStructure",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 286,
      "char" : 40,
      "deco" : "AxS3std7variant__T8VariantNVmi56TS7dentist7dazzler13ContigSegmentTSQBhQBc10GapSegmentZQCq",
      "originalType" : "const(ScaffoldSegment)[]",
      "offset" : 272
     },
     {
      "name" : "resultScaffoldStructure",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 287,
      "char" : 40,
      "deco" : "AxS3std7variant__T8VariantNVmi56TS7dentist7dazzler13ContigSegmentTSQBhQBc10GapSegmentZQCq",
      "originalType" : "const(ScaffoldSegment)[]",
      "offset" : 288
     },
     {
      "name" : "resultContigLengths",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 288,
      "char" : 25,
      "deco" : "Ak",
      "originalType" : "coord_t[]",
      "offset" : 304
     },
     {
      "name" : "referenceOffset",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 289,
      "char" : 23,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 320
     },
     {
      "name" : "dustMask",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 290,
      "char" : 31,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "ReferenceRegion",
      "offset" : 328
     },
     {
      "name" : "mappedRegionsMask",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 291,
      "char" : 31,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "ReferenceRegion",
      "offset" : 344
     },
     {
      "name" : "referenceGaps",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 292,
      "char" : 31,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "ReferenceRegion",
      "offset" : 360
     },
     {
      "name" : "contigAlignments",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 293,
      "char" : 31,
      "deco" : "AS7dentist8commands12checkResults13ContigMapping",
      "offset" : 376
     },
     {
      "name" : "duplicateContigIds",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 294,
      "char" : 32,
      "deco" : "S7dentist4util4math16NaturalNumberSet",
      "offset" : 392
     },
     {
      "name" : "gapSummaries",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 295,
      "char" : 28,
      "deco" : "AS7dentist8commands12checkResults14ResultAnalyzer10GapSummary",
      "offset" : 416
     },
     {
      "name" : "correctGapsPerIdentityLevel",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 296,
      "char" : 47,
      "deco" : "G6Am",
      "originalType" : "size_t[][identityLevels.length]",
      "offset" : 432
     },
     {
      "name" : "collect",
      "kind" : "function",
      "protection" : "public",
      "line" : 298,
      "char" : 11,
      "deco" : "FZS7dentist8commands12checkResults5Stats",
      "endline" : 332,
      "endchar" : 5
     },
     {
      "name" : "init",
      "kind" : "function",
      "protection" : "public",
      "line" : 334,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 396,
      "endchar" : 5
     },
     {
      "name" : "findReferenceContigs",
      "kind" : "function",
      "protection" : "public",
      "line" : 398,
      "char" : 21,
      "deco" : "FZAS7dentist8commands12checkResults13ContigMapping",
      "endline" : 432,
      "endchar" : 5
     },
     {
      "name" : "findPerfectAlignments",
      "kind" : "function",
      "protection" : "public",
      "line" : 434,
      "char" : 21,
      "deco" : "FIAyaIQeZAS7dentist8commands12checkResults13ContigMapping",
      "parameters" : [
       {
        "name" : "refDb",
        "deco" : "xAya",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "queryDb",
        "deco" : "xAya",
        "storageClass" : [
         "in"
        ],
        "default" : "null"
       }
      ],
      "endline" : 508,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 510,
      "char" : 28,
      "name" : "findPerfectAlignmentsChunk",
      "parameters" : [
       {
        "name" : "ChunkInfo",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "findPerfectAlignmentsChunk",
        "kind" : "function",
        "line" : 510,
        "char" : 28,
        "type" : "ContigMapping[](ChunkInfo info)",
        "parameters" : [
         {
          "name" : "info",
          "type" : "ChunkInfo"
         }
        ],
        "endline" : 564,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "recoverSlightlyImperfectAlignments",
      "kind" : "function",
      "protection" : "public",
      "line" : 566,
      "char" : 21,
      "deco" : "FAkZAS7dentist8commands12checkResults13ContigMapping",
      "originalType" : "ContigMapping[](id_t[] unmappedContigIds)",
      "parameters" : [
       {
        "name" : "unmappedContigIds",
        "deco" : "Ak"
       }
      ],
      "endline" : 584,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 586,
      "char" : 28,
      "name" : "recoverSlightlyImperfectAlignments",
      "parameters" : [
       {
        "name" : "ChunkInfo",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "recoverSlightlyImperfectAlignments",
        "kind" : "function",
        "line" : 586,
        "char" : 28,
        "type" : "ContigMapping[](ChunkInfo info)",
        "parameters" : [
         {
          "name" : "info",
          "type" : "ChunkInfo"
         }
        ],
        "endline" : 647,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "makeIndexedSequenceList",
      "kind" : "function",
      "protection" : "public",
      "line" : 653,
      "char" : 12,
      "deco" : "FIAyaZAya",
      "parameters" : [
       {
        "name" : "dbFile",
        "deco" : "xAya",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 686,
      "endchar" : 5
     },
     {
      "name" : "makeCroppedSequenceList",
      "kind" : "function",
      "protection" : "public",
      "line" : 692,
      "char" : 12,
      "deco" : "FIAyaIkZAya",
      "originalType" : "string(in string dbFile, in coord_t crop)",
      "parameters" : [
       {
        "name" : "dbFile",
        "deco" : "xAya",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "crop",
        "deco" : "xk",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 739,
      "endchar" : 5
     },
     {
      "name" : "makeCroppedSubsetDb",
      "kind" : "function",
      "protection" : "public",
      "line" : 749,
      "char" : 19,
      "storageClass" : [
       "static"
      ],
      "deco" : "FIAyaIkAkAyaZQe",
      "originalType" : "string(in string inDbFile, in coord_t crop, id_t[] contigIds, string workdir)",
      "parameters" : [
       {
        "name" : "inDbFile",
        "deco" : "xAya",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "crop",
        "deco" : "xk",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "contigIds",
        "deco" : "Ak"
       },
       {
        "name" : "workdir",
        "deco" : "Aya"
       }
      ],
      "endline" : 809,
      "endchar" : 5
     },
     {
      "name" : "getSequenceListFile",
      "kind" : "function",
      "protection" : "public",
      "line" : 811,
      "char" : 19,
      "storageClass" : [
       "static"
      ],
      "deco" : "FIAyaIQekZAya",
      "originalType" : "string(in string dbFile, in string workdir, coord_t crop = 0)",
      "parameters" : [
       {
        "name" : "dbFile",
        "deco" : "xAya",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "workdir",
        "deco" : "xAya",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "crop",
        "deco" : "k",
        "default" : "0u"
       }
      ],
      "endline" : 819,
      "endchar" : 5
     },
     {
      "name" : "analyzeGaps",
      "kind" : "function",
      "protection" : "public",
      "line" : 821,
      "char" : 18,
      "deco" : "FZAS7dentist8commands12checkResults14ResultAnalyzer10GapSummary",
      "endline" : 906,
      "endchar" : 5
     },
     {
      "name" : "getGapState",
      "kind" : "function",
      "protection" : "private",
      "line" : 908,
      "char" : 22,
      "deco" : "xFIS7dentist8commands12checkResults13ContigMappingIQBwZEQCaQBvQBp14ResultAnalyzer8GapState",
      "parameters" : [
       {
        "name" : "lhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "rhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 920,
      "endchar" : 5
     },
     {
      "name" : "isGap",
      "kind" : "function",
      "protection" : "private",
      "line" : 922,
      "char" : 18,
      "deco" : "xFIS7dentist8commands12checkResults13ContigMappingIQBwZb",
      "parameters" : [
       {
        "name" : "lhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "rhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 925,
      "endchar" : 5
     },
     {
      "name" : "isGap",
      "kind" : "function",
      "protection" : "private",
      "line" : 927,
      "char" : 18,
      "deco" : "xFIkIkZb",
      "originalType" : "const bool(in id_t lhsContigId, in id_t rhsContigId)",
      "parameters" : [
       {
        "name" : "lhsContigId",
        "deco" : "xk",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "rhsContigId",
        "deco" : "xk",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 933,
      "endchar" : 5
     },
     {
      "name" : "isGapClosed",
      "kind" : "function",
      "protection" : "private",
      "line" : 935,
      "char" : 18,
      "deco" : "xFIS7dentist8commands12checkResults13ContigMappingIQBwE3std8typecons__T4FlagVAyaa6_6e6f53776170ZQzZb",
      "originalType" : "const bool(in ContigMapping lhs, in ContigMapping rhs, Flag!\"noSwap\" noSwap = No.noSwap)",
      "parameters" : [
       {
        "name" : "lhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "rhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "noSwap",
        "deco" : "E3std8typecons__T4FlagVAyaa6_6e6f53776170ZQz",
        "default" : "Flag.no"
       }
      ],
      "endline" : 947,
      "endchar" : 5
     },
     {
      "name" : "isGapPartiallyClosed",
      "kind" : "function",
      "protection" : "private",
      "line" : 949,
      "char" : 18,
      "deco" : "xFIS7dentist8commands12checkResults13ContigMappingIQBwE3std8typecons__T4FlagVAyaa6_6e6f53776170ZQzZb",
      "originalType" : "const bool(in ContigMapping lhs, in ContigMapping rhs, Flag!\"noSwap\" noSwap = No.noSwap)",
      "parameters" : [
       {
        "name" : "lhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "rhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "noSwap",
        "deco" : "E3std8typecons__T4FlagVAyaa6_6e6f53776170ZQz",
        "default" : "Flag.no"
       }
      ],
      "endline" : 965,
      "endchar" : 5
     },
     {
      "name" : "isGapUnclosed",
      "kind" : "function",
      "protection" : "private",
      "line" : 967,
      "char" : 18,
      "deco" : "xFIS7dentist8commands12checkResults13ContigMappingIQBwE3std8typecons__T4FlagVAyaa6_6e6f53776170ZQzZb",
      "originalType" : "const bool(in ContigMapping lhs, in ContigMapping rhs, Flag!\"noSwap\" noSwap = No.noSwap)",
      "parameters" : [
       {
        "name" : "lhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "rhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "noSwap",
        "deco" : "E3std8typecons__T4FlagVAyaa6_6e6f53776170ZQz",
        "default" : "Flag.no"
       }
      ],
      "endline" : 981,
      "endchar" : 5
     },
     {
      "name" : "getInsertionMapping",
      "kind" : "function",
      "protection" : "public",
      "line" : 983,
      "char" : 22,
      "deco" : "FIS7dentist8commands12checkResults13ContigMappingIQBwZSQCaQBvQBp14ResultAnalyzer16InsertionMapping",
      "parameters" : [
       {
        "name" : "lhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "rhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1008,
      "endchar" : 5
     },
     {
      "name" : "mappedIntervalOf",
      "kind" : "function",
      "protection" : "public",
      "line" : 1010,
      "char" : 23,
      "deco" : "xFIS7dentist8commands12checkResults13ContigMappingZSQBw4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
      "originalType" : "const ReferenceInterval(in ContigMapping mapping)",
      "parameters" : [
       {
        "name" : "mapping",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1013,
      "endchar" : 5
     },
     {
      "name" : "mappedIntervalOf",
      "kind" : "function",
      "protection" : "public",
      "line" : 1015,
      "char" : 23,
      "deco" : "xFIkZS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
      "originalType" : "const ReferenceInterval(in id_t contigId)",
      "parameters" : [
       {
        "name" : "contigId",
        "deco" : "xk",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1021,
      "endchar" : 5
     },
     {
      "name" : "resultGapSize",
      "kind" : "function",
      "protection" : "public",
      "line" : 1023,
      "char" : 13,
      "deco" : "xFIkZk",
      "originalType" : "const coord_t(in id_t contigId)",
      "parameters" : [
       {
        "name" : "contigId",
        "deco" : "xk",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1034,
      "endchar" : 5
     },
     {
      "name" : "inputGapSize",
      "kind" : "function",
      "protection" : "public",
      "line" : 1036,
      "char" : 13,
      "deco" : "xFIkZk",
      "originalType" : "const coord_t(in id_t contigId)",
      "parameters" : [
       {
        "name" : "contigId",
        "deco" : "xk",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1045,
      "endchar" : 5
     },
     {
      "name" : "makeIdentityLevelStats",
      "kind" : "function",
      "protection" : "public",
      "line" : 1047,
      "char" : 37,
      "deco" : "FZG6Am",
      "originalType" : "size_t[][identityLevels.length]()",
      "endline" : 1068,
      "endchar" : 5
     },
     {
      "name" : "getReferenceGaps",
      "kind" : "function",
      "protection" : "public",
      "line" : 1070,
      "char" : 21,
      "deco" : "FZS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "ReferenceRegion()",
      "endline" : 1089,
      "endchar" : 5
     },
     {
      "name" : "getResultContigBegin",
      "kind" : "function",
      "protection" : "public",
      "line" : 1091,
      "char" : 13,
      "deco" : "FkZk",
      "originalType" : "coord_t(id_t contigId)",
      "parameters" : [
       {
        "name" : "contigId",
        "deco" : "k"
       }
      ],
      "endline" : 1099,
      "endchar" : 5
     },
     {
      "name" : "getNumBpsExpected",
      "kind" : "function",
      "protection" : "public",
      "line" : 1101,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1108,
      "endchar" : 5
     },
     {
      "name" : "getNumBpsKnown",
      "kind" : "function",
      "protection" : "public",
      "line" : 1110,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1115,
      "endchar" : 5
     },
     {
      "name" : "getNumBpsResult",
      "kind" : "function",
      "protection" : "public",
      "line" : 1117,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1125,
      "endchar" : 5
     },
     {
      "name" : "getNumBpsInGaps",
      "kind" : "function",
      "protection" : "public",
      "line" : 1127,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1132,
      "endchar" : 5
     },
     {
      "name" : "getAverageInsertionError",
      "kind" : "function",
      "protection" : "public",
      "line" : 1134,
      "char" : 12,
      "deco" : "FZd",
      "endline" : 1142,
      "endchar" : 5
     },
     {
      "name" : "getNumTranslocatedGaps",
      "kind" : "function",
      "protection" : "public",
      "line" : 1144,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1149,
      "endchar" : 5
     },
     {
      "name" : "getNumContigsExpected",
      "kind" : "function",
      "protection" : "public",
      "line" : 1151,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1156,
      "endchar" : 5
     },
     {
      "name" : "getNumMappedContigs",
      "kind" : "function",
      "protection" : "public",
      "line" : 1158,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1165,
      "endchar" : 5
     },
     {
      "name" : "getNumCorrectGaps",
      "kind" : "function",
      "protection" : "public",
      "line" : 1167,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1170,
      "endchar" : 5
     },
     {
      "name" : "getNumClosedGaps",
      "kind" : "function",
      "protection" : "public",
      "line" : 1172,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1179,
      "endchar" : 5
     },
     {
      "name" : "getNumPartiallyClosedGaps",
      "kind" : "function",
      "protection" : "public",
      "line" : 1181,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1188,
      "endchar" : 5
     },
     {
      "name" : "testScaffolds",
      "kind" : "function",
      "protection" : "public",
      "line" : 1190,
      "char" : 10,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FNaNbNiNfZS3std9algorithm9iteration__T9MapResultS7dentist8commands12checkResults14ResultAnalyzer13testScaffoldsMFZ9__lambda1TSQCz4utilQEp__T11SliceByImplVAyaa24_612e636f6e7469674964203d3d20622e636f6e7469674964TAxSQGiQDj6region__T6RegionTmTmVQDja8_636f6e7469674964Vmi0ZQBn14TaggedIntervalZQFsZQJu",
      "originalType" : "()",
      "endline" : 1200,
      "endchar" : 5
     },
     {
      "name" : "writeGapDetailsJson",
      "kind" : "function",
      "protection" : "public",
      "line" : 1202,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 1238,
      "endchar" : 5
     },
     {
      "name" : "getInsertionSequence",
      "kind" : "function",
      "protection" : "public",
      "line" : 1240,
      "char" : 12,
      "deco" : "FS7dentist8commands12checkResults14ResultAnalyzer10GapSummaryZAya",
      "parameters" : [
       {
        "name" : "gapSummary",
        "deco" : "S7dentist8commands12checkResults14ResultAnalyzer10GapSummary"
       }
      ],
      "endline" : 1267,
      "endchar" : 5
     },
     {
      "name" : "computeInsertionAlignment",
      "kind" : "function",
      "protection" : "public",
      "line" : 1269,
      "char" : 24,
      "deco" : "FIS7dentist8commands12checkResults14ResultAnalyzer16InsertionMappingZSQCpQCkQCe18StretcherAlignment",
      "parameters" : [
       {
        "name" : "insertionMapping",
        "deco" : "xS7dentist8commands12checkResults14ResultAnalyzer16InsertionMapping",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1290,
      "endchar" : 5
     },
     {
      "name" : "getGapId",
      "kind" : "function",
      "protection" : "public",
      "line" : 1292,
      "char" : 19,
      "storageClass" : [
       "static"
      ],
      "deco" : "FIS7dentist8commands12checkResults14ResultAnalyzer16InsertionMappingZAya",
      "parameters" : [
       {
        "name" : "insertionMapping",
        "deco" : "xS7dentist8commands12checkResults14ResultAnalyzer16InsertionMapping",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1300,
      "endchar" : 5
     },
     {
      "name" : "subseqFastaFileFormat",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1302,
      "char" : 10,
      "storageClass" : [
       "enum"
      ],
      "deco" : "Aya",
      "init" : "\"%s/insertion-%s.%s.fasta\""
     },
     {
      "name" : "subseqFastaHeaderFormat",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1303,
      "char" : 10,
      "storageClass" : [
       "enum"
      ],
      "deco" : "Aya",
      "init" : "\">%s-%s [contig-%d@%d, contig-%d@%d)\""
     },
     {
      "name" : "trueAssemblySubseqFasta",
      "kind" : "function",
      "protection" : "public",
      "line" : 1305,
      "char" : 12,
      "deco" : "FIS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalIAyaZQBz",
      "originalType" : "string(in ReferenceInterval interval, in string gapId)",
      "parameters" : [
       {
        "name" : "interval",
        "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "gapId",
        "deco" : "xAya",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1329,
      "endchar" : 5
     },
     {
      "name" : "resultSubseqFasta",
      "kind" : "function",
      "protection" : "public",
      "line" : 1331,
      "char" : 12,
      "deco" : "FIS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPointIQDcIAyaZQCa",
      "originalType" : "string(in ReferencePoint begin, in ReferencePoint end, in string gapId)",
      "parameters" : [
       {
        "name" : "begin",
        "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPoint",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "end",
        "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPoint",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "gapId",
        "deco" : "xAya",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1352,
      "endchar" : 5
     },
     {
      "name" : "resultSubseqString",
      "kind" : "function",
      "protection" : "public",
      "line" : 1354,
      "char" : 12,
      "deco" : "FIS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPointIQDcIAyaZQCa",
      "originalType" : "string(in ReferencePoint begin, in ReferencePoint end, in string gapId)",
      "parameters" : [
       {
        "name" : "begin",
        "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPoint",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "end",
        "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPoint",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "gapId",
        "deco" : "xAya",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1384,
      "endchar" : 5
     },
     {
      "name" : "addDustAnalysis",
      "kind" : "function",
      "protection" : "public",
      "line" : 1386,
      "char" : 10,
      "deco" : "FKS7dentist8commands12checkResults14ResultAnalyzer10GapSummaryZv",
      "parameters" : [
       {
        "name" : "gapSummary",
        "deco" : "S7dentist8commands12checkResults14ResultAnalyzer10GapSummary",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 1461,
      "endchar" : 5
     },
     {
      "name" : "isInnerGap",
      "kind" : "function",
      "protection" : "public",
      "line" : 1463,
      "char" : 10,
      "deco" : "FIS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalZb",
      "originalType" : "bool(in ReferenceInterval gap)",
      "parameters" : [
       {
        "name" : "gap",
        "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1466,
      "endchar" : 5
     },
     {
      "name" : "trueScaffoldLength",
      "kind" : "function",
      "protection" : "public",
      "line" : 1468,
      "char" : 13,
      "deco" : "FIkZk",
      "originalType" : "coord_t(in id_t contigId)",
      "parameters" : [
       {
        "name" : "contigId",
        "deco" : "xk",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1476,
      "endchar" : 5
     },
     {
      "name" : "getMaximumN50",
      "kind" : "function",
      "protection" : "public",
      "line" : 1478,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1486,
      "endchar" : 5
     },
     {
      "name" : "getInputN50",
      "kind" : "function",
      "protection" : "public",
      "line" : 1488,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1497,
      "endchar" : 5
     },
     {
      "name" : "getResultN50",
      "kind" : "function",
      "protection" : "public",
      "line" : 1499,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1508,
      "endchar" : 5
     },
     {
      "name" : "getGapMedian",
      "kind" : "function",
      "protection" : "public",
      "line" : 1510,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1520,
      "endchar" : 5
     },
     {
      "name" : "getClosedGapMedian",
      "kind" : "function",
      "protection" : "public",
      "line" : 1522,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1532,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 1534,
      "char" : 12,
      "name" : "getExtremumClosedGap",
      "parameters" : [
       {
        "name" : "extremeElement",
        "kind" : "alias"
       }
      ],
      "members" : [
       {
        "name" : "getExtremumClosedGap",
        "kind" : "function",
        "line" : 1534,
        "char" : 12,
        "type" : "size_t()",
        "endline" : 1544,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "getCorrectGapLengthHistograms",
      "kind" : "function",
      "protection" : "public",
      "line" : 1546,
      "char" : 46,
      "deco" : "FZG6S7dentist8commands12checkResults__T9HistogramTkZQn",
      "originalType" : "Histogram!coord_t[identityLevels.length]()",
      "endline" : 1563,
      "endchar" : 5
     },
     {
      "name" : "getClosedGapLengthHistogram",
      "kind" : "function",
      "protection" : "public",
      "line" : 1565,
      "char" : 23,
      "deco" : "FZS7dentist8commands12checkResults__T9HistogramTkZQn",
      "originalType" : "Histogram!coord_t()",
      "endline" : 1573,
      "endchar" : 5
     },
     {
      "name" : "getGapLengthHistogram",
      "kind" : "function",
      "protection" : "public",
      "line" : 1575,
      "char" : 23,
      "deco" : "FZS7dentist8commands12checkResults__T9HistogramTkZQn",
      "originalType" : "Histogram!coord_t()",
      "endline" : 1586,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 1588,
      "char" : 10,
      "name" : "getGapInfos",
      "parameters" : [
       {
        "name" : "what",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "members" : [
       {
        "name" : "getGapInfos",
        "kind" : "function",
        "line" : 1588,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "const (in GapState wantedState)",
        "parameters" : [
         {
          "name" : "wantedState",
          "type" : "GapState",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 1594,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 1596,
      "char" : 10,
      "name" : "getGapInfos",
      "parameters" : [
       {
        "name" : "what",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "members" : [
       {
        "name" : "getGapInfos",
        "kind" : "function",
        "line" : 1596,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "const ()",
        "endline" : 1602,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     }
    ]
   },
   {
    "name" : "ContigAlignmentsCache",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1605,
    "char" : 1,
    "members" : [
     {
      "name" : "contigAlignmentsCache",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1607,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 0
     },
     {
      "name" : "dbA",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1608,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 16
     },
     {
      "name" : "dbB",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1609,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 32
     },
     {
      "name" : "_cachedAlignments",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1610,
      "char" : 10,
      "deco" : "S4vibe4data4json4Json",
      "init" : "Json([cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u], Type.undefined)",
      "offset" : 48,
      "align" : 8
     },
     {
      "name" : "isValid",
      "kind" : "function",
      "protection" : "public",
      "line" : 1612,
      "char" : 20,
      "deco" : "FNdZb",
      "endline" : 1618,
      "endchar" : 5
     },
     {
      "name" : "canWrite",
      "kind" : "function",
      "protection" : "public",
      "line" : 1620,
      "char" : 20,
      "deco" : "FNdZb",
      "endline" : 1623,
      "endchar" : 5
     },
     {
      "name" : "cachedAlignments",
      "kind" : "function",
      "protection" : "public",
      "line" : 1625,
      "char" : 20,
      "deco" : "FNdZS4vibe4data4json4Json",
      "endline" : 1645,
      "endchar" : 5
     },
     {
      "name" : "write",
      "kind" : "function",
      "protection" : "public",
      "line" : 1647,
      "char" : 10,
      "deco" : "FAS7dentist8commands12checkResults13ContigMappingSQBv4util4math16NaturalNumberSetE3std8typecons__T4FlagVAyaa14_666f7263654f7665727772697465ZQBqZv",
      "originalType" : "void(ContigMapping[] contigAlignments, NaturalNumberSet duplicateContigIds, Flag!\"forceOverwrite\" forceOverwrite = No.forceOverwrite)",
      "parameters" : [
       {
        "name" : "contigAlignments",
        "deco" : "AS7dentist8commands12checkResults13ContigMapping"
       },
       {
        "name" : "duplicateContigIds",
        "deco" : "S7dentist4util4math16NaturalNumberSet"
       },
       {
        "name" : "forceOverwrite",
        "deco" : "E3std8typecons__T4FlagVAyaa14_666f7263654f7665727772697465ZQBq",
        "default" : "Flag.no"
       }
      ],
      "endline" : 1671,
      "endchar" : 5
     },
     {
      "name" : "read",
      "kind" : "function",
      "protection" : "public",
      "line" : 1673,
      "char" : 21,
      "deco" : "FZAS7dentist8commands12checkResults13ContigMapping",
      "endline" : 1704,
      "endchar" : 5
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 1605,
      "char" : 1,
      "deco" : "FNbNcNjNfS7dentist8commands12checkResults21ContigAlignmentsCacheZQCe",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S7dentist8commands12checkResults21ContigAlignmentsCache"
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 1707,
    "char" : 9,
    "name" : "Histogram",
    "parameters" : [
     {
      "name" : "value_t",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "Histogram",
      "kind" : "struct",
      "protection" : "public",
      "line" : 1707,
      "char" : 9,
      "members" : [
       {
        "name" : "Bucket",
        "kind" : "alias",
        "line" : 1709,
        "char" : 5,
        "type" : "Tuple!(value_t, \"begin\", value_t, \"end\", size_t, \"count\")"
       },
       {
        "name" : "bucketSize",
        "kind" : "variable",
        "line" : 1715,
        "char" : 13,
        "type" : "value_t"
       },
       {
        "name" : "histogram",
        "kind" : "variable",
        "line" : 1716,
        "char" : 14,
        "type" : "size_t[]"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 1719,
        "char" : 5,
        "type" : "(in value_t bucketSize, in value_t[] values)",
        "parameters" : [
         {
          "name" : "bucketSize",
          "type" : "value_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "values",
          "type" : "value_t[]",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 1731,
        "endchar" : 5
       },
       {
        "name" : "buckets",
        "kind" : "function",
        "line" : 1733,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure nothrow ()",
        "endline" : 1742,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 1745,
    "char" : 6,
    "name" : "histogram",
    "parameters" : [
     {
      "name" : "value_t",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "histogram",
      "kind" : "function",
      "line" : 1745,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(in value_t bucketSize, in value_t[] values)",
      "parameters" : [
       {
        "name" : "bucketSize",
        "type" : "value_t",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "values",
        "type" : "value_t[]",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1748,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "Stats",
    "kind" : "struct",
    "protection" : "private",
    "line" : 1750,
    "char" : 9,
    "members" : [
     {
      "name" : "identityLevels",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1752,
      "char" : 17,
      "storageClass" : [
       "static",
       "enum"
      ],
      "deco" : "Ad",
      "init" : "[1.0, 0.999, 0.99, 0.95, 0.9, 0.7]"
     },
     {
      "name" : "numBpsExpected",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1761,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "numBpsKnown",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1762,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 8
     },
     {
      "name" : "numBpsResult",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1763,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 16
     },
     {
      "name" : "numBpsInGaps",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1764,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 24
     },
     {
      "name" : "averageInsertionError",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1765,
      "char" : 12,
      "deco" : "d",
      "offset" : 32
     },
     {
      "name" : "numTranslocatedGaps",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1766,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 40
     },
     {
      "name" : "numCorrectGaps",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1767,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 48
     },
     {
      "name" : "numContigsExpected",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1768,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 56
     },
     {
      "name" : "numMappedContigs",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1769,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 64
     },
     {
      "name" : "numClosedGaps",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1770,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 72
     },
     {
      "name" : "numPartiallyClosedGaps",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1771,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 80
     },
     {
      "name" : "maximumN50",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1772,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 88
     },
     {
      "name" : "inputN50",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1773,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 96
     },
     {
      "name" : "resultN50",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1774,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 104
     },
     {
      "name" : "gapMedian",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1775,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 112
     },
     {
      "name" : "closedGapMedian",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1776,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 120
     },
     {
      "name" : "minClosedGap",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1777,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 128
     },
     {
      "name" : "maxClosedGap",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1778,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 136
     },
     {
      "name" : "correctGapLengthHistograms",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1779,
      "char" : 46,
      "deco" : "G6S7dentist8commands12checkResults__T9HistogramTkZQn",
      "originalType" : "Histogram!coord_t[identityLevels.length]",
      "offset" : 144
     },
     {
      "name" : "closedGapLengthHistogram",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1780,
      "char" : 23,
      "deco" : "S7dentist8commands12checkResults__T9HistogramTkZQn",
      "originalType" : "Histogram!coord_t",
      "offset" : 288
     },
     {
      "name" : "gapLengthHistogram",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1781,
      "char" : 23,
      "deco" : "S7dentist8commands12checkResults__T9HistogramTkZQn",
      "originalType" : "Histogram!coord_t",
      "offset" : 312
     },
     {
      "name" : "toJsonString",
      "kind" : "function",
      "protection" : "public",
      "line" : 1783,
      "char" : 12,
      "deco" : "xFZAya",
      "endline" : 1813,
      "endchar" : 5
     },
     {
      "name" : "toTabular",
      "kind" : "function",
      "protection" : "public",
      "line" : 1815,
      "char" : 12,
      "deco" : "xFZAya",
      "endline" : 1853,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 1855,
      "char" : 18,
      "name" : "histsToString",
      "parameters" : [
       {
        "name" : "Hists",
        "kind" : "tuple"
       }
      ],
      "members" : [
       {
        "name" : "histsToString",
        "kind" : "function",
        "line" : 1855,
        "char" : 18,
        "type" : "const string(in Hists hists)",
        "parameters" : [
         {
          "name" : "hists",
          "type" : "Hists",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 1876,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 1878,
      "char" : 16,
      "name" : "histsToJson",
      "parameters" : [
       {
        "name" : "Hists",
        "kind" : "tuple"
       }
      ],
      "members" : [
       {
        "name" : "histsToJson",
        "kind" : "function",
        "line" : 1878,
        "char" : 16,
        "type" : "const Json(in Hists hists)",
        "parameters" : [
         {
          "name" : "hists",
          "type" : "Hists",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 1895,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "columnWidth",
      "kind" : "function",
      "protection" : "protected",
      "line" : 1897,
      "char" : 22,
      "deco" : "xFZm",
      "originalType" : "const size_t()",
      "endline" : 1923,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "protected",
      "line" : 1925,
      "char" : 29,
      "name" : "numWidth",
      "parameters" : [
       {
        "name" : "Int",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "numWidth",
        "kind" : "function",
        "line" : 1925,
        "char" : 29,
        "type" : "nothrow size_t(Int i)",
        "parameters" : [
         {
          "name" : "i",
          "type" : "Int"
         }
        ],
        "endline" : 1933,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "StretcherAlignment",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1937,
    "char" : 1,
    "members" : [
     {
      "name" : "EditOp",
      "kind" : "enum",
      "protection" : "public",
      "line" : 1939,
      "char" : 12,
      "baseDeco" : "a",
      "members" : [
       {
        "name" : "match",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "'|'",
        "line" : 1941,
        "char" : 9
       },
       {
        "name" : "mismatch",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "'.'",
        "line" : 1942,
        "char" : 9
       },
       {
        "name" : "indel",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "'-'",
        "line" : 1943,
        "char" : 9
       }
      ]
     },
     {
      "name" : "SeqChar",
      "kind" : "enum",
      "protection" : "public",
      "line" : 1946,
      "char" : 12,
      "baseDeco" : "a",
      "members" : [
       {
        "name" : "a",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "'a'",
        "line" : 1948,
        "char" : 9
       },
       {
        "name" : "c",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "'c'",
        "line" : 1949,
        "char" : 9
       },
       {
        "name" : "g",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "'g'",
        "line" : 1950,
        "char" : 9
       },
       {
        "name" : "t",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "'t'",
        "line" : 1951,
        "char" : 9
       },
       {
        "name" : "A",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "'A'",
        "line" : 1952,
        "char" : 9
       },
       {
        "name" : "C",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "'C'",
        "line" : 1953,
        "char" : 9
       },
       {
        "name" : "G",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "'G'",
        "line" : 1954,
        "char" : 9
       },
       {
        "name" : "T",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "'T'",
        "line" : 1955,
        "char" : 9
       },
       {
        "name" : "unkownBase",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "'n'",
        "line" : 1956,
        "char" : 9
       },
       {
        "name" : "indel",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "'-'",
        "line" : 1957,
        "char" : 9
       }
      ]
     },
     {
      "name" : "isBase",
      "kind" : "function",
      "protection" : "public",
      "line" : 1960,
      "char" : 17,
      "storageClass" : [
       "static"
      ],
      "deco" : "FIE7dentist8commands12checkResults18StretcherAlignment7SeqCharZb",
      "parameters" : [
       {
        "name" : "c",
        "deco" : "xE7dentist8commands12checkResults18StretcherAlignment7SeqChar",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1972,
      "endchar" : 5
     },
     {
      "name" : "referenceLength",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1974,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 0
     },
     {
      "name" : "queryLength",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1975,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 4
     },
     {
      "name" : "complement",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1976,
      "char" : 16,
      "deco" : "E3std8typecons__T4FlagVAyaa10_636f6d706c656d656e74ZQBi",
      "originalType" : "Complement",
      "offset" : 8
     },
     {
      "name" : "percentIdentity",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1977,
      "char" : 12,
      "deco" : "d",
      "offset" : 16
     },
     {
      "name" : "referenceLine",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1978,
      "char" : 22,
      "deco" : "AxE7dentist8commands12checkResults18StretcherAlignment7SeqChar",
      "offset" : 24
     },
     {
      "name" : "editOps",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1979,
      "char" : 21,
      "deco" : "AxE7dentist8commands12checkResults18StretcherAlignment6EditOp",
      "offset" : 40
     },
     {
      "name" : "queryLine",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1980,
      "char" : 22,
      "deco" : "AxE7dentist8commands12checkResults18StretcherAlignment7SeqChar",
      "offset" : 56
     },
     {
      "name" : "__invariant139",
      "kind" : "function",
      "protection" : "public",
      "line" : 1982,
      "char" : 5,
      "deco" : "xFZv",
      "endline" : 1990,
      "endchar" : 5
     },
     {
      "name" : "triggerInvariant",
      "kind" : "function",
      "protection" : "private",
      "line" : 1990,
      "char" : 18,
      "deco" : "FZv",
      "endline" : 1990,
      "endchar" : 39
     },
     {
      "name" : "cropReference",
      "kind" : "function",
      "protection" : "public",
      "line" : 1992,
      "char" : 24,
      "deco" : "xFIkZS7dentist8commands12checkResults18StretcherAlignment",
      "originalType" : "const StretcherAlignment(in coord_t crop)",
      "parameters" : [
       {
        "name" : "crop",
        "deco" : "xk",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 2017,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2019_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 2019,
      "char" : 5,
      "endline" : 2044,
      "endchar" : 5
     },
     {
      "name" : "length",
      "kind" : "function",
      "protection" : "public",
      "line" : 2044,
      "char" : 22,
      "deco" : "xFNaNbNdZm",
      "originalType" : "const pure nothrow @property size_t()",
      "endline" : 2047,
      "endchar" : 5
     },
     {
      "name" : "opApply",
      "kind" : "function",
      "protection" : "public",
      "line" : 2049,
      "char" : 9,
      "deco" : "FMDFmE7dentist8commands12checkResults18StretcherAlignment7SeqCharEQCiQCdQBxQBm6EditOpQDcZiZi",
      "originalType" : "int(scope int delegate(size_t, SeqChar, EditOp, SeqChar) dg)",
      "parameters" : [
       {
        "name" : "dg",
        "deco" : "DFmE7dentist8commands12checkResults18StretcherAlignment7SeqCharEQCiQCdQBxQBm6EditOpQDcZi",
        "storageClass" : [
         "scope"
        ]
       }
      ],
      "endline" : 2062,
      "endchar" : 5
     },
     {
      "name" : "__invariant",
      "kind" : "function",
      "protection" : "public",
      "line" : 1937,
      "char" : 1,
      "deco" : "xFZv"
     }
    ]
   },
   {
    "name" : "stretcher",
    "kind" : "function",
    "protection" : "public",
    "line" : 2066,
    "char" : 20,
    "deco" : "FIAyaIQeE3std8typecons__T4FlagVAyaa10_636f6d706c656d656e74ZQBiZS7dentist8commands12checkResults18StretcherAlignment",
    "originalType" : "StretcherAlignment(in string refFasta, in string queryFasta, Complement complement)",
    "parameters" : [
     {
      "name" : "refFasta",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "queryFasta",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "complement",
      "deco" : "E3std8typecons__T4FlagVAyaa10_636f6d706c656d656e74ZQBi"
     }
    ],
    "endline" : 2117,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 2119,
    "char" : 14,
    "name" : "stretcherReadPercentIdentity",
    "parameters" : [
     {
      "name" : "StretcherResult",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "stretcherReadPercentIdentity",
      "kind" : "function",
      "line" : 2119,
      "char" : 14,
      "type" : "void(ref StretcherResult stretcherResult, ref StretcherAlignment alignment)",
      "parameters" : [
       {
        "name" : "stretcherResult",
        "type" : "StretcherResult",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "alignment",
        "type" : "StretcherAlignment",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 2139,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 2141,
    "char" : 14,
    "name" : "stretcherReadAlignmentString",
    "parameters" : [
     {
      "name" : "StretcherResult",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "stretcherReadAlignmentString",
      "kind" : "function",
      "line" : 2141,
      "char" : 14,
      "type" : "void(ref StretcherResult stretcherResult, ref StretcherAlignment alignment)",
      "parameters" : [
       {
        "name" : "stretcherResult",
        "type" : "StretcherResult",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "alignment",
        "type" : "StretcherAlignment",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 2168,
      "endchar" : 1
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.commands.checkScaffolding",
  "kind" : "module",
  "file" : "source/dentist/commands/checkScaffolding.d",
  "comment" : "    This is the `checkScaffolding` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Check results of some scaffolding + gap closing procedure.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 17,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Check results of some scaffolding + gap closing procedure.\\x0a\""
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 21,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isTesting"
    ]
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.commands.checkResults",
    "kind" : "import",
    "line" : 26,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Complement",
     "ContigAlignmentsCache",
     "ContigMapping"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 30,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "dentistEnforce",
     "ReferenceInterval",
     "ReferenceRegion"
    ]
   },
   {
    "name" : "dentist.common.alignments.base",
    "kind" : "import",
    "line" : 34,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.binio.insertiondb",
    "kind" : "import",
    "line" : 35,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "InsertionDb"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 36,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "TestingCommand"
    ]
   },
   {
    "name" : "dentist.common.insertions",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "getInfoForExistingContig",
     "getInfoForNewSequenceInsertion",
     "InsertionInfo",
     "isOutputGap"
    ]
   },
   {
    "name" : "dentist.common.scaffold",
    "kind" : "import",
    "line" : 42,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "buildScaffold",
     "isAntiParallel",
     "isDefault",
     "linearWalk",
     "scaffoldStarts"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 48,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DBdumpOptions",
     "DbRecord",
     "getContigCutoff",
     "getDbRecords",
     "readDazzExtra",
     "readMask"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 55,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.range",
    "kind" : "import",
    "line" : 56,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "arrayChunks"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 57,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "equal",
     "chunkBy",
     "copy",
     "filter",
     "find",
     "isSorted",
     "max",
     "maxElement",
     "min",
     "minElement",
     "map",
     "reverse",
     "sort",
     "until"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 72,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 73,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 74,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 75,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assumeSorted",
     "chain",
     "enumerate",
     "iota",
     "only",
     "slide"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 82,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 83,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "writeln"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 84,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "No"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 85,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson",
     "toJsonCompressed" : "serializeToJsonString",
     "toJsonString" : "serializeToPrettyJson"
    },
    "selective" : [
     "Json"
    ]
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `checkScaffolding` command.\n",
    "line" : 93,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi20ZQCb",
    "originalType" : "OptionsFor!(TestingCommand.checkScaffolding)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `checkScaffolding` command with `options`.\n",
    "line" : 96,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi20ZQCbZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi20ZQCb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 101,
    "endchar" : 1
   },
   {
    "name" : "referenceOrder",
    "kind" : "function",
    "protection" : "public",
    "line" : 104,
    "char" : 6,
    "deco" : "FNaNbNfxS7dentist8commands12checkResults13ContigMappingxQBwZb",
    "originalType" : "pure nothrow @safe bool(const ContigMapping lhs, const ContigMapping rhs)",
    "parameters" : [
     {
      "name" : "lhs",
      "deco" : "xS7dentist8commands12checkResults13ContigMapping"
     },
     {
      "name" : "rhs",
      "deco" : "xS7dentist8commands12checkResults13ContigMapping"
     }
    ],
    "endline" : 107,
    "endchar" : 1
   },
   {
    "name" : "queryOrder",
    "kind" : "function",
    "protection" : "public",
    "line" : 110,
    "char" : 6,
    "deco" : "FNaNbNfxS7dentist8commands12checkResults13ContigMappingxQBwZb",
    "originalType" : "pure nothrow @safe bool(const ContigMapping lhs, const ContigMapping rhs)",
    "parameters" : [
     {
      "name" : "lhs",
      "deco" : "xS7dentist8commands12checkResults13ContigMapping"
     },
     {
      "name" : "rhs",
      "deco" : "xS7dentist8commands12checkResults13ContigMapping"
     }
    ],
    "endline" : 113,
    "endchar" : 1
   },
   {
    "name" : "ResultAnalyzer",
    "kind" : "struct",
    "protection" : "private",
    "line" : 116,
    "char" : 9,
    "members" : [
     {
      "name" : "JoinState",
      "kind" : "enum",
      "protection" : "public",
      "line" : 118,
      "char" : 12,
      "baseDeco" : "h",
      "members" : [
       {
        "name" : "ignored",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "cast(ubyte)0u",
        "comment" : "Ignore this join\n",
        "line" : 121,
        "char" : 9
       },
       {
        "name" : "correct",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "1",
        "comment" : "The involved contigs are joined as in the test assembly.\n",
        "line" : 123,
        "char" : 9
       },
       {
        "name" : "novel",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "2",
        "comment" : "Two scaffold ends are joined.\n",
        "line" : 125,
        "char" : 9
       },
       {
        "name" : "broken",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "3",
        "comment" : "The join contradicts the test assembly.\n",
        "line" : 127,
        "char" : 9
       }
      ]
     },
     {
      "name" : "JoinSummary",
      "kind" : "struct",
      "protection" : "public",
      "line" : 130,
      "char" : 12,
      "members" : [
       {
        "name" : "state",
        "kind" : "variable",
        "protection" : "public",
        "line" : 132,
        "char" : 19,
        "deco" : "E7dentist8commands16checkScaffolding14ResultAnalyzer9JoinState",
        "offset" : 0
       },
       {
        "name" : "lhsContigMapping",
        "kind" : "variable",
        "protection" : "public",
        "line" : 133,
        "char" : 23,
        "deco" : "S7dentist8commands12checkResults13ContigMapping",
        "offset" : 8
       },
       {
        "name" : "rhsContigMapping",
        "kind" : "variable",
        "protection" : "public",
        "line" : 134,
        "char" : 23,
        "deco" : "S7dentist8commands12checkResults13ContigMapping",
        "offset" : 56
       },
       {
        "name" : "skippedContigMappings",
        "kind" : "variable",
        "protection" : "public",
        "line" : 135,
        "char" : 25,
        "deco" : "AS7dentist8commands12checkResults13ContigMapping",
        "offset" : 104
       },
       {
        "name" : "toJson",
        "kind" : "function",
        "protection" : "public",
        "line" : 138,
        "char" : 16,
        "deco" : "xFZAya",
        "endline" : 146,
        "endchar" : 9
       }
      ]
     },
     {
      "name" : "JoinedContigs",
      "kind" : "struct",
      "protection" : "public",
      "line" : 149,
      "char" : 12,
      "members" : [
       {
        "name" : "lhs",
        "kind" : "variable",
        "protection" : "public",
        "line" : 151,
        "char" : 14,
        "deco" : "k",
        "originalType" : "id_t",
        "offset" : 0
       },
       {
        "name" : "rhs",
        "kind" : "variable",
        "protection" : "public",
        "line" : 152,
        "char" : 14,
        "deco" : "k",
        "originalType" : "id_t",
        "offset" : 4
       }
      ]
     },
     {
      "name" : "dbdumpOptions",
      "kind" : "variable",
      "protection" : "public",
      "line" : 155,
      "char" : 10,
      "storageClass" : [
       "enum"
      ],
      "deco" : "AE7dentist7dazzler13DBdumpOptions",
      "init" : "[\"-r\", \"-h\"]"
     },
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "public",
      "line" : 157,
      "char" : 20,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi20ZQCb",
      "originalType" : "const(Options)",
      "offset" : 0
     },
     {
      "name" : "mappedContigs",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 158,
      "char" : 35,
      "deco" : "AS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
      "originalType" : "ReferenceInterval[]",
      "offset" : 176
     },
     {
      "name" : "trueScaffoldStructure",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 159,
      "char" : 26,
      "deco" : "AS7dentist7dazzler8DbRecord",
      "offset" : 192
     },
     {
      "name" : "resultScaffoldStructure",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 160,
      "char" : 26,
      "deco" : "AS7dentist7dazzler8DbRecord",
      "offset" : 208
     },
     {
      "name" : "knownContigMappings",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 161,
      "char" : 31,
      "deco" : "AS7dentist8commands12checkResults13ContigMapping",
      "offset" : 224
     },
     {
      "name" : "gapStartIndices",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 162,
      "char" : 24,
      "deco" : "Am",
      "originalType" : "size_t[]",
      "offset" : 240
     },
     {
      "name" : "contigMappings",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 163,
      "char" : 31,
      "deco" : "AS7dentist8commands12checkResults13ContigMapping",
      "offset" : 256
     },
     {
      "name" : "joinSummaries",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 164,
      "char" : 29,
      "deco" : "AS7dentist8commands16checkScaffolding14ResultAnalyzer11JoinSummary",
      "offset" : 272
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 166,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 173,
      "endchar" : 5
     },
     {
      "name" : "init",
      "kind" : "function",
      "protection" : "public",
      "line" : 175,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 201,
      "endchar" : 5
     },
     {
      "name" : "enforceMappedAndTestAssemblyContigLengthsMatch",
      "kind" : "function",
      "protection" : "public",
      "line" : 203,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 216,
      "endchar" : 5
     },
     {
      "name" : "fakeContigMappingsFromScaffolding",
      "kind" : "function",
      "protection" : "public",
      "line" : 218,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 294,
      "endchar" : 5
     },
     {
      "name" : "analyzeJoins",
      "kind" : "function",
      "protection" : "public",
      "line" : 296,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 345,
      "endchar" : 5
     },
     {
      "name" : "onSameResultContig",
      "kind" : "function",
      "protection" : "public",
      "line" : 347,
      "char" : 10,
      "deco" : "xFNaNbNfxS7dentist8commands12checkResults13ContigMappingxQBwZb",
      "originalType" : "const pure nothrow @safe bool(const ContigMapping lhs, const ContigMapping rhs)",
      "parameters" : [
       {
        "name" : "lhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping"
       },
       {
        "name" : "rhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping"
       }
      ],
      "endline" : 350,
      "endchar" : 5
     },
     {
      "name" : "areOrderedInTheResult",
      "kind" : "function",
      "protection" : "public",
      "line" : 352,
      "char" : 10,
      "deco" : "xFNaNbNfxS7dentist8commands12checkResults13ContigMappingxQBwZb",
      "originalType" : "const pure nothrow @safe bool(const ContigMapping lhs, const ContigMapping rhs)",
      "parameters" : [
       {
        "name" : "lhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping"
       },
       {
        "name" : "rhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping"
       }
      ],
      "endline" : 355,
      "endchar" : 5
     },
     {
      "name" : "areOrderedInTheResult",
      "kind" : "function",
      "protection" : "public",
      "line" : 357,
      "char" : 10,
      "deco" : "xFNaNbNfxS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalxQDfZb",
      "originalType" : "const pure nothrow @safe bool(const ReferenceInterval lhs, const ReferenceInterval rhs)",
      "parameters" : [
       {
        "name" : "lhs",
        "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval"
       },
       {
        "name" : "rhs",
        "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval"
       }
      ],
      "endline" : 360,
      "endchar" : 5
     },
     {
      "name" : "nonoverlappingInResult",
      "kind" : "function",
      "protection" : "public",
      "line" : 362,
      "char" : 10,
      "deco" : "xFNaNbNfxS7dentist8commands12checkResults13ContigMappingxQBwZb",
      "originalType" : "const pure nothrow @safe bool(const ContigMapping lhs, const ContigMapping rhs)",
      "parameters" : [
       {
        "name" : "lhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping"
       },
       {
        "name" : "rhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping"
       }
      ],
      "endline" : 365,
      "endchar" : 5
     },
     {
      "name" : "adjacentInTrueAssembly",
      "kind" : "function",
      "protection" : "public",
      "line" : 367,
      "char" : 10,
      "deco" : "xFNaNbNfxS7dentist8commands12checkResults13ContigMappingxQBwZb",
      "originalType" : "const pure nothrow @safe bool(const ContigMapping lhs, const ContigMapping rhs)",
      "parameters" : [
       {
        "name" : "lhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping"
       },
       {
        "name" : "rhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping"
       }
      ],
      "endline" : 385,
      "endchar" : 5
     },
     {
      "name" : "maybeAdjacentInTrueAssembly",
      "kind" : "function",
      "protection" : "public",
      "line" : 387,
      "char" : 10,
      "deco" : "xFNaNbNfxS7dentist8commands12checkResults13ContigMappingxQBwZb",
      "originalType" : "const pure nothrow @safe bool(const ContigMapping lhs, const ContigMapping rhs)",
      "parameters" : [
       {
        "name" : "lhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping"
       },
       {
        "name" : "rhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping"
       }
      ],
      "endline" : 404,
      "endchar" : 5
     },
     {
      "name" : "skippedContigsArePresent",
      "kind" : "function",
      "protection" : "public",
      "line" : 406,
      "char" : 10,
      "deco" : "xFNaNfxS7dentist8commands12checkResults13ContigMappingxQBwJASQCbQBwQBqQBfZb",
      "originalType" : "const pure @safe bool(const ContigMapping lhs, const ContigMapping rhs, out ContigMapping[] skippedContigMappings)",
      "parameters" : [
       {
        "name" : "lhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping"
       },
       {
        "name" : "rhs",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping"
       },
       {
        "name" : "skippedContigMappings",
        "deco" : "AS7dentist8commands12checkResults13ContigMapping",
        "storageClass" : [
         "out"
        ]
       }
      ],
      "endline" : 458,
      "endchar" : 5
     },
     {
      "name" : "endOfTrueAssemblyScaffold",
      "kind" : "function",
      "protection" : "public",
      "line" : 460,
      "char" : 10,
      "deco" : "xFNaNbNfxS7dentist8commands12checkResults13ContigMappingZb",
      "originalType" : "const pure nothrow @safe bool(const ContigMapping contigMapping)",
      "parameters" : [
       {
        "name" : "contigMapping",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping"
       }
      ],
      "endline" : 484,
      "endchar" : 5
     },
     {
      "name" : "endOfResultAssemblyContig",
      "kind" : "function",
      "protection" : "public",
      "line" : 486,
      "char" : 10,
      "deco" : "xFNaNbNfxS7dentist8commands12checkResults13ContigMappingZb",
      "originalType" : "const pure nothrow @safe bool(const ContigMapping contigMapping)",
      "parameters" : [
       {
        "name" : "contigMapping",
        "deco" : "xS7dentist8commands12checkResults13ContigMapping"
       }
      ],
      "endline" : 490,
      "endchar" : 5
     },
     {
      "name" : "getDbRecord",
      "kind" : "function",
      "protection" : "public",
      "line" : 492,
      "char" : 21,
      "deco" : "xFNaNbNfxAS7dentist7dazzler8DbRecordmZxQBd",
      "originalType" : "const pure nothrow @safe const(DbRecord)(const DbRecord[] dbRecords, size_t contigId)",
      "parameters" : [
       {
        "name" : "dbRecords",
        "deco" : "xAS7dentist7dazzler8DbRecord"
       },
       {
        "name" : "contigId",
        "deco" : "m"
       }
      ],
      "endline" : 498,
      "endchar" : 5
     },
     {
      "name" : "writeScaffolingReportJson",
      "kind" : "function",
      "protection" : "public",
      "line" : 500,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 507,
      "endchar" : 5
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.commands.collectPileUps.filter",
  "kind" : "module",
  "file" : "source/dentist/commands/collectPileUps/filter.d",
  "comment" : "    This is a collection of helpers for the alignment filtering.\n\n    Filter_Pipeline:\n\n    See `dentist.commands.collectPileUps.PileUpCollector.filterAlignments`\n    for the definite implementation.\n\n    $(OL\n        $(LI `LQAlignmentChainsFilter`)\n        $(LI `ImproperAlignmentChainsFilter`)\n        $(LI `WeaklyAnchoredAlignmentChainsFilter`)\n        $(LI `ContainedAlignmentChainsFilter`)\n        $(LI `AmbiguousAlignmentChainsFilter`)\n        $(LI `RedundantAlignmentChainsFilter`)\n    )\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "coord_t",
     "ReadInterval",
     "ReadRegion",
     "ReferenceInterval",
     "ReferenceRegion",
     "to",
     "toInterval"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 33,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AlignmentChain",
     "haveEqualIds"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 36,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "cmpLexicographically",
     "orderLexicographically"
    ]
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 40,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "sliceUntil"
    ]
   },
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 41,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "findMaximallyConnectedComponents",
     "NaturalNumberSet"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 44,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "all",
     "chunkBy",
     "copy",
     "filter",
     "isSorted",
     "joiner",
     "map",
     "sort",
     "SwapStrategy",
     "uniq"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 55,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "appender",
     "array"
    ]
   },
   {
    "name" : "std.parallelism",
    "kind" : "import",
    "line" : 58,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "taskPool"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 59,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "InputRange",
     "inputRangeObject",
     "walkLength"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 63,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Flag",
     "Yes"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 64,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    }
   },
   {
    "name" : "AlignmentChainFilter",
    "kind" : "interface",
    "protection" : "public",
    "comment" : "Common interface for alignment chain filters.\n",
    "line" : 68,
    "char" : 1,
    "members" : [
     {
      "name" : "opCall",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Returns a filtered list of `alignmentChains`.\n",
      "line" : 71,
      "char" : 22,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
      "parameters" : [
       {
        "name" : "alignmentChains",
        "deco" : "AS7dentist6common10alignments4base14AlignmentChain"
       }
      ]
     }
    ]
   },
   {
    "name" : "ReadFilter",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Common interface for read filters, i.e. filters that remove all alignments\nassociated to a set of read IDs.\n\nThis comes at a greater cost because (1) another sort-order may be\nrequired and (2) the list of alignments must be passed twice: first\ndetermine read IDs that should be discarded and then remove associated\nalignments.\n",
    "line" : 82,
    "char" : 10,
    "interfaces" : [
     "dentist.commands.collectPileUps.filter.AlignmentChainFilter"
    ],
    "members" : [
     {
      "name" : "unusedReads",
      "kind" : "variable",
      "protection" : "public",
      "line" : 84,
      "char" : 23,
      "deco" : "PS7dentist4util4math16NaturalNumberSet",
      "offset" : 24
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : "Construct a read filter that keeps track of the read IDs that were\nnot removed.\n",
      "line" : 88,
      "char" : 5,
      "deco" : "FPS7dentist4util4math16NaturalNumberSetZCQBm8commands14collectPileUps6filter10ReadFilter",
      "originalType" : "(NaturalNumberSet* unusedReads)",
      "parameters" : [
       {
        "name" : "unusedReads",
        "deco" : "PS7dentist4util4math16NaturalNumberSet"
       }
      ],
      "endline" : 91,
      "endchar" : 5
     },
     {
      "name" : "opCall",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Default implementation that relies on `getDiscardedReadIds` to return\na list of read IDs that should be discarded.\n",
      "line" : 95,
      "char" : 31,
      "storageClass" : [
       "override"
      ],
      "deco" : "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
      "parameters" : [
       {
        "name" : "alignmentChains",
        "deco" : "AS7dentist6common10alignments4base14AlignmentChain"
       }
      ],
      "endline" : 115,
      "endchar" : 5,
      "overrides" : [
       "dentist.commands.collectPileUps.filter.AlignmentChainFilter.opCall"
      ]
     },
     {
      "name" : "getDiscardedReadIds",
      "kind" : "function",
      "protection" : "public",
      "line" : 117,
      "char" : 33,
      "deco" : "FAS7dentist6common10alignments4base14AlignmentChainZC3std5range10interfaces__T10InputRangeTQDlZQr",
      "originalType" : "InputRange!AlignmentChain(AlignmentChain[] alignmentChains)",
      "parameters" : [
       {
        "name" : "alignmentChains",
        "deco" : "AS7dentist6common10alignments4base14AlignmentChain"
       }
      ]
     }
    ]
   },
   {
    "name" : "LQAlignmentChainsFilter",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Discard alignments with low quality.\n",
    "line" : 122,
    "char" : 1,
    "interfaces" : [
     "dentist.commands.collectPileUps.filter.AlignmentChainFilter"
    ],
    "members" : [
     {
      "name" : "maxAlignmentError",
      "kind" : "variable",
      "protection" : "public",
      "line" : 124,
      "char" : 12,
      "deco" : "d",
      "offset" : 24
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 126,
      "char" : 5,
      "deco" : "FdZC7dentist8commands14collectPileUps6filter23LQAlignmentChainsFilter",
      "originalType" : "(double maxAlignmentError)",
      "parameters" : [
       {
        "name" : "maxAlignmentError",
        "deco" : "d"
       }
      ],
      "endline" : 129,
      "endchar" : 5
     },
     {
      "name" : "opCall",
      "kind" : "function",
      "protection" : "public",
      "line" : 131,
      "char" : 31,
      "storageClass" : [
       "override"
      ],
      "deco" : "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
      "parameters" : [
       {
        "name" : "alignmentChains",
        "deco" : "AS7dentist6common10alignments4base14AlignmentChain"
       }
      ],
      "endline" : 137,
      "endchar" : 5,
      "overrides" : [
       "dentist.commands.collectPileUps.filter.AlignmentChainFilter.opCall"
      ]
     }
    ]
   },
   {
    "name" : "ImproperAlignmentChainsFilter",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Discard improper alignments.\n",
    "line" : 142,
    "char" : 1,
    "interfaces" : [
     "dentist.commands.collectPileUps.filter.AlignmentChainFilter"
    ],
    "members" : [
     {
      "name" : "properAlignmentAllowance",
      "kind" : "variable",
      "protection" : "public",
      "line" : 144,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 24
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 146,
      "char" : 5,
      "deco" : "FkZC7dentist8commands14collectPileUps6filter29ImproperAlignmentChainsFilter",
      "originalType" : "(coord_t properAlignmentAllowance)",
      "parameters" : [
       {
        "name" : "properAlignmentAllowance",
        "deco" : "k"
       }
      ],
      "endline" : 149,
      "endchar" : 5
     },
     {
      "name" : "opCall",
      "kind" : "function",
      "protection" : "public",
      "line" : 151,
      "char" : 31,
      "storageClass" : [
       "override"
      ],
      "deco" : "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
      "parameters" : [
       {
        "name" : "alignmentChains",
        "deco" : "AS7dentist6common10alignments4base14AlignmentChain"
       }
      ],
      "endline" : 159,
      "endchar" : 5,
      "overrides" : [
       "dentist.commands.collectPileUps.filter.AlignmentChainFilter.opCall"
      ]
     }
    ]
   },
   {
    "name" : "RedundantAlignmentChainsFilter",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Discard read if it has an alignment that – extended with the\nexceeding read sequence on either end – is fully contained in\na single contig.\n",
    "line" : 166,
    "char" : 1,
    "base" : "dentist.commands.collectPileUps.filter.ReadFilter",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 168,
      "char" : 5,
      "deco" : "FPS7dentist4util4math16NaturalNumberSetZCQBm8commands14collectPileUps6filter30RedundantAlignmentChainsFilter",
      "originalType" : "(NaturalNumberSet* unusedReads)",
      "parameters" : [
       {
        "name" : "unusedReads",
        "deco" : "PS7dentist4util4math16NaturalNumberSet"
       }
      ],
      "endline" : 171,
      "endchar" : 5
     },
     {
      "name" : "getDiscardedReadIds",
      "kind" : "function",
      "protection" : "public",
      "line" : 173,
      "char" : 42,
      "storageClass" : [
       "override"
      ],
      "deco" : "FAS7dentist6common10alignments4base14AlignmentChainZC3std5range10interfaces__T10InputRangeTQDlZQr",
      "originalType" : "InputRange!AlignmentChain(AlignmentChain[] alignmentChains)",
      "parameters" : [
       {
        "name" : "alignmentChains",
        "deco" : "AS7dentist6common10alignments4base14AlignmentChain"
       }
      ],
      "endline" : 176,
      "endchar" : 5,
      "overrides" : [
       "dentist.commands.collectPileUps.filter.ReadFilter.getDiscardedReadIds"
      ]
     }
    ]
   },
   {
    "name" : "ContainedAlignmentChainsFilter",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Discard alignments that are contained in other alignments.\n",
    "line" : 181,
    "char" : 1,
    "interfaces" : [
     "dentist.commands.collectPileUps.filter.AlignmentChainFilter"
    ],
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 183,
      "char" : 5,
      "deco" : "FZC7dentist8commands14collectPileUps6filter30ContainedAlignmentChainsFilter",
      "originalType" : "()",
      "endline" : 183,
      "endchar" : 14
     },
     {
      "name" : "opCall",
      "kind" : "function",
      "protection" : "public",
      "line" : 185,
      "char" : 31,
      "storageClass" : [
       "override"
      ],
      "deco" : "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
      "parameters" : [
       {
        "name" : "alignmentChains",
        "deco" : "AS7dentist6common10alignments4base14AlignmentChain"
       }
      ],
      "endline" : 210,
      "endchar" : 5,
      "overrides" : [
       "dentist.commands.collectPileUps.filter.AlignmentChainFilter.opCall"
      ]
     }
    ]
   },
   {
    "name" : "filterContainedAlignmentChains",
    "kind" : "function",
    "protection" : "public",
    "line" : 214,
    "char" : 18,
    "deco" : "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
    "parameters" : [
     {
      "name" : "alignmentChains",
      "deco" : "AS7dentist6common10alignments4base14AlignmentChain"
     }
    ],
    "endline" : 219,
    "endchar" : 1
   },
   {
    "name" : "groupByRead",
    "kind" : "function",
    "protection" : "private",
    "line" : 222,
    "char" : 14,
    "deco" : "FNaNbNiNfxS7dentist6common10alignments4base14AlignmentChainxQByZb",
    "originalType" : "pure nothrow @nogc @safe bool(const AlignmentChain lhs, const AlignmentChain rhs)",
    "parameters" : [
     {
      "name" : "lhs",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain"
     },
     {
      "name" : "rhs",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain"
     }
    ],
    "endline" : 225,
    "endchar" : 1
   },
   {
    "name" : "orderByReadAndErrorRate",
    "kind" : "alias",
    "protection" : "private",
    "line" : 228,
    "char" : 9,
    "originalType" : "orderLexicographically!(AlignmentChain, (ac) => ac.contigB.id, (ac) => ac.averageErrorRate)"
   },
   {
    "name" : "AmbiguousAlignmentChainsFilter",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Discard read if part of it aligns to multiple loci in the reference.\n",
    "line" : 236,
    "char" : 1,
    "interfaces" : [
     "dentist.commands.collectPileUps.filter.AlignmentChainFilter"
    ],
    "members" : [
     {
      "name" : "unusedReads",
      "kind" : "variable",
      "protection" : "public",
      "line" : 238,
      "char" : 23,
      "deco" : "PS7dentist4util4math16NaturalNumberSet",
      "offset" : 24
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 240,
      "char" : 5,
      "deco" : "FPS7dentist4util4math16NaturalNumberSetZCQBm8commands14collectPileUps6filter30AmbiguousAlignmentChainsFilter",
      "originalType" : "(NaturalNumberSet* unusedReads)",
      "parameters" : [
       {
        "name" : "unusedReads",
        "deco" : "PS7dentist4util4math16NaturalNumberSet"
       }
      ],
      "endline" : 243,
      "endchar" : 5
     },
     {
      "name" : "opCall",
      "kind" : "function",
      "protection" : "public",
      "line" : 245,
      "char" : 31,
      "storageClass" : [
       "override"
      ],
      "deco" : "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
      "parameters" : [
       {
        "name" : "alignmentChains",
        "deco" : "AS7dentist6common10alignments4base14AlignmentChain"
       }
      ],
      "endline" : 260,
      "endchar" : 5,
      "overrides" : [
       "dentist.commands.collectPileUps.filter.AlignmentChainFilter.opCall"
      ]
     },
     {
      "name" : "groupByReadLocus",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "Groups local alignments of one read into groups of overlapping alignments.\n",
      "line" : 263,
      "char" : 41,
      "storageClass" : [
       "static"
      ],
      "deco" : "FAS7dentist6common10alignments4base14AlignmentChainZAQCa",
      "parameters" : [
       {
        "name" : "readAlignments",
        "deco" : "AS7dentist6common10alignments4base14AlignmentChain"
       }
      ],
      "endline" : 284,
      "endchar" : 5
     },
     {
      "name" : "getUniquelyAlignedRead",
      "kind" : "function",
      "protection" : "protected",
      "line" : 286,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FAAS7dentist6common10alignments4base14AlignmentChainZS3std9algorithm9iteration__T6joinerTQDkZQmFQDrZ6Result",
      "originalType" : "(AlignmentChain[][] groupedByReadLocus)",
      "parameters" : [
       {
        "name" : "groupedByReadLocus",
        "deco" : "AAS7dentist6common10alignments4base14AlignmentChain"
       }
      ],
      "endline" : 319,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "WeaklyAnchoredAlignmentChainsFilter",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Discard alignments that are insufficiently anchored, i.e. include less\nthan `minAnchorLength` unmasked reference base pairs.\n",
    "line" : 326,
    "char" : 1,
    "interfaces" : [
     "dentist.commands.collectPileUps.filter.AlignmentChainFilter"
    ],
    "members" : [
     {
      "name" : "minAnchorLength",
      "kind" : "variable",
      "protection" : "public",
      "line" : 328,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 24
     },
     {
      "name" : "repetitiveRegions",
      "kind" : "variable",
      "protection" : "public",
      "line" : 329,
      "char" : 28,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "const(ReferenceRegion)",
      "offset" : 32
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 331,
      "char" : 5,
      "deco" : "FxS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBnmZCQCq8commands14collectPileUps6filter35WeaklyAnchoredAlignmentChainsFilter",
      "originalType" : "(const(ReferenceRegion) repetitiveRegions, size_t minAnchorLength)",
      "parameters" : [
       {
        "name" : "repetitiveRegions",
        "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn"
       },
       {
        "name" : "minAnchorLength",
        "deco" : "m"
       }
      ],
      "endline" : 335,
      "endchar" : 5
     },
     {
      "name" : "opCall",
      "kind" : "function",
      "protection" : "public",
      "line" : 337,
      "char" : 22,
      "deco" : "FAS7dentist6common10alignments4base14AlignmentChainZQBz",
      "parameters" : [
       {
        "name" : "alignmentChains",
        "deco" : "AS7dentist6common10alignments4base14AlignmentChain"
       }
      ],
      "endline" : 345,
      "endchar" : 5,
      "overrides" : [
       "dentist.commands.collectPileUps.filter.AlignmentChainFilter.opCall"
      ]
     },
     {
      "name" : "isWeaklyAnchored",
      "kind" : "function",
      "protection" : "public",
      "line" : 347,
      "char" : 10,
      "deco" : "FS7dentist6common10alignments4base14AlignmentChainZb",
      "parameters" : [
       {
        "name" : "alignment",
        "deco" : "S7dentist6common10alignments4base14AlignmentChain"
       }
      ],
      "endline" : 355,
      "endchar" : 5
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.commands.collectPileUps",
  "kind" : "module",
  "file" : "source/dentist/commands/collectPileUps/package.d",
  "comment" : "    This is the `collectPileUps` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Build and collect pile ups of reads that are candidates for gap closing.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 17,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Build and collect pile ups of reads that are candidates for gap closing.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 21,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.commands.collectPileUps.filter",
    "kind" : "import",
    "line" : 22,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AmbiguousAlignmentChainsFilter",
     "ContainedAlignmentChainsFilter",
     "ImproperAlignmentChainsFilter",
     "LQAlignmentChainsFilter",
     "RedundantAlignmentChainsFilter",
     "WeaklyAnchoredAlignmentChainsFilter"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 29,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistException",
     "ReferenceInterval",
     "ReferenceRegion"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 33,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AlignmentChain",
     "getType",
     "PileUp"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.common.binio",
    "kind" : "import",
    "line" : 38,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "writePileUpsDb"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 39,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "GapSegment",
     "getAlignments",
     "getNumContigs",
     "getScaffoldStructure",
     "readMask"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 45,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 46,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "NaturalNumberSet"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 47,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "canFind",
     "count",
     "filter",
     "map",
     "sum"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 53,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 54,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 55,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enforce"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 56,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "tuple",
     "Yes"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 57,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    }
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `collectPileUps` command.\n",
    "line" : 61,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCb",
    "originalType" : "OptionsFor!(DentistCommand.collectPileUps)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `collectPileUps` command with `options`.\n",
    "line" : 65,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCbZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 70,
    "endchar" : 1
   },
   {
    "name" : "PileUpCollector",
    "kind" : "class",
    "protection" : "public",
    "comment" : "This class comprises the `collectPileUps` step of the DENTIST algorithm\n",
    "line" : 73,
    "char" : 1,
    "members" : [
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 75,
      "char" : 29,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCb",
      "originalType" : "Options",
      "offset" : 16
     },
     {
      "name" : "numReferenceContigs",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 76,
      "char" : 22,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 280
     },
     {
      "name" : "numReads",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 77,
      "char" : 22,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 288
     },
     {
      "name" : "readsAlignment",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 78,
      "char" : 32,
      "deco" : "AS7dentist6common10alignments4base14AlignmentChain",
      "offset" : 296
     },
     {
      "name" : "repetitiveRegions",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 79,
      "char" : 31,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "ReferenceRegion",
      "offset" : 312
     },
     {
      "name" : "inputGaps",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 80,
      "char" : 28,
      "deco" : "AS7dentist7dazzler10GapSegment",
      "offset" : 328
     },
     {
      "name" : "unusedReads",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 81,
      "char" : 32,
      "deco" : "S7dentist4util4math16NaturalNumberSet",
      "offset" : 344
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 83,
      "char" : 5,
      "deco" : "FIKS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCbZCQDeQBl14collectPileUps15PileUpCollector",
      "originalType" : "(in ref Options options)",
      "parameters" : [
       {
        "name" : "options",
        "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCb",
        "storageClass" : [
         "in",
         "ref"
        ]
       }
      ],
      "endline" : 86,
      "endchar" : 5
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 88,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 96,
      "endchar" : 5
     },
     {
      "name" : "readInputs",
      "kind" : "function",
      "protection" : "protected",
      "line" : 98,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 128,
      "endchar" : 5
     },
     {
      "name" : "filterAlignments",
      "kind" : "function",
      "protection" : "protected",
      "line" : 130,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 157,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "protected",
      "line" : 159,
      "char" : 20,
      "name" : "applyFilter",
      "parameters" : [
       {
        "name" : "Filter",
        "kind" : "alias"
       }
      ],
      "members" : [
       {
        "name" : "applyFilter",
        "kind" : "function",
        "line" : 159,
        "char" : 20,
        "type" : "void(Filter filter)",
        "parameters" : [
         {
          "name" : "filter",
          "type" : "Filter"
         }
        ],
        "endline" : 172,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "buildPileUps",
      "kind" : "function",
      "protection" : "protected",
      "line" : 174,
      "char" : 24,
      "deco" : "FZAAS7dentist6common10alignments4base13ReadAlignment",
      "originalType" : "PileUp[]()",
      "endline" : 199,
      "endchar" : 5
     },
     {
      "name" : "writePileUps",
      "kind" : "function",
      "protection" : "protected",
      "line" : 201,
      "char" : 20,
      "deco" : "FAAS7dentist6common10alignments4base13ReadAlignmentZv",
      "originalType" : "void(PileUp[] pileUps)",
      "parameters" : [
       {
        "name" : "pileUps",
        "deco" : "AAS7dentist6common10alignments4base13ReadAlignment"
       }
      ],
      "endline" : 206,
      "endchar" : 5
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.commands.collectPileUps.pileups",
  "kind" : "module",
  "file" : "source/dentist/commands/collectPileUps/pileups.d",
  "comment" : "    This is the algorithm for building pile ups.\n\n    Pipeline:\n\n    See `build` for the implementation.\n\n    $(OL\n        $(LI Group alignments by read ID and deduce graph edges\n            $(SEE_ALSO `collectScaffoldJoins!collectReadAlignments(candidates)`))\n        $(LI Create edges for `inputGaps` (`makeScaffoldJoin!GapSegment`))\n        $(LI $(STAGE raw) Build the scaffold graph from previously created\n            edges and the \"default\" edges for the contigs\n            $(SEE_ALSO `buildScaffold`))\n        $(LI $(STAGE resolvedBubbles) Detect small cycles (bubbles) and try to\n            resolve them by identifying \"skipping\" edges\n            $(SEE_ALSO `resolveBubbles`, `options.maxBubbleResolverIterations`,\n                `options.maxBubbleSize`))\n        $(LI $(STAGE unambiguous) Resolve forks in the graph by selecting\n            either one edge that has a significantly larger pile up than all\n            others or remove all conflicting edges.\n            $(SEE_ALSO `options.bestPileUpMargin`, `options.existingGapBonus`))\n        $(LI $(STAGE minSpanningEnforced) Removes edges with insufficient\n            number of spanning reads\n            $(SEE_ALSO `enforceMinSpanningReads`, `options.minSpanningReads`))\n        $(LI $(STAGE inputGapsRemoved) Remove input gaps from the graph as\n            they are no longer required\n            $(SEE_ALSO `removeInputGaps`))\n        $(LI $(STAGE extensionsMerged) Merge extending pile ups with adjacent\n            spanning pile ups if requested\n            $(SEE_ALSO `options.mergeExtensions`, `mergeExtensionsWithGaps`))\n        $(LI Collect the pile ups from the scaffold graph and return them.\n            $(SEE_ALSO `collectPileUps`))\n    )\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n    Macros:\n        STAGE = $(I Stage `\"$0\"`:)\n        SEE_ALSO = $(BR)See also: $0\n",
  "members" : [
   {
    "name" : "dentist.commands.collectPileUps",
    "kind" : "import",
    "line" : 46,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Options"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 47,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ReadInterval",
     "ReadRegion",
     "toInterval"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 51,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "AlignmentFlag" : "Flag",
     "AlignmentFlags" : "Flags"
    },
    "selective" : [
     "AlignmentChain",
     "AlignmentLocationSeed",
     "arithmetic_t",
     "Contig",
     "coord_t",
     "getType",
     "id_t",
     "isValid",
     "Locus",
     "makeJoin",
     "PileUp",
     "pileUpToSimpleJson",
     "ReadAlignment",
     "SeededAlignment"
    ]
   },
   {
    "name" : "dentist.common.binio",
    "kind" : "import",
    "line" : 68,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "writePileUpsDb"
    ]
   },
   {
    "name" : "dentist.common.scaffold",
    "kind" : "import",
    "line" : 69,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "buildScaffold",
     "ContigNode",
     "ContigPart",
     "getUnkownJoin",
     "isExtension",
     "isGap",
     "isTranscendent",
     "isReal",
     "Join",
     "mergeExtensionsWithGaps",
     "removeNoneJoins",
     "Scaffold"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 82,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "dbSubset",
     "getAlignments",
     "getDamapping",
     "GapSegment"
    ]
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 87,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "orderLexicographically",
     "uniqInPlace"
    ]
   },
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 90,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "add",
     "bulkAdd",
     "filterEdges",
     "findCyclicSubgraphs",
     "mapEdges"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 96,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.region",
    "kind" : "import",
    "line" : 97,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "empty"
    ]
   },
   {
    "name" : "dentist.util.tempfile",
    "kind" : "import",
    "line" : 98,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "mkstemp"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 99,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "among",
     "any",
     "canFind",
     "chunkBy",
     "copy",
     "count",
     "equal",
     "filter",
     "find",
     "fold",
     "joiner",
     "map",
     "min",
     "minElement",
     "sort",
     "sum",
     "swap",
     "until"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 118,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "equal"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 119,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "appender",
     "array"
    ]
   },
   {
    "name" : "std.bitmanip",
    "kind" : "import",
    "line" : 120,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "bitsSet"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 121,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.file",
    "kind" : "import",
    "line" : 122,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "exists",
     "remove"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 125,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.parallelism",
    "kind" : "import",
    "line" : 126,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "parallel"
    ]
   },
   {
    "name" : "std.path",
    "kind" : "import",
    "line" : 127,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "buildPath",
     "extension"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 130,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "chain",
     "cycle",
     "enumerate",
     "iota",
     "only",
     "retro",
     "slide",
     "StoppingPolicy",
     "walkLength",
     "zip"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 141,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 142,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "EnumMembers"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 143,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "BitFlags",
     "Flag",
     "No",
     "Yes"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 148,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    },
    "selective" : [
     "Json"
    ]
   },
   {
    "name" : "build",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Build and process a scaffold graph and collect the pile ups.\n\nParams:\nnumReferenceContigs = number of reference contigs used to construct\nthe base graph which has four nodes for each contig. Contigs are\nassumed to have IDs `1 .. numReferenceContigs + 1`.\ncandidates = alignment chains that are deemed reliable\ninputGaps = list of intra-scaffold gaps that connect contigs of the\ninput assembly\noptions = additional parameters (see CLI options for further information):\n$(UL\n$(LI `<in:reads>`)\n$(LI `<in:reference>`)\n$(LI `--best-pile-up-margin`)\n$(LI `--existing-gap-bonus`)\n$(LI `--debug-pile-ups`)\n$(LI `--no-merge-extension`)\n$(LI `--min-spanning-reads`)\n$(LI `--proper-alignment-allowance`)\n$(LI `--tmpdir`)\n)\n",
    "line" : 173,
    "char" : 10,
    "deco" : "FImAS7dentist6common10alignments4base14AlignmentChainASQBy7dazzler10GapSegmentISQCx11commandline__T10OptionsForVEQEeQDz8commands14DentistCommandi11ZQBxZAASQFuQFpQFlQFc13ReadAlignment",
    "originalType" : "PileUp[](in size_t numReferenceContigs, AlignmentChain[] candidates, GapSegment[] inputGaps, in Options options)",
    "parameters" : [
     {
      "name" : "numReferenceContigs",
      "deco" : "xm",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "candidates",
      "deco" : "AS7dentist6common10alignments4base14AlignmentChain"
     },
     {
      "name" : "inputGaps",
      "deco" : "AS7dentist7dazzler10GapSegment"
     },
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 208,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L210_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 210,
    "char" : 1,
    "endline" : 435,
    "endchar" : 1
   },
   {
    "name" : "collectPileUps",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Traverse the edges in `scaffold` and collect attached pile ups.\n\nReturns: range of valid, non-empty pile ups contained in `scaffold`.\n",
    "line" : 435,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNaNbNiNfS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIuZSQIr9algorithm9iteration__T12FilterResultSQLjQDwQDqQDdQDwFQMaZ9__lambda5TSQLmQCvQCo__TQChSQNfQFsQFmQEzQFsFQNwZ9__lambda4TSQNiQErQEk__T9MapResultSQPiQHvQHpQHcQHvFQPzZ9__lambda3TSQPlQGuQGn__TQGgSQReQJrQJlQIyQJrFQRvZ9__lambda2TSQRhQIqQIj__TQDzSQRx10functional__T8unaryFunVQSaa9_612e7061796c6f6164VQSza1_61ZQBsTASQVqQVlQVj__TQVhTQVeTvVQQyi0TQPgZQWb4EdgeZQIiZQMpZQIqZQMxZQNb",
    "originalType" : "(Scaffold!ScaffoldPayload scaffold)",
    "parameters" : [
     {
      "name" : "scaffold",
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu"
     }
    ],
    "endline" : 444,
    "endchar" : 1
   },
   {
    "name" : "debugLogPileUps",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Handle debugging output for `scaffold`.\n\nWrites a pile ups DB for `scaffold` if `dbStem !is null` and issues\na `LogLevel.debug_` log message describing `scaffold`.\n\nParams:\nstate = a descriptive string used to identify the state in which the\nscaffold is, e.g. `\"raw\"` or `\"resolvedBubbles\"`. This string\nmay be part a file name.\nscaffold = the scaffold graph\ndbStem = write pile ups DB `{dbStem}.{state}.db` of the current pile\nups in `scaffold` unless `dbStem is null`.\n",
    "line" : 459,
    "char" : 6,
    "deco" : "FAyaS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVQCga8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQEka10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQGia10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIuIAyaZv",
    "originalType" : "void(string state, Scaffold!ScaffoldPayload scaffold, in string dbStem)",
    "parameters" : [
     {
      "name" : "state",
      "deco" : "Aya"
     },
     {
      "name" : "scaffold",
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu"
     },
     {
      "name" : "dbStem",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 479,
    "endchar" : 1
   },
   {
    "name" : "ScaffoldPayload",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Struct to handle different types of payloads.\n\nSee_also: `ScaffoldPayload.Type`\n",
    "line" : 485,
    "char" : 1,
    "members" : [
     {
      "name" : "Type",
      "kind" : "enum",
      "protection" : "public",
      "comment" : "Possible type of a payload. A single payload may have several types a\nonce.\n",
      "line" : 489,
      "char" : 12,
      "baseDeco" : "h",
      "members" : [
       {
        "name" : "pileUp",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "cast(ubyte)1u",
        "comment" : "Payload contains a list of `ReadAlignment`s – the pile up.\n",
        "line" : 492,
        "char" : 9
       },
       {
        "name" : "inputGap",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "cast(ubyte)2u",
        "comment" : "The edge represents a gap in the input assembly.\n",
        "line" : 495,
        "char" : 9
       }
      ]
     },
     {
      "name" : "types",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Current types of this payload.\n",
      "line" : 499,
      "char" : 19,
      "deco" : "S3std8typecons__T8BitFlagsTE7dentist8commands14collectPileUps7pileups15ScaffoldPayload4TypeVEQDoQDn__T4FlagVAyaa6_756e73616665ZQzi0ZQEl",
      "originalType" : "BitFlags!Type",
      "offset" : 0
     },
     {
      "name" : "readAlignments",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Pile up associated with this payload.\n",
      "line" : 502,
      "char" : 21,
      "deco" : "AS7dentist6common10alignments4base13ReadAlignment",
      "offset" : 8
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "private",
      "line" : 505,
      "char" : 13,
      "deco" : "FNaNbNcE7dentist8commands14collectPileUps7pileups15ScaffoldPayload4TypeASQCn6common10alignments4base13ReadAlignmentZSQEfQEaQDuQDhQDc",
      "originalType" : "pure nothrow ref (Type type, ReadAlignment[] readAlignments = [])",
      "parameters" : [
       {
        "name" : "type",
        "deco" : "E7dentist8commands14collectPileUps7pileups15ScaffoldPayload4Type"
       },
       {
        "name" : "readAlignments",
        "deco" : "AS7dentist6common10alignments4base13ReadAlignment",
        "default" : "[]"
       }
      ],
      "endline" : 510,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "private",
      "line" : 513,
      "char" : 13,
      "deco" : "FNaNbNcS3std8typecons__T8BitFlagsTE7dentist8commands14collectPileUps7pileups15ScaffoldPayload4TypeVEQDoQDn__T4FlagVAyaa6_756e73616665ZQzi0ZQElASQEf6common10alignments4base13ReadAlignmentZSQFxQFsQFmQEzQEu",
      "originalType" : "pure nothrow ref (BitFlags!Type types, ReadAlignment[] readAlignments)",
      "parameters" : [
       {
        "name" : "types",
        "deco" : "S3std8typecons__T8BitFlagsTE7dentist8commands14collectPileUps7pileups15ScaffoldPayload4TypeVEQDoQDn__T4FlagVAyaa6_756e73616665ZQzi0ZQEl"
       },
       {
        "name" : "readAlignments",
        "deco" : "AS7dentist6common10alignments4base13ReadAlignment"
       }
      ],
      "endline" : 517,
      "endchar" : 5
     },
     {
      "name" : "empty",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Returns true if no type is set.\n",
      "line" : 521,
      "char" : 20,
      "deco" : "xFNaNbNdZb",
      "endline" : 524,
      "endchar" : 5
     },
     {
      "name" : "pileUp",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Construct a payload of type `Type.pileUp` from `readAlignments.\n",
      "line" : 528,
      "char" : 28,
      "storageClass" : [
       "static"
      ],
      "deco" : "FNaNbAS7dentist6common10alignments4base13ReadAlignmentZSQBx8commands14collectPileUps7pileups15ScaffoldPayload",
      "parameters" : [
       {
        "name" : "readAlignments",
        "deco" : "AS7dentist6common10alignments4base13ReadAlignment"
       }
      ],
      "endline" : 531,
      "endchar" : 5
     },
     {
      "name" : "inputGap",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Construct a payload of type `Type.inputGap`.\n",
      "line" : 535,
      "char" : 28,
      "storageClass" : [
       "static"
      ],
      "deco" : "FNaNbZS7dentist8commands14collectPileUps7pileups15ScaffoldPayload",
      "endline" : 538,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Remove `type` from this payload's types and reset data fields\nappropriately.\n",
      "line" : 543,
      "char" : 10,
      "name" : "remove",
      "parameters" : [
       {
        "name" : "type",
        "kind" : "value",
        "deco" : "E7dentist8commands14collectPileUps7pileups15ScaffoldPayload4Type"
       }
      ],
      "constraint" : "type == Type.pileUp",
      "members" : [
       {
        "name" : "remove",
        "kind" : "function",
        "line" : 543,
        "char" : 10,
        "type" : "pure nothrow void()",
        "endline" : 547,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 550,
      "char" : 10,
      "name" : "remove",
      "parameters" : [
       {
        "name" : "type",
        "kind" : "value",
        "deco" : "E7dentist8commands14collectPileUps7pileups15ScaffoldPayload4Type"
       }
      ],
      "constraint" : "type == Type.inputGap",
      "members" : [
       {
        "name" : "remove",
        "kind" : "function",
        "line" : 550,
        "char" : 10,
        "type" : "pure nothrow void()",
        "endline" : 553,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Merge a range of payloads into one.\n\nReturns: payload with the union of all `types` in `payloads` and the\nconcatenation of all the `readAlignments`.\n",
      "line" : 560,
      "char" : 28,
      "name" : "merge",
      "parameters" : [
       {
        "name" : "R",
        "kind" : "type"
       }
      ],
      "constraint" : "isForwardRange!R && is(ElementType!R == ScaffoldPayload)",
      "members" : [
       {
        "name" : "merge",
        "kind" : "function",
        "line" : 560,
        "char" : 28,
        "type" : "ScaffoldPayload(R payloads)",
        "parameters" : [
         {
          "name" : "payloads",
          "type" : "R"
         }
        ],
        "endline" : 591,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "merge",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 594,
      "char" : 28,
      "storageClass" : [
       "static"
      ],
      "deco" : "FAS7dentist8commands14collectPileUps7pileups15ScaffoldPayloadXQCi",
      "parameters" : [
       {
        "name" : "payloads",
        "deco" : "AS7dentist8commands14collectPileUps7pileups15ScaffoldPayload"
       }
      ],
      "endline" : 597,
      "endchar" : 5
     },
     {
      "name" : "numTypes",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return the number of set types in this payload.\n",
      "line" : 601,
      "char" : 12,
      "deco" : "xFNaNbZm",
      "originalType" : "const pure nothrow size_t()",
      "endline" : 604,
      "endchar" : 5
     },
     {
      "name" : "toJson",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Convert to a `Json` object.\n",
      "line" : 608,
      "char" : 10,
      "deco" : "xFZS4vibe4data4json4Json",
      "endline" : 619,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "mergeJoins",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Merge joins by creating a single join that has all payloads merged.\n\nSee_also: `ScaffoldPayload.merge`\n",
    "line" : 626,
    "char" : 22,
    "deco" : "FAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4EdgeXQJz",
    "originalType" : "Join!ScaffoldPayload(Join!ScaffoldPayload[] joins...)",
    "parameters" : [
     {
      "name" : "joins",
      "deco" : "AS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4Edge"
     }
    ],
    "endline" : 635,
    "endchar" : 1
   },
   {
    "name" : "selectMeanest",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Select the (first) join with the smallest number of types.\n\nSee_also: `ScaffoldPayload.numTypes`\n",
    "line" : 641,
    "char" : 29,
    "storageClass" : [
     "static"
    ],
    "deco" : "FAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4EdgeXQJz",
    "originalType" : "Join!ScaffoldPayload(Join!ScaffoldPayload[] joins...)",
    "parameters" : [
     {
      "name" : "joins",
      "deco" : "AS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4Edge"
     }
    ],
    "endline" : 644,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Group alignments by read ID and deduce graph edges using `collect`.\n\nSee_also: `makeScaffoldJoin`\n",
    "line" : 650,
    "char" : 6,
    "name" : "collectScaffoldJoins",
    "parameters" : [
     {
      "name" : "collect",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "collectScaffoldJoins",
      "kind" : "function",
      "line" : 650,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(AlignmentChain[] alignments)",
      "parameters" : [
       {
        "name" : "alignments",
        "type" : "AlignmentChain[]"
       }
      ],
      "endline" : 666,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "makeScaffoldJoin",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Generate join from `readAlignment`.\n",
    "line" : 670,
    "char" : 22,
    "deco" : "FS7dentist6common10alignments4base13ReadAlignmentZSQBx4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQEsQEn8scaffold10ContigPartVQCaa10_636f6e74696750617274ZQDlTvVEQEiQEh__T4FlagVQDya10_69734469726563746564ZQBii0TSQJb8commands14collectPileUps7pileups15ScaffoldPayloadZQIq4Edge",
    "originalType" : "Join!ScaffoldPayload(ReadAlignment readAlignment)",
    "parameters" : [
     {
      "name" : "readAlignment",
      "deco" : "S7dentist6common10alignments4base13ReadAlignment"
     }
    ],
    "endline" : 676,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L679_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 679,
    "char" : 1,
    "endline" : 796,
    "endchar" : 1
   },
   {
    "name" : "makeScaffoldJoin",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Generate join from `inputGap`.\n",
    "line" : 796,
    "char" : 22,
    "deco" : "FS7dentist7dazzler10GapSegmentZSQBe4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDz6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQIm8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4Edge",
    "originalType" : "Join!ScaffoldPayload(GapSegment inputGap)",
    "parameters" : [
     {
      "name" : "inputGap",
      "deco" : "S7dentist7dazzler10GapSegment"
     }
    ],
    "endline" : 809,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Create `ReadAlignment`s from the all alignments of a single read.\n\nNot meant for public usage but must be public or the compiler would\ncomplain.\n\nParams:\nsameReadAlignments = input range of all alignments of a single read\nreasonForEmpty = set to a human-readable reason for an empty return\nvalue unless `reasonForEmpty is null`\n",
    "line" : 821,
    "char" : 17,
    "name" : "collectReadAlignments",
    "parameters" : [
     {
      "name" : "Chunk",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "collectReadAlignments",
      "kind" : "function",
      "line" : 821,
      "char" : 17,
      "type" : "ReadAlignment[](Chunk sameReadAlignments, string* reasonForEmpty = null)",
      "parameters" : [
       {
        "name" : "sameReadAlignments",
        "type" : "Chunk"
       },
       {
        "name" : "reasonForEmpty",
        "type" : "string*",
        "default" : "null"
       }
      ],
      "endline" : 888,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L890_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 890,
    "char" : 1,
    "endline" : 1124,
    "endchar" : 1
   },
   {
    "name" : "resolveBubbles",
    "kind" : "function",
    "protection" : "public",
    "comment" : "This find bubbles in the graph and tries to linearize them. Bubbles are\ncyclic subgraphs of at most `options.maxBubbleSize` nodes and can be\nsqueezed into a linear subgraph iff they comprise two linear subgraphs\nbeing parallel wrt. the underlying genome.\n\nExample:\n---\n━━━━━ = reference contigs\n└───┘ = pile ups\n\n\ncontig A         contig B         contig C\n━━━━━━━━━━━━     ━━━━━━━━━━━━     ━━━━━━━━━━━━\n│└─╴X╶─┘          └─╴Y╶─┘│\n└───────────╴Z╶──────────┘\n\nPile up Z can be combined with X and Y by aligning the skipping reads to\ncontig B without repeat mask:\n\ncontig A          contig B          contig C\n━━━━━━━━━━━━      ━━━━━━━━━━━━      ━━━━━━━━━━━━\n└╴X+Z'╶┘          └╴Y+Z\"╶┘\n---\n",
    "line" : 1124,
    "char" : 26,
    "deco" : "FS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIuISQJu11commandline__T10OptionsForVEQLbQIbQDr14DentistCommandi11ZQBrZQMj",
    "originalType" : "Scaffold!ScaffoldPayload(Scaffold!ScaffoldPayload scaffold, in Options options)",
    "parameters" : [
     {
      "name" : "scaffold",
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu"
     },
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 1129,
    "endchar" : 1
   },
   {
    "name" : "BubbleResolver",
    "kind" : "class",
    "protection" : "private",
    "line" : 1132,
    "char" : 9,
    "members" : [
     {
      "name" : "scaffold",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1134,
      "char" : 30,
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu",
      "originalType" : "Scaffold!ScaffoldPayload",
      "offset" : 16
     },
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1135,
      "char" : 20,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCb",
      "originalType" : "const(Options)",
      "offset" : 40
     },
     {
      "name" : "incidentEdgesCache",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1136,
      "char" : 49,
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu18IncidentEdgesCache",
      "originalType" : "Scaffold!ScaffoldPayload.IncidentEdgesCache",
      "offset" : 304
     },
     {
      "name" : "numEscapeNodes",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1138,
      "char" : 10,
      "storageClass" : [
       "enum"
      ],
      "deco" : "i",
      "init" : "2"
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 1140,
      "char" : 5,
      "deco" : "FS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIuISQJu11commandline__T10OptionsForVEQLbQIbQDr14DentistCommandi11ZQBrZCQMjQEwQEqQEd14BubbleResolver",
      "originalType" : "(Scaffold!ScaffoldPayload scaffold, in Options options)",
      "parameters" : [
       {
        "name" : "scaffold",
        "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu"
       },
       {
        "name" : "options",
        "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi11ZQCb",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1144,
      "endchar" : 5
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 1146,
      "char" : 30,
      "deco" : "FZS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu",
      "originalType" : "Scaffold!ScaffoldPayload()",
      "endline" : 1155,
      "endchar" : 5
     },
     {
      "name" : "resolveSimpleBubbles",
      "kind" : "function",
      "protection" : "public",
      "line" : 1157,
      "char" : 12,
      "deco" : "FZm",
      "originalType" : "size_t()",
      "endline" : 1192,
      "endchar" : 5
     },
     {
      "name" : "getCyclicSubgraphBase",
      "kind" : "function",
      "protection" : "public",
      "line" : 1194,
      "char" : 16,
      "deco" : "FZAAm",
      "originalType" : "size_t[][]()",
      "endline" : 1206,
      "endchar" : 5
     },
     {
      "name" : "isSimpleBubble",
      "kind" : "function",
      "protection" : "public",
      "comment" : "        A cyclic subgraph is a _simple bubble_ iff:\n\n        - all nodes but two have degree == 2 disregarding extension joins\n        - two nodes have degree >= 3 disregarding extension joins\n        - an edge between the latter two nodes exists and has a pile up attached\n\n        The aforementioned edge is called a _skipper_.\n",
      "line" : 1217,
      "char" : 10,
      "deco" : "FAmZb",
      "originalType" : "bool(size_t[] cycle)",
      "parameters" : [
       {
        "name" : "cycle",
        "deco" : "Am"
       }
      ],
      "endline" : 1256,
      "endchar" : 5
     },
     {
      "name" : "resolveSimpleBubble",
      "kind" : "function",
      "protection" : "public",
      "line" : 1258,
      "char" : 10,
      "deco" : "FAmZv",
      "originalType" : "void(size_t[] bubble)",
      "parameters" : [
       {
        "name" : "bubble",
        "deco" : "Am"
       }
      ],
      "endline" : 1316,
      "endchar" : 5
     },
     {
      "name" : "getReadAlignmentsOnContigs",
      "kind" : "function",
      "protection" : "public",
      "line" : 1318,
      "char" : 22,
      "deco" : "FIAS7dentist6common10alignments4base13ReadAlignmentIAkZASQCbQBwQBsQBj14AlignmentChain",
      "originalType" : "AlignmentChain[](in PileUp skippingPileUp, in id_t[] intermediateContigIds)",
      "parameters" : [
       {
        "name" : "skippingPileUp",
        "deco" : "xAS7dentist6common10alignments4base13ReadAlignment",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "intermediateContigIds",
        "deco" : "xAk",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1383,
      "endchar" : 5
     },
     {
      "name" : "getSkippingPileUpDb",
      "kind" : "function",
      "protection" : "public",
      "line" : 1385,
      "char" : 12,
      "deco" : "FIAkZAya",
      "originalType" : "string(in id_t[] involvedContigs)",
      "parameters" : [
       {
        "name" : "involvedContigs",
        "deco" : "xAk",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1398,
      "endchar" : 5
     },
     {
      "name" : "getIntermediateContigsDb",
      "kind" : "function",
      "protection" : "public",
      "line" : 1400,
      "char" : 12,
      "deco" : "FIAkZAya",
      "originalType" : "string(in id_t[] involvedContigs)",
      "parameters" : [
       {
        "name" : "involvedContigs",
        "deco" : "xAk",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1408,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "        Validates \"collects\" read alignments and validates them. The read\n        alignments are valid iff they reflect the same order of contigs as\n        suggested by skippedPath, ie. the scaffolding graph.\n",
      "line" : 1415,
      "char" : 28,
      "name" : "collectFixedSimpleBubbles",
      "parameters" : [
       {
        "name" : "Chunk",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "collectFixedSimpleBubbles",
        "kind" : "function",
        "line" : 1415,
        "char" : 28,
        "type" : "ReadAlignment[](Chunk sameReadAlignmentsChunk, in id_t startContigId, in id_t endContigId, in ContigNode[] skippedPath)",
        "parameters" : [
         {
          "name" : "sameReadAlignmentsChunk",
          "type" : "Chunk"
         },
         {
          "name" : "startContigId",
          "type" : "id_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "endContigId",
          "type" : "id_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "skippedPath",
          "type" : "ContigNode[]",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 1485,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "contigPartMatchesSeed",
      "kind" : "function",
      "protection" : "public",
      "line" : 1487,
      "char" : 17,
      "storageClass" : [
       "static"
      ],
      "deco" : "FIE7dentist6common8scaffold10ContigPartIEQBmQBh10alignments4base21AlignmentLocationSeedZb",
      "parameters" : [
       {
        "name" : "contigPart",
        "deco" : "xE7dentist6common8scaffold10ContigPart",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "seed",
        "deco" : "xE7dentist6common10alignments4base21AlignmentLocationSeed",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1499,
      "endchar" : 5
     },
     {
      "name" : "contigNodeMatchesReadAlignment",
      "kind" : "function",
      "protection" : "public",
      "line" : 1501,
      "char" : 17,
      "storageClass" : [
       "static"
      ],
      "deco" : "FIS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuISQCsQCn10alignments4base15SeededAlignmentZb",
      "originalType" : "bool(in ContigNode contigNode, in SeededAlignment seededAlignment)",
      "parameters" : [
       {
        "name" : "contigNode",
        "deco" : "xS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "seededAlignment",
        "deco" : "xS7dentist6common10alignments4base15SeededAlignment",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1505,
      "endchar" : 5
     },
     {
      "name" : "getEscapeNodes",
      "kind" : "function",
      "protection" : "public",
      "line" : 1507,
      "char" : 10,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNbAmZAxS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
      "originalType" : "const nothrow (size_t[] bubble)",
      "parameters" : [
       {
        "name" : "bubble",
        "deco" : "Am"
       }
      ],
      "endline" : 1513,
      "endchar" : 5
     },
     {
      "name" : "getIntermediateContigIds",
      "kind" : "function",
      "protection" : "public",
      "line" : 1515,
      "char" : 10,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNbAmZAk",
      "originalType" : "const nothrow (size_t[] bubble)",
      "parameters" : [
       {
        "name" : "bubble",
        "deco" : "Am"
       }
      ],
      "endline" : 1526,
      "endchar" : 5
     },
     {
      "name" : "getSkippedPath",
      "kind" : "function",
      "protection" : "public",
      "line" : 1528,
      "char" : 10,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FAmS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4EdgeZAxSQIyQIx__TQIrTmVQIoa8_636f6e7469674964TQIoVQJpa10_636f6e74696750617274ZQLa",
      "originalType" : "(size_t[] bubble, Join!ScaffoldPayload skippingJoin)",
      "parameters" : [
       {
        "name" : "bubble",
        "deco" : "Am"
       },
       {
        "name" : "skippingJoin",
        "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4Edge"
       }
      ],
      "endline" : 1555,
      "endchar" : 5
     },
     {
      "name" : "isEscapeNode",
      "kind" : "function",
      "protection" : "public",
      "line" : 1557,
      "char" : 10,
      "deco" : "xFNaNbImZb",
      "originalType" : "const pure nothrow bool(in size_t nodeIdx)",
      "parameters" : [
       {
        "name" : "nodeIdx",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1560,
      "endchar" : 5
     },
     {
      "name" : "isIntermediateNode",
      "kind" : "function",
      "protection" : "public",
      "line" : 1562,
      "char" : 10,
      "deco" : "xFNaNbImZb",
      "originalType" : "const pure nothrow bool(in size_t nodeIdx)",
      "parameters" : [
       {
        "name" : "nodeIdx",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1565,
      "endchar" : 5
     },
     {
      "name" : "cycleToJson",
      "kind" : "function",
      "protection" : "private",
      "line" : 1567,
      "char" : 18,
      "deco" : "xFIAmZS4vibe4data4json4Json",
      "originalType" : "const Json(in size_t[] cycle)",
      "parameters" : [
       {
        "name" : "cycle",
        "deco" : "xAm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1585,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "discardAmbiguousJoins",
    "kind" : "function",
    "protection" : "public",
    "comment" : "This removes ambiguous gap insertions, i.e. forks in the graph.\n\nSee_also: `findCorrectGapJoin`\n",
    "line" : 1592,
    "char" : 26,
    "deco" : "FS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIuIdIdZQJy",
    "originalType" : "Scaffold!ScaffoldPayload(Scaffold!ScaffoldPayload scaffold, in double bestPileUpMargin, in double existingGapBonus)",
    "parameters" : [
     {
      "name" : "scaffold",
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu"
     },
     {
      "name" : "bestPileUpMargin",
      "deco" : "xd",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "existingGapBonus",
      "deco" : "xd",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 1656,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L1659_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 1659,
    "char" : 1,
    "endline" : 1733,
    "endchar" : 1
   },
   {
    "name" : "joinToJson",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Convert `join` to `Json`.\n",
    "line" : 1733,
    "char" : 6,
    "deco" : "FIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4EdgeZS4vibe4data4json4Json",
    "originalType" : "Json(in Join!ScaffoldPayload join)",
    "parameters" : [
     {
      "name" : "join",
      "deco" : "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4Edge",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 1740,
    "endchar" : 1
   },
   {
    "name" : "findCorrectGapJoin",
    "kind" : "function",
    "protection" : "public",
    "comment" : "This selects the outstanding best pile up or none at all.\n\nIf the join with the most reads supporting it if it has significantly\nmore reads (`bestPileUpMargin`) than all other joins it is deemed \"best\";\notherwise there is no \"correct\" gap join.\n\nJoins that are supported by an existing gap in the input assembly get a\nmultiplicative bonus of `existingGapBonus`. This reflects the assumption\nthat the input scaffolding is reliable to a certain extent.\n\nReturns: index of \"correct\" gap join or `size_t.max` if none was found.\n",
    "line" : 1754,
    "char" : 8,
    "deco" : "FAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4EdgeIdIdZm",
    "originalType" : "size_t(Join!ScaffoldPayload[] incidentGapJoins, in double bestPileUpMargin, in double existingGapBonus)",
    "parameters" : [
     {
      "name" : "incidentGapJoins",
      "deco" : "AS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu4Edge"
     },
     {
      "name" : "bestPileUpMargin",
      "deco" : "xd",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "existingGapBonus",
      "deco" : "xd",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 1803,
    "endchar" : 1
   },
   {
    "name" : "enforceMinSpanningReads",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Remove joins with an insufficient number of spanning reads for removal.\n",
    "line" : 1807,
    "char" : 26,
    "deco" : "FS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIumZQJv",
    "originalType" : "Scaffold!ScaffoldPayload(Scaffold!ScaffoldPayload scaffold, size_t minSpanningReads)",
    "parameters" : [
     {
      "name" : "scaffold",
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu"
     },
     {
      "name" : "minSpanningReads",
      "deco" : "m"
     }
    ],
    "endline" : 1836,
    "endchar" : 1
   },
   {
    "name" : "removeInputGaps",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Remove the information on input gaps from the graph.\n",
    "line" : 1840,
    "char" : 26,
    "deco" : "FS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIuZQJu",
    "originalType" : "Scaffold!ScaffoldPayload(Scaffold!ScaffoldPayload scaffold)",
    "parameters" : [
     {
      "name" : "scaffold",
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHn8commands14collectPileUps7pileups15ScaffoldPayloadZQIu"
     }
    ],
    "endline" : 1852,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.commands.filterMask",
  "kind" : "module",
  "file" : "source/dentist/commands/filterMask.d",
  "comment" : "    This is the `filterMask` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Filter a Dazzler mask. See `dentist filter-mask --help` for a list of\n    available filters.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 18,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Filter a Dazzler mask. See `dentist filter-mask --help` for a list of\\x0a    available filters.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ReferenceInterval",
     "ReferenceRegion",
     "toInterval"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 28,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AlignmentChain",
     "id_t"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 31,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 32,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "readMask",
     "writeMask"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 35,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.range",
    "kind" : "import",
    "line" : 36,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "wrapLines"
    ]
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "filterInPlace"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 38,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "cache",
     "copy",
     "filter",
     "joiner",
     "map"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 44,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 45,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 46,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assumeSorted",
     "chain",
     "chunks",
     "enumerate",
     "iota",
     "only",
     "repeat",
     "slide",
     "takeExactly"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 56,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "File",
     "stdout"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 57,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Unqual"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 58,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "No"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 59,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    }
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `filterMask` command.\n",
    "line" : 63,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi6ZQCa",
    "originalType" : "OptionsFor!(DentistCommand.filterMask)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `filterMask` command with `options`.\n",
    "line" : 67,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi6ZQCaZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi6ZQCa",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 72,
    "endchar" : 1
   },
   {
    "name" : "PartialAssemblyBuilder",
    "kind" : "struct",
    "protection" : "private",
    "line" : 74,
    "char" : 9,
    "members" : [
     {
      "name" : "FastaWriter",
      "kind" : "alias",
      "protection" : "public",
      "line" : 76,
      "char" : 5,
      "deco" : "C7dentist4util5range__T13WrapLinesImplTS3std5stdio4File17LockingTextWriterZQCa",
      "originalType" : "typeof(wrapLines(stdout.lockingTextWriter, 0))"
     },
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "public",
      "line" : 78,
      "char" : 20,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi6ZQCa",
      "originalType" : "const(Options)",
      "offset" : 0
     },
     {
      "name" : "mask",
      "kind" : "variable",
      "protection" : "public",
      "line" : 79,
      "char" : 21,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "ReferenceRegion",
      "offset" : 120
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 81,
      "char" : 5,
      "deco" : "FNcIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi6ZQCaZSQDdQBk10filterMask22PartialAssemblyBuilder",
      "originalType" : "ref (in Options options)",
      "parameters" : [
       {
        "name" : "options",
        "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi6ZQCa",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 84,
      "endchar" : 5
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 86,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 93,
      "endchar" : 5
     },
     {
      "name" : "readInputMask",
      "kind" : "function",
      "protection" : "protected",
      "line" : 95,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 103,
      "endchar" : 5
     },
     {
      "name" : "runFilters",
      "kind" : "function",
      "protection" : "protected",
      "line" : 106,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 110,
      "endchar" : 5
     },
     {
      "name" : "writeOutputMask",
      "kind" : "function",
      "protection" : "protected",
      "line" : 113,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 122,
      "endchar" : 5
     },
     {
      "name" : "removeSmallGaps",
      "kind" : "function",
      "protection" : "protected",
      "line" : 124,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 147,
      "endchar" : 5
     },
     {
      "name" : "removeSmallContigs",
      "kind" : "function",
      "protection" : "protected",
      "line" : 150,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 159,
      "endchar" : 5
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.commands.findClosableGaps",
  "kind" : "module",
  "file" : "source/dentist/commands/findClosableGaps.d",
  "comment" : "    This is the `findClosableGaps` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Find which gaps are closable, i.e. the true alignment of the reads\n    provides a sufficient number spanning reads including some amount of\n    anchor sequence.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 19,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Find which gaps are closable, i.e. the true alignment of the reads\\x0a    provides a sufficient number spanning reads including some amount of\\x0a    anchor sequence.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 26,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isTesting",
     "ReferenceInterval"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 29,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AlignmentChain",
     "coord_t",
     "id_t"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 33,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 34,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DBdumpOptions",
     "DbRecord",
     "getDbRecords",
     "readMask"
    ]
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 39,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "cmpLexicographically",
     "filterInPlace"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 42,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 43,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "copy",
     "count",
     "filter",
     "map",
     "sort",
     "swap"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 50,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 51,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format",
     "formattedRead"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 52,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assumeSorted",
     "enumerate",
     "slide"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 56,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "File",
     "writeln"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 57,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "capitalize"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 58,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "No",
     "tuple"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 61,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    },
    "selective" : [
     "serializeToJsonString"
    ]
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `findClosableGaps` command.\n",
    "line" : 67,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi2ZQCa",
    "originalType" : "OptionsFor!(DentistCommand.findClosableGaps)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `findClosableGaps` command with `options`.\n",
    "line" : 70,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi2ZQCaZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi2ZQCa",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 75,
    "endchar" : 1
   },
   {
    "name" : "ClosableGapsFinder",
    "kind" : "struct",
    "protection" : "public",
    "line" : 77,
    "char" : 1,
    "members" : [
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "public",
      "line" : 79,
      "char" : 20,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi2ZQCa",
      "originalType" : "const(Options)",
      "offset" : 0
     },
     {
      "name" : "baseContigs",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Contig locations of the base assembly (trueAssembly)\n",
      "line" : 81,
      "char" : 16,
      "deco" : "AS7dentist7dazzler8DbRecord",
      "offset" : 136
     },
     {
      "name" : "mappedContigs",
      "kind" : "variable",
      "protection" : "public",
      "line" : 82,
      "char" : 25,
      "deco" : "AS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
      "originalType" : "ReferenceInterval[]",
      "offset" : 152
     },
     {
      "name" : "readSamples",
      "kind" : "variable",
      "protection" : "public",
      "line" : 83,
      "char" : 18,
      "deco" : "AS7dentist8commands16findClosableGaps10ReadSample",
      "offset" : 168
     },
     {
      "name" : "closableGaps",
      "kind" : "variable",
      "protection" : "public",
      "line" : 84,
      "char" : 19,
      "deco" : "AS7dentist8commands16findClosableGaps11ClosableGap",
      "offset" : 184
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 86,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 92,
      "endchar" : 5
     },
     {
      "name" : "init",
      "kind" : "function",
      "protection" : "public",
      "line" : 94,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 113,
      "endchar" : 5
     },
     {
      "name" : "findClosableGaps",
      "kind" : "function",
      "protection" : "public",
      "line" : 115,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 175,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "ClosableGap",
    "kind" : "struct",
    "protection" : "public",
    "line" : 178,
    "char" : 1,
    "members" : [
     {
      "name" : "fromContig",
      "kind" : "variable",
      "protection" : "public",
      "line" : 180,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 0
     },
     {
      "name" : "toContig",
      "kind" : "variable",
      "protection" : "public",
      "line" : 181,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 4
     },
     {
      "name" : "gapSize",
      "kind" : "variable",
      "protection" : "public",
      "line" : 182,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 8
     },
     {
      "name" : "mappedInterval",
      "kind" : "variable",
      "protection" : "public",
      "line" : 183,
      "char" : 23,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
      "originalType" : "ReferenceInterval",
      "offset" : 16
     },
     {
      "name" : "spanningReads",
      "kind" : "variable",
      "protection" : "public",
      "line" : 184,
      "char" : 12,
      "deco" : "Ak",
      "originalType" : "id_t[]",
      "offset" : 40
     }
    ]
   },
   {
    "name" : "ReadSample",
    "kind" : "struct",
    "protection" : "public",
    "line" : 187,
    "char" : 1,
    "members" : [
     {
      "name" : "scaffoldId",
      "kind" : "variable",
      "protection" : "public",
      "line" : 189,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 0
     },
     {
      "name" : "begin",
      "kind" : "variable",
      "protection" : "public",
      "line" : 190,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 4
     },
     {
      "name" : "end",
      "kind" : "variable",
      "protection" : "public",
      "line" : 191,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 8
     },
     {
      "name" : "complement",
      "kind" : "variable",
      "protection" : "public",
      "line" : 192,
      "char" : 10,
      "deco" : "b",
      "offset" : 12
     },
     {
      "name" : "readId",
      "kind" : "variable",
      "protection" : "public",
      "line" : 193,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 16
     },
     {
      "name" : "opCmp",
      "kind" : "function",
      "protection" : "public",
      "line" : 195,
      "char" : 9,
      "deco" : "xFNaNbIS7dentist8commands16findClosableGaps10ReadSampleZi",
      "parameters" : [
       {
        "name" : "other",
        "deco" : "xS7dentist8commands16findClosableGaps10ReadSample",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 204,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "readReadSamples",
    "kind" : "function",
    "protection" : "public",
    "line" : 207,
    "char" : 14,
    "deco" : "FIAyaZAS7dentist8commands16findClosableGaps10ReadSample",
    "parameters" : [
     {
      "name" : "readsMap",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 217,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 220,
    "char" : 12,
    "name" : "parseReadSample",
    "parameters" : [
     {
      "name" : "EnumLine",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "parseReadSample",
      "kind" : "function",
      "line" : 220,
      "char" : 12,
      "type" : "ReadSample(EnumLine enumLine)",
      "parameters" : [
       {
        "name" : "enumLine",
        "type" : "EnumLine"
       }
      ],
      "endline" : 239,
      "endchar" : 1
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.commands.generateDazzlerOptions",
  "kind" : "module",
  "file" : "source/dentist/commands/generateDazzlerOptions.d",
  "comment" : "    This is the `generateDazzlerOptions` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Outputs advice on how to call some of the Dazzler tools. The output is\n    used by the Snakemake workflow to generate the correct commands.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 18,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Outputs advice on how to call some of the Dazzler tools. The output is\\x0a    used by the Snakemake workflow to generate the correct commands.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.common.external",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ExternalDependency"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 26,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "writefln",
     "writeln"
    ]
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `generateDazzlerOptions` command.\n",
    "line" : 30,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi3ZQCa",
    "originalType" : "OptionsFor!(DentistCommand.generateDazzlerOptions)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `generateDazzlerOptions` command with `options`.\n",
    "line" : 34,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi3ZQCaZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi3ZQCa",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 44,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.commands.maskRepetitiveRegions",
  "kind" : "module",
  "file" : "source/dentist/commands/maskRepetitiveRegions.d",
  "comment" : "    This is the `maskRepetitiveRegions` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Mask regions that have a alignment coverage that is out of bounds.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 17,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"Mask regions that have a alignment coverage that is out of bounds.\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 19,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 20,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ReferenceInterval",
     "ReferenceRegion"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "AlignmentFlags" : "Flags"
    },
    "selective" : [
     "AlignmentChain",
     "Contig",
     "coord_t",
     "id_t",
     "Locus"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 30,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 31,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "alignmentChainPacker",
     "AlignmentHeader",
     "BufferMode",
     "DBdumpOptions",
     "getDbRecords",
     "getFlatLocalAlignments",
     "LocalAlignmentReader",
     "writeMask"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 40,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 41,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "filter",
     "joiner",
     "map",
     "predSwitch",
     "sort",
     "uniq"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 48,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "appender",
     "array",
     "uninitializedArray"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 49,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 50,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 51,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "chain",
     "only"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 54,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "empty",
     "ElementType",
     "isInputRange"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 58,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Flag",
     "No",
     "Tuple",
     "Yes"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 59,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    }
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `maskRepetitiveRegions` command.\n",
    "line" : 63,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi4ZQCa",
    "originalType" : "OptionsFor!(DentistCommand.maskRepetitiveRegions)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `maskRepetitiveRegions` command with `options`.\n",
    "line" : 67,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi4ZQCaZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi4ZQCa",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 72,
    "endchar" : 1
   },
   {
    "name" : "AlignmentType",
    "kind" : "enum",
    "protection" : "public",
    "line" : 74,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "self",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)0u",
      "line" : 76,
      "char" : 5
     },
     {
      "name" : "reads",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 77,
      "char" : 5
     }
    ]
   },
   {
    "name" : "RepeatMaskAssessor",
    "kind" : "class",
    "protection" : "public",
    "comment" : "This class comprises the `maskRepetitiveRegions` step of the DENTIST algorithm\n",
    "line" : 81,
    "char" : 1,
    "members" : [
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 83,
      "char" : 29,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi4ZQCa",
      "originalType" : "Options",
      "offset" : 16
     },
     {
      "name" : "alignmentType",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 84,
      "char" : 29,
      "deco" : "E7dentist8commands21maskRepetitiveRegions13AlignmentType",
      "offset" : 200
     },
     {
      "name" : "alignmentHeader",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 85,
      "char" : 31,
      "deco" : "S7dentist7dazzler15AlignmentHeader",
      "offset" : 208
     },
     {
      "name" : "alignment",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 86,
      "char" : 36,
      "deco" : "C7dentist7dazzler20LocalAlignmentReader",
      "originalType" : "LocalAlignmentReader",
      "offset" : 272
     },
     {
      "name" : "repetitiveRegions",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 87,
      "char" : 31,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "ReferenceRegion",
      "offset" : 280
     },
     {
      "name" : "repetitiveRegionsImproper",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 88,
      "char" : 31,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "ReferenceRegion",
      "offset" : 296
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 90,
      "char" : 5,
      "deco" : "FIKS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi4ZQCaZCQDdQBk21maskRepetitiveRegions18RepeatMaskAssessor",
      "originalType" : "(in ref Options options)",
      "parameters" : [
       {
        "name" : "options",
        "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi4ZQCa",
        "storageClass" : [
         "in",
         "ref"
        ]
       }
      ],
      "endline" : 93,
      "endchar" : 5
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 95,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 102,
      "endchar" : 5
     },
     {
      "name" : "readInputs",
      "kind" : "function",
      "protection" : "protected",
      "line" : 104,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 132,
      "endchar" : 5
     },
     {
      "name" : "assessRepeatStructure",
      "kind" : "function",
      "protection" : "public",
      "line" : 134,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 181,
      "endchar" : 5
     },
     {
      "name" : "alignmentIntervals",
      "kind" : "function",
      "protection" : "protected",
      "line" : 183,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FE3std8typecons__T4FlagVAyaa12_696d70726f7065724f6e6c79ZQBmZSQCh9algorithm9iteration__T9MapResultS7dentist8commands21maskRepetitiveRegions18RepeatMaskAssessor18alignmentIntervalsMFQGxZ9__lambda4TSQHmQFfQEy__T12FilterResultSQEvQEqQEkQDqQCzMFQJfZ9__lambda3TSQGc7dazzler__T20AlignmentChainPackerTCQHoQBm20LocalAlignmentReaderZQCbZQEpZQJk",
      "originalType" : "(Flag!\"improperOnly\" improperOnly = No.improperOnly)",
      "parameters" : [
       {
        "name" : "improperOnly",
        "deco" : "E3std8typecons__T4FlagVAyaa12_696d70726f7065724f6e6c79ZQBm",
        "default" : "Flag.no"
       }
      ],
      "endline" : 201,
      "endchar" : 5
     },
     {
      "name" : "contigIntervals",
      "kind" : "function",
      "protection" : "protected",
      "line" : 203,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FZS3std9algorithm9iteration__T9MapResultS7dentist8commands21maskRepetitiveRegions18RepeatMaskAssessor15contigIntervalsMFZ9__lambda1TSQDo7dazzler__T12DbDumpReaderTCQEs4util7process__T9LinesPipeTSQFxQBfQBd11ProcessInfoVEQIh8typecons__T4FlagVAyaa10_69734275666665726564ZQBii0ZQDnZQFaZQJr",
      "originalType" : "()",
      "endline" : 211,
      "endchar" : 5
     },
     {
      "name" : "writeRepeatMask",
      "kind" : "function",
      "protection" : "protected",
      "line" : 213,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 238,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "BadAlignmentCoverageAssessor",
    "kind" : "class",
    "protection" : "public",
    "comment" : "    Mask reference regions where the alignment coverage is not within set\n    limits. This helps to identify repetitive or bad quality regions.\n",
    "line" : 246,
    "char" : 1,
    "members" : [
     {
      "name" : "lowerLimit",
      "kind" : "variable",
      "protection" : "public",
      "line" : 248,
      "char" : 12,
      "deco" : "d",
      "offset" : 16
     },
     {
      "name" : "upperLimit",
      "kind" : "variable",
      "protection" : "public",
      "line" : 249,
      "char" : 12,
      "deco" : "d",
      "offset" : 24
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : "Create an assessor with these limits.\n",
      "line" : 252,
      "char" : 5,
      "deco" : "FddZC7dentist8commands21maskRepetitiveRegions28BadAlignmentCoverageAssessor",
      "originalType" : "(double lowerLimit, double upperLimit)",
      "parameters" : [
       {
        "name" : "lowerLimit",
        "deco" : "d"
       },
       {
        "name" : "upperLimit",
        "deco" : "d"
       }
      ],
      "endline" : 256,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Apply the assessor to the given set of alignment.\n",
      "line" : 344,
      "char" : 21,
      "name" : "opCall",
      "parameters" : [
       {
        "name" : "R1",
        "kind" : "type"
       },
       {
        "name" : "R2",
        "kind" : "type"
       }
      ],
      "constraint" : "isInputRange!R1 && is(ElementType!R1 == ReferenceInterval) && isInputRange!R2 && is(ElementType!R2 == ReferenceInterval)",
      "members" : [
       {
        "name" : "opCall",
        "kind" : "function",
        "line" : 344,
        "char" : 21,
        "type" : "ReferenceRegion(R1 alignmentIntervals, R2 contigIntervals)",
        "parameters" : [
         {
          "name" : "alignmentIntervals",
          "type" : "R1"
         },
         {
          "name" : "contigIntervals",
          "type" : "R2"
         }
        ],
        "endline" : 391,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L394_C5",
      "kind" : "function",
      "protection" : "public",
      "comment" : "\n",
      "line" : 394,
      "char" : 5,
      "endline" : 413,
      "endchar" : 5
     },
     {
      "name" : "coverageZone",
      "kind" : "function",
      "protection" : "private",
      "line" : 413,
      "char" : 26,
      "deco" : "FNaNbIiZE7dentist8commands21maskRepetitiveRegions12CoverageZone",
      "parameters" : [
       {
        "name" : "coverage",
        "deco" : "xi",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 420,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "CoverageZone",
    "kind" : "enum",
    "protection" : "public",
    "line" : 423,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "low",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 425,
      "char" : 5
     },
     {
      "name" : "ok",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 426,
      "char" : 5
     },
     {
      "name" : "high",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 427,
      "char" : 5
     }
    ]
   },
   {
    "name" : "Masker",
    "kind" : "struct",
    "protection" : "public",
    "line" : 430,
    "char" : 1,
    "members" : [
     {
      "name" : "_isMasking",
      "kind" : "variable",
      "protection" : "private",
      "line" : 432,
      "char" : 18,
      "deco" : "b",
      "init" : "false",
      "offset" : 0
     },
     {
      "name" : "contigId",
      "kind" : "variable",
      "protection" : "private",
      "line" : 433,
      "char" : 20,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 8
     },
     {
      "name" : "maskStart",
      "kind" : "variable",
      "protection" : "private",
      "line" : 434,
      "char" : 20,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 16
     },
     {
      "name" : "start",
      "kind" : "function",
      "protection" : "public",
      "line" : 436,
      "char" : 10,
      "deco" : "FNaNbImImZv",
      "originalType" : "pure nothrow void(in size_t contigId, in size_t maskStart)",
      "parameters" : [
       {
        "name" : "contigId",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "maskStart",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 441,
      "endchar" : 5
     },
     {
      "name" : "finish",
      "kind" : "function",
      "protection" : "public",
      "line" : 443,
      "char" : 23,
      "deco" : "FNaNbImZS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
      "originalType" : "pure nothrow ReferenceInterval(in size_t maskEnd)",
      "parameters" : [
       {
        "name" : "maskEnd",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 452,
      "endchar" : 5
     },
     {
      "name" : "isMasking",
      "kind" : "function",
      "protection" : "public",
      "line" : 454,
      "char" : 20,
      "deco" : "xFNaNbNdZb",
      "endline" : 457,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "CoverageChangeRange",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Transforms a range of alignment chains into a range of coverage\nchange events.\n",
    "line" : 462,
    "char" : 1,
    "members" : [
     {
      "name" : "AlignmentEvent",
      "kind" : "alias",
      "protection" : "public",
      "line" : 464,
      "char" : 12,
      "deco" : "S3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TmVQza8_706f736974696f6eTiVQBxa4_64696666ZQCv",
      "originalType" : "Tuple!(size_t, \"contigId\", size_t, \"position\", int, \"diff\")"
     },
     {
      "name" : "CoverageChange",
      "kind" : "struct",
      "protection" : "public",
      "line" : 471,
      "char" : 12,
      "members" : [
       {
        "name" : "contigId",
        "kind" : "variable",
        "protection" : "public",
        "line" : 473,
        "char" : 16,
        "deco" : "m",
        "originalType" : "size_t",
        "offset" : 0
       },
       {
        "name" : "position",
        "kind" : "variable",
        "protection" : "public",
        "line" : 474,
        "char" : 16,
        "deco" : "m",
        "originalType" : "size_t",
        "offset" : 8
       },
       {
        "name" : "currentCoverage",
        "kind" : "variable",
        "protection" : "public",
        "line" : 475,
        "char" : 13,
        "deco" : "i",
        "offset" : 16
       },
       {
        "name" : "newCoverage",
        "kind" : "variable",
        "protection" : "public",
        "line" : 476,
        "char" : 13,
        "deco" : "i",
        "offset" : 20
       },
       {
        "name" : "hasChanged",
        "kind" : "function",
        "protection" : "public",
        "line" : 478,
        "char" : 14,
        "deco" : "xFNaNbZb",
        "endline" : 481,
        "endchar" : 9
       }
      ]
     },
     {
      "name" : "alignmentEvents",
      "kind" : "variable",
      "protection" : "public",
      "line" : 484,
      "char" : 22,
      "deco" : "AS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TmVQza8_706f736974696f6eTiVQBxa4_64696666ZQCv",
      "originalType" : "AlignmentEvent[]",
      "offset" : 0
     },
     {
      "name" : "currentEventIdx",
      "kind" : "variable",
      "protection" : "public",
      "line" : 485,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "init" : "0LU",
      "offset" : 16
     },
     {
      "name" : "_front",
      "kind" : "variable",
      "protection" : "public",
      "line" : 486,
      "char" : 20,
      "deco" : "S7dentist8commands21maskRepetitiveRegions19CoverageChangeRange14CoverageChange",
      "offset" : 24
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "private",
      "line" : 488,
      "char" : 13,
      "deco" : "FNcAS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TmVQza8_706f736974696f6eTiVQBxa4_64696666ZQCvZS7dentist8commands21maskRepetitiveRegions19CoverageChangeRange",
      "originalType" : "ref (AlignmentEvent[] alignmentEvents)",
      "parameters" : [
       {
        "name" : "alignmentEvents",
        "deco" : "AS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TmVQza8_706f736974696f6eTiVQBxa4_64696666ZQCv"
       }
      ],
      "endline" : 496,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "private",
      "line" : 498,
      "char" : 40,
      "name" : "create",
      "parameters" : [
       {
        "name" : "R1",
        "kind" : "type"
       },
       {
        "name" : "R2",
        "kind" : "type"
       }
      ],
      "constraint" : "isInputRange!R1 && is(ElementType!R1 == ReferenceInterval) && isInputRange!R2 && is(ElementType!R2 == ReferenceInterval)",
      "members" : [
       {
        "name" : "create",
        "kind" : "function",
        "line" : 498,
        "char" : 40,
        "type" : "CoverageChangeRange(R1 alignmentIntervals, R2 contigIntervals)",
        "parameters" : [
         {
          "name" : "alignmentIntervals",
          "type" : "R1"
         },
         {
          "name" : "contigIntervals",
          "type" : "R2"
         }
        ],
        "endline" : 523,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "popFront",
      "kind" : "function",
      "protection" : "public",
      "line" : 525,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 563,
      "endchar" : 5
     },
     {
      "name" : "empty",
      "kind" : "function",
      "protection" : "public",
      "line" : 565,
      "char" : 20,
      "deco" : "FNdZb",
      "endline" : 568,
      "endchar" : 5
     },
     {
      "name" : "front",
      "kind" : "function",
      "protection" : "public",
      "line" : 570,
      "char" : 30,
      "deco" : "FNdZS7dentist8commands21maskRepetitiveRegions19CoverageChangeRange14CoverageChange",
      "endline" : 573,
      "endchar" : 5
     },
     {
      "name" : "save",
      "kind" : "function",
      "protection" : "public",
      "line" : 575,
      "char" : 35,
      "deco" : "FNaNbNdNfZS7dentist8commands21maskRepetitiveRegions19CoverageChangeRange",
      "endline" : 579,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 582,
    "char" : 21,
    "name" : "coverageChanges",
    "parameters" : [
     {
      "name" : "R1",
      "kind" : "type"
     },
     {
      "name" : "R2",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!R1 && is(ElementType!R1 == ReferenceInterval) && isInputRange!R2 && is(ElementType!R2 == ReferenceInterval)",
    "members" : [
     {
      "name" : "coverageChanges",
      "kind" : "function",
      "line" : 582,
      "char" : 21,
      "type" : "CoverageChangeRange(R1 alignmentIntervals, R2 contigIntervals)",
      "parameters" : [
       {
        "name" : "alignmentIntervals",
        "type" : "R1"
       },
       {
        "name" : "contigIntervals",
        "type" : "R2"
       }
      ],
      "endline" : 589,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L591_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 591,
    "char" : 1,
    "endline" : 632,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.commands.mergeInsertions",
  "kind" : "module",
  "file" : "source/dentist/commands/mergeInsertions.d",
  "comment" : "    This is the `mergeInsertions` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Merge multiple insertions files generated by `process-pile-ups` into a\n    single one. This allows for process-level parallelization, e.g. on a\n    compute cluster.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 19,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Merge multiple insertions files generated by `process-pile-ups` into a\\x0a    single one. This allows for process-level parallelization, e.g. on a\\x0a    compute cluster.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common.binio",
    "kind" : "import",
    "line" : 26,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "InsertionDb"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 27,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.common.insertions",
    "kind" : "import",
    "line" : 28,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Insertion"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 29,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isSorted",
     "map",
     "sort"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 33,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 34,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array"
    ]
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `mergeInsertions` command.\n",
    "line" : 38,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi15ZQCb",
    "originalType" : "OptionsFor!(DentistCommand.mergeInsertions)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `mergeInsertions` command with `options`.\n",
    "line" : 42,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi15ZQCbZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi15ZQCb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 59,
    "endchar" : 1
   },
   {
    "name" : "readFromFile",
    "kind" : "function",
    "protection" : "public",
    "line" : 61,
    "char" : 13,
    "deco" : "FIAyaZAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
    "originalType" : "Insertion[](in string fileName)",
    "parameters" : [
     {
      "name" : "fileName",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 66,
    "endchar" : 1
   },
   {
    "name" : "ensureSorted",
    "kind" : "function",
    "protection" : "public",
    "line" : 68,
    "char" : 13,
    "deco" : "FAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZQJg",
    "originalType" : "Insertion[](Insertion[] insertions)",
    "parameters" : [
     {
      "name" : "insertions",
      "deco" : "AS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge"
     }
    ],
    "endline" : 74,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 76,
    "char" : 14,
    "name" : "mergeAll",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "mergeAll",
      "kind" : "function",
      "line" : 76,
      "char" : 14,
      "storageClass" : [
       "auto"
      ],
      "type" : "(T[][] insertionsList)",
      "parameters" : [
       {
        "name" : "insertionsList",
        "type" : "T[][]"
       }
      ],
      "endline" : 79,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L81_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 81,
    "char" : 1,
    "endline" : 93,
    "endchar" : 9
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 93,
    "char" : 16,
    "protection" : "private"
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 94,
    "char" : 8,
    "protection" : "private"
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 96,
    "char" : 9,
    "name" : "InsertionsMerger",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "InsertionsMerger",
      "kind" : "struct",
      "protection" : "public",
      "line" : 96,
      "char" : 9,
      "members" : [
       {
        "name" : "sources",
        "kind" : "variable",
        "line" : 98,
        "char" : 18,
        "type" : "T[][]"
       },
       {
        "name" : "_lastFrontIndex",
        "kind" : "variable",
        "line" : 99,
        "char" : 20,
        "type" : "size_t",
        "init" : "size_t.max"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 101,
        "char" : 5,
        "type" : "(T[][] sources)",
        "parameters" : [
         {
          "name" : "sources",
          "type" : "T[][]"
         }
        ],
        "endline" : 105,
        "endchar" : 5
       },
       {
        "name" : "empty",
        "kind" : "function",
        "line" : 112,
        "char" : 20,
        "type" : "const pure nothrow @property bool()",
        "endline" : 115,
        "endchar" : 5
       },
       {
        "name" : "front",
        "kind" : "function",
        "line" : 117,
        "char" : 24,
        "storageClass" : [
         "auto"
        ],
        "type" : "pure nothrow @property ref ()",
        "endline" : 122,
        "endchar" : 5
       },
       {
        "name" : "frontIndex",
        "kind" : "function",
        "line" : 124,
        "char" : 20,
        "type" : "pure nothrow size_t()",
        "endline" : 141,
        "endchar" : 5
       },
       {
        "name" : "popFront",
        "kind" : "function",
        "line" : 143,
        "char" : 10,
        "type" : "pure nothrow void()",
        "endline" : 147,
        "endchar" : 5
       },
       {
        "name" : "save",
        "kind" : "function",
        "line" : 149,
        "char" : 20,
        "storageClass" : [
         "auto"
        ],
        "type" : "pure nothrow @property ()",
        "endline" : 152,
        "endchar" : 5
       },
       {
        "name" : "length",
        "kind" : "function",
        "line" : 154,
        "char" : 22,
        "type" : "const pure nothrow @property size_t()",
        "endline" : 161,
        "endchar" : 5
       },
       {
        "name" : "opDollar",
        "kind" : "alias",
        "line" : 163,
        "char" : 5,
        "type" : "length"
       }
      ]
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.commands.mergeMasks",
  "kind" : "module",
  "file" : "source/dentist/commands/mergeMasks.d",
  "comment" : "    This is the `mergeMasks` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Merge several masks into a single one with non-overlapping intervals. This\n    can also be used to merge overlapping intervals in a single mask.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 18,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Merge several masks into a single one with non-overlapping intervals. This\\x0a    can also be used to merge overlapping intervals in a single mask.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ReferenceInterval",
     "ReferenceRegion"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 27,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "coord_t",
     "id_t",
     "FlatLocalAlignment"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 31,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 32,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 33,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "readMask",
     "writeMask"
    ]
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `mergeMasks` command.\n",
    "line" : 39,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi7ZQCa",
    "originalType" : "OptionsFor!(DentistCommand.mergeMasks)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `mergeMasks` command with `options`.\n",
    "line" : 43,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi7ZQCaZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi7ZQCa",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 56,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.commands.output",
  "kind" : "module",
  "file" : "source/dentist/commands/output.d",
  "comment" : "    This is the `output` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Generate the output assembly by closing gaps.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 17,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Generate the output assembly by closing gaps.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 21,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 22,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isTesting",
     "ReferenceInterval",
     "ReferenceRegion",
     "ReferencePoint"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 27,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AlignmentChain",
     "AlignmentLocationSeed",
     "coord_t",
     "id_t",
     "ReadAlignmentType",
     "SeededAlignment",
     "trace_point_t"
    ]
   },
   {
    "name" : "dentist.commands.checkResults",
    "kind" : "import",
    "line" : 36,
    "char" : 12,
    "protection" : "private",
    "selective" : [
     "Complement",
     "ContigAlignmentsCache",
     "ContigMapping",
     "DuplicateQueryContig"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 41,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.common.binio",
    "kind" : "import",
    "line" : 42,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "CompressedSequence",
     "InsertionDb"
    ]
   },
   {
    "name" : "dentist.common.insertions",
    "kind" : "import",
    "line" : 45,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "getCroppingPosition",
     "getInfoForExistingContig",
     "getInfoForGap",
     "getInfoForNewSequenceInsertion",
     "Insertion",
     "InsertionInfo",
     "isOutputGap",
     "isValidInsertion",
     "OutputScaffold"
    ]
   },
   {
    "name" : "dentist.common.scaffold",
    "kind" : "import",
    "line" : 55,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ContigNode",
     "ContigPart",
     "scaffoldStarts",
     "enforceJoinPolicy",
     "getUnkownJoin",
     "initScaffold",
     "isAntiParallel",
     "isCyclic",
     "isDefault",
     "isExtension",
     "isFrontExtension",
     "isBackExtension",
     "isGap",
     "linearWalk",
     "normalizeUnkownJoins",
     "removeBlacklisted"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 72,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ContigSegment",
     "GapSegment",
     "getNumContigs",
     "getFastaSequence",
     "getScaffoldStructure",
     "ScaffoldSegment"
    ]
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 79,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "replaceInPlace"
    ]
   },
   {
    "name" : "dentist.util.fasta",
    "kind" : "import",
    "line" : 80,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "complement",
     "reverseComplementer"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 81,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 82,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "absdiff",
     "add",
     "bulkAdd",
     "ceil",
     "filterEdges",
     "floor",
     "mean",
     "NaturalNumberSet",
     "RoundingMode"
    ]
   },
   {
    "name" : "dentist.util.range",
    "kind" : "import",
    "line" : 92,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "wrapLines"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 93,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "all",
     "canFind",
     "copy",
     "count",
     "countUntil",
     "filter",
     "find",
     "fold",
     "joiner",
     "map",
     "max",
     "maxElement",
     "min",
     "predSwitch",
     "sort",
     "swap",
     "swapAt"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 111,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array"
    ]
   },
   {
    "name" : "std.ascii",
    "kind" : "import",
    "line" : 112,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "toUpper"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 113,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 114,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 115,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enumerate",
     "dropExactly",
     "only",
     "repeat",
     "takeExactly",
     "walkLength"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 122,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "empty",
     "front",
     "popFront",
     "save"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 123,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "File",
     "stderr",
     "stdout"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 124,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Flag",
     "No",
     "tuple",
     "Tuple",
     "Yes"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 125,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    },
    "selective" : [
     "Json"
    ]
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `output` command.\n",
    "line" : 129,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi16ZQCb",
    "originalType" : "OptionsFor!(DentistCommand.output)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `output` command with `options`.\n",
    "line" : 133,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi16ZQCbZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi16ZQCb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 138,
    "endchar" : 1
   },
   {
    "name" : "AGPComponentType",
    "kind" : "enum",
    "protection" : "public",
    "line" : 141,
    "char" : 1,
    "baseDeco" : "Aya",
    "members" : [
     {
      "name" : "activeFinishing",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"A\"",
      "comment" : "Active Finishing\n",
      "line" : 144,
      "char" : 5
     },
     {
      "name" : "draftHTG",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"D\"",
      "comment" : "Draft HTG (often phase1 and phase2 are called Draft, whether or not they have the draft keyword).\n",
      "line" : 146,
      "char" : 5
     },
     {
      "name" : "finishedHTG",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"F\"",
      "comment" : "Finished HTG (phase3)\n",
      "line" : 148,
      "char" : 5
     },
     {
      "name" : "wholeGenomeFinishing",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"G\"",
      "comment" : "Whole Genome Finishing\n",
      "line" : 150,
      "char" : 5
     },
     {
      "name" : "otherSequence",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"O\"",
      "comment" : "Other sequence (typically means no HTG keyword)\n",
      "line" : 152,
      "char" : 5
     },
     {
      "name" : "preDraft",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"P\"",
      "comment" : "Pre Draft\n",
      "line" : 154,
      "char" : 5
     },
     {
      "name" : "wgsContig",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"W\"",
      "comment" : "WGS contig\n",
      "line" : 156,
      "char" : 5
     },
     {
      "name" : "gapWithSpecifiedSize",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"N\"",
      "comment" : "gap with specified size\n",
      "line" : 158,
      "char" : 5
     },
     {
      "name" : "gapOfUnknownSize",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"U\"",
      "comment" : "gap of unknown size, defaulting to 100 bases.\n",
      "line" : 160,
      "char" : 5
     }
    ]
   },
   {
    "name" : "AGPLinkageEvidence",
    "kind" : "enum",
    "protection" : "public",
    "line" : 164,
    "char" : 1,
    "baseDeco" : "Aya",
    "members" : [
     {
      "name" : "na",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"na\"",
      "comment" : "used when no linkage is being asserted (column 8b is ‘no’)\n",
      "line" : 167,
      "char" : 5
     },
     {
      "name" : "pairedEnds",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"paired-ends\"",
      "comment" : "paired sequences from the two ends of a DNA fragment, mate-pairs and molecular-barcoding.\n",
      "line" : 169,
      "char" : 5
     },
     {
      "name" : "alignGenus",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"align_genus\"",
      "comment" : "alignment to a reference genome within the same genus.\n",
      "line" : 171,
      "char" : 5
     },
     {
      "name" : "alignXgenus",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"align_xgenus\"",
      "comment" : "alignment to a reference genome within another genus.\n",
      "line" : 173,
      "char" : 5
     },
     {
      "name" : "alignTrnscpt",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"align_trnscpt\"",
      "comment" : "alignment to a transcript from the same species.\n",
      "line" : 175,
      "char" : 5
     },
     {
      "name" : "withinClone",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"within_clone\"",
      "comment" : "sequence on both sides of the gap is derived from the same clone, but the gap is not spanned by paired-ends. The adjacent sequence contigs have unknown order and orientation.\n",
      "line" : 177,
      "char" : 5
     },
     {
      "name" : "cloneContig",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"clone_contig\"",
      "comment" : "linkage is provided by a clone contig in the tiling path (TPF). For example, a gap where there is a known clone, but there is not yet sequence for that clone.\n",
      "line" : 179,
      "char" : 5
     },
     {
      "name" : "map",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"map\"",
      "comment" : "linkage asserted using a non-sequence based map such as RH, linkage, fingerprint or optical.\n",
      "line" : 181,
      "char" : 5
     },
     {
      "name" : "pcr",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"pcr\"",
      "comment" : "PCR using primers on both sides of the gap.\n",
      "line" : 183,
      "char" : 5
     },
     {
      "name" : "proximityLigation",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"proximity_ligation\"",
      "comment" : "ligation of segments of DNA that were brought into proximity in chromatin (Hi-C and related technologies).\n",
      "line" : 185,
      "char" : 5
     },
     {
      "name" : "strobe",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"strobe\"",
      "comment" : "strobe sequencing.\n",
      "line" : 187,
      "char" : 5
     },
     {
      "name" : "unspecified",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"unspecified\"",
      "comment" : "used only for gaps of type contamination and when converting old AGPs that lack a field for linkage evidence into the new format.\n",
      "line" : 189,
      "char" : 5
     }
    ]
   },
   {
    "name" : "AssemblyWriter",
    "kind" : "class",
    "protection" : "public",
    "line" : 193,
    "char" : 1,
    "members" : [
     {
      "name" : "FastaWriter",
      "kind" : "alias",
      "protection" : "public",
      "line" : 195,
      "char" : 5,
      "deco" : "C7dentist4util5range__T13WrapLinesImplTS3std5stdio4File17LockingTextWriterZQCa",
      "originalType" : "typeof(wrapLines(stdout.lockingTextWriter, 0))"
     },
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 197,
      "char" : 29,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi16ZQCb",
      "originalType" : "Options",
      "offset" : 16
     },
     {
      "name" : "scaffoldStructure",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 198,
      "char" : 40,
      "deco" : "AxS3std7variant__T8VariantNVmi56TS7dentist7dazzler13ContigSegmentTSQBhQBc10GapSegmentZQCq",
      "originalType" : "const(ScaffoldSegment)[]",
      "offset" : 264
     },
     {
      "name" : "numReferenceContigs",
      "kind" : "variable",
      "protection" : "public",
      "line" : 199,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 280
     },
     {
      "name" : "contigLengths",
      "kind" : "variable",
      "protection" : "public",
      "line" : 200,
      "char" : 14,
      "deco" : "Am",
      "originalType" : "size_t[]",
      "offset" : 288
     },
     {
      "name" : "skipGaps",
      "kind" : "variable",
      "protection" : "public",
      "line" : 201,
      "char" : 21,
      "deco" : "HG2mb",
      "originalType" : "bool[size_t[2]]",
      "offset" : 304
     },
     {
      "name" : "assemblyGraph",
      "kind" : "variable",
      "protection" : "public",
      "line" : 202,
      "char" : 20,
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa",
      "originalType" : "OutputScaffold",
      "offset" : 312
     },
     {
      "name" : "incidentEdgesCache",
      "kind" : "variable",
      "protection" : "public",
      "line" : 203,
      "char" : 39,
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa18IncidentEdgesCache",
      "originalType" : "OutputScaffold.IncidentEdgesCache",
      "offset" : 336
     },
     {
      "name" : "scaffoldStartNodes",
      "kind" : "variable",
      "protection" : "public",
      "line" : 204,
      "char" : 18,
      "deco" : "AS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
      "originalType" : "ContigNode[]",
      "offset" : 376
     },
     {
      "name" : "resultFile",
      "kind" : "variable",
      "protection" : "public",
      "line" : 205,
      "char" : 10,
      "deco" : "S3std5stdio4File",
      "offset" : 392
     },
     {
      "name" : "writer",
      "kind" : "variable",
      "protection" : "public",
      "line" : 206,
      "char" : 17,
      "deco" : "C7dentist4util5range__T13WrapLinesImplTS3std5stdio4File17LockingTextWriterZQCa",
      "originalType" : "FastaWriter",
      "offset" : 416
     },
     {
      "name" : "agpFile",
      "kind" : "variable",
      "protection" : "public",
      "line" : 207,
      "char" : 10,
      "deco" : "S3std5stdio4File",
      "offset" : 424
     },
     {
      "name" : "closedGapsBedFile",
      "kind" : "variable",
      "protection" : "public",
      "line" : 208,
      "char" : 10,
      "deco" : "S3std5stdio4File",
      "offset" : 448
     },
     {
      "name" : "currentScaffold",
      "kind" : "variable",
      "protection" : "public",
      "line" : 209,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 472
     },
     {
      "name" : "currentScaffoldPartId",
      "kind" : "variable",
      "protection" : "public",
      "line" : 210,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 488
     },
     {
      "name" : "currentScaffoldCoord",
      "kind" : "variable",
      "protection" : "public",
      "line" : 211,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 492
     },
     {
      "name" : "nextScaffoldCoord",
      "kind" : "variable",
      "protection" : "public",
      "line" : 212,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 496
     },
     {
      "name" : "currentContigId",
      "kind" : "variable",
      "protection" : "public",
      "line" : 213,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 500
     },
     {
      "name" : "currentContigCoord",
      "kind" : "variable",
      "protection" : "public",
      "line" : 214,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 504
     },
     {
      "name" : "nextContigCoord",
      "kind" : "variable",
      "protection" : "public",
      "line" : 215,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 508
     },
     {
      "name" : "contigAlignmentsCache",
      "kind" : "variable",
      "protection" : "public",
      "line" : 218,
      "char" : 31,
      "deco" : "S7dentist8commands12checkResults21ContigAlignmentsCache",
      "offset" : 512
     },
     {
      "name" : "contigAlignments",
      "kind" : "variable",
      "protection" : "public",
      "line" : 219,
      "char" : 25,
      "deco" : "AS7dentist8commands12checkResults13ContigMapping",
      "offset" : 600
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 222,
      "char" : 5,
      "deco" : "FIKS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi16ZQCbZCQDeQBl6output14AssemblyWriter",
      "originalType" : "(in ref Options options)",
      "parameters" : [
       {
        "name" : "options",
        "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi16ZQCb",
        "storageClass" : [
         "in",
         "ref"
        ]
       }
      ],
      "endline" : 243,
      "endchar" : 5
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 245,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 268,
      "endchar" : 5
     },
     {
      "name" : "init",
      "kind" : "function",
      "protection" : "protected",
      "line" : 270,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 291,
      "endchar" : 5
     },
     {
      "name" : "buildAssemblyGraph",
      "kind" : "function",
      "protection" : "protected",
      "line" : 294,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 337,
      "endchar" : 5
     },
     {
      "name" : "appendUnkownJoins",
      "kind" : "function",
      "protection" : "protected",
      "line" : 339,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 350,
      "endchar" : 5
     },
     {
      "name" : "skipShortExtension",
      "kind" : "function",
      "protection" : "protected",
      "line" : 352,
      "char" : 36,
      "deco" : "xFmS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZEQIcQIb__TQDqVQHqa13_6b656570496e73657274696f6eZQFc",
      "originalType" : "const Flag!\"keepInsertion\"(size_t insertionId, Insertion insertion)",
      "parameters" : [
       {
        "name" : "insertionId",
        "deco" : "m"
       },
       {
        "name" : "insertion",
        "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge"
       }
      ],
      "endline" : 375,
      "endchar" : 5
     },
     {
      "name" : "ensureHighQualityConsensus",
      "kind" : "function",
      "protection" : "protected",
      "line" : 377,
      "char" : 36,
      "deco" : "xFmS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZEQIcQIb__TQDqVQHqa13_6b656570496e73657274696f6eZQFc",
      "originalType" : "const Flag!\"keepInsertion\"(size_t insertionId, Insertion insertion)",
      "parameters" : [
       {
        "name" : "insertionId",
        "deco" : "m"
       },
       {
        "name" : "insertion",
        "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge"
       }
      ],
      "endline" : 399,
      "endchar" : 5
     },
     {
      "name" : "logStatistics",
      "kind" : "function",
      "protection" : "public",
      "line" : 401,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 441,
      "endchar" : 5
     },
     {
      "name" : "writeAGPHeader",
      "kind" : "function",
      "protection" : "public",
      "line" : 443,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 452,
      "endchar" : 5
     },
     {
      "name" : "logSparseInsertionWalks",
      "kind" : "function",
      "protection" : "public",
      "line" : 454,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 540,
      "endchar" : 5
     },
     {
      "name" : "writeNewScaffold",
      "kind" : "function",
      "protection" : "public",
      "line" : 542,
      "char" : 10,
      "deco" : "FS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuZv",
      "originalType" : "void(ContigNode startNode)",
      "parameters" : [
       {
        "name" : "startNode",
        "deco" : "S3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu"
       }
      ],
      "endline" : 575,
      "endchar" : 5
     },
     {
      "name" : "gotoNextContig",
      "kind" : "function",
      "protection" : "public",
      "line" : 577,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 591,
      "endchar" : 5
     },
     {
      "name" : "mergeInsertions",
      "kind" : "function",
      "protection" : "public",
      "line" : 593,
      "char" : 15,
      "deco" : "FAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZQJf",
      "originalType" : "Insertion(Insertion[] insertionsChunk)",
      "parameters" : [
       {
        "name" : "insertionsChunk",
        "deco" : "AS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge"
       }
      ],
      "endline" : 620,
      "endchar" : 5
     },
     {
      "name" : "scaffoldHeader",
      "kind" : "function",
      "protection" : "protected",
      "line" : 622,
      "char" : 22,
      "deco" : "FIS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuIEQEpQEo__T4FlagVQEfa8_69734379636c6963ZQBdZQFg",
      "originalType" : "string(in ContigNode begin, in Flag!\"isCyclic\" isCyclic)",
      "parameters" : [
       {
        "name" : "begin",
        "deco" : "xS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "isCyclic",
        "deco" : "xE3std8typecons__T4FlagVAyaa8_69734379636c6963ZQBd",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 628,
      "endchar" : 5
     },
     {
      "name" : "writeHeader",
      "kind" : "function",
      "protection" : "protected",
      "line" : 630,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 633,
      "endchar" : 5
     },
     {
      "name" : "writeInsertion",
      "kind" : "function",
      "protection" : "protected",
      "line" : 635,
      "char" : 20,
      "deco" : "FIS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuISQCs4util4math__T5GraphTSQFnQFm__TQFgTmVQFda8_636f6e7469674964TQFdVQGea10_636f6e74696750617274ZQHpTvVEQImQIl__T4FlagVQIca10_69734469726563746564ZQBii0TSQInQIi10insertions13InsertionInfoZQGn4EdgeIbZv",
      "originalType" : "void(in ContigNode begin, in Insertion insertion, in bool globalComplement)",
      "parameters" : [
       {
        "name" : "begin",
        "deco" : "xS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "insertion",
        "deco" : "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "globalComplement",
        "deco" : "xb",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 649,
      "endchar" : 5
     },
     {
      "name" : "writeExistingContig",
      "kind" : "function",
      "protection" : "protected",
      "line" : 651,
      "char" : 20,
      "deco" : "FIS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuISQCs4util4math__T5GraphTSQFnQFm__TQFgTmVQFda8_636f6e7469674964TQFdVQGea10_636f6e74696750617274ZQHpTvVEQImQIl__T4FlagVQIca10_69734469726563746564ZQBii0TSQInQIi10insertions13InsertionInfoZQGn4EdgeIbZv",
      "originalType" : "void(in ContigNode begin, in Insertion insertion, in bool globalComplement)",
      "parameters" : [
       {
        "name" : "begin",
        "deco" : "xS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "insertion",
        "deco" : "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "globalComplement",
        "deco" : "xb",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 705,
      "endchar" : 5
     },
     {
      "name" : "writeGap",
      "kind" : "function",
      "protection" : "protected",
      "line" : 707,
      "char" : 20,
      "deco" : "FIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZv",
      "originalType" : "void(in Insertion insertion)",
      "parameters" : [
       {
        "name" : "insertion",
        "deco" : "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 743,
      "endchar" : 5
     },
     {
      "name" : "writeNewSequenceInsertion",
      "kind" : "function",
      "protection" : "protected",
      "line" : 745,
      "char" : 20,
      "deco" : "FIS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuISQCs4util4math__T5GraphTSQFnQFm__TQFgTmVQFda8_636f6e7469674964TQFdVQGea10_636f6e74696750617274ZQHpTvVEQImQIl__T4FlagVQIca10_69734469726563746564ZQBii0TSQInQIi10insertions13InsertionInfoZQGn4EdgeIbZv",
      "originalType" : "void(in ContigNode begin, in Insertion insertion, in bool globalComplement)",
      "parameters" : [
       {
        "name" : "begin",
        "deco" : "xS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "insertion",
        "deco" : "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "globalComplement",
        "deco" : "xb",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 817,
      "endchar" : 5
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 193,
      "char" : 1,
      "deco" : "FNeZv"
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     }
    ]
   },
   {
    "name" : "fixCropping",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Remove contig cropping where no new sequence is to be inserted and adjust\ncropping where cropped regions overlap.\n",
    "line" : 823,
    "char" : 16,
    "deco" : "FS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIaZQJa",
    "originalType" : "OutputScaffold(OutputScaffold scaffold)",
    "parameters" : [
     {
      "name" : "scaffold",
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa"
     }
    ],
    "endline" : 860,
    "endchar" : 1
   },
   {
    "name" : "transferCroppingFromIncidentJoins",
    "kind" : "function",
    "protection" : "public",
    "line" : 862,
    "char" : 25,
    "deco" : "FKS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeSQJeQIzQIx__TQIvTQIsTvVQEmi0TQCuZQJp18IncidentEdgesCacheZEQKgQKf__TQFuVQJua16_696e73657274696f6e55706461746564ZQHm",
    "originalType" : "Flag!\"insertionUpdated\"(ref Insertion contigJoin, OutputScaffold.IncidentEdgesCache incidentEdgesCache)",
    "parameters" : [
     {
      "name" : "contigJoin",
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "storageClass" : [
       "ref"
      ]
     },
     {
      "name" : "incidentEdgesCache",
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa18IncidentEdgesCache"
     }
    ],
    "endline" : 895,
    "endchar" : 1
   },
   {
    "name" : "insertionToSimpleJson",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Converts the pileup into a simple JSON object for diagnostic purposes.\n",
    "line" : 898,
    "char" : 6,
    "deco" : "FIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZS4vibe4data4json4Json",
    "originalType" : "Json(in Insertion insertion)",
    "parameters" : [
     {
      "name" : "insertion",
      "deco" : "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 912,
    "endchar" : 1
   },
   {
    "name" : "getType",
    "kind" : "function",
    "protection" : "private",
    "line" : 914,
    "char" : 27,
    "deco" : "FIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZEQJfQGf10alignments4base17ReadAlignmentType",
    "originalType" : "ReadAlignmentType(in Insertion insertion)",
    "parameters" : [
     {
      "name" : "insertion",
      "deco" : "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 924,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.commands",
  "kind" : "module",
  "file" : "source/dentist/commands/package.d",
  "comment" : "    Exposes the `execute` function from each command. The functions are\n    accessed by the command name, for example,\n    `dentist.commands.collectPileUps.execute` is available as `collectPileUps`.\n\n\n    $(UL\n        $(LI `dentist.commands.bed2mask`)\n        $(LI `dentist.commands.chainLocalAlignments`)\n        $(LI `dentist.commands.collectPileUps`)\n        $(LI `dentist.commands.filterMask`)\n        $(LI `dentist.commands.generateDazzlerOptions`)\n        $(LI `dentist.commands.maskRepetitiveRegions`)\n        $(LI `dentist.commands.mergeInsertions`)\n        $(LI `dentist.commands.mergeMasks`)\n        $(LI `dentist.commands.output`)\n        $(LI `dentist.commands.processPileUps`)\n        $(LI `dentist.commands.propagateMask`)\n        $(LI `dentist.commands.showInsertions`)\n        $(LI `dentist.commands.showMask`)\n        $(LI `dentist.commands.showPileUps`)\n        $(LI `dentist.commands.translateCoords`)\n        $(LI `dentist.commands.validateConfig`)\n        $(LI `dentist.commands.validateRegions`)\n    )\n\n    If DENTIST is compiled with `--config=testing` the following additional\n    commands will be available:\n\n    $(UL\n        $(LI `dentist.commands.buildPartialAssembly`)\n        $(LI `dentist.commands.checkResults`)\n        $(LI `dentist.commands.checkScaffolding`)\n        $(LI `dentist.commands.findClosableGaps`)\n    )\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 44,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isTesting"
    ]
   },
   {
    "name" : "dentist.commands.bed2mask",
    "kind" : "import",
    "line" : 47,
    "char" : 15,
    "renamed" : {
     "bed2mask" : "execute"
    }
   },
   {
    "name" : "dentist.commands.chainLocalAlignments",
    "kind" : "import",
    "line" : 48,
    "char" : 15,
    "renamed" : {
     "chainLocalAlignments" : "execute"
    }
   },
   {
    "name" : "dentist.commands.collectPileUps",
    "kind" : "import",
    "line" : 49,
    "char" : 15,
    "renamed" : {
     "collectPileUps" : "execute"
    }
   },
   {
    "name" : "dentist.commands.filterMask",
    "kind" : "import",
    "line" : 50,
    "char" : 15,
    "renamed" : {
     "filterMask" : "execute"
    }
   },
   {
    "name" : "dentist.commands.generateDazzlerOptions",
    "kind" : "import",
    "line" : 51,
    "char" : 15,
    "renamed" : {
     "generateDazzlerOptions" : "execute"
    }
   },
   {
    "name" : "dentist.commands.maskRepetitiveRegions",
    "kind" : "import",
    "line" : 52,
    "char" : 15,
    "renamed" : {
     "maskRepetitiveRegions" : "execute"
    }
   },
   {
    "name" : "dentist.commands.mergeInsertions",
    "kind" : "import",
    "line" : 53,
    "char" : 15,
    "renamed" : {
     "mergeInsertions" : "execute"
    }
   },
   {
    "name" : "dentist.commands.mergeMasks",
    "kind" : "import",
    "line" : 54,
    "char" : 15,
    "renamed" : {
     "mergeMasks" : "execute"
    }
   },
   {
    "name" : "dentist.commands.output",
    "kind" : "import",
    "line" : 55,
    "char" : 15,
    "renamed" : {
     "output" : "execute"
    }
   },
   {
    "name" : "dentist.commands.processPileUps",
    "kind" : "import",
    "line" : 56,
    "char" : 15,
    "renamed" : {
     "processPileUps" : "execute"
    }
   },
   {
    "name" : "dentist.commands.propagateMask",
    "kind" : "import",
    "line" : 57,
    "char" : 15,
    "renamed" : {
     "propagateMask" : "execute"
    }
   },
   {
    "name" : "dentist.commands.showInsertions",
    "kind" : "import",
    "line" : 58,
    "char" : 15,
    "renamed" : {
     "showInsertions" : "execute"
    }
   },
   {
    "name" : "dentist.commands.showMask",
    "kind" : "import",
    "line" : 59,
    "char" : 15,
    "renamed" : {
     "showMask" : "execute"
    }
   },
   {
    "name" : "dentist.commands.showPileUps",
    "kind" : "import",
    "line" : 60,
    "char" : 15,
    "renamed" : {
     "showPileUps" : "execute"
    }
   },
   {
    "name" : "dentist.commands.translateCoords",
    "kind" : "import",
    "line" : 61,
    "char" : 15,
    "renamed" : {
     "translateCoords" : "execute"
    }
   },
   {
    "name" : "dentist.commands.validateConfig",
    "kind" : "import",
    "line" : 62,
    "char" : 15,
    "renamed" : {
     "validateConfig" : "execute"
    }
   },
   {
    "name" : "dentist.commands.validateRegions",
    "kind" : "import",
    "line" : 63,
    "char" : 15,
    "renamed" : {
     "validateRegions" : "execute"
    }
   },
   {
    "name" : "dentist.commands.buildPartialAssembly",
    "kind" : "import",
    "line" : 68,
    "char" : 15,
    "renamed" : {
     "buildPartialAssembly" : "execute"
    }
   },
   {
    "name" : "dentist.commands.checkResults",
    "kind" : "import",
    "line" : 69,
    "char" : 15,
    "renamed" : {
     "checkResults" : "execute"
    }
   },
   {
    "name" : "dentist.commands.checkScaffolding",
    "kind" : "import",
    "line" : 70,
    "char" : 15,
    "renamed" : {
     "checkScaffolding" : "execute"
    }
   },
   {
    "name" : "dentist.commands.findClosableGaps",
    "kind" : "import",
    "line" : 71,
    "char" : 15,
    "renamed" : {
     "findClosableGaps" : "execute"
    }
   }
  ]
 },
 {
  "name" : "dentist.commands.processPileUps.cropper",
  "kind" : "module",
  "file" : "source/dentist/commands/processPileUps/cropper.d",
  "comment" : "    This package contains methods for cropping a pile up.\n\n    Example:\n\n    ---\n    ▂▂▂▂▂ = repeat mask\n    ━━━━┯ = reference contigs with trace points (top row)\n    ──┾━━ = aligned reads with removed (thin) and kept (thick) parts\n    ◊     = cropping positions\n\n\n                 ◊ ▂▂▂▂▂▂▂▂▂▂▂▂▂▂                ▂▂▂▂▂▂▂▂▂▂▂▂    ◊\n    ┄━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━━━┑            ┍━━━━┯━━━━┯━━━━┯━━━━┯━━━━┯━━┅\n       ╎    ╎    │    ╎    ╎    ╎            ╎    ╎    ╎    ╎    │    ╎\n       ╎    ╎    │    ╎    ╎    ╎            ╎    ╎    ╎    ╎    │    ╎\n       ╎ ───┬────┾━━━━┯━━━━┯━━━━┯━━━━━━━━━━━━┯━━━━┯━━━━┯━━━━┯━━━━┽────┬─\n     ──┬────┬────┾━━━━┯━━━━┯━━━━┯━━━━━━━━━━━━┯━━━━┯━━━━┯━━━━┯━━━━┽──  ╎\n       ╎   ─┬────┾━━━━┯━━━━┯━━━━┯━━━         ╎    ╎    ╎    ╎    │    ╎\n       ╎    ╎    │    ╎    ╎    ╎        ━━━━┯━━━━┯━━━━┯━━━━┯━━━━┽─   ╎\n       ╎    ╎    │    ╎    ╎    ╎  ━━━━━━━━━━┯━━━━┯━━━━┯━━━━┯━━━━┥    ╎\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 31,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ReadInterval",
     "ReferenceInterval",
     "ReferenceRegion",
     "ReferencePoint",
     "to"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "AlignmentFlag" : "Flag",
     "AlignmentFlags" : "Flags"
    },
    "selective" : [
     "AlignmentChain",
     "AlignmentLocationSeed",
     "Contig",
     "coord_t",
     "getType",
     "isExtension",
     "Locus",
     "PileUp",
     "ReadAlignment",
     "SeededAlignment",
     "toChar",
     "trace_point_t",
     "TracePoint"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 53,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "buildDbFile",
     "getFastaSequences"
    ]
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 54,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "sliceBy"
    ]
   },
   {
    "name" : "dentist.util.fasta",
    "kind" : "import",
    "line" : 55,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "reverseComplement"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 56,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 57,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ceil",
     "ceildiv",
     "RoundingMode"
    ]
   },
   {
    "name" : "dentist.util.region",
    "kind" : "import",
    "line" : 58,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "min",
     "sup"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 59,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "all",
     "canFind",
     "copy",
     "countUntil",
     "joiner",
     "filter",
     "fold",
     "map",
     "predSwitch",
     "sort",
     "sum",
     "swap"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 72,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array",
     "minimallyInitializedArray"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 73,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 74,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.path",
    "kind" : "import",
    "line" : 75,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "buildPath"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 76,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "chain",
     "chunks",
     "iota",
     "only",
     "retro",
     "takeExactly",
     "zip"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 84,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "tuple"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 85,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    }
   },
   {
    "name" : "vibe.data.serialization",
    "kind" : "import",
    "line" : 86,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ignore"
    ]
   },
   {
    "name" : "CropOptions",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Options for the cropping algorithm.\n",
    "line" : 90,
    "char" : 1,
    "members" : [
     {
      "name" : "refDb",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Reference assembly.\n",
      "line" : 93,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 0
     },
     {
      "name" : "readsDb",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Reads database with all reads.\n",
      "line" : 96,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 16
     },
     {
      "name" : "minAnchorLength",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Minimum number of base pairs required for successful alignment of the\ncropped reads.\n\nIn order to ensure the minimum overlap, the algorithm will insert\nsequence from the reference contig to the end(s) of the cropped read\nif the overlap after cropping is too small. (see `fetchSupportPatches`)\n",
      "line" : 104,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 32
     },
     {
      "name" : "outputDir",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Output directory where the DB of cropped reads is placed.\n",
      "line" : 107,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 40
     }
    ]
   },
   {
    "name" : "cropPileUp",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Crop the reads in `pileUp` to a common trace point on the reference\ncontig(s) which is not covered by `repeatMask`.\n",
    "line" : 113,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FAS7dentist6common10alignments4base13ReadAlignmentISQBx4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBnISQEh8commands14processPileUps7cropper11CropOptionsZS3std8typecons__T5TupleTQEcVQEga2_6462TASQHuQFxQFv__TQFrTmTmVQFna8_636f6e7469674964Vmi0ZQHa11TaggedPointVQHfa18_7265666572656e6365506f736974696f6e73TAEQMaQLvQLrQLi21AlignmentLocationSeedVQKja5_7365656473ZQHf",
    "originalType" : "(PileUp pileUp, in ReferenceRegion repeatMask, in CropOptions options)",
    "parameters" : [
     {
      "name" : "pileUp",
      "deco" : "AS7dentist6common10alignments4base13ReadAlignment"
     },
     {
      "name" : "repeatMask",
      "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "options",
      "deco" : "xS7dentist8commands14processPileUps7cropper11CropOptions",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 119,
    "endchar" : 1
   },
   {
    "name" : "PileUpCropper",
    "kind" : "struct",
    "protection" : "private",
    "line" : 122,
    "char" : 9,
    "members" : [
     {
      "name" : "pileUp",
      "kind" : "variable",
      "protection" : "public",
      "line" : 124,
      "char" : 12,
      "deco" : "AS7dentist6common10alignments4base13ReadAlignment",
      "originalType" : "PileUp",
      "offset" : 0
     },
     {
      "name" : "repeatMask",
      "kind" : "variable",
      "protection" : "public",
      "line" : 125,
      "char" : 28,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "const(ReferenceRegion)",
      "offset" : 16
     },
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "public",
      "line" : 126,
      "char" : 24,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist8commands14processPileUps7cropper11CropOptions",
      "offset" : 32
     },
     {
      "name" : "croppingRefPositions",
      "kind" : "variable",
      "protection" : "private",
      "line" : 127,
      "char" : 30,
      "deco" : "AS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPoint",
      "originalType" : "ReferencePoint[]",
      "offset" : 88
     },
     {
      "name" : "croppingSeeds",
      "kind" : "variable",
      "protection" : "private",
      "line" : 128,
      "char" : 37,
      "deco" : "AE7dentist6common10alignments4base21AlignmentLocationSeed",
      "offset" : 104
     },
     {
      "name" : "supportPatches",
      "kind" : "variable",
      "protection" : "private",
      "line" : 129,
      "char" : 22,
      "deco" : "AAya",
      "offset" : 120
     },
     {
      "name" : "supportPatchesRevComp",
      "kind" : "variable",
      "protection" : "private",
      "line" : 130,
      "char" : 22,
      "deco" : "AAya",
      "offset" : 136
     },
     {
      "name" : "croppedDb",
      "kind" : "variable",
      "protection" : "private",
      "line" : 131,
      "char" : 20,
      "deco" : "Aya",
      "offset" : 152
     },
     {
      "name" : "result",
      "kind" : "function",
      "protection" : "public",
      "line" : 134,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FNaNbNdNiNfZS3std8typecons__T5TupleTAyaVQea2_6462TAS7dentist4util6region__T6RegionTmTmVQBza8_636f6e7469674964Vmi0ZQBn11TaggedPointVQDra18_7265666572656e6365506f736974696f6e73TAEQEv6common10alignments4base21AlignmentLocationSeedVQHka5_7365656473ZQIi",
      "originalType" : "@property ()",
      "endline" : 145,
      "endchar" : 5
     },
     {
      "name" : "buildDb",
      "kind" : "function",
      "protection" : "public",
      "line" : 148,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 175,
      "endchar" : 5
     },
     {
      "name" : "fetchCroppingRefPositions",
      "kind" : "function",
      "protection" : "private",
      "line" : 178,
      "char" : 18,
      "deco" : "FZv",
      "endline" : 217,
      "endchar" : 5
     },
     {
      "name" : "fetchSupportPatches",
      "kind" : "function",
      "protection" : "private",
      "comment" : "Fetch pieces of the flanking contig(s) that can be appended to the\ncropped reads in case the sequence remaining after cropping is\ninsufficient for later alignments, e.i. shorter than\n`options.minAnchorLength`.\n",
      "line" : 224,
      "char" : 18,
      "deco" : "FZv",
      "endline" : 262,
      "endchar" : 5
     },
     {
      "name" : "pileUpWithSequence",
      "kind" : "function",
      "protection" : "private",
      "comment" : "Returns a lazy range of `tuple(index, pileUp, sequence)`.\n",
      "line" : 266,
      "char" : 18,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FZS3std5range__T11ZipShortestVEQBc8typecons__T4FlagVAyaa18_616c6c4b6e6f776e53616d654c656e677468ZQByi0TSQDwQDv__T4iotaTmTmZQkFmmZ6ResultTAS7dentist6common10alignments4base13ReadAlignmentTSQHcQHb__T4TakeTSQHsQHr__T9GeneratorS_DQDj7dazzler__T17getFastaSequencesTAkZQxFIAyaQkZ16countedSequencesMFZQJhZQDhZQEbZQLd",
      "originalType" : "()",
      "endline" : 275,
      "endchar" : 5
     },
     {
      "name" : "getCroppingRefPositions",
      "kind" : "function",
      "protection" : "private",
      "comment" : "        Get points on the reference where the `pileUp` should be cropped.\n\n        Returns: one common trace point for each involved contig.\n        See_Also: `getCommonTracePoint`\n",
      "line" : 284,
      "char" : 18,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FZS3std8typecons__T5TupleTAS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPointVQBsa12_726566506f736974696f6e73TAEQEj6common10alignments4base21AlignmentLocationSeedVQEza5_7365656473ZQHi",
      "originalType" : "()",
      "endline" : 313,
      "endchar" : 5
     },
     {
      "name" : "getCroppedSequence",
      "kind" : "function",
      "protection" : "private",
      "line" : 316,
      "char" : 20,
      "deco" : "FImIS7dentist6common10alignments4base13ReadAlignmentIAyaZAya",
      "originalType" : "string(in size_t croppedDbIdx, in ReadAlignment readAlignment, in string readSequence)",
      "parameters" : [
       {
        "name" : "croppedDbIdx",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "readAlignment",
        "deco" : "xS7dentist6common10alignments4base13ReadAlignment",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "readSequence",
        "deco" : "xAya",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 335,
      "endchar" : 5
     },
     {
      "name" : "getReadCroppingSlice",
      "kind" : "function",
      "protection" : "private",
      "line" : 338,
      "char" : 18,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FIS7dentist6common10alignments4base13ReadAlignmentZSQBx4util6region__T6RegionTmTmVAyaa6_726561644964Vmi0ZQBj14TaggedInterval",
      "originalType" : "(in ReadAlignment readAlignment)",
      "parameters" : [
       {
        "name" : "readAlignment",
        "deco" : "xS7dentist6common10alignments4base13ReadAlignment",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 346,
      "endchar" : 5
     },
     {
      "name" : "getReadPatches",
      "kind" : "function",
      "protection" : "private",
      "line" : 349,
      "char" : 18,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FNaNbIS7dentist6common10alignments4base13ReadAlignmentZS3std8typecons__T5TupleTAyaVQea3_707265TQqVQta4_706f7374ZQBo",
      "originalType" : "(in ReadAlignment readAlignment)",
      "parameters" : [
       {
        "name" : "readAlignment",
        "deco" : "xS7dentist6common10alignments4base13ReadAlignment",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 363,
      "endchar" : 5
     },
     {
      "name" : "getSingleReadPatch",
      "kind" : "function",
      "protection" : "public",
      "line" : 366,
      "char" : 10,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FNaNbNiNfIS7dentist6common10alignments4base15SeededAlignmentZS3std8typecons__T5TupleTEQCxQCsQCoQCf21AlignmentLocationSeedVAyaa8_7265616453656564TQxVQBaa8_73657175656e6365ZQDp",
      "originalType" : "(in SeededAlignment alignment)",
      "parameters" : [
       {
        "name" : "alignment",
        "deco" : "xS7dentist6common10alignments4base15SeededAlignment",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 380,
      "endchar" : 5
     },
     {
      "name" : "getCroppedReadAsFasta",
      "kind" : "function",
      "protection" : "private",
      "line" : 383,
      "char" : 20,
      "deco" : "FAyaIS7dentist4util6region__T6RegionTmTmVQBoa6_726561644964Vmi0ZQBj14TaggedIntervalQDeQDhZQDl",
      "originalType" : "string(string readSequence, in ReadInterval readCroppingSlice, string prePatch, string postPatch)",
      "parameters" : [
       {
        "name" : "readSequence",
        "deco" : "Aya"
       },
       {
        "name" : "readCroppingSlice",
        "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa6_726561644964Vmi0ZQBj14TaggedInterval",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "prePatch",
        "deco" : "Aya"
       },
       {
        "name" : "postPatch",
        "deco" : "Aya"
       }
      ],
      "endline" : 421,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "splitAlignmentsByContigA",
    "kind" : "function",
    "protection" : "private",
    "comment" : "Sort alignment chains of pileUp into groups with the same `contigA.id`.\n",
    "line" : 426,
    "char" : 29,
    "deco" : "FAS7dentist6common10alignments4base13ReadAlignmentZAASQBzQBuQBqQBh15SeededAlignment",
    "originalType" : "SeededAlignment[][](PileUp pileUp)",
    "parameters" : [
     {
      "name" : "pileUp",
      "deco" : "AS7dentist6common10alignments4base13ReadAlignment"
     }
    ],
    "endline" : 442,
    "endchar" : 1
   },
   {
    "name" : "getCommonTracePoint",
    "kind" : "function",
    "protection" : "private",
    "comment" : "Returns a common trace points wrt. contigA that is not in `repeatMask`.\n",
    "line" : 446,
    "char" : 14,
    "deco" : "FIAS7dentist6common10alignments4base15SeededAlignmentISQBz4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBnZl",
    "originalType" : "long(in SeededAlignment[] alignments, in ReferenceRegion repeatMask)",
    "parameters" : [
     {
      "name" : "alignments",
      "deco" : "xAS7dentist6common10alignments4base15SeededAlignment",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "repeatMask",
      "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 500,
    "endchar" : 1
   },
   {
    "name" : "getCroppingSlice",
    "kind" : "function",
    "protection" : "private",
    "line" : 503,
    "char" : 22,
    "deco" : "FIS7dentist6common10alignments4base15SeededAlignmentIASQCa4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPointZSQExQCxQCv__TQCrTmTmVQCna6_726561644964Vmi0ZQDw14TaggedInterval",
    "originalType" : "ReadInterval(in SeededAlignment alignment, in ReferencePoint[] croppingRefPoints)",
    "parameters" : [
     {
      "name" : "alignment",
      "deco" : "xS7dentist6common10alignments4base15SeededAlignment",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "croppingRefPoints",
      "deco" : "xAS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPoint",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 550,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L552_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 552,
    "char" : 1,
    "endline" : 648,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.commands.processPileUps",
  "kind" : "module",
  "file" : "source/dentist/commands/processPileUps/package.d",
  "comment" : "    This is the `processPileUps` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Filter and process pile ups into insertions for gap closing.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 17,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Filter and process pile ups into insertions for gap closing.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 21,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.commands.collectPileUps.filter",
    "kind" : "import",
    "line" : 22,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "filterContainedAlignmentChains"
    ]
   },
   {
    "name" : "dentist.commands.processPileUps.cropper",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "CropOptions",
     "cropPileUp"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "dentistEnforce",
     "DentistException",
     "id_t",
     "ReferenceInterval",
     "ReferencePoint",
     "ReferenceRegion"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 31,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AlignmentChain",
     "AlignmentLocationSeed",
     "ChainingOptions",
     "Contig",
     "contigs",
     "coord_t",
     "getAlignmentRefs",
     "getType",
     "isExtension",
     "isGap",
     "makeJoin",
     "PileUp",
     "pileUpToSimpleJson",
     "ReadAlignment",
     "SeededAlignment",
     "toChar"
    ]
   },
   {
    "name" : "dentist.common.binio",
    "kind" : "import",
    "line" : 48,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "CompressedSequence",
     "InsertionDb",
     "PileUpDb"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 52,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.common.insertions",
    "kind" : "import",
    "line" : 53,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Insertion",
     "InsertionInfo"
    ]
   },
   {
    "name" : "dentist.common.scaffold",
    "kind" : "import",
    "line" : 56,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ContigNode",
     "getDefaultJoin",
     "isParallel"
    ]
   },
   {
    "name" : "dentist.util.containers",
    "kind" : "import",
    "line" : 60,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "hashSet",
     "HashSet"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 61,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 62,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "absdiff"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 63,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "computeQVs",
     "dbdust",
     "dbEmpty",
     "dbSubset",
     "chainLocalAlignments",
     "DBdumpOptions",
     "DbRecord",
     "filterPileUpAlignments",
     "filterLocalAlignments",
     "getAlignments",
     "getDalignment",
     "getDbRecords",
     "getConsensus",
     "getFastaSequence",
     "lasEmpty",
     "minQVCoverage",
     "readMask",
     "writeMask"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 82,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "canFind",
     "count",
     "countUntil",
     "cumulativeFold",
     "equal",
     "filter",
     "find",
     "joiner",
     "map",
     "max",
     "maxElement",
     "mean",
     "min",
     "merge",
     "sort",
     "swap",
     "uniq"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 100,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array",
     "minimallyInitializedArray"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 101,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.file",
    "kind" : "import",
    "line" : 102,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "exists"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 103,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.parallelism",
    "kind" : "import",
    "line" : 104,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "parallel",
     "taskPool"
    ]
   },
   {
    "name" : "std.path",
    "kind" : "import",
    "line" : 105,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "buildPath"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 106,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "chain",
     "drop",
     "enumerate",
     "evenChunks",
     "iota",
     "only",
     "retro",
     "zip"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 115,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "empty",
     "front",
     "popFront"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 116,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "tuple",
     "Tuple",
     "Yes"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 117,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    }
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `processPileUps` command.\n",
    "line" : 121,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCb",
    "originalType" : "OptionsFor!(DentistCommand.processPileUps)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `processPileUps` command with `options`.\n",
    "line" : 124,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCbZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 129,
    "endchar" : 1
   },
   {
    "name" : "PileUpsProcessor",
    "kind" : "class",
    "protection" : "public",
    "comment" : "This class comprises the `processPileUps` step of the DENTIST algorithm\n",
    "line" : 132,
    "char" : 1,
    "members" : [
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 134,
      "char" : 29,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCb",
      "originalType" : "Options",
      "offset" : 16
     },
     {
      "name" : "pileUps",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 135,
      "char" : 24,
      "deco" : "AAS7dentist6common10alignments4base13ReadAlignment",
      "originalType" : "PileUp[]",
      "offset" : 384
     },
     {
      "name" : "repeatMask",
      "kind" : "variable",
      "protection" : "public",
      "line" : 136,
      "char" : 21,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "ReferenceRegion",
      "offset" : 400
     },
     {
      "name" : "insertions",
      "kind" : "variable",
      "protection" : "public",
      "line" : 137,
      "char" : 17,
      "deco" : "AS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "originalType" : "Insertion[]",
      "offset" : 416
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 139,
      "char" : 5,
      "deco" : "FIKS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCbZCQDeQBl14processPileUps16PileUpsProcessor",
      "originalType" : "(in ref Options options)",
      "parameters" : [
       {
        "name" : "options",
        "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCb",
        "storageClass" : [
         "in",
         "ref"
        ]
       }
      ],
      "endline" : 144,
      "endchar" : 5
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 146,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 159,
      "endchar" : 5
     },
     {
      "name" : "processPileUp",
      "kind" : "function",
      "protection" : "protected",
      "line" : 161,
      "char" : 20,
      "deco" : "FmAS7dentist6common10alignments4base13ReadAlignmentZv",
      "originalType" : "void(size_t i, PileUp pileUp)",
      "parameters" : [
       {
        "name" : "i",
        "deco" : "m"
       },
       {
        "name" : "pileUp",
        "deco" : "AS7dentist6common10alignments4base13ReadAlignment"
       }
      ],
      "endline" : 166,
      "endchar" : 5
     },
     {
      "name" : "readPileUps",
      "kind" : "function",
      "protection" : "protected",
      "line" : 168,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 176,
      "endchar" : 5
     },
     {
      "name" : "readRepeatMask",
      "kind" : "function",
      "protection" : "protected",
      "line" : 178,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 187,
      "endchar" : 5
     },
     {
      "name" : "dropEmptyInsertions",
      "kind" : "function",
      "protection" : "protected",
      "line" : 189,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 192,
      "endchar" : 5
     },
     {
      "name" : "writeInsertions",
      "kind" : "function",
      "protection" : "protected",
      "line" : 194,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 203,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 207,
    "char" : 1,
    "name" : "Enumerated",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "Enumerated",
      "kind" : "alias",
      "line" : 207,
      "char" : 1,
      "type" : "Tuple!(size_t, \"index\", T, \"value\")"
     }
    ]
   },
   {
    "name" : "PileUpProcessor",
    "kind" : "class",
    "protection" : "protected",
    "comment" : "This class processes a single pileup.\n",
    "line" : 214,
    "char" : 11,
    "members" : [
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "public",
      "line" : 216,
      "char" : 20,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCb",
      "originalType" : "const(Options)",
      "offset" : 16
     },
     {
      "name" : "originalRepeatMask",
      "kind" : "variable",
      "protection" : "public",
      "line" : 217,
      "char" : 28,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "const(ReferenceRegion)",
      "offset" : 384
     },
     {
      "name" : "repeatMask",
      "kind" : "variable",
      "protection" : "public",
      "line" : 218,
      "char" : 21,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "ReferenceRegion",
      "offset" : 400
     },
     {
      "name" : "pileUpIdMapping",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 220,
      "char" : 28,
      "storageClass" : [
       "const"
      ],
      "deco" : "xAk",
      "originalType" : "id_t[]",
      "offset" : 416
     },
     {
      "name" : "pileUpId",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 221,
      "char" : 20,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 432
     },
     {
      "name" : "pileUp",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 222,
      "char" : 22,
      "deco" : "AS7dentist6common10alignments4base13ReadAlignment",
      "originalType" : "PileUp",
      "offset" : 440
     },
     {
      "name" : "resultInsertion",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 223,
      "char" : 26,
      "deco" : "PS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "originalType" : "Insertion*",
      "offset" : 456
     },
     {
      "name" : "croppedDb",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 224,
      "char" : 22,
      "deco" : "Aya",
      "offset" : 464
     },
     {
      "name" : "pileUpContigs",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 225,
      "char" : 24,
      "deco" : "AS7dentist6common10alignments4base6Contig",
      "offset" : 480
     },
     {
      "name" : "croppingPositions",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 226,
      "char" : 32,
      "deco" : "AS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPoint",
      "originalType" : "ReferencePoint[]",
      "offset" : 496
     },
     {
      "name" : "croppingSeeds",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 227,
      "char" : 39,
      "deco" : "AE7dentist6common10alignments4base21AlignmentLocationSeed",
      "offset" : 512
     },
     {
      "name" : "pileUpAlignment",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 228,
      "char" : 22,
      "deco" : "Aya",
      "offset" : 528
     },
     {
      "name" : "allowedReferenceReadIds",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 229,
      "char" : 28,
      "deco" : "S7dentist4util10containers__T7HashSetTkZQl",
      "originalType" : "HashSet!id_t",
      "offset" : 544
     },
     {
      "name" : "referenceReadCandidateIndices",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 230,
      "char" : 22,
      "deco" : "Ak",
      "originalType" : "id_t[]",
      "offset" : 552
     },
     {
      "name" : "referenceReadIdx",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 231,
      "char" : 22,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 568
     },
     {
      "name" : "referenceReadTry",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 232,
      "char" : 20,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 576
     },
     {
      "name" : "consensusDb",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 233,
      "char" : 22,
      "deco" : "Aya",
      "offset" : 584
     },
     {
      "name" : "postConsensusAlignment",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 234,
      "char" : 32,
      "deco" : "AS7dentist6common10alignments4base14AlignmentChain",
      "offset" : 600
     },
     {
      "name" : "insertionAlignment",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 235,
      "char" : 29,
      "deco" : "S7dentist6common10alignments4base13ReadAlignment",
      "offset" : 616
     },
     {
      "name" : "insertionSequence",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 236,
      "char" : 34,
      "deco" : "S7dentist6common5binioQn18CompressedSequence",
      "offset" : 752
     },
     {
      "name" : "insertion",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 237,
      "char" : 25,
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "originalType" : "Insertion",
      "offset" : 784
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 239,
      "char" : 5,
      "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCbISQDe4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBnZCQFoQDv14processPileUps15PileUpProcessor",
      "originalType" : "(in Options options, in ReferenceRegion repeatMask)",
      "parameters" : [
       {
        "name" : "options",
        "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi13ZQCb",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "repeatMask",
        "deco" : "xS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 248,
      "endchar" : 5
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 250,
      "char" : 10,
      "deco" : "FmAS7dentist6common10alignments4base13ReadAlignmentPSQBx4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQEsQEn8scaffold10ContigPartVQCaa10_636f6e74696750617274ZQDlTvVEQEiQEh__T4FlagVQDya10_69734469726563746564ZQBii0TSQJbQIw10insertions13InsertionInfoZQHw4EdgeZv",
      "originalType" : "void(size_t pileUpIdx, PileUp pileUp, Insertion* resultInsertion)",
      "parameters" : [
       {
        "name" : "pileUpIdx",
        "deco" : "m"
       },
       {
        "name" : "pileUp",
        "deco" : "AS7dentist6common10alignments4base13ReadAlignment"
       },
       {
        "name" : "resultInsertion",
        "deco" : "PS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge"
       }
      ],
      "endline" : 281,
      "endchar" : 5
     },
     {
      "name" : "processPileUp",
      "kind" : "function",
      "protection" : "protected",
      "line" : 283,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 374,
      "endchar" : 5
     },
     {
      "name" : "shouldProcessSingularPileUp",
      "kind" : "function",
      "protection" : "protected",
      "line" : 376,
      "char" : 20,
      "deco" : "xFNbZb",
      "endline" : 379,
      "endchar" : 5
     },
     {
      "name" : "shouldSkipSmallPileUp",
      "kind" : "function",
      "protection" : "protected",
      "line" : 381,
      "char" : 20,
      "deco" : "xFNbZb",
      "endline" : 397,
      "endchar" : 5
     },
     {
      "name" : "reduceRepeatMaskToFlankingContigs",
      "kind" : "function",
      "protection" : "protected",
      "line" : 399,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 407,
      "endchar" : 5
     },
     {
      "name" : "crop",
      "kind" : "function",
      "protection" : "protected",
      "line" : 409,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 424,
      "endchar" : 5
     },
     {
      "name" : "adjustRepeatMaskToMakeMappingPossible",
      "kind" : "function",
      "protection" : "protected",
      "line" : 426,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 459,
      "endchar" : 5
     },
     {
      "name" : "selectAllowedReferenceReadIds",
      "kind" : "function",
      "protection" : "protected",
      "line" : 461,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 472,
      "endchar" : 5
     },
     {
      "name" : "computeQVs",
      "kind" : "function",
      "protection" : "protected",
      "line" : 474,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 516,
      "endchar" : 5
     },
     {
      "name" : "findReferenceReadCandidates",
      "kind" : "function",
      "protection" : "protected",
      "line" : 518,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 568,
      "endchar" : 5
     },
     {
      "name" : "selectReferenceRead",
      "kind" : "function",
      "protection" : "protected",
      "line" : 570,
      "char" : 20,
      "deco" : "FIkZb",
      "originalType" : "bool(in id_t referenceReadTry)",
      "parameters" : [
       {
        "name" : "referenceReadTry",
        "deco" : "xk",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 585,
      "endchar" : 5
     },
     {
      "name" : "referenceRead",
      "kind" : "function",
      "protection" : "protected",
      "line" : 587,
      "char" : 46,
      "deco" : "NgFNdZNgS7dentist6common10alignments4base13ReadAlignment",
      "endline" : 590,
      "endchar" : 5
     },
     {
      "name" : "bestReferenceReadIndex",
      "kind" : "function",
      "protection" : "protected",
      "line" : 592,
      "char" : 22,
      "deco" : "xFNaIkZm",
      "originalType" : "const pure size_t(in id_t skip)",
      "parameters" : [
       {
        "name" : "skip",
        "deco" : "xk",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 598,
      "endchar" : 5
     },
     {
      "name" : "computeConsensus",
      "kind" : "function",
      "protection" : "protected",
      "line" : 600,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 619,
      "endchar" : 5
     },
     {
      "name" : "alignConsensusToFlankingContigs",
      "kind" : "function",
      "protection" : "protected",
      "line" : 621,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 697,
      "endchar" : 5
     },
     {
      "name" : "getInsertionAlignment",
      "kind" : "function",
      "protection" : "protected",
      "line" : 699,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 769,
      "endchar" : 5
     },
     {
      "name" : "getInsertionSequence",
      "kind" : "function",
      "protection" : "protected",
      "line" : 771,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 787,
      "endchar" : 5
     },
     {
      "name" : "makeInsertion",
      "kind" : "function",
      "protection" : "protected",
      "line" : 789,
      "char" : 25,
      "deco" : "FZS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "originalType" : "Insertion()",
      "endline" : 805,
      "endchar" : 5
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.commands.propagateMask",
  "kind" : "module",
  "file" : "source/dentist/commands/propagateMask.d",
  "comment" : "    This is the `propagateMask` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Propagate masked regions through the provided alignment. That means the\n    mask is first transferred to the B-contigs/reads according to the given\n    alignments.\n\n    The default workflow is to first propagate from the reference assembly to\n    the reads and then back again to the reference. Propagating, once again,\n    to the reads will produce a complete repeat mask on the reads.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 23,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Propagate masked regions through the provided alignment. That means the\\x0a    mask is first transferred to the B-contigs/reads according to the given\\x0a    alignments.\\x0a\\x0a    The default workflow is to first propagate from the reference assembly to\\x0a    the reads and then back again to the reference. Propagating, once again,\\x0a    to the reads will produce a complete repeat mask on the reads.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 33,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 34,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ReferenceInterval",
     "ReferenceRegion"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "coord_t",
     "id_t",
     "FlatLocalAlignment"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 41,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 42,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "sliceBy"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 43,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 44,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ceildiv",
     "RoundingMode"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 47,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AlignmentHeader",
     "BufferMode",
     "getFlatLocalAlignments",
     "getNumContigs",
     "readMask",
     "writeMask"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 54,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "chunkBy",
     "copy",
     "map",
     "max",
     "min",
     "sort",
     "swap"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 62,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array",
     "appender"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 63,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 64,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assumeSorted",
     "enumerate",
     "tee"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 68,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 69,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "tuple",
     "Yes"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 72,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    }
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `propagateMask` command.\n",
    "line" : 76,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi5ZQCa",
    "originalType" : "OptionsFor!(DentistCommand.propagateMask)"
   },
   {
    "name" : "QueryInterval",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Alias for readbility.\n",
    "line" : 80,
    "char" : 1,
    "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
    "originalType" : "ReferenceInterval"
   },
   {
    "name" : "QueryRegion",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 82,
    "char" : 1,
    "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
    "originalType" : "ReferenceRegion"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `propagateMask` command with `options`.\n",
    "line" : 86,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi5ZQCaZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi5ZQCa",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 89,
    "endchar" : 1
   },
   {
    "name" : "MaskPropagator",
    "kind" : "class",
    "protection" : "public",
    "line" : 92,
    "char" : 1,
    "members" : [
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "public",
      "line" : 95,
      "char" : 19,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi5ZQCa",
      "originalType" : "Options",
      "offset" : 16
     },
     {
      "name" : "destinationDb",
      "kind" : "variable",
      "protection" : "public",
      "line" : 96,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 168
     },
     {
      "name" : "numSourceContigs",
      "kind" : "variable",
      "protection" : "public",
      "line" : 97,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 184
     },
     {
      "name" : "inputMask",
      "kind" : "variable",
      "protection" : "public",
      "line" : 98,
      "char" : 21,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "ReferenceRegion",
      "offset" : 192
     },
     {
      "name" : "outputMaskByContigs",
      "kind" : "variable",
      "protection" : "public",
      "line" : 99,
      "char" : 23,
      "deco" : "AAS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
      "originalType" : "QueryInterval[][]",
      "offset" : 208
     },
     {
      "name" : "outputMask",
      "kind" : "variable",
      "protection" : "public",
      "line" : 100,
      "char" : 17,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "QueryRegion",
      "offset" : 224
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 103,
      "char" : 5,
      "deco" : "FxS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi5ZQCaZCQDdQBk13propagateMask14MaskPropagator",
      "originalType" : "(const Options options)",
      "parameters" : [
       {
        "name" : "options",
        "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi5ZQCa"
       }
      ],
      "endline" : 109,
      "endchar" : 5
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 112,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 125,
      "endchar" : 5
     },
     {
      "name" : "init",
      "kind" : "function",
      "protection" : "public",
      "line" : 128,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 133,
      "endchar" : 5
     },
     {
      "name" : "readMasks",
      "kind" : "function",
      "protection" : "public",
      "line" : 136,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 142,
      "endchar" : 5
     },
     {
      "name" : "getLocalAlignmentsByContig",
      "kind" : "function",
      "protection" : "public",
      "line" : 145,
      "char" : 10,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FZS7dentist4util9algorithm__T11SliceByImplSQBo8commands13propagateMask14MaskPropagator26getLocalAlignmentsByContigMFZ9__lambda2TASQEx6common10alignments4base18FlatLocalAlignmentZQFt",
      "originalType" : "()",
      "endline" : 155,
      "endchar" : 5
     },
     {
      "name" : "propagateMaskPerContig",
      "kind" : "function",
      "protection" : "public",
      "line" : 158,
      "char" : 28,
      "storageClass" : [
       "static"
      ],
      "deco" : "FAxS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalASQDf6common10alignments4base18FlatLocalAlignmentZASQFdQEyQEw__TQEsTmTmVQEoa8_636f6e7469674964Vmi0ZQGbQEo",
      "originalType" : "QueryInterval[](const(ReferenceInterval)[] inputMask, FlatLocalAlignment[] localAlignments)",
      "parameters" : [
       {
        "name" : "inputMask",
        "deco" : "AxS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval"
       },
       {
        "name" : "localAlignments",
        "deco" : "AS7dentist6common10alignments4base18FlatLocalAlignment"
       }
      ],
      "endline" : 212,
      "endchar" : 5
     },
     {
      "name" : "getIntersectionIntervals",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Identify maskIntervals intersecting currentLA and return a range with\nfirst and last interval cropped to the extent of currentLA.\n",
      "line" : 217,
      "char" : 17,
      "storageClass" : [
       "auto",
       "static"
      ],
      "deco" : "FxS7dentist6common10alignments4base18FlatLocalAlignmentAxSQCd4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalZS3std9algorithm9iteration__T9MapResultSQGp8commands13propagateMask14MaskPropagator24getIntersectionIntervalsFxQJjQHlZ9__lambda5TSQEy5range__T9enumerateTmTQJaZQrFQJhmZ6ResultZQFq",
      "originalType" : "(const FlatLocalAlignment currentLA, const(ReferenceInterval)[] maskIntervals)",
      "parameters" : [
       {
        "name" : "currentLA",
        "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
       },
       {
        "name" : "maskIntervals",
        "deco" : "AxS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval"
       }
      ],
      "endline" : 247,
      "endchar" : 5
     },
     {
      "name" : "getIntersectingIntervals",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Identify all mask intervals intersecting currentLA.\n",
      "line" : 251,
      "char" : 39,
      "storageClass" : [
       "static"
      ],
      "deco" : "FxS7dentist6common10alignments4base18FlatLocalAlignmentAxSQCd4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalZQDc",
      "originalType" : "const(ReferenceInterval)[](const FlatLocalAlignment currentLA, const(ReferenceInterval)[] maskIntervals)",
      "parameters" : [
       {
        "name" : "currentLA",
        "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
       },
       {
        "name" : "maskIntervals",
        "deco" : "AxS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval"
       }
      ],
      "endline" : 266,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Propagate intersectionIntervals by means of currentLA and return the\nresulting query intervals.\n",
      "line" : 271,
      "char" : 28,
      "name" : "propagateIntervals",
      "parameters" : [
       {
        "name" : "R",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "propagateIntervals",
        "kind" : "function",
        "line" : 271,
        "char" : 28,
        "type" : "QueryInterval[](const FlatLocalAlignment currentLA, R intersectionIntervals)",
        "parameters" : [
         {
          "name" : "currentLA",
          "type" : "FlatLocalAlignment",
          "storageClass" : [
           "const"
          ]
         },
         {
          "name" : "intersectionIntervals",
          "type" : "R"
         }
        ],
        "endline" : 303,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "mergeMasks",
      "kind" : "function",
      "protection" : "public",
      "line" : 305,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 311,
      "endchar" : 5
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.commands.showInsertions",
  "kind" : "module",
  "file" : "source/dentist/commands/showInsertions.d",
  "comment" : "    This is the `showInsertions` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Show a short summary of the insertions. Can also be used to convert\n    insertions to JSON by increasing verbosity two times.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 18,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Show a short summary of the insertions. Can also be used to convert\\x0a    insertions to JSON by increasing verbosity two times.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common.binio",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "InsertionDb"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 26,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 27,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "map",
     "max"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 28,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array"
    ]
   },
   {
    "name" : "std.file",
    "kind" : "import",
    "line" : 29,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "getSize"
    ]
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 30,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "log10",
     "lrint",
     "FloatingPointControl"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 31,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "stderr",
     "writefln",
     "writeln"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 32,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "tuple"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 33,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson",
     "toJsonString" : "serializeToPrettyJson"
    },
    "selective" : [
     "serializeToJsonString"
    ]
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `showInsertions` command.\n",
    "line" : 40,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi14ZQCb",
    "originalType" : "OptionsFor!(DentistCommand.showInsertions)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `showInsertions` command with `options`.\n",
    "line" : 44,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi14ZQCbZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi14ZQCb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 82,
    "endchar" : 1
   },
   {
    "name" : "Stats",
    "kind" : "struct",
    "protection" : "public",
    "line" : 84,
    "char" : 1,
    "members" : [
     {
      "name" : "totalDbSize",
      "kind" : "variable",
      "protection" : "public",
      "line" : 86,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "numInsertions",
      "kind" : "variable",
      "protection" : "public",
      "line" : 87,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 8
     },
     {
      "name" : "numCompressedBaseQuads",
      "kind" : "variable",
      "protection" : "public",
      "line" : 88,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 16
     },
     {
      "name" : "numOverlaps",
      "kind" : "variable",
      "protection" : "public",
      "line" : 89,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 24
     },
     {
      "name" : "numLocalAlignments",
      "kind" : "variable",
      "protection" : "public",
      "line" : 90,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 32
     },
     {
      "name" : "numTracePoints",
      "kind" : "variable",
      "protection" : "public",
      "line" : 91,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 40
     },
     {
      "name" : "numReadIds",
      "kind" : "variable",
      "protection" : "public",
      "line" : 92,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 48
     },
     {
      "name" : "columnWidth",
      "kind" : "function",
      "protection" : "public",
      "line" : 94,
      "char" : 12,
      "deco" : "xFNbZm",
      "originalType" : "const nothrow size_t()",
      "endline" : 109,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "writeTabular",
    "kind" : "function",
    "protection" : "public",
    "line" : 112,
    "char" : 6,
    "deco" : "FS7dentist8commands14showInsertions5StatsZv",
    "parameters" : [
     {
      "name" : "stats",
      "deco" : "S7dentist8commands14showInsertions5Stats"
     }
    ],
    "endline" : 123,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.commands.showMask",
  "kind" : "module",
  "file" : "source/dentist/commands/showMask.d",
  "comment" : "    This is the `showMask` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Show a short summary of a mask. Can also be used to convert a mask to JSON\n    by increasing verbosity two times.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 18,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Show a short summary of a mask. Can also be used to convert a mask to JSON\\x0a    by increasing verbosity two times.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ReferenceInterval",
     "ReferenceRegion"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 27,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 28,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 29,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "readMask"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 30,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "map",
     "max",
     "maxElement",
     "sum"
    ]
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 35,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "log10",
     "lrint",
     "FloatingPointControl"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 36,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "writefln",
     "writeln",
     "stderr"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson",
     "toJsonString" : "serializeToPrettyJson"
    },
    "selective" : [
     "serializeToJsonString"
    ]
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `showMask` command.\n",
    "line" : 44,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi8ZQCa",
    "originalType" : "OptionsFor!(DentistCommand.showMask)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `showMask` command with `options`.\n",
    "line" : 48,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi8ZQCaZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi8ZQCa",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 80,
    "endchar" : 1
   },
   {
    "name" : "Stats",
    "kind" : "struct",
    "protection" : "public",
    "line" : 82,
    "char" : 1,
    "members" : [
     {
      "name" : "name",
      "kind" : "variable",
      "protection" : "public",
      "line" : 84,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 0
     },
     {
      "name" : "numIntervals",
      "kind" : "variable",
      "protection" : "public",
      "line" : 85,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 16
     },
     {
      "name" : "numMaskedBases",
      "kind" : "variable",
      "protection" : "public",
      "line" : 86,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 24
     },
     {
      "name" : "columnWidth",
      "kind" : "function",
      "protection" : "public",
      "line" : 88,
      "char" : 12,
      "deco" : "xFNbZm",
      "originalType" : "const nothrow size_t()",
      "endline" : 99,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "statsFor",
    "kind" : "function",
    "protection" : "public",
    "line" : 102,
    "char" : 7,
    "deco" : "FAyaS7dentist4util6region__T6RegionTmTmVQBna8_636f6e7469674964Vmi0ZQBnZSQCp8commands8showMask5Stats",
    "originalType" : "Stats(string name, ReferenceRegion maskRegion)",
    "parameters" : [
     {
      "name" : "name",
      "deco" : "Aya"
     },
     {
      "name" : "maskRegion",
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn"
     }
    ],
    "endline" : 109,
    "endchar" : 1
   },
   {
    "name" : "writeTabular",
    "kind" : "function",
    "protection" : "public",
    "line" : 111,
    "char" : 6,
    "deco" : "FAS7dentist8commands8showMask5StatsZv",
    "parameters" : [
     {
      "name" : "statsList",
      "deco" : "AS7dentist8commands8showMask5Stats"
     }
    ],
    "endline" : 124,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.commands.showPileUps",
  "kind" : "module",
  "file" : "source/dentist/commands/showPileUps.d",
  "comment" : "    This is the `showPileUps` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Show a short summary of the pile ups. Can also be used to convert pile υps\n    to JSON by increasing verbosity two times.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 18,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Show a short summary of the pile ups. Can also be used to convert pile \\xcf\\x85ps\\x0a    to JSON by increasing verbosity two times.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "getType"
    ]
   },
   {
    "name" : "dentist.common.binio",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "PileUpDb"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 26,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 27,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 28,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "map",
     "max"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 29,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 30,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.file",
    "kind" : "import",
    "line" : 31,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "getSize"
    ]
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 32,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "log10",
     "lrint",
     "FloatingPointControl"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 33,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "stderr",
     "writefln",
     "writeln"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 34,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "tuple"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 35,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson",
     "toJsonString" : "serializeToPrettyJson"
    },
    "selective" : [
     "serializeToJsonString"
    ]
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `showPileUps` command.\n",
    "line" : 42,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi12ZQCb",
    "originalType" : "OptionsFor!(DentistCommand.showPileUps)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `showPileUps` command with `options`.\n",
    "line" : 46,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi12ZQCbZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi12ZQCb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 77,
    "endchar" : 1
   },
   {
    "name" : "Stats",
    "kind" : "struct",
    "protection" : "public",
    "line" : 79,
    "char" : 1,
    "members" : [
     {
      "name" : "totalDbSize",
      "kind" : "variable",
      "protection" : "public",
      "line" : 81,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "numPileUps",
      "kind" : "variable",
      "protection" : "public",
      "line" : 82,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 8
     },
     {
      "name" : "numReadAlignments",
      "kind" : "variable",
      "protection" : "public",
      "line" : 83,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 16
     },
     {
      "name" : "numSeededAlignments",
      "kind" : "variable",
      "protection" : "public",
      "line" : 84,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 24
     },
     {
      "name" : "numLocalAlignments",
      "kind" : "variable",
      "protection" : "public",
      "line" : 85,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 32
     },
     {
      "name" : "numTracePoints",
      "kind" : "variable",
      "protection" : "public",
      "line" : 86,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 40
     },
     {
      "name" : "columnWidth",
      "kind" : "function",
      "protection" : "public",
      "line" : 88,
      "char" : 12,
      "deco" : "xFNbZm",
      "originalType" : "const nothrow size_t()",
      "endline" : 102,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "writeTabular",
    "kind" : "function",
    "protection" : "public",
    "line" : 105,
    "char" : 6,
    "deco" : "FS7dentist8commands11showPileUps5StatsZv",
    "parameters" : [
     {
      "name" : "stats",
      "deco" : "S7dentist8commands11showPileUps5Stats"
     }
    ],
    "endline" : 115,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.commands.translateCoords",
  "kind" : "module",
  "file" : "source/dentist/commands/translateCoords.d",
  "comment" : "    This is the `translate-coords` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Translate coordinates of result assembly to coordinates of\n    input assembly. This can be used to lift annotations from the input\n    assembly to the resulting assembly.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 19,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Translate coordinates of result assembly to coordinates of\\x0a    input assembly. This can be used to lift annotations from the input\\x0a    assembly to the resulting assembly.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 26,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistException",
     "OutputCoordinate"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 29,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "arithmetic_t",
     "coord_t",
     "id_t"
    ]
   },
   {
    "name" : "dentist.common.binio",
    "kind" : "import",
    "line" : 30,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "InsertionDb"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 31,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.common.insertions",
    "kind" : "import",
    "line" : 32,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "getInfoForExistingContig",
     "getInfoForGap",
     "getInfoForNewSequenceInsertion",
     "Insertion",
     "InsertionInfo",
     "isValidInsertion",
     "isOutputGap",
     "OutputScaffold"
    ]
   },
   {
    "name" : "dentist.common.scaffold",
    "kind" : "import",
    "line" : 41,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ContigNode",
     "isAntiParallel",
     "isDefault",
     "linearWalk",
     "scaffoldStarts"
    ]
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 47,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "uniqInPlace"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 48,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 49,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "find",
     "map",
     "maxElement",
     "min",
     "sort",
     "uniq"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 56,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 57,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 58,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enforce"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 59,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 60,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "chain",
     "dropExactly",
     "only"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 64,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 65,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "writefln",
     "writeln"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 66,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson",
     "toJsonString" : "serializeToPrettyJson"
    }
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `translate-coords` command.\n",
    "line" : 72,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi17ZQCb",
    "originalType" : "OptionsFor!(DentistCommand.translateCoords)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `translate-coords` command with `options`.\n",
    "line" : 76,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi17ZQCbZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi17ZQCb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 81,
    "endchar" : 1
   },
   {
    "name" : "SequenceType",
    "kind" : "enum",
    "protection" : "private",
    "line" : 84,
    "char" : 9,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "existing",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 86,
      "char" : 5
     },
     {
      "name" : "insertion",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 87,
      "char" : 5
     },
     {
      "name" : "unknown",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 88,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ReferenceCoordinate",
    "kind" : "struct",
    "protection" : "private",
    "line" : 91,
    "char" : 9,
    "members" : [
     {
      "name" : "contigId",
      "kind" : "variable",
      "protection" : "public",
      "line" : 93,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 0
     },
     {
      "name" : "contigCoord",
      "kind" : "variable",
      "protection" : "public",
      "line" : 94,
      "char" : 18,
      "deco" : "i",
      "originalType" : "arithmetic_t",
      "offset" : 4
     },
     {
      "name" : "contigLength",
      "kind" : "variable",
      "protection" : "public",
      "line" : 95,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 8
     },
     {
      "name" : "contigIds",
      "kind" : "variable",
      "protection" : "public",
      "line" : 96,
      "char" : 12,
      "deco" : "Ak",
      "originalType" : "id_t[]",
      "offset" : 16
     },
     {
      "name" : "isReverseComplement",
      "kind" : "variable",
      "protection" : "public",
      "line" : 97,
      "char" : 10,
      "deco" : "b",
      "offset" : 32
     },
     {
      "name" : "sequenceType",
      "kind" : "variable",
      "protection" : "public",
      "line" : 98,
      "char" : 18,
      "deco" : "E7dentist8commands15translateCoords12SequenceType",
      "offset" : 36
     }
    ]
   },
   {
    "name" : "CoordinateTranslator",
    "kind" : "class",
    "protection" : "private",
    "line" : 101,
    "char" : 9,
    "members" : [
     {
      "name" : "OriginType",
      "kind" : "alias",
      "protection" : "public",
      "line" : 103,
      "char" : 5,
      "deco" : "E7dentist6common16OutputCoordinate10OriginType",
      "originalType" : "OutputCoordinate.OriginType"
     },
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "public",
      "line" : 105,
      "char" : 20,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi17ZQCb",
      "originalType" : "const(Options)",
      "offset" : 16
     },
     {
      "name" : "assemblyGraph",
      "kind" : "variable",
      "protection" : "public",
      "line" : 106,
      "char" : 20,
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa",
      "originalType" : "OutputScaffold",
      "offset" : 128
     },
     {
      "name" : "incidentEdgesCache",
      "kind" : "variable",
      "protection" : "public",
      "line" : 107,
      "char" : 39,
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa18IncidentEdgesCache",
      "originalType" : "OutputScaffold.IncidentEdgesCache",
      "offset" : 152
     },
     {
      "name" : "scaffoldStartNodes",
      "kind" : "variable",
      "protection" : "public",
      "line" : 108,
      "char" : 18,
      "deco" : "AS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
      "originalType" : "ContigNode[]",
      "offset" : 192
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 110,
      "char" : 5,
      "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi17ZQCbZCQDeQBl15translateCoords20CoordinateTranslator",
      "originalType" : "(in Options options)",
      "parameters" : [
       {
        "name" : "options",
        "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi17ZQCb",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 113,
      "endchar" : 5
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 115,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 151,
      "endchar" : 5
     },
     {
      "name" : "init",
      "kind" : "function",
      "protection" : "protected",
      "line" : 153,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 172,
      "endchar" : 5
     },
     {
      "name" : "writeTabular",
      "kind" : "function",
      "protection" : "protected",
      "line" : 174,
      "char" : 27,
      "storageClass" : [
       "static"
      ],
      "deco" : "FS7dentist8commands15translateCoords19ReferenceCoordinateZv",
      "parameters" : [
       {
        "name" : "refCoord",
        "deco" : "S7dentist8commands15translateCoords19ReferenceCoordinate"
       }
      ],
      "endline" : 192,
      "endchar" : 5
     },
     {
      "name" : "writeJson",
      "kind" : "function",
      "protection" : "protected",
      "line" : 194,
      "char" : 27,
      "storageClass" : [
       "static"
      ],
      "deco" : "FS7dentist8commands15translateCoords19ReferenceCoordinateZv",
      "parameters" : [
       {
        "name" : "refCoord",
        "deco" : "S7dentist8commands15translateCoords19ReferenceCoordinate"
       }
      ],
      "endline" : 206,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "Walker",
    "kind" : "struct",
    "protection" : "private",
    "line" : 210,
    "char" : 9,
    "members" : [
     {
      "name" : "OriginType",
      "kind" : "alias",
      "protection" : "public",
      "line" : 212,
      "char" : 5,
      "deco" : "E7dentist6common16OutputCoordinate10OriginType",
      "originalType" : "OutputCoordinate.OriginType"
     },
     {
      "name" : "outCoord",
      "kind" : "variable",
      "protection" : "public",
      "line" : 214,
      "char" : 29,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist6common16OutputCoordinate",
      "offset" : 0
     },
     {
      "name" : "assemblyGraph",
      "kind" : "variable",
      "protection" : "public",
      "line" : 215,
      "char" : 20,
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa",
      "originalType" : "OutputScaffold",
      "offset" : 16
     },
     {
      "name" : "incidentEdgesCache",
      "kind" : "variable",
      "protection" : "public",
      "line" : 216,
      "char" : 39,
      "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa18IncidentEdgesCache",
      "originalType" : "OutputScaffold.IncidentEdgesCache",
      "offset" : 40
     },
     {
      "name" : "scaffoldStartNodes",
      "kind" : "variable",
      "protection" : "public",
      "line" : 217,
      "char" : 18,
      "deco" : "AS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
      "originalType" : "ContigNode[]",
      "offset" : 80
     },
     {
      "name" : "numWalkedBasePairs",
      "kind" : "variable",
      "protection" : "public",
      "line" : 219,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 96
     },
     {
      "name" : "lastContigId",
      "kind" : "variable",
      "protection" : "public",
      "line" : 220,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 100
     },
     {
      "name" : "lastContigStart",
      "kind" : "variable",
      "protection" : "public",
      "line" : 221,
      "char" : 18,
      "deco" : "i",
      "originalType" : "arithmetic_t",
      "offset" : 104
     },
     {
      "name" : "lastContigLength",
      "kind" : "variable",
      "protection" : "public",
      "line" : 222,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 108
     },
     {
      "name" : "lastWalkedSequenceType",
      "kind" : "variable",
      "protection" : "public",
      "line" : 223,
      "char" : 18,
      "deco" : "E7dentist8commands15translateCoords12SequenceType",
      "offset" : 112
     },
     {
      "name" : "refCoord",
      "kind" : "variable",
      "protection" : "public",
      "line" : 224,
      "char" : 25,
      "deco" : "S7dentist8commands15translateCoords19ReferenceCoordinate",
      "offset" : 120
     },
     {
      "name" : "walkToCoordinate",
      "kind" : "function",
      "protection" : "protected",
      "line" : 226,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 242,
      "endchar" : 5
     },
     {
      "name" : "getStartOfScaffold",
      "kind" : "function",
      "protection" : "protected",
      "line" : 244,
      "char" : 26,
      "deco" : "FkZS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
      "originalType" : "ContigNode(id_t scaffoldId)",
      "parameters" : [
       {
        "name" : "scaffoldId",
        "deco" : "k"
       }
      ],
      "endline" : 253,
      "endchar" : 5
     },
     {
      "name" : "walkScaffold",
      "kind" : "function",
      "protection" : "protected",
      "line" : 255,
      "char" : 20,
      "deco" : "FS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuZv",
      "originalType" : "void(ContigNode startNode)",
      "parameters" : [
       {
        "name" : "startNode",
        "deco" : "S3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu"
       }
      ],
      "endline" : 297,
      "endchar" : 5
     },
     {
      "name" : "walkInsertion",
      "kind" : "function",
      "protection" : "protected",
      "line" : 299,
      "char" : 20,
      "deco" : "FIS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuISQCs4util4math__T5GraphTSQFnQFm__TQFgTmVQFda8_636f6e7469674964TQFdVQGea10_636f6e74696750617274ZQHpTvVEQImQIl__T4FlagVQIca10_69734469726563746564ZQBii0TSQInQIi10insertions13InsertionInfoZQGn4EdgeIbZv",
      "originalType" : "void(in ContigNode begin, in Insertion insertion, in bool globalComplement)",
      "parameters" : [
       {
        "name" : "begin",
        "deco" : "xS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "insertion",
        "deco" : "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "globalComplement",
        "deco" : "xb",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 333,
      "endchar" : 5
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.commands.validateConfig",
  "kind" : "module",
  "file" : "source/dentist/commands/validateConfig.d",
  "comment" : "    This is the `validateConfig` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Validate config file. Exit with non-zero status and a descriptive error\n    message if errors are found.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 18,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Validate config file. Exit with non-zero status and a descriptive error\\x0a    message if errors are found.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.common.configfile",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "validateConfigFile"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 26,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "writefln"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 27,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson",
     "toJsonString" : "serializeToPrettyJson"
    }
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `validateConfig` command.\n",
    "line" : 33,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi0ZQCa",
    "originalType" : "OptionsFor!(DentistCommand.validateConfig)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `validateConfig` command with `options`.\n",
    "line" : 37,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi0ZQCaZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi0ZQCa",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 41,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.commands.validateRegions",
  "kind" : "module",
  "file" : "source/dentist/commands/validateRegions.d",
  "comment" : "    This is the `validate-regions` command of DENTIST.\n\n    Command_Summary:\n\n    ---\n    Validates that given regions look proper, in particular, this may be used\n    to validate closed gaps. Any given region is valid if the following\n    criteria apply to the region extended by --region-context on both sides:\n\n    a) Every sliding window of size --weak-coverage-window must be spanned\n       by at least --min-coverage-reads local alignments. This is a stricter\n       definition of alignment coverage that circumvents issues with\n       interleaved improper alignments.\n    b) The region without context must be spanned by at least\n       --min-spanning-reads properly aligned reads.\n    ---\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "summary",
    "kind" : "variable",
    "protection" : "package",
    "line" : 26,
    "char" : 23,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"\\x0a    Validates that given regions look proper, in particular, this may be used\\x0a    to validate closed gaps. Any given region is valid if the following\\x0a    criteria apply to the region extended by --region-context on both sides:\\x0a\\x0a    a) Every sliding window of size --weak-coverage-window must be spanned\\x0a       by at least --min-coverage-reads local alignments. This is a stricter\\x0a       definition of alignment coverage that circumvents issues with\\x0a       interleaved improper alignments.\\x0a    b) The region without context must be spanned by at least\\x0a       --min-spanning-reads properly aligned reads.\\x0a\""
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 39,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.commands.maskRepetitiveRegions",
    "kind" : "import",
    "line" : 40,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "BadAlignmentCoverageAssessor"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 42,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "dentistEnforce",
     "ReferenceInterval",
     "ReferencePoint",
     "ReferenceRegion"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 47,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "FlatLocalAlignment",
     "coord_t",
     "id_t",
     "Locus"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 52,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand"
    ]
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "import",
    "line" : 53,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ContigSegment",
     "DazzExtraNotFound",
     "getFlatLocalAlignments",
     "getScaffoldStructure",
     "lasEmpty",
     "readDazzExtra",
     "readMask",
     "writeMask"
    ]
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 62,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "filterInPlace"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 63,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.range",
    "kind" : "import",
    "line" : 64,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "arrayChunks"
    ]
   },
   {
    "name" : "dentist.util.region",
    "kind" : "import",
    "line" : 65,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "empty"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 66,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "count",
     "countUntil",
     "filter",
     "isSorted",
     "joiner",
     "map",
     "maxElement",
     "min",
     "sort",
     "sum"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 77,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "appender",
     "array",
     "uninitializedArray"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 81,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.parallelism",
    "kind" : "import",
    "line" : 82,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "parallel"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 83,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assumeSorted",
     "enumerate",
     "only",
     "StoppingPolicy",
     "tee",
     "zip"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 90,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 91,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "writeln"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 92,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Tuple"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 93,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    }
   },
   {
    "name" : "Options",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Options for the `validate-regions` command.\n",
    "line" : 97,
    "char" : 1,
    "deco" : "S7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi18ZQCb",
    "originalType" : "OptionsFor!(DentistCommand.validateRegions)"
   },
   {
    "name" : "execute",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Execute the `validate-regions` command with `options`.\n",
    "line" : 101,
    "char" : 6,
    "deco" : "FIS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi18ZQCbZv",
    "originalType" : "void(in Options options)",
    "parameters" : [
     {
      "name" : "options",
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi18ZQCb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 106,
    "endchar" : 1
   },
   {
    "name" : "byContigAId",
    "kind" : "function",
    "protection" : "private",
    "line" : 109,
    "char" : 14,
    "deco" : "FNaNbNfxS7dentist6common10alignments4base18FlatLocalAlignmentxQCcZb",
    "originalType" : "pure nothrow @safe bool(const FlatLocalAlignment lhs, const FlatLocalAlignment rhs)",
    "parameters" : [
     {
      "name" : "lhs",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
     },
     {
      "name" : "rhs",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
     }
    ],
    "endline" : 112,
    "endchar" : 1
   },
   {
    "name" : "RegionsValidator",
    "kind" : "class",
    "protection" : "private",
    "line" : 115,
    "char" : 9,
    "members" : [
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 117,
      "char" : 29,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi18ZQCb",
      "originalType" : "Options",
      "offset" : 16
     },
     {
      "name" : "contigs",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 118,
      "char" : 31,
      "deco" : "AS7dentist7dazzler13ContigSegment",
      "offset" : 224
     },
     {
      "name" : "alignments",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 119,
      "char" : 36,
      "deco" : "AS7dentist6common10alignments4base18FlatLocalAlignment",
      "offset" : 240
     },
     {
      "name" : "minContigAId",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 120,
      "char" : 20,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 256
     },
     {
      "name" : "maxContigAId",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 121,
      "char" : 20,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 260
     },
     {
      "name" : "regions",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 122,
      "char" : 35,
      "deco" : "AS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
      "originalType" : "ReferenceInterval[]",
      "offset" : 264
     },
     {
      "name" : "contigIds",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 123,
      "char" : 25,
      "deco" : "AG2k",
      "originalType" : "id_t[2][]",
      "offset" : 280
     },
     {
      "name" : "readIds",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 124,
      "char" : 24,
      "deco" : "AAk",
      "originalType" : "id_t[][]",
      "offset" : 296
     },
     {
      "name" : "regionsWithContext",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 125,
      "char" : 35,
      "deco" : "AS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
      "originalType" : "ReferenceInterval[]",
      "offset" : 312
     },
     {
      "name" : "weakCoverageMask",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 126,
      "char" : 31,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "ReferenceRegion",
      "offset" : 328
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 128,
      "char" : 5,
      "deco" : "FxS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi18ZQCbZCQDeQBl15validateRegions16RegionsValidator",
      "originalType" : "(const Options options)",
      "parameters" : [
       {
        "name" : "options",
        "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi18ZQCb"
       }
      ],
      "endline" : 131,
      "endchar" : 5
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 133,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 139,
      "endchar" : 5
     },
     {
      "name" : "readInputs",
      "kind" : "function",
      "protection" : "protected",
      "line" : 141,
      "char" : 20,
      "deco" : "FZv",
      "endline" : 201,
      "endchar" : 5
     },
     {
      "name" : "readContigIdsFromTrackExtra",
      "kind" : "function",
      "protection" : "public",
      "line" : 204,
      "char" : 15,
      "deco" : "FZAG2k",
      "originalType" : "id_t[2][]()",
      "endline" : 223,
      "endchar" : 5
     },
     {
      "name" : "readReadIdsFromTrackExtra",
      "kind" : "function",
      "protection" : "public",
      "line" : 226,
      "char" : 14,
      "deco" : "FZAAk",
      "originalType" : "id_t[][]()",
      "endline" : 256,
      "endchar" : 5
     },
     {
      "name" : "restrictRegionsToContigBounds",
      "kind" : "function",
      "protection" : "public",
      "line" : 259,
      "char" : 10,
      "deco" : "FKAS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalZv",
      "originalType" : "void(ref ReferenceInterval[] intervals)",
      "parameters" : [
       {
        "name" : "intervals",
        "deco" : "AS7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 271,
      "endchar" : 5
     },
     {
      "name" : "validateRegions",
      "kind" : "function",
      "protection" : "public",
      "line" : 274,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 311,
      "endchar" : 5
     },
     {
      "name" : "contigLength",
      "kind" : "function",
      "protection" : "public",
      "line" : 314,
      "char" : 13,
      "deco" : "FkZk",
      "originalType" : "coord_t(id_t contigId)",
      "parameters" : [
       {
        "name" : "contigId",
        "deco" : "k"
       }
      ],
      "endline" : 321,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "RegionValidator",
    "kind" : "struct",
    "protection" : "private",
    "line" : 325,
    "char" : 9,
    "members" : [
     {
      "name" : "options",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 327,
      "char" : 29,
      "storageClass" : [
       "const"
      ],
      "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi18ZQCb",
      "originalType" : "Options",
      "offset" : 0
     },
     {
      "name" : "alignments",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 328,
      "char" : 43,
      "deco" : "AxS7dentist6common10alignments4base18FlatLocalAlignment",
      "offset" : 208
     },
     {
      "name" : "region",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 329,
      "char" : 33,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
      "originalType" : "ReferenceInterval",
      "offset" : 224
     },
     {
      "name" : "regionWithContext",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 330,
      "char" : 33,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
      "originalType" : "ReferenceInterval",
      "offset" : 248
     },
     {
      "name" : "regionContigs",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 331,
      "char" : 23,
      "deco" : "G2k",
      "originalType" : "id_t[2]",
      "offset" : 272
     },
     {
      "name" : "consensusReadIds",
      "kind" : "variable",
      "protection" : "protected",
      "line" : 332,
      "char" : 22,
      "deco" : "Ak",
      "originalType" : "id_t[]",
      "offset" : 280
     },
     {
      "name" : "spanningReadIds",
      "kind" : "variable",
      "protection" : "public",
      "line" : 334,
      "char" : 12,
      "deco" : "Ak",
      "originalType" : "id_t[]",
      "offset" : 296
     },
     {
      "name" : "weakCoverageMask",
      "kind" : "variable",
      "protection" : "public",
      "line" : 335,
      "char" : 21,
      "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
      "originalType" : "ReferenceRegion",
      "offset" : 312
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 337,
      "char" : 5,
      "deco" : "FNcxS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi18ZQCbxASQDfQBt10alignments4base18FlatLocalAlignmentSQEx4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedIntervalQCzG2kAkZSQIfQGm15validateRegions15RegionValidator",
      "originalType" : "ref (const Options options, const FlatLocalAlignment[] alignments, ReferenceInterval region, ReferenceInterval regionWithContext, id_t[2] regionContigs, id_t[] consensusReadIds)",
      "parameters" : [
       {
        "name" : "options",
        "deco" : "xS7dentist11commandline__T10OptionsForVEQBm6common8commands14DentistCommandi18ZQCb"
       },
       {
        "name" : "alignments",
        "deco" : "xAS7dentist6common10alignments4base18FlatLocalAlignment"
       },
       {
        "name" : "region",
        "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval"
       },
       {
        "name" : "regionWithContext",
        "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval"
       },
       {
        "name" : "regionContigs",
        "deco" : "G2k"
       },
       {
        "name" : "consensusReadIds",
        "deco" : "Ak"
       }
      ],
      "endline" : 352,
      "endchar" : 5
     },
     {
      "name" : "run",
      "kind" : "function",
      "protection" : "public",
      "line" : 354,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 381,
      "endchar" : 5
     },
     {
      "name" : "isValid",
      "kind" : "function",
      "protection" : "public",
      "line" : 384,
      "char" : 20,
      "deco" : "FNdZb",
      "endline" : 387,
      "endchar" : 5
     },
     {
      "name" : "reduceAlignments",
      "kind" : "function",
      "protection" : "public",
      "line" : 390,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 406,
      "endchar" : 5
     },
     {
      "name" : "assessSpanningReadsStats",
      "kind" : "function",
      "protection" : "public",
      "line" : 409,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 420,
      "endchar" : 5
     },
     {
      "name" : "assessWeaklySpannedWindowStats",
      "kind" : "function",
      "protection" : "public",
      "line" : 423,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 505,
      "endchar" : 5
     },
     {
      "name" : "numSpanningReads",
      "kind" : "function",
      "protection" : "public",
      "line" : 508,
      "char" : 20,
      "deco" : "xFNaNbNdNfZk",
      "originalType" : "const pure nothrow @property @safe id_t()",
      "endline" : 511,
      "endchar" : 5
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.common.alignments.base",
  "kind" : "module",
  "file" : "source/dentist/common/alignments/base.d",
  "comment" : "    Defines alignment central data structures `AlignmentChain` and\n    `FlatLocalAlignment` as well as derived types and helper functions.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.common.scaffold",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "concatenatePayloads",
     "ContigNode",
     "ContigPart",
     "Join"
    ]
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 17,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "cmpLexicographically",
     "orderLexicographically"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 18,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 19,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "absdiff",
     "ceildiv",
     "floor",
     "RoundingMode"
    ]
   },
   {
    "name" : "core.exception",
    "kind" : "import",
    "line" : 20,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AssertError"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 21,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "all",
     "among",
     "any",
     "cache",
     "canFind",
     "chunkBy",
     "copy",
     "countUntil",
     "cumulativeFold",
     "equal",
     "filter",
     "find",
     "isSorted",
     "joiner",
     "map",
     "max",
     "maxIndex",
     "mean",
     "min",
     "minIndex",
     "reverse",
     "sort",
     "sum",
     "swap",
     "SwapStrategy",
     "uniq"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 48,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "appender",
     "array",
     "minimallyInitializedArray"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 49,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 50,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assertNotThrown",
     "assertThrown",
     "enforce",
     "ErrnoException"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 51,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 52,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "sgn"
    ]
   },
   {
    "name" : "std.parallelism",
    "kind" : "import",
    "line" : 53,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "defaultTaskPool" : "taskPool"
    },
    "selective" : [
     "TaskPool"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 54,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assumeSorted",
     "chain",
     "chunks",
     "ElementType",
     "enumerate",
     "InputRange",
     "inputRangeObject",
     "iota",
     "isInputRange",
     "only",
     "radial",
     "repeat",
     "retro",
     "slide",
     "tee",
     "takeNone",
     "zip"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 72,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 73,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "capitalize",
     "split"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 74,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "File",
     "LockType"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 75,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "PhobosFlag" : "Flag"
    },
    "selective" : [
     "BitFlags",
     "No",
     "tuple",
     "Tuple",
     "Yes"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 76,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isArray",
     "TemplateArgsOf",
     "TemplateOf"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 77,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    },
    "selective" : [
     "Json"
    ]
   },
   {
    "name" : "arithmetic_t",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Type aliases used throughout DENTIST to make definitions more meaningful.\n",
    "line" : 82,
    "char" : 1,
    "deco" : "i"
   },
   {
    "name" : "coord_t",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 84,
    "char" : 1,
    "deco" : "k"
   },
   {
    "name" : "diff_t",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 86,
    "char" : 1,
    "deco" : "k"
   },
   {
    "name" : "id_t",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 88,
    "char" : 1,
    "deco" : "k"
   },
   {
    "name" : "trace_point_t",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 90,
    "char" : 1,
    "deco" : "t"
   },
   {
    "name" : "Contig",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Holds information about a contig.\n",
    "line" : 94,
    "char" : 1,
    "members" : [
     {
      "name" : "id",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "One-based contig ID. Zero is used as a special `undefined` value.\n",
      "line" : 97,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 0
     },
     {
      "name" : "length",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Optional. Length of the contig.\n",
      "line" : 99,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 4
     }
    ]
   },
   {
    "name" : "Locus",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Right-open locus, i.e. interval, on a contig.\n",
    "line" : 104,
    "char" : 1,
    "members" : [
     {
      "name" : "begin",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Zero-based begin coordinate (inclusive).\n",
      "line" : 107,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 0
     },
     {
      "name" : "end",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Zero-based end coordinate (exclusive).\n",
      "line" : 109,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 4
     },
     {
      "name" : "length",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Computed length of the locus.\n",
      "line" : 113,
      "char" : 23,
      "deco" : "xFNaNbNdZk",
      "originalType" : "const pure nothrow @property coord_t()",
      "endline" : 116,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "Flag",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Alignment flag.\n",
    "line" : 121,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "complement",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)1u",
      "comment" : "Alignment is relative the the reverse-complement of contig B.\n",
      "line" : 124,
      "char" : 5
     },
     {
      "name" : "disabled",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)2u",
      "comment" : "Alignment should be ignored.\n",
      "line" : 126,
      "char" : 5
     },
     {
      "name" : "alternateChain",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)4u",
      "comment" : "Alignment is the start of an alternate chain.\n",
      "line" : 128,
      "char" : 5
     },
     {
      "name" : "chainContinuation",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)8u",
      "comment" : "Alignment continuation of a chain of alignments.\n",
      "line" : 130,
      "char" : 5
     },
     {
      "name" : "unchained",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)16u",
      "comment" : "Alignment is explicitly unchained.\n",
      "line" : 132,
      "char" : 5
     }
    ]
   },
   {
    "name" : "Flags",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Bit field of `Flag`. Flags are accessible as properties, e.g.\n`flags.disabled`.\n\nSee_also: `std.typecons.BitFlags`\n",
    "line" : 140,
    "char" : 1,
    "deco" : "S3std8typecons__T8BitFlagsTE7dentist6common10alignments4base4FlagVEQCoQCn__TQqVAyaa6_756e73616665ZQBmi0ZQDj",
    "originalType" : "BitFlags!Flag"
   },
   {
    "name" : "TracePoint",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "A single trace point. Alignments are encoded using a list of equally\nspaced (on contig A) trace points (`tracePointSpacing`) by providing the\nnumber of base pairs consumed on contig B and additionally the number of\ndiffs. This allows efficient reconstruction using local Needleman-Wunsch\nalgorithm.\n",
    "line" : 148,
    "char" : 1,
    "members" : [
     {
      "name" : "numDiffs",
      "kind" : "variable",
      "protection" : "public",
      "line" : 150,
      "char" : 19,
      "deco" : "t",
      "originalType" : "trace_point_t",
      "offset" : 0
     },
     {
      "name" : "numBasePairs",
      "kind" : "variable",
      "protection" : "public",
      "line" : 151,
      "char" : 19,
      "deco" : "t",
      "originalType" : "trace_point_t",
      "offset" : 2
     }
    ]
   },
   {
    "name" : "TranslatedTracePoint",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Pair of coordinates on contig A/B that map exactly to one another\naccording to an alignment.\n\nSee_also: `Trace.translateTracePoint`,\n`AlignmentChain.LocalAlignment.getTrace`,\n`AlignmentChain.LocalAlignment.translateTracePoint`,\n`FlatLocalAlignment.trace`\n",
    "line" : 162,
    "char" : 1,
    "members" : [
     {
      "name" : "contigA",
      "kind" : "variable",
      "protection" : "public",
      "line" : 164,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 0
     },
     {
      "name" : "contigB",
      "kind" : "variable",
      "protection" : "public",
      "line" : 165,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 4
     }
    ]
   },
   {
    "name" : "Trace",
    "kind" : "struct",
    "protection" : "public",
    "line" : 169,
    "char" : 1,
    "members" : [
     {
      "name" : "contigA",
      "kind" : "variable",
      "protection" : "public",
      "line" : 171,
      "char" : 11,
      "deco" : "S7dentist6common10alignments4base5Locus",
      "offset" : 0
     },
     {
      "name" : "contigB",
      "kind" : "variable",
      "protection" : "public",
      "line" : 172,
      "char" : 11,
      "deco" : "S7dentist6common10alignments4base5Locus",
      "offset" : 8
     },
     {
      "name" : "tracePointDistance",
      "kind" : "variable",
      "protection" : "public",
      "line" : 173,
      "char" : 19,
      "deco" : "t",
      "originalType" : "trace_point_t",
      "offset" : 16
     },
     {
      "name" : "tracePoints",
      "kind" : "variable",
      "protection" : "public",
      "line" : 174,
      "char" : 25,
      "deco" : "AxS7dentist6common10alignments4base10TracePoint",
      "offset" : 24
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Translate `contigPos` on `contig` to a position on the other contig\nusing `tracePoints` without exact alignment reconstruction.\n\n`contigPos` is assigned to one of the coordinates in the trace using\n`roundingMode` and the returned structure contains this adjusted\nposition.\n\nReturns: `TranslatedTracePoint` with the computed positions.\n",
      "line" : 185,
      "char" : 26,
      "name" : "translateTracePoint",
      "parameters" : [
       {
        "name" : "contig",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "constraint" : "contig.among(\"contigA\", \"contigB\")",
      "members" : [
       {
        "name" : "translateTracePoint",
        "kind" : "function",
        "line" : 185,
        "char" : 26,
        "type" : "const pure TranslatedTracePoint(coord_t contigPos, RoundingMode roundingMode)",
        "parameters" : [
         {
          "name" : "contigPos",
          "type" : "coord_t"
         },
         {
          "name" : "roundingMode",
          "type" : "RoundingMode"
         }
        ],
        "endline" : 203,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Return the number of trace points up to and including `contigAPos`/\n`contigBPos` using `roundingMode`.\n\nNote: `RoundingMode.round` is not implemented.\n",
      "line" : 210,
      "char" : 10,
      "name" : "tracePointsUpTo",
      "parameters" : [
       {
        "name" : "contig",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "constraint" : "contig == \"contigA\"",
      "members" : [
       {
        "name" : "tracePointsUpTo",
        "kind" : "function",
        "line" : 210,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure nothrow (coord_t contigAPos, RoundingMode roundingMode)",
        "parameters" : [
         {
          "name" : "contigAPos",
          "type" : "coord_t"
         },
         {
          "name" : "roundingMode",
          "type" : "RoundingMode"
         }
        ],
        "endline" : 242,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L244_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 244,
      "char" : 5,
      "endline" : 267,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 267,
      "char" : 10,
      "name" : "tracePointsUpTo",
      "parameters" : [
       {
        "name" : "contig",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "constraint" : "contig == \"contigB\"",
      "members" : [
       {
        "name" : "tracePointsUpTo",
        "kind" : "function",
        "line" : 267,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure nothrow (coord_t contigBPos, RoundingMode roundingMode)",
        "parameters" : [
         {
          "name" : "contigBPos",
          "type" : "coord_t"
         },
         {
          "name" : "roundingMode",
          "type" : "RoundingMode"
         }
        ],
        "endline" : 298,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "AlignmentChain",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "    Holds a chain of local alignments that form a compound alignment. An AlignmentChain should\n    contain at least one element.\n",
    "line" : 306,
    "char" : 1,
    "members" : [
     {
      "name" : "LocalAlignment",
      "kind" : "struct",
      "protection" : "public",
      "line" : 308,
      "char" : 12,
      "members" : [
       {
        "name" : "Locus",
        "kind" : "alias",
        "protection" : "public",
        "line" : 310,
        "char" : 9,
        "deco" : "S7dentist6common10alignments4base5Locus",
        "originalType" : ".Locus"
       },
       {
        "name" : "TracePoint",
        "kind" : "alias",
        "protection" : "public",
        "line" : 311,
        "char" : 9,
        "deco" : "S7dentist6common10alignments4base10TracePoint",
        "originalType" : ".TracePoint"
       },
       {
        "name" : "contigA",
        "kind" : "variable",
        "protection" : "public",
        "line" : 313,
        "char" : 15,
        "deco" : "S7dentist6common10alignments4base5Locus",
        "offset" : 0
       },
       {
        "name" : "contigB",
        "kind" : "variable",
        "protection" : "public",
        "line" : 314,
        "char" : 15,
        "deco" : "S7dentist6common10alignments4base5Locus",
        "offset" : 8
       },
       {
        "name" : "numDiffs",
        "kind" : "variable",
        "protection" : "public",
        "line" : 315,
        "char" : 16,
        "deco" : "k",
        "originalType" : "diff_t",
        "offset" : 16
       },
       {
        "name" : "tracePoints",
        "kind" : "variable",
        "protection" : "public",
        "line" : 316,
        "char" : 22,
        "deco" : "AS7dentist6common10alignments4base10TracePoint",
        "offset" : 24
       },
       {
        "name" : "getTrace",
        "kind" : "function",
        "protection" : "public",
        "comment" : "Return trace object. Holds a `const` reference to `tracePoints`.\n\nParams:\ntracePointDistance = spacing on contig A between trace points.\n",
        "line" : 323,
        "char" : 15,
        "deco" : "xFNaNbNftZS7dentist6common10alignments4base5Trace",
        "originalType" : "const pure nothrow @safe Trace(trace_point_t tracePointDistance)",
        "parameters" : [
         {
          "name" : "tracePointDistance",
          "deco" : "t"
         }
        ],
        "endline" : 331,
        "endchar" : 9
       },
       {
        "kind" : "template",
        "protection" : "public",
        "comment" : "Translate `contigPos` on `contig` to a position on the other contig\nusing `tracePoints` without exact alignment reconstruction.\n\nParams:\ncontig             = Either `\"contigA\"` or `\"contigB\"`.\ncontigPos          = Input coordinate on `contig`.\ntracePointDistance = spacing on contig A between trace points.\nroundingMode       = see `dentist.util.math.RoundingMode`.\nSee_also: `Trace.translateTracePoint`\n",
        "line" : 343,
        "char" : 30,
        "name" : "translateTracePoint",
        "parameters" : [
         {
          "name" : "contig",
          "kind" : "value",
          "deco" : "Aya",
          "defaultValue" : "\"contigA\""
         }
        ],
        "constraint" : "contig.among(\"contigA\", \"contigB\")",
        "members" : [
         {
          "name" : "translateTracePoint",
          "kind" : "function",
          "line" : 343,
          "char" : 30,
          "type" : "const pure TranslatedTracePoint(coord_t contigPos, trace_point_t tracePointDistance, RoundingMode roundingMode)",
          "parameters" : [
           {
            "name" : "contigPos",
            "type" : "coord_t"
           },
           {
            "name" : "tracePointDistance",
            "type" : "trace_point_t"
           },
           {
            "name" : "roundingMode",
            "type" : "RoundingMode"
           }
          ],
          "endline" : 350,
          "endchar" : 9
         }
        ]
       },
       {
        "kind" : "template",
        "protection" : "public",
        "comment" : "Crops this local alignment from `startingSeed` (begin or end of\nalignment) to `contigPos`.\n\nParams:\ncontig             = Either `\"contigA\"` or `\"contigB\"`.\nstartingSeed       = Begin (`AlignmentLocationSeed.front`) or\nend (`AlignmentLocationSeed.back`) of alignment.\ncontigPos          = Input coordinate on `contig`.\ntracePointDistance = spacing on contig A between trace points.\nroundingMode       = see `dentist.util.math.RoundingMode`.\n",
        "line" : 363,
        "char" : 14,
        "name" : "cropToTracePoint",
        "parameters" : [
         {
          "name" : "contig",
          "kind" : "value",
          "deco" : "Aya",
          "defaultValue" : "\"contigA\""
         }
        ],
        "constraint" : "contig.among(\"contigA\", \"contigB\")",
        "members" : [
         {
          "name" : "cropToTracePoint",
          "kind" : "function",
          "line" : 363,
          "char" : 14,
          "type" : "pure void(in AlignmentLocationSeed startingSeed, in coord_t contigPos, in trace_point_t tracePointDistance, in RoundingMode roundingMode)",
          "parameters" : [
           {
            "name" : "startingSeed",
            "type" : "AlignmentLocationSeed",
            "storageClass" : [
             "in"
            ]
           },
           {
            "name" : "contigPos",
            "type" : "coord_t",
            "storageClass" : [
             "in"
            ]
           },
           {
            "name" : "tracePointDistance",
            "type" : "trace_point_t",
            "storageClass" : [
             "in"
            ]
           },
           {
            "name" : "roundingMode",
            "type" : "RoundingMode",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 392,
          "endchar" : 9
         }
        ]
       },
       {
        "kind" : "template",
        "protection" : "public",
        "comment" : "Return the number of trace points up to and including `contigPos`\nusing `roundingMode`.\n\nParams:\ncontig             = Either `\"contigA\"` or `\"contigB\"`.\ncontigPos          = Input coordinate on `contig`.\ntracePointDistance = spacing on contig A between trace points.\nroundingMode       = see `dentist.util.math.RoundingMode`.\nSee_also: `Trace.tracePointsUpTo`\n",
        "line" : 403,
        "char" : 14,
        "name" : "tracePointsUpTo",
        "parameters" : [
         {
          "name" : "contig",
          "kind" : "value",
          "deco" : "Aya"
         }
        ],
        "constraint" : "contig.among(\"contigA\", \"contigB\")",
        "members" : [
         {
          "name" : "tracePointsUpTo",
          "kind" : "function",
          "line" : 403,
          "char" : 14,
          "storageClass" : [
           "auto"
          ],
          "type" : "const pure nothrow (coord_t contigPos, trace_point_t tracePointDistance, RoundingMode roundingMode)",
          "parameters" : [
           {
            "name" : "contigPos",
            "type" : "coord_t"
           },
           {
            "name" : "tracePointDistance",
            "type" : "trace_point_t"
           },
           {
            "name" : "roundingMode",
            "type" : "RoundingMode"
           }
          ],
          "endline" : 413,
          "endchar" : 9
         }
        ]
       }
      ]
     },
     {
      "name" : "id",
      "kind" : "variable",
      "protection" : "public",
      "line" : 416,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "contigA",
      "kind" : "variable",
      "protection" : "public",
      "line" : 417,
      "char" : 12,
      "deco" : "S7dentist6common10alignments4base6Contig",
      "offset" : 8
     },
     {
      "name" : "contigB",
      "kind" : "variable",
      "protection" : "public",
      "line" : 418,
      "char" : 12,
      "deco" : "S7dentist6common10alignments4base6Contig",
      "offset" : 16
     },
     {
      "name" : "flags",
      "kind" : "variable",
      "protection" : "public",
      "line" : 419,
      "char" : 11,
      "deco" : "S3std8typecons__T8BitFlagsTE7dentist6common10alignments4base4FlagVEQCoQCn__TQqVAyaa6_756e73616665ZQBmi0ZQDj",
      "originalType" : "Flags",
      "offset" : 24
     },
     {
      "name" : "localAlignments",
      "kind" : "variable",
      "protection" : "public",
      "line" : 420,
      "char" : 22,
      "deco" : "AS7dentist6common10alignments4base14AlignmentChain14LocalAlignment",
      "offset" : 32
     },
     {
      "name" : "tracePointDistance",
      "kind" : "variable",
      "protection" : "public",
      "line" : 421,
      "char" : 19,
      "deco" : "t",
      "originalType" : "trace_point_t",
      "offset" : 48
     },
     {
      "name" : "disabledInstance",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return a minimal `AlignmentChain` with the disabled flag set.\n",
      "line" : 425,
      "char" : 37,
      "storageClass" : [
       "static"
      ],
      "deco" : "FNaNbNdNiNfZS7dentist6common10alignments4base14AlignmentChain",
      "endline" : 432,
      "endchar" : 5
     },
     {
      "name" : "__invariant280",
      "kind" : "function",
      "protection" : "public",
      "line" : 434,
      "char" : 5,
      "deco" : "xFZv",
      "endline" : 460,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L460_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 460,
      "char" : 5,
      "endline" : 487,
      "endchar" : 5
     },
     {
      "name" : "first",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return first local alignment.\n",
      "line" : 487,
      "char" : 41,
      "deco" : "xFNaNbNcNdNfZxS7dentist6common10alignments4base14AlignmentChain14LocalAlignment",
      "endline" : 490,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L492_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 492,
      "char" : 5,
      "endline" : 505,
      "endchar" : 5
     },
     {
      "name" : "last",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return last local alignment.\n",
      "line" : 505,
      "char" : 41,
      "deco" : "xFNaNbNcNdNfZxS7dentist6common10alignments4base14AlignmentChain14LocalAlignment",
      "endline" : 508,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L510_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 510,
      "char" : 5,
      "endline" : 526,
      "endchar" : 5
     },
     {
      "name" : "disableIf",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Set the disable flag if `disable == true` unless it is already set.\n\nThis does not evaluate `disable` if `flags.disabled` is already set.\n",
      "line" : 526,
      "char" : 27,
      "deco" : "FNaNfLbZE3std8typecons__T4FlagVAyaa8_64697361626c6564ZQBd",
      "originalType" : "pure @safe PhobosFlag!\"disabled\"(lazy bool disable)",
      "parameters" : [
       {
        "name" : "disable",
        "deco" : "b",
        "storageClass" : [
         "lazy"
        ]
       }
      ],
      "endline" : 532,
      "endchar" : 5
     },
     {
      "name" : "isProper",
      "kind" : "function",
      "protection" : "public",
      "comment" : "This alignment is called proper iff it starts and ends at a contig\nboundary within `allowance`.\n",
      "line" : 537,
      "char" : 20,
      "deco" : "xFNaNbNdNfkZb",
      "originalType" : "const pure nothrow @property @safe bool(coord_t allowance = 0)",
      "parameters" : [
       {
        "name" : "allowance",
        "deco" : "k",
        "default" : "0u"
       }
      ],
      "endline" : 541,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "This alignment begins within `allowance` of the begin of `contig`.\n",
      "line" : 545,
      "char" : 20,
      "name" : "beginsWith",
      "parameters" : [
       {
        "name" : "contig",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "constraint" : "contig.among(\"contigA\", \"contigB\")",
      "members" : [
       {
        "name" : "beginsWith",
        "kind" : "function",
        "line" : 545,
        "char" : 20,
        "type" : "const pure nothrow @property @safe bool(coord_t allowance = 0)",
        "parameters" : [
         {
          "name" : "allowance",
          "type" : "coord_t",
          "default" : "0"
         }
        ],
        "endline" : 549,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "This alignment ends within `allowance` of the end of `contig`.\n",
      "line" : 553,
      "char" : 20,
      "name" : "endsWith",
      "parameters" : [
       {
        "name" : "contig",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "constraint" : "contig.among(\"contigA\", \"contigB\")",
      "members" : [
       {
        "name" : "endsWith",
        "kind" : "function",
        "line" : 553,
        "char" : 20,
        "type" : "const pure nothrow @property @safe bool(coord_t allowance = 0)",
        "parameters" : [
         {
          "name" : "allowance",
          "type" : "coord_t",
          "default" : "0"
         }
        ],
        "endline" : 557,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Returns true iff this alignment covers `contig` completely within\n`allowance`.\n",
      "line" : 562,
      "char" : 20,
      "name" : "completelyCovers",
      "parameters" : [
       {
        "name" : "contig",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "constraint" : "contig.among(\"contigA\", \"contigB\")",
      "members" : [
       {
        "name" : "completelyCovers",
        "kind" : "function",
        "line" : 562,
        "char" : 20,
        "type" : "const pure nothrow @property @safe bool(coord_t allowance = 0)",
        "parameters" : [
         {
          "name" : "allowance",
          "type" : "coord_t",
          "default" : "0"
         }
        ],
        "endline" : 566,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "isFullyContained",
      "kind" : "function",
      "protection" : "public",
      "comment" : "        Returns true if the aligned read `contigB` (with extensions on either\n        end) is fully contained in the reference `contigA`.\n\n        According to the following 'definition' `contigA` is fully contained\n        in `contigB` iff `x >= 0` and `y <= l_a`.\n        ---\n                0                  x   ua      va  y                        la\n        contigA |------------------+---+-+---+-+---+-------------------------|\n                                  / / /  | | |  \\ \\ \\\n                                 / / /   | | |   \\ \\ \\\n                                / / /    | | |    \\ \\ \\\n                               / / /     | | |     \\ \\ \\\n        contigB               |---+------+---+------+---|\n                              0   ub                vb lb\n\n        x = ua - (ub - 0) = ua - ub\n        y = va + (lb - vb)\n        ---\n",
      "line" : 589,
      "char" : 10,
      "deco" : "xFNfZb",
      "endline" : 601,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L603_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 603,
      "char" : 5,
      "endline" : 656,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Sum of bases covered by each local alignment on contig A. Some bases\nmay be counted multiple times.\n",
      "line" : 656,
      "char" : 22,
      "name" : "coveredBases",
      "parameters" : [
       {
        "name" : "contig",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "members" : [
       {
        "name" : "coveredBases",
        "kind" : "function",
        "line" : 656,
        "char" : 22,
        "type" : "const pure @property @safe size_t()",
        "endline" : 659,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L661_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 661,
      "char" : 5,
      "endline" : 676,
      "endchar" : 5
     },
     {
      "name" : "totalDiffs",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Sum of differences in each local alignment.\n",
      "line" : 676,
      "char" : 22,
      "deco" : "xFNaNdNfZm",
      "originalType" : "const pure @property @safe size_t()",
      "endline" : 679,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L681_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 681,
      "char" : 5,
      "endline" : 695,
      "endchar" : 5
     },
     {
      "name" : "averageErrorRate",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Average diffs per base pair over all local alignments.\n",
      "line" : 695,
      "char" : 22,
      "deco" : "xFNaNdNfZd",
      "endline" : 698,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L700_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 700,
      "char" : 5,
      "endline" : 714,
      "endchar" : 5
     },
     {
      "name" : "compareIds",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Compare this alignment chain to other only by contig IDs.\n",
      "line" : 714,
      "char" : 9,
      "deco" : "xFNaNbNfKxS7dentist6common10alignments4base14AlignmentChainZi",
      "originalType" : "const pure nothrow @safe int(const ref AlignmentChain other)",
      "parameters" : [
       {
        "name" : "other",
        "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 721,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L723_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 723,
      "char" : 5,
      "endline" : 766,
      "endchar" : 5
     },
     {
      "name" : "opCmp",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Compare this alignment chain to `other`. Sort order is determined\nby these criteria:\n\n$(OL\n$(LI `contigA.id`)\n$(LI `contigB.id`)\n$(LI `first.contigA.begin`)\n$(LI `first.contigB.begin`)\n$(LI `last.contigA.end`)\n$(LI `last.contigB.end`)\n)\n\nNote, this is incompatible with `FlatLocalAlignment.opCmp`.\n",
      "line" : 766,
      "char" : 9,
      "deco" : "xFNaNbNfKxS7dentist6common10alignments4base14AlignmentChainZi",
      "originalType" : "const pure nothrow @safe int(const ref AlignmentChain other)",
      "parameters" : [
       {
        "name" : "other",
        "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 777,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L779_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 779,
      "char" : 5,
      "endline" : 866,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Translate `contigPos` on `contig` to a position on the other contig\nwithout exact alignment reconstruction. The first local alignment\nthat covers `contigPos` is selected for translation.\n\nSee_also: `coveringLocalAlignmentIndex`,\n`LocalAlignment.translateTracePoint`\n",
      "line" : 866,
      "char" : 26,
      "name" : "translateTracePoint",
      "parameters" : [
       {
        "name" : "contig",
        "kind" : "value",
        "deco" : "Aya",
        "defaultValue" : "\"contigA\""
       }
      ],
      "constraint" : "contig.among(\"contigA\", \"contigB\")",
      "members" : [
       {
        "name" : "translateTracePoint",
        "kind" : "function",
        "line" : 866,
        "char" : 26,
        "type" : "const pure TranslatedTracePoint(in coord_t contigPos, RoundingMode roundingMode)",
        "parameters" : [
         {
          "name" : "contigPos",
          "type" : "coord_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "roundingMode",
          "type" : "RoundingMode"
         }
        ],
        "endline" : 879,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L881_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 881,
      "char" : 5,
      "endline" : 958,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Crops this local alignment from `startingSeed` (begin or end of\nalignment chain) to `contigPos`.\n\nParams:\ncontig             = Either `\"contigA\"` or `\"contigB\"`.\nstartingSeed       = Begin (`AlignmentLocationSeed.front`) or\nend (`AlignmentLocationSeed.back`) of alignment.\ncontigPos          = Input coordinate on `contig`.\nroundingMode       = see `dentist.util.math.RoundingMode`.\nSee_also: `coveringLocalAlignmentIndex`,\n`LocalAlignment.cropToTracePoint`\n",
      "line" : 958,
      "char" : 10,
      "name" : "cropToTracePoint",
      "parameters" : [
       {
        "name" : "contig",
        "kind" : "value",
        "deco" : "Aya",
        "defaultValue" : "\"contigA\""
       }
      ],
      "constraint" : "contig.among(\"contigA\", \"contigB\")",
      "members" : [
       {
        "name" : "cropToTracePoint",
        "kind" : "function",
        "line" : 958,
        "char" : 10,
        "type" : "pure void(in AlignmentLocationSeed startingSeed, in coord_t contigPos, in RoundingMode roundingMode)",
        "parameters" : [
         {
          "name" : "startingSeed",
          "type" : "AlignmentLocationSeed",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "contigPos",
          "type" : "coord_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "roundingMode",
          "type" : "RoundingMode",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 991,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L993_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 993,
      "char" : 5,
      "endline" : 1136,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "protected",
      "comment" : "Return the index of the first local alignment that covers `contigPos`.\n\nThrows: `Exception` if `contigPos` is not covered by any local\nalignment.\n",
      "line" : 1136,
      "char" : 22,
      "name" : "coveringLocalAlignmentIndex",
      "parameters" : [
       {
        "name" : "contig",
        "kind" : "value",
        "deco" : "Aya",
        "defaultValue" : "\"contigA\""
       }
      ],
      "constraint" : "contig.among(\"contigA\", \"contigB\")",
      "members" : [
       {
        "name" : "coveringLocalAlignmentIndex",
        "kind" : "function",
        "line" : 1136,
        "char" : 22,
        "type" : "const pure size_t(in coord_t contigPos, in RoundingMode roundingMode)",
        "parameters" : [
         {
          "name" : "contigPos",
          "type" : "coord_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "roundingMode",
          "type" : "RoundingMode",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 1154,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "        Generate a cartoon of this alignment relative to `contig`.\n\n        Params:\n            bpsPerChar =    Number of base pairs that one char represents.\n            alignmentChains = List of alignments to show\n\n        Returns: a cartoon of this alignment\n",
      "line" : 1166,
      "char" : 19,
      "name" : "cartoon",
      "parameters" : [
       {
        "name" : "contig",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "members" : [
       {
        "name" : "cartoon",
        "kind" : "function",
        "line" : 1166,
        "char" : 19,
        "type" : "string(in coord_t bpsPerChar, in AlignmentChain[] alignmentChains...)",
        "parameters" : [
         {
          "name" : "bpsPerChar",
          "type" : "coord_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "alignmentChains",
          "type" : "AlignmentChain[]",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 1235,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L1238_C5",
      "kind" : "function",
      "protection" : "public",
      "comment" : "\n",
      "line" : 1238,
      "char" : 5,
      "endline" : 1277,
      "endchar" : 5
     },
     {
      "name" : "toFlatLocalAlignments",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Split this alignment chain into a range of `FlatLocalAlignment`s. The\nresulting alignment are flagged appropriately to make reconstruction\nof the chain possible.\n\nReturns: range of `FlatLocalAlignment`s\n",
      "line" : 1277,
      "char" : 10,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FNaNbNfZS3std9algorithm9iteration__T9MapResultS7dentist6common10alignments4base14AlignmentChain21toFlatLocalAlignmentsMFNaNbZ9__lambda1TSQEy5range__T9enumerateTmTASQEnQEiQEeQDvQDt14LocalAlignmentZQBvFQBmmZ6ResultZQGv",
      "originalType" : "pure nothrow ()",
      "endline" : 1302,
      "endchar" : 5
     },
     {
      "name" : "toJson",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Convert to/from `vibed.data.json.Json`.\n",
      "line" : 1306,
      "char" : 10,
      "deco" : "xFNfZS4vibe4data4json4Json",
      "endline" : 1314,
      "endchar" : 5
     },
     {
      "name" : "fromJson",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 1317,
      "char" : 27,
      "storageClass" : [
       "static"
      ],
      "deco" : "FNfS4vibe4data4json4JsonZS7dentist6common10alignments4base14AlignmentChain",
      "parameters" : [
       {
        "name" : "json",
        "deco" : "S4vibe4data4json4Json"
       }
      ],
      "endline" : 1327,
      "endchar" : 5
     },
     {
      "name" : "__invariant",
      "kind" : "function",
      "protection" : "public",
      "line" : 306,
      "char" : 1,
      "deco" : "xFZv"
     }
    ]
   },
   {
    "name" : "idsPred",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns true if `ac1` is smaller than `ac2` according to\n`AlignmentChain.compareIds`.\n",
    "line" : 1333,
    "char" : 6,
    "deco" : "FNaIS7dentist6common10alignments4base14AlignmentChainIQByZb",
    "parameters" : [
     {
      "name" : "ac1",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "ac2",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 1338,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L1340_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 1340,
    "char" : 1,
    "endline" : 1369,
    "endchar" : 1
   },
   {
    "name" : "haveEqualIds",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns true if `ac1` and `ac2` are equal according to\n`AlignmentChain.compareIds`.\n",
    "line" : 1369,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNaNbNfIS7dentist6common10alignments4base14AlignmentChainIQByZb",
    "originalType" : "pure (in AlignmentChain ac1, in AlignmentChain ac2)",
    "parameters" : [
     {
      "name" : "ac1",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "ac2",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 1374,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L1376_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 1376,
    "char" : 1,
    "endline" : 1407,
    "endchar" : 1
   },
   {
    "name" : "equalIdsRange",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Return the slice of `acList` where the contig IDs match. `acList` must be\nsorted by `idsPred`.\n",
    "line" : 1407,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNaIAS7dentist6common10alignments4base14AlignmentChainIkIkZS3std5range__T11SortedRangeTAxQDgS_DQDlQDgQDcQCt7idsPredFNaIQEkIQEoZbVEQCsQCr18SortedRangeOptionsi0ZQDi",
    "originalType" : "pure (in AlignmentChain[] acList, in id_t contigAID, in id_t contigBID)",
    "parameters" : [
     {
      "name" : "acList",
      "deco" : "xAS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "contigAID",
      "deco" : "xk",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "contigBID",
      "deco" : "xk",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 1416,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L1418_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 1418,
    "char" : 1,
    "endline" : 1450,
    "endchar" : 1
   },
   {
    "name" : "cmpIdsAndComplement",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Compare `lhs` to `rhs`. Sort order is determined by these criteria:\n\n$(OL\n$(LI `contigA.id`)\n$(LI `contigB.id`)\n$(LI `flags.complement`)\n)\n\nNote, this is incompatible with `AlignmentChain.opCmp`.\n",
    "line" : 1450,
    "char" : 5,
    "deco" : "FKxS7dentist6common10alignments4base14AlignmentChainKxQBzZi",
    "originalType" : "int(const ref AlignmentChain lhs, const ref AlignmentChain rhs)",
    "parameters" : [
     {
      "name" : "lhs",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "ref"
      ]
     },
     {
      "name" : "rhs",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "ref"
      ]
     }
    ],
    "endline" : 1458,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns true iff `ac1` begins before `ac2` on the given contig.\n",
    "line" : 1462,
    "char" : 6,
    "name" : "isBefore",
    "parameters" : [
     {
      "name" : "contig",
      "kind" : "value",
      "deco" : "Aya"
     }
    ],
    "constraint" : "contig == \"contigA\" || contig == \"contigB\"",
    "members" : [
     {
      "name" : "isBefore",
      "kind" : "function",
      "line" : 1462,
      "char" : 6,
      "type" : "pure bool(in AlignmentChain ac1, in AlignmentChain ac2)",
      "parameters" : [
       {
        "name" : "ac1",
        "type" : "AlignmentChain",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "ac2",
        "type" : "AlignmentChain",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1477,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L1479_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 1479,
    "char" : 1,
    "endline" : 1514,
    "endchar" : 1
   },
   {
    "name" : "alignmentCoverage",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Calculates the coverage of the contigs by the given alignments. Only\ncontigs involved in the alignments are regarded.\n\nReturns:\n---\ntotalCoveredBases / totalContigLength\n---\n",
    "line" : 1514,
    "char" : 8,
    "deco" : "FIAS7dentist6common10alignments4base14AlignmentChainZd",
    "parameters" : [
     {
      "name" : "alignments",
      "deco" : "xAS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 1532,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L1534_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 1534,
    "char" : 1,
    "endline" : 1604,
    "endchar" : 1
   },
   {
    "name" : "FlatLocalAlignment",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "A single local alignment. These correspond to the entries in a LAS file.\n",
    "line" : 1604,
    "char" : 1,
    "members" : [
     {
      "name" : "FlatLocus",
      "kind" : "struct",
      "protection" : "public",
      "comment" : "Describes the locus of the alignment.\n",
      "line" : 1607,
      "char" : 12,
      "members" : [
       {
        "name" : "id",
        "kind" : "variable",
        "protection" : "public",
        "comment" : "Contig ID\n",
        "line" : 1610,
        "char" : 14,
        "deco" : "k",
        "originalType" : "id_t",
        "offset" : 0
       },
       {
        "name" : "length",
        "kind" : "variable",
        "protection" : "public",
        "comment" : "Contig length\n",
        "line" : 1612,
        "char" : 17,
        "deco" : "k",
        "originalType" : "coord_t",
        "offset" : 4
       },
       {
        "name" : "begin",
        "kind" : "variable",
        "protection" : "public",
        "comment" : "Locus begin (inclusive)\n",
        "line" : 1614,
        "char" : 17,
        "deco" : "k",
        "originalType" : "coord_t",
        "offset" : 8
       },
       {
        "name" : "end",
        "kind" : "variable",
        "protection" : "public",
        "comment" : "Locus end (exclusive)\n",
        "line" : 1616,
        "char" : 17,
        "deco" : "k",
        "originalType" : "coord_t",
        "offset" : 12
       },
       {
        "name" : "contig",
        "kind" : "function",
        "protection" : "public",
        "comment" : "Construct a `Contig` struct from this locus.\n",
        "line" : 1620,
        "char" : 26,
        "deco" : "xFNaNbNdNfZS7dentist6common10alignments4base6Contig",
        "endline" : 1623,
        "endchar" : 9
       },
       {
        "name" : "contig",
        "kind" : "function",
        "protection" : "public",
        "comment" : "Assign contig ID and length from `newContig`.\n",
        "line" : 1627,
        "char" : 24,
        "deco" : "FNaNbNdNfS7dentist6common10alignments4base6ContigZv",
        "parameters" : [
         {
          "name" : "newContig",
          "deco" : "S7dentist6common10alignments4base6Contig"
         }
        ],
        "endline" : 1631,
        "endchar" : 9
       },
       {
        "name" : "locus",
        "kind" : "function",
        "protection" : "public",
        "comment" : "Construct a `Locus` struct from this locus.\n",
        "line" : 1635,
        "char" : 25,
        "deco" : "xFNaNbNdNfZS7dentist6common10alignments4base5Locus",
        "endline" : 1638,
        "endchar" : 9
       },
       {
        "name" : "locus",
        "kind" : "function",
        "protection" : "public",
        "comment" : "Assign locus begin and end from `newLocus`.\n",
        "line" : 1642,
        "char" : 24,
        "deco" : "FNaNbNdNfS7dentist6common10alignments4base5LocusZv",
        "parameters" : [
         {
          "name" : "newLocus",
          "deco" : "S7dentist6common10alignments4base5Locus"
         }
        ],
        "endline" : 1646,
        "endchar" : 9
       },
       {
        "name" : "mappedLength",
        "kind" : "function",
        "protection" : "public",
        "comment" : "Returns the length of the locus, i.e. `end - begin`.\n",
        "line" : 1650,
        "char" : 27,
        "deco" : "xFNaNbNdNfZk",
        "originalType" : "const pure nothrow @property @safe coord_t()",
        "endline" : 1653,
        "endchar" : 9
       },
       {
        "name" : "boundedBegin",
        "kind" : "function",
        "protection" : "public",
        "comment" : "Set `this.begin` to `begin` bounded by `this.length`.\n",
        "line" : 1657,
        "char" : 24,
        "deco" : "FNaNbNdNfkZv",
        "originalType" : "pure nothrow @property @safe void(coord_t begin)",
        "parameters" : [
         {
          "name" : "begin",
          "deco" : "k"
         }
        ],
        "endline" : 1660,
        "endchar" : 9
       },
       {
        "name" : "boundedEnd",
        "kind" : "function",
        "protection" : "public",
        "comment" : "Set `this.end` to `end` bounded by `this.length`.\n",
        "line" : 1664,
        "char" : 24,
        "deco" : "FNaNbNdNfkZv",
        "originalType" : "pure nothrow @property @safe void(coord_t end)",
        "parameters" : [
         {
          "name" : "end",
          "deco" : "k"
         }
        ],
        "endline" : 1667,
        "endchar" : 9
       },
       {
        "name" : "beginsWithin",
        "kind" : "function",
        "protection" : "public",
        "comment" : "Returns true if this locus begins within `allowance` base pairs\nof the begin of the containing contig.\n",
        "line" : 1672,
        "char" : 14,
        "deco" : "xFNaNbNfkZb",
        "originalType" : "const pure nothrow @safe bool(coord_t allowance)",
        "parameters" : [
         {
          "name" : "allowance",
          "deco" : "k"
         }
        ],
        "endline" : 1675,
        "endchar" : 9
       },
       {
        "name" : "endsWithin",
        "kind" : "function",
        "protection" : "public",
        "comment" : "Returns true if this locus ends within `allowance` base pairs\nof the begin of the containing contig.\n",
        "line" : 1680,
        "char" : 14,
        "deco" : "xFNaNbNfkZb",
        "originalType" : "const pure nothrow @safe bool(coord_t allowance)",
        "parameters" : [
         {
          "name" : "allowance",
          "deco" : "k"
         }
        ],
        "endline" : 1683,
        "endchar" : 9
       },
       {
        "name" : "isFullyContained",
        "kind" : "function",
        "protection" : "public",
        "comment" : "Returns true if this locus begins/ends within `allowance` base pairs\nof the begin/end of the containing contig.\n",
        "line" : 1688,
        "char" : 14,
        "deco" : "xFNaNbNfkZb",
        "originalType" : "const pure nothrow @safe bool(coord_t allowance)",
        "parameters" : [
         {
          "name" : "allowance",
          "deco" : "k"
         }
        ],
        "endline" : 1691,
        "endchar" : 9
       }
      ]
     },
     {
      "name" : "id",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Optional ID of this local alignment.\n",
      "line" : 1696,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "contigA",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Alignment locus on contig A.\n",
      "line" : 1698,
      "char" : 15,
      "deco" : "S7dentist6common10alignments4base18FlatLocalAlignment9FlatLocus",
      "offset" : 8
     },
     {
      "name" : "contigB",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Alignment locus on contig B.\n",
      "line" : 1700,
      "char" : 15,
      "deco" : "S7dentist6common10alignments4base18FlatLocalAlignment9FlatLocus",
      "offset" : 24
     },
     {
      "name" : "flags",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Alignment flags.\n",
      "line" : 1702,
      "char" : 11,
      "deco" : "S3std8typecons__T8BitFlagsTE7dentist6common10alignments4base4FlagVEQCoQCn__TQqVAyaa6_756e73616665ZQBmi0ZQDj",
      "originalType" : "Flags",
      "offset" : 40
     },
     {
      "name" : "tracePointDistance",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Optional spacing between trace points.\n",
      "line" : 1704,
      "char" : 19,
      "deco" : "t",
      "originalType" : "trace_point_t",
      "offset" : 42
     },
     {
      "name" : "tracePoints",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Optional list of trace points.\n",
      "line" : 1706,
      "char" : 18,
      "deco" : "AS7dentist6common10alignments4base10TracePoint",
      "offset" : 48
     },
     {
      "name" : "disableIf",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Set the disable flag if `disable == true` unless it is already set.\n\nThis does not evaluate `disable` if `flags.disabled` is already set.\n",
      "line" : 1712,
      "char" : 27,
      "deco" : "FNaLbZE3std8typecons__T4FlagVAyaa8_64697361626c6564ZQBd",
      "originalType" : "pure PhobosFlag!\"disabled\"(lazy bool disable)",
      "parameters" : [
       {
        "name" : "disable",
        "deco" : "b",
        "storageClass" : [
         "lazy"
        ]
       }
      ],
      "endline" : 1719,
      "endchar" : 5
     },
     {
      "name" : "averageErrorRate",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Average diffs per base pair over all local alignments.\n",
      "line" : 1723,
      "char" : 22,
      "deco" : "xFNaNdZd",
      "endline" : 1726,
      "endchar" : 5
     },
     {
      "name" : "opCmp",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Compare this local alignment to `other`'.\n\nSort order is determined according to `LAsort`, i.e. by these\ncriteria:\n\n$(OL\n$(LI `contigA.id`)\n$(LI `contigB.id`)\n$(LI `flags.complement`)\n$(LI `contigA.begin`)\n$(LI `contigA.end`)\n$(LI `contigB.begin`)\n$(LI `contigB.end`)\n$(LI `numDiffs`)\n)\n\nNote, this is incompatible with `AlignmentChain.opCmp`.\n",
      "line" : 1746,
      "char" : 9,
      "deco" : "xFNaNbNiNfKxS7dentist6common10alignments4base18FlatLocalAlignmentZi",
      "originalType" : "const pure nothrow @nogc @safe int(const ref FlatLocalAlignment other)",
      "parameters" : [
       {
        "name" : "other",
        "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 1768,
      "endchar" : 5
     },
     {
      "name" : "numDiffs",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Sum of diffs across all `tracePoints`.\n",
      "line" : 1772,
      "char" : 23,
      "deco" : "xFNaNbNdNiNfZk",
      "originalType" : "const pure nothrow @nogc @property @safe coord_t()",
      "endline" : 1775,
      "endchar" : 5
     },
     {
      "name" : "trace",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Construct `Trace` object from this local alignment.\n",
      "line" : 1779,
      "char" : 21,
      "deco" : "xFNaNbNdNfZS7dentist6common10alignments4base5Trace",
      "endline" : 1787,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Translate `contigPos` on `contig` to a position on the other contig\nusing `tracePoints` without exact alignment reconstruction.\n\nParams:\ncontig             = Either `\"contigA\"` or `\"contigB\"`.\ncontigPos          = Input coordinate on `contig`.\nroundingMode       = see `dentist.util.math.RoundingMode`.\nSee_also: `Trace.translateTracePoint`\n",
      "line" : 1798,
      "char" : 26,
      "name" : "translateTracePoint",
      "parameters" : [
       {
        "name" : "contig",
        "kind" : "value",
        "deco" : "Aya",
        "defaultValue" : "\"contigA\""
       }
      ],
      "constraint" : "contig.among(\"contigA\", \"contigB\")",
      "members" : [
       {
        "name" : "translateTracePoint",
        "kind" : "function",
        "line" : 1798,
        "char" : 26,
        "type" : "const pure TranslatedTracePoint(coord_t contigPos, RoundingMode roundingMode)",
        "parameters" : [
         {
          "name" : "contigPos",
          "type" : "coord_t"
         },
         {
          "name" : "roundingMode",
          "type" : "RoundingMode"
         }
        ],
        "endline" : 1804,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "        Generate a cartoon of this alignment relative to `contig`.\n\n        Params:\n            contig     = Which contig to show; either `\"contigA\"` or  `\"contigB\"`\n            bpsPerChar = Number of base pairs that one char represents.\n            localAlignments = Local alignments to include in the cartoon.\n\n        Returns: a cartoon of this alignment\n",
      "line" : 1817,
      "char" : 19,
      "name" : "cartoon",
      "parameters" : [
       {
        "name" : "contig",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "members" : [
       {
        "name" : "cartoon",
        "kind" : "function",
        "line" : 1817,
        "char" : 19,
        "type" : "string(in coord_t bpsPerChar, in FlatLocalAlignment[] localAlignments...)",
        "parameters" : [
         {
          "name" : "bpsPerChar",
          "type" : "coord_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "localAlignments",
          "type" : "FlatLocalAlignment[]",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 1849,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L1852_C5",
      "kind" : "function",
      "protection" : "public",
      "comment" : "\n",
      "line" : 1852,
      "char" : 5,
      "endline" : 1890,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "AlignmentLocationSeed",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Seed location of a read alignment. This marks the begin or end of an\nalignment or contig.\n\nSee_also: `AlignmentChain.cropToTracePoint`, `SeededAlignment.seed`\n",
    "line" : 1897,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "front",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)0u",
      "comment" : "Mark the begin/front.\n",
      "line" : 1900,
      "char" : 5
     },
     {
      "name" : "back",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "Mark the end/back.\n",
      "line" : 1902,
      "char" : 5
     }
    ]
   },
   {
    "name" : "toChar",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns `'f'` for `front` and `'b'` for `back`.\n",
    "line" : 1907,
    "char" : 6,
    "deco" : "FNaNbNfxE7dentist6common10alignments4base21AlignmentLocationSeedZa",
    "originalType" : "pure nothrow @safe char(const AlignmentLocationSeed seed)",
    "parameters" : [
     {
      "name" : "seed",
      "deco" : "xE7dentist6common10alignments4base21AlignmentLocationSeed"
     }
    ],
    "endline" : 1916,
    "endchar" : 1
   },
   {
    "name" : "SeededAlignment",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "An alignment chain with a \"seed\", ie. hint for it's intended location.\nThis is used to separate alignment that fully cover a contig into one that\nis used for the left/previous gap and one that is used for that right/next\ngap.\n",
    "line" : 1923,
    "char" : 1,
    "members" : [
     {
      "name" : "alignment",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "The alignment chain. Properties can be accessed directly on the\n`SeededAlignment` because of `alias alignment this`.\n",
      "line" : 1927,
      "char" : 20,
      "deco" : "S7dentist6common10alignments4base14AlignmentChain",
      "offset" : 0
     },
     {
      "name" : "seed",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Mark the end of the contained contig that this alignment belongs to.\nThis is used to discriminate between copies of alignments that fully\ncover the contig.\n",
      "line" : 1931,
      "char" : 27,
      "deco" : "E7dentist6common10alignments4base21AlignmentLocationSeed",
      "offset" : 56
     },
     {
      "name" : "__invariant308",
      "kind" : "function",
      "protection" : "public",
      "line" : 1935,
      "char" : 5,
      "deco" : "xFZv",
      "endline" : 1944,
      "endchar" : 5
     },
     {
      "name" : "opCmp",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Compare according to `AlignmentChain.opCmp` and break ties by\ncomparing `seed`s.\n",
      "line" : 1944,
      "char" : 9,
      "deco" : "xFNaNbKxS7dentist6common10alignments4base15SeededAlignmentZi",
      "originalType" : "const pure nothrow int(const ref SeededAlignment other)",
      "parameters" : [
       {
        "name" : "other",
        "deco" : "xS7dentist6common10alignments4base15SeededAlignment",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 1951,
      "endchar" : 5
     },
     {
      "name" : "from",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Construct a range of `SeededAlignment`s from `alignmentChain`. The\nresulting range will contain:\n$(UL\n$(LI a `front` copy if `isFrontExtension`)\n$(LI a `back` copy if `isBackExtension`)\n)\n\n",
      "line" : 1961,
      "char" : 17,
      "storageClass" : [
       "auto",
       "static"
      ],
      "deco" : "FNaNbNfS7dentist6common10alignments4base14AlignmentChainZS3std9algorithm9iteration__T12FilterResultSQDoQDjQDfQCw15SeededAlignment4fromFQEyZ9__lambda2TSQDp5range__T10OnlyResultTSQGnQGiQGeQFvQCzTQrZQBhZQEl",
      "originalType" : "(AlignmentChain alignmentChain)",
      "parameters" : [
       {
        "name" : "alignmentChain",
        "deco" : "S7dentist6common10alignments4base14AlignmentChain"
       }
      ],
      "endline" : 1973,
      "endchar" : 5
     },
     {
      "name" : "__invariant",
      "kind" : "function",
      "protection" : "public",
      "line" : 1923,
      "char" : 1,
      "deco" : "xFZv"
     }
    ]
   },
   {
    "name" : "isExtension",
    "kind" : "function",
    "protection" : "protected",
    "comment" : "Returns true if `alignment` either `isFrontExtension` or `isBackExtension`\nbut not both. A more complete description can be found at\n`ReadAlignment.isExtension`.\n",
    "line" : 1980,
    "char" : 16,
    "deco" : "FNaNbIS7dentist6common10alignments4base14AlignmentChainZb",
    "parameters" : [
     {
      "name" : "alignment",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 1983,
    "endchar" : 1
   },
   {
    "name" : "isFrontExtension",
    "kind" : "function",
    "protection" : "protected",
    "comment" : "Returns true if the sequence of the aligned read extends beyond the\ncontig begin. A more complete description can be found at\n`ReadAlignment.isFrontExtension`.\n",
    "line" : 1989,
    "char" : 16,
    "deco" : "FNaNbIS7dentist6common10alignments4base14AlignmentChainZb",
    "parameters" : [
     {
      "name" : "alignment",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 1995,
    "endchar" : 1
   },
   {
    "name" : "isBackExtension",
    "kind" : "function",
    "protection" : "protected",
    "comment" : "Returns true if the sequence of the aligned read extends beyond the\ncontig end. A more complete description can be found at\n`ReadAlignment.isBackExtension`.\n",
    "line" : 2001,
    "char" : 16,
    "deco" : "FNaNbIS7dentist6common10alignments4base14AlignmentChainZb",
    "parameters" : [
     {
      "name" : "alignment",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 2007,
    "endchar" : 1
   },
   {
    "name" : "ReadAlignmentType",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Type of the read alignment.\n",
    "line" : 2011,
    "char" : 8,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "front",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "comment" : "Read aligns only to the front of a contig.\n\nSee_also: `ReadAlignment.isFront`\n",
      "line" : 2016,
      "char" : 5
     },
     {
      "name" : "gap",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "Read aligns to two distinct contigs.\n\nSee_also: `ReadAlignment.isGap`\n",
      "line" : 2020,
      "char" : 5
     },
     {
      "name" : "back",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "comment" : "Read aligns only to the back of a contig.\n\nSee_also: `ReadAlignment.isBack`\n",
      "line" : 2024,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ReadAlignment",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "    Alignment of a read against the reference. This is either one or two\n    alignment chains which belong to the same read and one or two reference\n    contig(s).\n\n    It uses a static array of `SeededAlignment`s to store the alignments, thus\n    avoiding memory allocation.\n",
    "line" : 2036,
    "char" : 1,
    "members" : [
     {
      "name" : "_alignments",
      "kind" : "variable",
      "protection" : "private",
      "line" : 2038,
      "char" : 32,
      "deco" : "G2S7dentist6common10alignments4base15SeededAlignment",
      "offset" : 0
     },
     {
      "name" : "_length",
      "kind" : "variable",
      "protection" : "private",
      "line" : 2039,
      "char" : 20,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 128
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : "Construct from one or two `SeededAlignment`s. Returns an empty\n`ReadAlignment` If `alignments` has an invalid length and writes a\n`dentist.util.log.LogLevel.debug` message.\n",
      "line" : 2045,
      "char" : 5,
      "deco" : "FNcAS7dentist6common10alignments4base15SeededAlignmentXSQBzQBuQBqQBh13ReadAlignment",
      "originalType" : "ref (SeededAlignment[] alignments...)",
      "parameters" : [
       {
        "name" : "alignments",
        "deco" : "AS7dentist6common10alignments4base15SeededAlignment"
       }
      ],
      "endline" : 2061,
      "endchar" : 5
     },
     {
      "name" : "length",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Returns the number of `SeededAlignment`s.\n",
      "line" : 2065,
      "char" : 22,
      "deco" : "xFNaNbNdZm",
      "originalType" : "const pure nothrow @property size_t()",
      "endline" : 2068,
      "endchar" : 5
     },
     {
      "name" : "opDollar",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 2071,
      "char" : 22,
      "deco" : "xFNaNbNdZm",
      "originalType" : "const pure nothrow @property size_t()",
      "endline" : 2074,
      "endchar" : 5
     },
     {
      "name" : "opIndex",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return a view of the contained alignments.\n",
      "line" : 2078,
      "char" : 30,
      "deco" : "NgFNaNbZNgAS7dentist6common10alignments4base15SeededAlignment",
      "endline" : 2081,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Return the alignment at `idx` (zero-based).\n",
      "line" : 2085,
      "char" : 28,
      "name" : "opIndex",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "opIndex",
        "kind" : "function",
        "line" : 2085,
        "char" : 28,
        "type" : "inout pure nothrow inout(SeededAlignment)(T idx)",
        "parameters" : [
         {
          "name" : "idx",
          "type" : "T"
         }
        ],
        "endline" : 2088,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L2090_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 2090,
      "char" : 5,
      "endline" : 2117,
      "endchar" : 5
     },
     {
      "name" : "isInOrder",
      "kind" : "function",
      "protection" : "public",
      "comment" : "        If readAlignment is a gap return true iff the first alignment's\n        `contigA.id` is lower than the second alignment's; otherwise returns\n        true.\n",
      "line" : 2117,
      "char" : 20,
      "deco" : "xFNaNbNdZb",
      "endline" : 2120,
      "endchar" : 5
     },
     {
      "name" : "getInOrder",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Swap contained alignments if they are not `isInOrder`.\n",
      "line" : 2124,
      "char" : 19,
      "deco" : "FNaNbZS7dentist6common10alignments4base13ReadAlignment",
      "endline" : 2130,
      "endchar" : 5
     },
     {
      "name" : "isValid",
      "kind" : "function",
      "protection" : "public",
      "comment" : "        Returns true iff the read alignment is valid, ie. it is either an\n        extension or gap.\n",
      "line" : 2137,
      "char" : 20,
      "deco" : "xFNaNbNdZb",
      "endline" : 2140,
      "endchar" : 5
     },
     {
      "name" : "type",
      "kind" : "function",
      "protection" : "public",
      "comment" : "        Get the type of the read alignment.\n\n        See_Also: `isFrontExtension`, `isBackExtension`, `isGap`\n",
      "line" : 2148,
      "char" : 33,
      "deco" : "xFNaNbNdZE7dentist6common10alignments4base17ReadAlignmentType",
      "endline" : 2164,
      "endchar" : 5
     },
     {
      "name" : "isExtension",
      "kind" : "function",
      "protection" : "public",
      "comment" : "        Returns true iff the read alignment is an extension, ie. it is a front or\n        back extension.\n\n        See_Also: `isFrontExtension`, `isBackExtension`\n",
      "line" : 2173,
      "char" : 20,
      "deco" : "xFNaNbNdZb",
      "endline" : 2177,
      "endchar" : 5
     },
     {
      "name" : "isFrontExtension",
      "kind" : "function",
      "protection" : "public",
      "comment" : "        Returns true iff the read alignment is an front extension, ie. it is an\n        extension and reaches over the front of the reference contig.\n\n        ---\n        Case 1 (complement alignment):\n\n                          0  rx\n            ref           |--+->-+->-->-->--|\n                             | | |\n            read  |--<--<--<-+-<-+--|\n                  0          ax\n\n        Case 2 (non-complement alignment):\n\n                          0  rx\n            ref           |--+->-+->-->-->--|\n                             | | |\n            read  |-->-->-->-+->-+--|\n                  0          ax\n        ---\n",
      "line" : 2202,
      "char" : 20,
      "deco" : "xFNaNbNdZb",
      "endline" : 2205,
      "endchar" : 5
     },
     {
      "name" : "isBackExtension",
      "kind" : "function",
      "protection" : "public",
      "comment" : "        Returns true iff the read alignment is an back extension, ie. it is an\n        extension and reaches over the back of the reference contig.\n\n        ---\n        Case 1 (complement alignment):\n\n                  0             ry lr\n            ref   |-->-->-->-+->-+--|\n                             | | |\n            read          |--+-<-+-<--<--<--|\n                          0     ay         la\n\n        Case 2 (non-complement alignment):\n\n                  0             ry lr\n            ref   |-->-->-->-+->-+--|\n                             | | |\n            read          |--+->-+->-->-->--|\n                          0     ay         la\n        ---\n",
      "line" : 2230,
      "char" : 20,
      "deco" : "xFNaNbNdZb",
      "endline" : 2233,
      "endchar" : 5
     },
     {
      "name" : "isGap",
      "kind" : "function",
      "protection" : "public",
      "comment" : "        Returns true iff the read alignment spans a gap, ie. two alignments of\n        the same read on different reference contigs are involved.\n",
      "line" : 2240,
      "char" : 20,
      "deco" : "xFNaNbNdZb",
      "endline" : 2245,
      "endchar" : 5
     },
     {
      "name" : "isParallel",
      "kind" : "function",
      "protection" : "public",
      "comment" : "        Returns true iff the read alignment spans a gap and the flanking\n        contigs have in the same orientation (according to this alignment).\n",
      "line" : 2252,
      "char" : 20,
      "deco" : "xFNaNbNdZb",
      "endline" : 2257,
      "endchar" : 5
     },
     {
      "name" : "isAntiParallel",
      "kind" : "function",
      "protection" : "public",
      "comment" : "        Returns true iff the read alignment spans a gap and the flanking\n        contigs have in different orientation (according to this alignment).\n",
      "line" : 2264,
      "char" : 20,
      "deco" : "xFNaNbNdZb",
      "endline" : 2269,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2271_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 2271,
      "char" : 5,
      "endline" : 2623,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Generate basic join from read alignment.\n",
    "line" : 2627,
    "char" : 3,
    "name" : "makeJoin",
    "parameters" : [
     {
      "name" : "J",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "makeJoin",
      "kind" : "function",
      "line" : 2627,
      "char" : 3,
      "type" : "J(ReadAlignment readAlignment)",
      "parameters" : [
       {
        "name" : "readAlignment",
        "type" : "ReadAlignment"
       }
      ],
      "endline" : 2669,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "PileUp",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "A pile of read alignments belonging to the same gap/contig ends. These\nare the candidates for gap closing.\n",
    "line" : 2674,
    "char" : 1,
    "deco" : "AS7dentist6common10alignments4base13ReadAlignment"
   },
   {
    "name" : "getType",
    "kind" : "function",
    "protection" : "public",
    "comment" : "    Get the type of the read alignment.\n\n    See_Also: `isFrontExtension`, `isBackExtension`, `isGap`\n",
    "line" : 2681,
    "char" : 19,
    "deco" : "FNaNbIAS7dentist6common10alignments4base13ReadAlignmentZEQBxQBsQBoQBf17ReadAlignmentType",
    "originalType" : "pure nothrow ReadAlignmentType(in PileUp pileUp)",
    "parameters" : [
     {
      "name" : "pileUp",
      "deco" : "xAS7dentist6common10alignments4base13ReadAlignment",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 2696,
    "endchar" : 1
   },
   {
    "name" : "isValid",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns true iff the read alignment is valid, ie. it either `isExtension`\nor `isGap`.\n",
    "line" : 2701,
    "char" : 6,
    "deco" : "FNaNbIAS7dentist6common10alignments4base13ReadAlignmentZb",
    "originalType" : "pure nothrow bool(in PileUp pileUp)",
    "parameters" : [
     {
      "name" : "pileUp",
      "deco" : "xAS7dentist6common10alignments4base13ReadAlignment",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 2704,
    "endchar" : 1
   },
   {
    "name" : "isExtension",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns true if all alignments in `pileUp` are either\n`ReadAlignment.isFrontExtension` or `ReadAlignment.isBackExtension`.\n",
    "line" : 2709,
    "char" : 6,
    "deco" : "FNaNbIAS7dentist6common10alignments4base13ReadAlignmentZb",
    "originalType" : "pure nothrow bool(in PileUp pileUp)",
    "parameters" : [
     {
      "name" : "pileUp",
      "deco" : "xAS7dentist6common10alignments4base13ReadAlignment",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 2723,
    "endchar" : 1
   },
   {
    "name" : "isGap",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns true if all alignments in `pileUp` are `ReadAlignment.isGap`.\n",
    "line" : 2727,
    "char" : 6,
    "deco" : "FNaNbIAS7dentist6common10alignments4base13ReadAlignmentZb",
    "originalType" : "pure nothrow bool(in PileUp pileUp)",
    "parameters" : [
     {
      "name" : "pileUp",
      "deco" : "xAS7dentist6common10alignments4base13ReadAlignment",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 2730,
    "endchar" : 1
   },
   {
    "name" : "isParallel",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns true if all alignments in `pileUp` are `ReadAlignment.isParallel`.\n",
    "line" : 2734,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNaNbIAS7dentist6common10alignments4base13ReadAlignmentZb",
    "originalType" : "pure nothrow (in PileUp pileUp)",
    "parameters" : [
     {
      "name" : "pileUp",
      "deco" : "xAS7dentist6common10alignments4base13ReadAlignment",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 2740,
    "endchar" : 1
   },
   {
    "name" : "isAntiParallel",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns true if all alignments in `pileUp` are\n`ReadAlignment.isAntiParallel`.\n",
    "line" : 2745,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNaNbIAS7dentist6common10alignments4base13ReadAlignmentZb",
    "originalType" : "pure nothrow (in PileUp pileUp)",
    "parameters" : [
     {
      "name" : "pileUp",
      "deco" : "xAS7dentist6common10alignments4base13ReadAlignment",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 2751,
    "endchar" : 1
   },
   {
    "name" : "contigs",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Efficiently determines the contig IDs involved in `pileUp`. This assumes\nthat there are one or two contigs involved. Consequently, an empty\n`pileUp` is not allowed.\n",
    "line" : 2757,
    "char" : 10,
    "deco" : "FNbIAS7dentist6common10alignments4base13ReadAlignmentZASQByQBtQBpQBg6Contig",
    "originalType" : "nothrow Contig[](in PileUp pileUp)",
    "parameters" : [
     {
      "name" : "pileUp",
      "deco" : "xAS7dentist6common10alignments4base13ReadAlignment",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 2776,
    "endchar" : 1
   },
   {
    "name" : "getAlignmentRefs",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns a list of pointers to all involved alignment chains.\n",
    "line" : 2780,
    "char" : 19,
    "deco" : "FNaNbAS7dentist6common10alignments4base13ReadAlignmentZAPSQBzQBuQBqQBh14AlignmentChain",
    "originalType" : "pure nothrow AlignmentChain*[](PileUp pileUp)",
    "parameters" : [
     {
      "name" : "pileUp",
      "deco" : "AS7dentist6common10alignments4base13ReadAlignment"
     }
    ],
    "endline" : 2794,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L2797_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 2797,
    "char" : 1,
    "endline" : 2820,
    "endchar" : 1
   },
   {
    "name" : "pileUpToSimpleJson",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Converts the pileup into a simple JSON object for diagnostic purposes.\n",
    "line" : 2820,
    "char" : 6,
    "deco" : "FIAS7dentist6common10alignments4base13ReadAlignmentZS4vibe4data4json4Json",
    "originalType" : "Json(in PileUp pileUp)",
    "parameters" : [
     {
      "name" : "pileUp",
      "deco" : "xAS7dentist6common10alignments4base13ReadAlignment",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 2834,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.common.alignments.chaining",
  "kind" : "module",
  "file" : "source/dentist/common/alignments/chaining.d",
  "comment" : "    Implementation of local alignment chaining. The main function is\n    `chainLocalAlignments`.\n\n    The chaining algorithm works by solving a shortest path problem\n    on a directed, node and edge weighted graph where each node is a local\n    alignment and a directed edge between to nodes exists if they\n    `areChainable`. The nodes give a bonus score relative to the amount of\n    sequence covered by the local alignment whereas the edges give a penalty\n    proportional to the \"gap\" between the two involved local alignments.\n\n    This graph problem is reduced to a classical edge-weight single source\n    shortest paths problem with one additional node `s` that is the source and\n    is connected to all other nodes in the graph. The edges from `s` to `x`\n    have a weight of `-alignmentScore(x)` and all other edges `(x, y)` have a\n    weight of `chainScore(x, y)` which include the `-alignmentScore(y)` term\n    that accounts for `y`'s node weight.\n\n    `ChainingOptions` provides fine-grained control over the graph's structure\n    by means of `ChainingOptions.maxIndelBps`, `ChainingOptions.maxChainGapBps`\n    and `ChainingOptions.maxRelativeOverlap`.\n\n    Selection of the final chains is controlled by `ChainingOptions.minScore`\n    and `ChainingOptions.minRelativeScore`. See command line options for\n    default values of these.\n\n    See_also: `chainLocalAlignments`, `ChainingOptions`, `areChainable`,\n        `alignmentScore`, `chainScore`\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.common.alignments.base",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 38,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "cmpLexicographically"
    ]
   },
   {
    "name" : "dentist.util.graphalgo",
    "kind" : "import",
    "line" : 39,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "dagSingleSourceShortestPaths",
     "connectedComponents"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 42,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 43,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "absdiff",
     "NaturalNumberSet"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 46,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "all",
     "cache",
     "chunkBy",
     "copy",
     "filter",
     "joiner",
     "map",
     "max",
     "maxIndex",
     "min",
     "minIndex",
     "reverse",
     "sum",
     "sort"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 61,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 62,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 63,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enforce"
    ]
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 64,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "abs"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 65,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enumerate",
     "iota",
     "only",
     "tee"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 70,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 71,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "tuple",
     "Tuple"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 72,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    },
    "selective" : [
     "Json"
    ]
   },
   {
    "name" : "ChainingOptions",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Options for that control the chaining algorithm.\n",
    "line" : 78,
    "char" : 1,
    "members" : [
     {
      "name" : "maxIndelBps",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Maximum absolute distance between neighboring ends of local\nalignments.\n\nSee_also: `indel`\n",
      "line" : 84,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 0
     },
     {
      "name" : "maxChainGapBps",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Maximum postively truncated distance between neighboring ends of local\nalignments.\n\nSee_also: `gap`\n",
      "line" : 90,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 4
     },
     {
      "name" : "maxRelativeOverlap",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Maximum absolute distance between neighboring ends of local\nalignments.\n\nSee_also: `indel`\n",
      "line" : 96,
      "char" : 12,
      "deco" : "d",
      "offset" : 8
     },
     {
      "name" : "minRelativeScore",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Minimum chain score as fraction of the best score.\n\nSee_also: `effectiveMinScore`, `chainScore`\n",
      "line" : 101,
      "char" : 12,
      "deco" : "d",
      "offset" : 16
     },
     {
      "name" : "minScore",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Minimum chain score.\n\nSee_also: `effectiveMinScore`, `chainScore`\n",
      "line" : 106,
      "char" : 18,
      "deco" : "i",
      "originalType" : "arithmetic_t",
      "offset" : 24
     },
     {
      "name" : "effectiveMinScore",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Returns the effective minimum score taking into account\n`minRelativeScore` relative to `bestScore` and `minScore`.\n",
      "line" : 111,
      "char" : 18,
      "deco" : "xFNaNfiZi",
      "originalType" : "const pure @safe arithmetic_t(arithmetic_t bestScore)",
      "parameters" : [
       {
        "name" : "bestScore",
        "deco" : "i"
       }
      ],
      "endline" : 117,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Chain local alignments contained in `inputAlignments`.\n",
    "line" : 122,
    "char" : 6,
    "name" : "chainLocalAlignments",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!R && is(ElementType!R == FlatLocalAlignment)",
    "members" : [
     {
      "name" : "chainLocalAlignments",
      "kind" : "function",
      "line" : 122,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(R inputAlignments, const ChainingOptions options)",
      "parameters" : [
       {
        "name" : "inputAlignments",
        "type" : "R"
       },
       {
        "name" : "options",
        "type" : "ChainingOptions",
        "storageClass" : [
         "const"
        ]
       }
      ],
      "endline" : 149,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "buildAlignmentChains",
    "kind" : "function",
    "protection" : "private",
    "line" : 152,
    "char" : 14,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FAS7dentist6common10alignments4base18FlatLocalAlignmentxSQCcQBxQBt8chaining15ChainingOptionsZASQDoQDjQDfQCw14AlignmentChain",
    "originalType" : "(FlatLocalAlignment[] flatLocalAlignments, const ChainingOptions options)",
    "parameters" : [
     {
      "name" : "flatLocalAlignments",
      "deco" : "AS7dentist6common10alignments4base18FlatLocalAlignment"
     },
     {
      "name" : "options",
      "deco" : "xS7dentist6common10alignments8chaining15ChainingOptions"
     }
    ],
    "endline" : 334,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 337,
    "char" : 24,
    "name" : "composeAlignmentChain",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "composeAlignmentChain",
      "kind" : "function",
      "line" : 337,
      "char" : 24,
      "type" : "AlignmentChain(R chainedLocalAlignments, Flags additionalFlags = Flags())",
      "parameters" : [
       {
        "name" : "chainedLocalAlignments",
        "type" : "R"
       },
       {
        "name" : "additionalFlags",
        "type" : "Flags",
        "default" : "Flags()"
       }
      ],
      "endline" : 363,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns the size of the gap between `x` and `y` on contig `seq`. This is\nnegative if they overlap. `x` and `y` are expected to be `areChainable`.\n",
    "line" : 368,
    "char" : 14,
    "name" : "gap",
    "parameters" : [
     {
      "name" : "seq",
      "kind" : "value",
      "deco" : "a"
     }
    ],
    "members" : [
     {
      "name" : "gap",
      "kind" : "function",
      "line" : 368,
      "char" : 14,
      "type" : "pure nothrow @safe arithmetic_t(const FlatLocalAlignment x, const FlatLocalAlignment y)",
      "parameters" : [
       {
        "name" : "x",
        "type" : "FlatLocalAlignment",
        "storageClass" : [
         "const"
        ]
       },
       {
        "name" : "y",
        "type" : "FlatLocalAlignment",
        "storageClass" : [
         "const"
        ]
       }
      ],
      "endline" : 371,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "maxAbsGap",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns the maximum of the absolute gap sizes on contig A and B. `x` and\n`y` are expected to be `areChainable`.\n",
    "line" : 376,
    "char" : 14,
    "deco" : "FNaNbNfxS7dentist6common10alignments4base18FlatLocalAlignmentxQCcZi",
    "originalType" : "pure nothrow @safe arithmetic_t(const FlatLocalAlignment x, const FlatLocalAlignment y)",
    "parameters" : [
     {
      "name" : "x",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
     },
     {
      "name" : "y",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
     }
    ],
    "endline" : 379,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns the size of the overlap between `x` and `y` on contig `seq`,\ni.e. the number of overlapping bases if they overlap and 0 otherwise.\n",
    "line" : 384,
    "char" : 14,
    "name" : "overlap",
    "parameters" : [
     {
      "name" : "seq",
      "kind" : "value",
      "deco" : "a"
     }
    ],
    "members" : [
     {
      "name" : "overlap",
      "kind" : "function",
      "line" : 384,
      "char" : 14,
      "type" : "pure nothrow @safe arithmetic_t(const FlatLocalAlignment x, const FlatLocalAlignment y)",
      "parameters" : [
       {
        "name" : "x",
        "type" : "FlatLocalAlignment",
        "storageClass" : [
         "const"
        ]
       },
       {
        "name" : "y",
        "type" : "FlatLocalAlignment",
        "storageClass" : [
         "const"
        ]
       }
      ],
      "endline" : 387,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns the number of bases covered by `la` on contig `seq`.\n",
    "line" : 391,
    "char" : 14,
    "name" : "length",
    "parameters" : [
     {
      "name" : "seq",
      "kind" : "value",
      "deco" : "a"
     }
    ],
    "members" : [
     {
      "name" : "length",
      "kind" : "function",
      "line" : 391,
      "char" : 14,
      "type" : "pure nothrow @safe arithmetic_t(const FlatLocalAlignment la)",
      "parameters" : [
       {
        "name" : "la",
        "type" : "FlatLocalAlignment",
        "storageClass" : [
         "const"
        ]
       }
      ],
      "endline" : 394,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns the minimum of `length!'A'` and `length!'B'`.\n",
    "line" : 397,
    "char" : 14,
    "name" : "minLength",
    "parameters" : [
     {
      "name" : "seq",
      "kind" : "value",
      "deco" : "a"
     }
    ],
    "members" : [
     {
      "name" : "minLength",
      "kind" : "function",
      "line" : 397,
      "char" : 14,
      "type" : "pure nothrow @safe arithmetic_t(const FlatLocalAlignment x, const FlatLocalAlignment y)",
      "parameters" : [
       {
        "name" : "x",
        "type" : "FlatLocalAlignment",
        "storageClass" : [
         "const"
        ]
       },
       {
        "name" : "y",
        "type" : "FlatLocalAlignment",
        "storageClass" : [
         "const"
        ]
       }
      ],
      "endline" : 400,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "indel",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns the absolute difference between gap sizes on contig A and B.\n",
    "line" : 404,
    "char" : 14,
    "deco" : "FNaNbNfxS7dentist6common10alignments4base18FlatLocalAlignmentxQCcZi",
    "originalType" : "pure nothrow @safe arithmetic_t(const FlatLocalAlignment x, const FlatLocalAlignment y)",
    "parameters" : [
     {
      "name" : "x",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
     },
     {
      "name" : "y",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
     }
    ],
    "endline" : 407,
    "endchar" : 1
   },
   {
    "name" : "sameIds",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns true if `x` and `y` have the same contig A and B IDs.\n",
    "line" : 411,
    "char" : 6,
    "deco" : "FNaNbNfxS7dentist6common10alignments4base18FlatLocalAlignmentxQCcZb",
    "originalType" : "pure nothrow @safe bool(const FlatLocalAlignment x, const FlatLocalAlignment y)",
    "parameters" : [
     {
      "name" : "x",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
     },
     {
      "name" : "y",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
     }
    ],
    "endline" : 418,
    "endchar" : 1
   },
   {
    "name" : "cmpIds",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Compares `x` and `y` by contig A and B ID in this order.\n",
    "line" : 422,
    "char" : 5,
    "deco" : "FNaNbNfxS7dentist6common10alignments4base18FlatLocalAlignmentxQCcZi",
    "originalType" : "pure nothrow @safe int(const FlatLocalAlignment lhs, const FlatLocalAlignment rhs)",
    "parameters" : [
     {
      "name" : "lhs",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
     },
     {
      "name" : "rhs",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
     }
    ],
    "endline" : 429,
    "endchar" : 1
   },
   {
    "name" : "areChainable",
    "kind" : "function",
    "protection" : "public",
    "line" : 434,
    "char" : 6,
    "deco" : "FNaNbNfxS7dentist6common10alignments4base18FlatLocalAlignmentxQCcxSQCgQCbQBx8chaining15ChainingOptionsZb",
    "originalType" : "pure nothrow @safe bool(const FlatLocalAlignment x, const FlatLocalAlignment y, const ChainingOptions options)",
    "parameters" : [
     {
      "name" : "x",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
     },
     {
      "name" : "y",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
     },
     {
      "name" : "options",
      "deco" : "xS7dentist6common10alignments8chaining15ChainingOptions"
     }
    ],
    "endline" : 451,
    "endchar" : 1
   },
   {
    "name" : "alignmentScore",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Return the mean `length` of `x` on contig A and B.\n",
    "line" : 455,
    "char" : 14,
    "deco" : "FNaNbNfKxS7dentist6common10alignments4base18FlatLocalAlignmentxSQCcQBxQBt8chaining15ChainingOptionsZi",
    "originalType" : "pure nothrow @safe arithmetic_t(const ref FlatLocalAlignment x, const ChainingOptions options)",
    "parameters" : [
     {
      "name" : "x",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment",
      "storageClass" : [
       "ref"
      ]
     },
     {
      "name" : "options",
      "deco" : "xS7dentist6common10alignments8chaining15ChainingOptions"
     }
    ],
    "endline" : 461,
    "endchar" : 1
   },
   {
    "name" : "chainScore",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns `indel(x, y) + maxAbsGap(x, y)/10 - alignmentScore(y)`.\n\nSee_also: `indel`, `maxAbsGap`, `alignmentScore`\n",
    "line" : 467,
    "char" : 14,
    "deco" : "FNaNbNfKxS7dentist6common10alignments4base18FlatLocalAlignmentKxQCdxSQChQCcQBy8chaining15ChainingOptionsZi",
    "originalType" : "pure nothrow @safe arithmetic_t(const ref FlatLocalAlignment x, const ref FlatLocalAlignment y, const ChainingOptions options)",
    "parameters" : [
     {
      "name" : "x",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment",
      "storageClass" : [
       "ref"
      ]
     },
     {
      "name" : "y",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment",
      "storageClass" : [
       "ref"
      ]
     },
     {
      "name" : "options",
      "deco" : "xS7dentist6common10alignments8chaining15ChainingOptions"
     }
    ],
    "endline" : 475,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.common.alignments",
  "kind" : "module",
  "file" : "source/dentist/common/alignments/package.d",
  "comment" : "    Everything to handle local alignments and friends.\n\n    See_also: `dentist.common.alignments.base`,\n        `dentist.common.alignments.chaining`\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.common.alignments.base",
    "kind" : "import",
    "line" : 13,
    "char" : 15
   },
   {
    "name" : "dentist.common.alignments.chaining",
    "kind" : "import",
    "line" : 14,
    "char" : 15
   }
  ]
 },
 {
  "name" : "dentist.common.binio._testdata.insertiondb",
  "kind" : "module",
  "file" : "source/dentist/common/binio/_testdata/insertiondb.d",
  "comment" : "    This package contains test data for `dentist.common.binio.insertiondb`.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : []
 },
 {
  "name" : "dentist.common.binio._testdata.pileupdb",
  "kind" : "module",
  "file" : "source/dentist/common/binio/_testdata/pileupdb.d",
  "comment" : "    This package contains test data for `dentist.common.binio.pileupdb`.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : []
 },
 {
  "name" : "dentist.common.binio.common",
  "kind" : "module",
  "file" : "source/dentist/common/binio/common.d",
  "comment" : "    Collection of common structure and functions for working with binary data.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ceil",
     "ceildiv"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "all",
     "among",
     "joiner",
     "map",
     "permutations"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 19,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "minimallyInitializedArray"
    ]
   },
   {
    "name" : "std.bitmanip",
    "kind" : "import",
    "line" : 20,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "bitfields"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 21,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 22,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enforce",
     "ErrnoException"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.process",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "environment"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "chunks",
     "dropExactly",
     "empty",
     "enumerate",
     "front",
     "popFront",
     "retro",
     "takeExactly"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 34,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "File"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 35,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "toLower"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 36,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isArray",
     "isSomeChar",
     "isSomeString",
     "Unqual"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 41,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "BitFlags",
     "Flag",
     "No",
     "Yes"
    ]
   },
   {
    "name" : "std.utf",
    "kind" : "import",
    "line" : 42,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "UTFException"
    ]
   },
   {
    "name" : "lockIfPossible",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Place a lock on `file` if the underlying file system supports it. This\nignores and logs errors encountered while trying to acquire the lock.\nFile locking may disabled entirely by setting the environment variable\n`SKIP_FILE_LOCKING=1`.\n\nEnvironment:\n$(UL\n$(LI `SKIP_FILE_LOCKING`: disable file locking by setting to `1`)\n)\n",
    "line" : 54,
    "char" : 6,
    "deco" : "FNbKS3std5stdio4FileZv",
    "parameters" : [
     {
      "name" : "file",
      "deco" : "S3std5stdio4File",
      "storageClass" : [
       "ref"
      ]
     }
    ],
    "endline" : 101,
    "endchar" : 1
   },
   {
    "name" : "BinaryIOException",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Thrown if an error occurs during binary I/O operations.\n",
    "line" : 105,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 107,
      "char" : 30,
      "deco" : "FNaNbNiNfAyaQdmC6object9ThrowableZC7dentist6common5binioQn17BinaryIOException",
      "originalType" : "pure nothrow @nogc @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
      "parameters" : [
       {
        "name" : "msg",
        "deco" : "Aya"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "m",
        "default" : "cast(ulong)__LINE__"
       },
       {
        "name" : "nextInChain",
        "deco" : "C6object9Throwable",
        "default" : "null"
       }
      ],
      "endline" : 111,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Provides array access to the fields defined by `fieldPtr!T`. The latter\nmethod must be implemented by the struct where this is mixed in.\n",
    "line" : 117,
    "char" : 7,
    "name" : "DbIndex",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "EOF",
      "kind" : "struct",
      "protection" : "public",
      "line" : 119,
      "char" : 12
     },
     {
      "kind" : "template",
      "comment" : "Return the pointer to the begin of the `T`s array.\n",
      "line" : 123,
      "char" : 31,
      "name" : "beginPtr",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "beginPtr",
        "kind" : "function",
        "line" : 123,
        "char" : 31,
        "storageClass" : [
         "auto"
        ],
        "type" : "pure nothrow @property ref size_t()",
        "endline" : 126,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "ditto\n",
      "line" : 129,
      "char" : 22,
      "name" : "beginPtr",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "beginPtr",
        "kind" : "function",
        "line" : 129,
        "char" : 22,
        "type" : "const pure nothrow @property size_t()",
        "endline" : 132,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "Return the pointer to the end of the `T`s array.\n",
      "line" : 136,
      "char" : 31,
      "name" : "endPtr",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "endPtr",
        "kind" : "function",
        "line" : 136,
        "char" : 31,
        "storageClass" : [
         "auto"
        ],
        "type" : "pure nothrow @property ref size_t()",
        "endline" : 139,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "ditto\n",
      "line" : 142,
      "char" : 22,
      "name" : "endPtr",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "endPtr",
        "kind" : "function",
        "line" : 142,
        "char" : 22,
        "type" : "const pure nothrow @property size_t()",
        "endline" : 145,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "Return an `ArrayStorage` constructed from `beginPtr!T` and `endPtr!T`.\n",
      "line" : 149,
      "char" : 44,
      "name" : "arrayStorage",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "arrayStorage",
        "kind" : "function",
        "line" : 149,
        "char" : 44,
        "type" : "const pure nothrow @property ArrayStorage!(StorageType!T)()",
        "endline" : 152,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Read a single record of type `T` at offset `ptr` in `dbFile`.\n",
    "line" : 157,
    "char" : 3,
    "name" : "readRecordAt",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "readRecordAt",
      "kind" : "function",
      "line" : 157,
      "char" : 3,
      "type" : "T(File dbFile, size_t ptr)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "File"
       },
       {
        "name" : "ptr",
        "type" : "size_t"
       }
      ],
      "endline" : 162,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Read a single record of type `T` at the current offset in `dbFile`.\n",
    "line" : 166,
    "char" : 3,
    "name" : "readRecord",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "readRecord",
      "kind" : "function",
      "line" : 166,
      "char" : 3,
      "type" : "T(File dbFile)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "File"
       }
      ],
      "endline" : 169,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Read an array of records at the current offset in `dbFile`.\n\nThrows:\n`BinaryIOException` if an `ErrnoException` occurs or the file ends\nbefore all records are read.\n",
    "line" : 177,
    "char" : 3,
    "name" : "readRecords",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "isArray!T",
    "members" : [
     {
      "name" : "readRecords",
      "kind" : "function",
      "line" : 177,
      "char" : 3,
      "type" : "T(File dbFile, T records)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "File"
       },
       {
        "name" : "records",
        "type" : "T"
       }
      ],
      "endline" : 202,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "An array-like structure of pointers that is used to access the data in a\nbinary file. In this context, pointers are expected to be offsets in the\nbinary file.\n",
    "line" : 208,
    "char" : 1,
    "name" : "ArrayStorage",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "ArrayStorage",
      "kind" : "struct",
      "protection" : "public",
      "line" : 208,
      "char" : 1,
      "members" : [
       {
        "name" : "elementSize",
        "kind" : "variable",
        "comment" : "Number of bytes consumed by a single `T`.\n",
        "line" : 211,
        "char" : 10,
        "storageClass" : [
         "enum"
        ],
        "init" : "T.sizeof"
       },
       {
        "name" : "ptr",
        "kind" : "variable",
        "comment" : "Base pointer to the first array element.\n",
        "line" : 213,
        "char" : 12,
        "type" : "size_t"
       },
       {
        "name" : "length",
        "kind" : "variable",
        "comment" : "Number of `T` items in this array.\n",
        "line" : 215,
        "char" : 12,
        "type" : "size_t"
       },
       {
        "name" : "opIndex",
        "kind" : "function",
        "comment" : "Return a shallow copy if `this`.\n",
        "line" : 219,
        "char" : 20,
        "type" : "const pure nothrow ArrayStorage!T()",
        "endline" : 222,
        "endchar" : 5
       },
       {
        "name" : "opIndex",
        "kind" : "function",
        "comment" : "Return the pointer to element `0 <= i <= length`. Contrary to regular\narrays, the element at `i == length` can be accessed. This is useful\nthe construct slices (see `opIndex(size_t[2])`).\n",
        "line" : 228,
        "char" : 12,
        "type" : "const pure nothrow size_t(size_t i)",
        "parameters" : [
         {
          "name" : "i",
          "type" : "size_t"
         }
        ],
        "endline" : 233,
        "endchar" : 5
       },
       {
        "name" : "opIndex",
        "kind" : "function",
        "comment" : "Return a slice of this `ArrayStorage`. An empty slice is not allowed.\n",
        "line" : 237,
        "char" : 20,
        "type" : "const pure nothrow ArrayStorage!T(size_t[2] slice)",
        "parameters" : [
         {
          "name" : "slice",
          "type" : "size_t[2]"
         }
        ],
        "endline" : 244,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "line" : 246,
        "char" : 15,
        "name" : "opSlice",
        "parameters" : [
         {
          "name" : "dim",
          "kind" : "value",
          "type" : "size_t"
         }
        ],
        "constraint" : "dim == 0",
        "members" : [
         {
          "name" : "opSlice",
          "kind" : "function",
          "line" : 246,
          "char" : 15,
          "type" : "const pure nothrow size_t[2](size_t from, size_t to)",
          "parameters" : [
           {
            "name" : "from",
            "type" : "size_t"
           },
           {
            "name" : "to",
            "type" : "size_t"
           }
          ],
          "endline" : 252,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "opDollar",
        "kind" : "function",
        "comment" : "Returns `length`.\n",
        "line" : 256,
        "char" : 12,
        "type" : "const pure nothrow size_t()",
        "endline" : 259,
        "endchar" : 5
       },
       {
        "name" : "indexOf",
        "kind" : "function",
        "comment" : "Computes the index corresponding to `ptr` relative to this array.\nThe result may be out of bounds. `ptr` must have a valid alignment\nrelative to `this.ptr`.\n",
        "line" : 265,
        "char" : 10,
        "type" : "const pure long(size_t ptr)",
        "parameters" : [
         {
          "name" : "ptr",
          "type" : "size_t"
         }
        ],
        "endline" : 270,
        "endchar" : 5
       },
       {
        "name" : "fromPtrs",
        "kind" : "function",
        "comment" : "Construct an `ArrayStorage` from given pointers. The pointers must\nbe properly aligned.\n",
        "line" : 275,
        "char" : 27,
        "storageClass" : [
         "static"
        ],
        "type" : "ArrayStorage!T(size_t fromPtr, size_t toPtr)",
        "parameters" : [
         {
          "name" : "fromPtr",
          "type" : "size_t"
         },
         {
          "name" : "toPtr",
          "type" : "size_t"
         }
        ],
        "endline" : 280,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L283_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 283,
    "char" : 1,
    "endline" : 325,
    "endchar" : 1
   },
   {
    "name" : "CompressedBase",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "2-bit encoding of bases `a`, `c`, `t`, `g`.\n",
    "line" : 325,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "a",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)0u",
      "line" : 327,
      "char" : 5
     },
     {
      "name" : "c",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)1u",
      "line" : 328,
      "char" : 5
     },
     {
      "name" : "t",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)2u",
      "line" : 329,
      "char" : 5
     },
     {
      "name" : "g",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)3u",
      "line" : 330,
      "char" : 5
     }
    ]
   },
   {
    "name" : "CompressedBaseQuad",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Four `CompressedBase`s packed into one byte. Provides array-like access\nto these four bases.\n",
    "line" : 335,
    "char" : 1,
    "members" : [
     {
      "name" : "__0__1__2__3_bf",
      "kind" : "variable",
      "protection" : "private",
      "file" : "source/dentist/common/binio/common.d-mixin-339",
      "line" : 339,
      "char" : 15,
      "deco" : "h",
      "offset" : 0
     },
     {
      "name" : "_0",
      "kind" : "function",
      "protection" : "private",
      "line" : 339,
      "char" : 56,
      "deco" : "xFNaNbNdNiNfZE7dentist6common5binioQn14CompressedBase",
      "endline" : 339,
      "endchar" : 172
     },
     {
      "name" : "_0",
      "kind" : "function",
      "protection" : "private",
      "line" : 340,
      "char" : 16,
      "deco" : "FNaNbNdNiNfE7dentist6common5binioQn14CompressedBaseZv",
      "parameters" : [
       {
        "name" : "v",
        "deco" : "E7dentist6common5binioQn14CompressedBase"
       }
      ],
      "endline" : 340,
      "endchar" : 382
     },
     {
      "name" : "_0_min",
      "kind" : "variable",
      "protection" : "private",
      "line" : 341,
      "char" : 21,
      "storageClass" : [
       "enum"
      ],
      "deco" : "E7dentist6common5binioQn14CompressedBase",
      "init" : "CompressedBase.a"
     },
     {
      "name" : "_0_max",
      "kind" : "variable",
      "protection" : "private",
      "line" : 341,
      "char" : 75,
      "storageClass" : [
       "enum"
      ],
      "deco" : "E7dentist6common5binioQn14CompressedBase",
      "init" : "CompressedBase.g"
     },
     {
      "name" : "_1",
      "kind" : "function",
      "protection" : "private",
      "line" : 341,
      "char" : 133,
      "deco" : "xFNaNbNdNiNfZE7dentist6common5binioQn14CompressedBase",
      "endline" : 341,
      "endchar" : 250
     },
     {
      "name" : "_1",
      "kind" : "function",
      "protection" : "private",
      "line" : 342,
      "char" : 16,
      "deco" : "FNaNbNdNiNfE7dentist6common5binioQn14CompressedBaseZv",
      "parameters" : [
       {
        "name" : "v",
        "deco" : "E7dentist6common5binioQn14CompressedBase"
       }
      ],
      "endline" : 342,
      "endchar" : 384
     },
     {
      "name" : "_1_min",
      "kind" : "variable",
      "protection" : "private",
      "line" : 343,
      "char" : 21,
      "storageClass" : [
       "enum"
      ],
      "deco" : "E7dentist6common5binioQn14CompressedBase",
      "init" : "CompressedBase.a"
     },
     {
      "name" : "_1_max",
      "kind" : "variable",
      "protection" : "private",
      "line" : 343,
      "char" : 75,
      "storageClass" : [
       "enum"
      ],
      "deco" : "E7dentist6common5binioQn14CompressedBase",
      "init" : "CompressedBase.g"
     },
     {
      "name" : "_2",
      "kind" : "function",
      "protection" : "private",
      "line" : 343,
      "char" : 133,
      "deco" : "xFNaNbNdNiNfZE7dentist6common5binioQn14CompressedBase",
      "endline" : 343,
      "endchar" : 250
     },
     {
      "name" : "_2",
      "kind" : "function",
      "protection" : "private",
      "line" : 344,
      "char" : 16,
      "deco" : "FNaNbNdNiNfE7dentist6common5binioQn14CompressedBaseZv",
      "parameters" : [
       {
        "name" : "v",
        "deco" : "E7dentist6common5binioQn14CompressedBase"
       }
      ],
      "endline" : 344,
      "endchar" : 384
     },
     {
      "name" : "_2_min",
      "kind" : "variable",
      "protection" : "private",
      "line" : 345,
      "char" : 21,
      "storageClass" : [
       "enum"
      ],
      "deco" : "E7dentist6common5binioQn14CompressedBase",
      "init" : "CompressedBase.a"
     },
     {
      "name" : "_2_max",
      "kind" : "variable",
      "protection" : "private",
      "line" : 345,
      "char" : 75,
      "storageClass" : [
       "enum"
      ],
      "deco" : "E7dentist6common5binioQn14CompressedBase",
      "init" : "CompressedBase.g"
     },
     {
      "name" : "_3",
      "kind" : "function",
      "protection" : "private",
      "line" : 345,
      "char" : 133,
      "deco" : "xFNaNbNdNiNfZE7dentist6common5binioQn14CompressedBase",
      "endline" : 345,
      "endchar" : 251
     },
     {
      "name" : "_3",
      "kind" : "function",
      "protection" : "private",
      "line" : 346,
      "char" : 16,
      "deco" : "FNaNbNdNiNfE7dentist6common5binioQn14CompressedBaseZv",
      "parameters" : [
       {
        "name" : "v",
        "deco" : "E7dentist6common5binioQn14CompressedBase"
       }
      ],
      "endline" : 346,
      "endchar" : 386
     },
     {
      "name" : "_3_min",
      "kind" : "variable",
      "protection" : "private",
      "line" : 347,
      "char" : 21,
      "storageClass" : [
       "enum"
      ],
      "deco" : "E7dentist6common5binioQn14CompressedBase",
      "init" : "CompressedBase.a"
     },
     {
      "name" : "_3_max",
      "kind" : "variable",
      "protection" : "private",
      "line" : 347,
      "char" : 75,
      "storageClass" : [
       "enum"
      ],
      "deco" : "E7dentist6common5binioQn14CompressedBase",
      "init" : "CompressedBase.g"
     },
     {
      "name" : "length",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Number of bases – always four.\n",
      "file" : "source/dentist/common/binio/common.d",
      "line" : 348,
      "char" : 10,
      "storageClass" : [
       "enum"
      ],
      "deco" : "i",
      "init" : "4"
     },
     {
      "name" : "opDollar",
      "kind" : "alias",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 351,
      "char" : 5,
      "originalType" : "length"
     },
     {
      "name" : "opIndex",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Construct a dynamic array of the bases. This requires memory\nallocation and takes up the size of the array struct and additional\nfour bytes – one per base.\n",
      "line" : 357,
      "char" : 22,
      "deco" : "xFNaNbZAE7dentist6common5binioQn14CompressedBase",
      "endline" : 360,
      "endchar" : 5
     },
     {
      "name" : "opIndex",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Access base at `i`.\n",
      "line" : 364,
      "char" : 20,
      "deco" : "xFNaNbmZE7dentist6common5binioQn14CompressedBase",
      "originalType" : "const pure nothrow CompressedBase(size_t i)",
      "parameters" : [
       {
        "name" : "i",
        "deco" : "m"
       }
      ],
      "endline" : 379,
      "endchar" : 5
     },
     {
      "name" : "opIndexAssign",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Set base at `i` to `base`.\n",
      "line" : 382,
      "char" : 10,
      "deco" : "FNaNbE7dentist6common5binioQn14CompressedBasemZv",
      "originalType" : "pure nothrow void(CompressedBase base, size_t i)",
      "parameters" : [
       {
        "name" : "base",
        "deco" : "E7dentist6common5binioQn14CompressedBase"
       },
       {
        "name" : "i",
        "deco" : "m"
       }
      ],
      "endline" : 401,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "CompressedSequence",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "A string of bases encoded in `CompressedBaseQuad`s. The sequence may have\nany length – not just multiples of four.\n",
    "line" : 407,
    "char" : 1,
    "members" : [
     {
      "name" : "_data",
      "kind" : "variable",
      "protection" : "private",
      "line" : 416,
      "char" : 34,
      "deco" : "AS7dentist6common5binioQn18CompressedBaseQuad",
      "offset" : 0
     },
     {
      "name" : "_baseOffset",
      "kind" : "variable",
      "protection" : "private",
      "line" : 417,
      "char" : 19,
      "deco" : "h",
      "offset" : 16
     },
     {
      "name" : "numBases",
      "kind" : "variable",
      "protection" : "private",
      "line" : 418,
      "char" : 20,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 24
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Compress ASCII-encoded string of `acgt`s.\n\nThrows: `Exception` if `fastaString` contains characters other than\n`acgt`.\n",
      "line" : 425,
      "char" : 31,
      "name" : "from",
      "parameters" : [
       {
        "name" : "S",
        "kind" : "type"
       }
      ],
      "constraint" : "isSomeString!S",
      "members" : [
       {
        "name" : "from",
        "kind" : "function",
        "line" : 425,
        "char" : 31,
        "type" : "CompressedSequence(S fastaString)",
        "parameters" : [
         {
          "name" : "fastaString",
          "type" : "S"
         }
        ],
        "endline" : 447,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L449_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 449,
      "char" : 5,
      "endline" : 462,
      "endchar" : 5
     },
     {
      "name" : "data",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Access underlying buffer directly. This is intended for binary storage.\n",
      "line" : 462,
      "char" : 43,
      "deco" : "xFNaNbNdZxAS7dentist6common5binioQn18CompressedBaseQuad",
      "endline" : 465,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Return a lazy range of the stored bases.\n\nBugs:\n$(UL\n$(LI this procedure requires many allocations because the\n`CompressedBaseQuad`s are turned into ranges with `a[]`.)\n)\n",
      "line" : 475,
      "char" : 20,
      "name" : "bases",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type",
        "deco" : "E7dentist6common5binioQn14CompressedBase"
       },
       {
        "name" : "reverse",
        "kind" : "value",
        "deco" : "E3std8typecons__T4FlagVAyaa7_72657665727365ZQBb",
        "defaultValue" : "No.reverse"
       }
      ],
      "members" : [
       {
        "name" : "bases",
        "kind" : "function",
        "line" : 475,
        "char" : 20,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure nothrow @property ()",
        "endline" : 491,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L493_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 493,
      "char" : 5,
      "endline" : 515,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 515,
      "char" : 20,
      "name" : "bases",
      "parameters" : [
       {
        "name" : "C",
        "kind" : "type"
       },
       {
        "name" : "reverse",
        "kind" : "value",
        "deco" : "E3std8typecons__T4FlagVAyaa7_72657665727365ZQBb",
        "defaultValue" : "No.reverse"
       }
      ],
      "constraint" : "isSomeChar!C",
      "members" : [
       {
        "name" : "bases",
        "kind" : "function",
        "line" : 515,
        "char" : 20,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure nothrow @property ()",
        "endline" : 518,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L520_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 520,
      "char" : 5,
      "endline" : 533,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Decompress sequence into an ASCII-encoded string.\n",
      "line" : 533,
      "char" : 7,
      "name" : "to",
      "parameters" : [
       {
        "name" : "S",
        "kind" : "type"
       }
      ],
      "constraint" : "isSomeString!S",
      "members" : [
       {
        "name" : "to",
        "kind" : "function",
        "line" : 533,
        "char" : 7,
        "type" : "const pure nothrow S()",
        "endline" : 545,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "toString",
      "kind" : "alias",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 548,
      "char" : 5,
      "originalType" : "to!string"
     },
     {
      "name" : "__unittest_L551_C5",
      "kind" : "function",
      "protection" : "public",
      "comment" : "\n",
      "line" : 551,
      "char" : 5,
      "endline" : 561,
      "endchar" : 5
     },
     {
      "name" : "baseOffset",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Internal property that is exposed for binary storage.\n",
      "line" : 561,
      "char" : 21,
      "deco" : "xFNaNbNdZh",
      "endline" : 564,
      "endchar" : 5
     },
     {
      "name" : "length",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Returns the number of bases in sequence.\n",
      "line" : 568,
      "char" : 22,
      "deco" : "xFNaNbNdZm",
      "originalType" : "const pure nothrow @property size_t()",
      "endline" : 571,
      "endchar" : 5
     },
     {
      "name" : "opDollar",
      "kind" : "alias",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 574,
      "char" : 5,
      "originalType" : "length"
     },
     {
      "name" : "__unittest_L576_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 576,
      "char" : 5,
      "endline" : 587,
      "endchar" : 5
     },
     {
      "name" : "opIndex",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Access base at index `fastaIdx`.\n",
      "line" : 587,
      "char" : 20,
      "deco" : "xFNaNbmZE7dentist6common5binioQn14CompressedBase",
      "originalType" : "const pure nothrow CompressedBase(size_t fastaIdx)",
      "parameters" : [
       {
        "name" : "fastaIdx",
        "deco" : "m"
       }
      ],
      "endline" : 596,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L598_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 598,
      "char" : 5,
      "endline" : 624,
      "endchar" : 5
     },
     {
      "name" : "opIndex",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return a slice of this `CompressedSequence` in single base coordinates.\n",
      "line" : 624,
      "char" : 31,
      "deco" : "NgFNaNbG2mZNgS7dentist6common5binioQn18CompressedSequence",
      "originalType" : "inout pure nothrow inout(CompressedSequence)(size_t[2] slice)",
      "parameters" : [
       {
        "name" : "slice",
        "deco" : "G2m"
       }
      ],
      "endline" : 640,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L643_C5",
      "kind" : "function",
      "protection" : "public",
      "comment" : "\n",
      "line" : 643,
      "char" : 5,
      "endline" : 654,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 654,
      "char" : 15,
      "name" : "opSlice",
      "parameters" : [
       {
        "name" : "dim",
        "kind" : "value",
        "deco" : "m"
       }
      ],
      "constraint" : "dim == 0",
      "members" : [
       {
        "name" : "opSlice",
        "kind" : "function",
        "line" : 654,
        "char" : 15,
        "type" : "const pure nothrow size_t[2](in size_t start, in size_t end)",
        "parameters" : [
         {
          "name" : "start",
          "type" : "size_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "end",
          "type" : "size_t",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 657,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "compressedLength",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Number of bytes required to store the sequence. This does not include\nmeta data.\n",
      "line" : 662,
      "char" : 22,
      "deco" : "xFNaNbNdZm",
      "originalType" : "const pure nothrow @property size_t()",
      "endline" : 665,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L667_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 667,
      "char" : 5,
      "endline" : 677,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 677,
      "char" : 19,
      "name" : "compressedLength",
      "parameters" : [
       {
        "name" : "S",
        "kind" : "type"
       }
      ],
      "constraint" : "isSomeString!S",
      "members" : [
       {
        "name" : "compressedLength",
        "kind" : "function",
        "line" : 677,
        "char" : 19,
        "type" : "size_t(in S fastaSequence)",
        "parameters" : [
         {
          "name" : "fastaSequence",
          "type" : "S",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 682,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L685_C5",
      "kind" : "function",
      "protection" : "public",
      "comment" : "\n",
      "line" : 685,
      "char" : 5,
      "endline" : 695,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Returns true if `fastaSequence` contains only characters `acgt`\nignoring casing.\n",
      "line" : 695,
      "char" : 19,
      "name" : "canConvert",
      "parameters" : [
       {
        "name" : "S",
        "kind" : "type"
       }
      ],
      "constraint" : "isSomeString!S",
      "members" : [
       {
        "name" : "canConvert",
        "kind" : "function",
        "line" : 695,
        "char" : 19,
        "type" : "size_t(in S fastaSequence)",
        "parameters" : [
         {
          "name" : "fastaSequence",
          "type" : "S",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 698,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L701_C5",
      "kind" : "function",
      "protection" : "public",
      "comment" : "\n",
      "line" : 701,
      "char" : 5,
      "endline" : 716,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Convert a single ASCII-encoded `fastaBase` to `CompressedBase` and\nvice versa.\n\nThrows: `Exception` if not `canConvert(fastaBase)`\nSee_also: `canConvert`\n",
      "line" : 716,
      "char" : 27,
      "name" : "convert",
      "parameters" : [
       {
        "name" : "C",
        "kind" : "type"
       }
      ],
      "constraint" : "isSomeChar!C",
      "members" : [
       {
        "name" : "convert",
        "kind" : "function",
        "line" : 716,
        "char" : 27,
        "type" : "CompressedBase(in C fastaBase)",
        "parameters" : [
         {
          "name" : "fastaBase",
          "type" : "C",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 731,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L734_C5",
      "kind" : "function",
      "protection" : "public",
      "comment" : "\n",
      "line" : 734,
      "char" : 5,
      "endline" : 745,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 745,
      "char" : 14,
      "name" : "convert",
      "parameters" : [
       {
        "name" : "C",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "convert",
        "kind" : "function",
        "line" : 745,
        "char" : 14,
        "type" : "C(in CompressedBase compressedBase)",
        "parameters" : [
         {
          "name" : "compressedBase",
          "type" : "CompressedBase",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 758,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L761_C5",
      "kind" : "function",
      "protection" : "public",
      "comment" : "\n",
      "line" : 761,
      "char" : 5,
      "endline" : 770,
      "endchar" : 1
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.common.binio.insertiondb",
  "kind" : "module",
  "file" : "source/dentist/common/binio/insertiondb.d",
  "comment" : "    This package contains methods to handle the proprietary binary data\n    container for `Insertion`s.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "core.exception",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AssertError"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ReferencePoint"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 14,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "AlignmentFlags" : "Flags"
    },
    "selective" : [
     "AlignmentChain",
     "AlignmentLocationSeed",
     "Contig",
     "coord_t",
     "diff_t",
     "id_t",
     "SeededAlignment",
     "trace_point_t",
     "TracePoint"
    ]
   },
   {
    "name" : "dentist.common.binio.common",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ArrayStorage",
     "CompressedBaseQuad",
     "CompressedSequence",
     "DbIndex",
     "lockIfPossible",
     "readRecord",
     "readRecordAt",
     "readRecords"
    ]
   },
   {
    "name" : "dentist.common.insertions",
    "kind" : "import",
    "line" : 34,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Insertion",
     "InsertionInfo"
    ]
   },
   {
    "name" : "dentist.common.scaffold",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ContigNode",
     "ContigPart"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 40,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "minimallyInitializedArray"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 41,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 42,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assertThrown",
     "enforce",
     "ErrnoException"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 43,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 44,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ElementType",
     "empty",
     "front",
     "hasLength",
     "isForwardRange",
     "isInputRange",
     "popFront",
     "save"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 53,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "File"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 54,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isArray"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 55,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "tuple",
     "Tuple"
    ]
   },
   {
    "name" : "InsertionDbException",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Thrown if an error is encountered.\n",
    "line" : 68,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 70,
      "char" : 30,
      "deco" : "FNaNbNiNfAyaQdmC6object9ThrowableZC7dentist6common5binio11insertiondb20InsertionDbException",
      "originalType" : "pure nothrow @nogc @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
      "parameters" : [
       {
        "name" : "msg",
        "deco" : "Aya"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "m",
        "default" : "cast(ulong)__LINE__"
       },
       {
        "name" : "nextInChain",
        "deco" : "C6object9Throwable",
        "default" : "null"
       }
      ],
      "endline" : 74,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "InsertionDb",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Structure to access insertions stored in a binary file.\n",
    "line" : 79,
    "char" : 1,
    "members" : [
     {
      "name" : "LocalAlignment",
      "kind" : "alias",
      "protection" : "private",
      "line" : 81,
      "char" : 13,
      "deco" : "S7dentist6common10alignments4base14AlignmentChain14LocalAlignment",
      "originalType" : "AlignmentChain.LocalAlignment"
     },
     {
      "name" : "TracePoint",
      "kind" : "alias",
      "protection" : "private",
      "line" : 82,
      "char" : 13,
      "deco" : "S7dentist6common10alignments4base10TracePoint",
      "originalType" : "LocalAlignment.TracePoint"
     },
     {
      "name" : "DbSlices",
      "kind" : "alias",
      "protection" : "private",
      "line" : 83,
      "char" : 13,
      "deco" : "S3std8typecons__T5TupleTS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh11insertiondb16InsertionStorageZQCfVAyaa10_696e73657274696f6e73TSQEmQEhQEdQEn__TQEbTSQFgQFbQExQFh18CompressedBaseQuadZQFnVQDia19_636f6d70726573736564426173655175616473TSQImQIhQIdQIn__TQIbTSQJgQJbQIxQHq22SeededAlignmentStorageZQJrVQHma8_6f7665726c617073TSQLtQLoQLkQLu__TQLiTSQMnQMiQMeQKx21LocalAlignmentStorageZQMxVQKsa15_6c6f63616c416c69676e6d656e7473TSQPoQPjQPfQPp__TQPdTSQQiQQdQPzQOs17TracePointStorageZQQoVQOja11_7472616365506f696e7473TSQSxQSsQSoQSy__TQSmTkZQSsVQQna7_72656164496473ZQUz",
      "originalType" : "Tuple!(ArrayStorage!(StorageType!Insertion), \"insertions\", ArrayStorage!(StorageType!CompressedBaseQuad), \"compressedBaseQuads\", ArrayStorage!(StorageType!SeededAlignment), \"overlaps\", ArrayStorage!(StorageType!LocalAlignment), \"localAlignments\", ArrayStorage!(StorageType!TracePoint), \"tracePoints\", ArrayStorage!(StorageType!id_t), \"readIds\")"
     },
     {
      "name" : "file",
      "kind" : "variable",
      "protection" : "private",
      "line" : 92,
      "char" : 18,
      "deco" : "S3std5stdio4File",
      "offset" : 0
     },
     {
      "name" : "index",
      "kind" : "variable",
      "protection" : "private",
      "line" : 93,
      "char" : 30,
      "deco" : "S7dentist6common5binio11insertiondb16InsertionDbIndex",
      "offset" : 24
     },
     {
      "name" : "slices",
      "kind" : "variable",
      "protection" : "private",
      "line" : 94,
      "char" : 22,
      "deco" : "S3std8typecons__T5TupleTS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh11insertiondb16InsertionStorageZQCfVAyaa10_696e73657274696f6e73TSQEmQEhQEdQEn__TQEbTSQFgQFbQExQFh18CompressedBaseQuadZQFnVQDia19_636f6d70726573736564426173655175616473TSQImQIhQIdQIn__TQIbTSQJgQJbQIxQHq22SeededAlignmentStorageZQJrVQHma8_6f7665726c617073TSQLtQLoQLkQLu__TQLiTSQMnQMiQMeQKx21LocalAlignmentStorageZQMxVQKsa15_6c6f63616c416c69676e6d656e7473TSQPoQPjQPfQPp__TQPdTSQQiQQdQPzQOs17TracePointStorageZQQoVQOja11_7472616365506f696e7473TSQSxQSsQSoQSy__TQSmTkZQSsVQQna7_72656164496473ZQUz",
      "originalType" : "DbSlices",
      "offset" : 80
     },
     {
      "name" : "insertions",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return the respective `ArrayStorage`s. This is used to report details\nof the DB in command `show-insertions`.\n\nSee_also: `dentist.commands.showInsertions`,\n`dentist.common.binio.common.ArrayStorage`\n",
      "line" : 101,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh11insertiondb16InsertionStorageZQCf",
      "originalType" : "const pure nothrow @property ()",
      "endline" : 104,
      "endchar" : 5
     },
     {
      "name" : "compressedBaseQuads",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 107,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBhQBr18CompressedBaseQuadZQBx",
      "originalType" : "const pure nothrow @property ()",
      "endline" : 110,
      "endchar" : 5
     },
     {
      "name" : "overlaps",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 113,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh11insertiondb22SeededAlignmentStorageZQCl",
      "originalType" : "const pure nothrow @property ()",
      "endline" : 116,
      "endchar" : 5
     },
     {
      "name" : "localAlignments",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 119,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh11insertiondb21LocalAlignmentStorageZQCk",
      "originalType" : "const pure nothrow @property ()",
      "endline" : 122,
      "endchar" : 5
     },
     {
      "name" : "tracePoints",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 125,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh11insertiondb17TracePointStorageZQCg",
      "originalType" : "const pure nothrow @property ()",
      "endline" : 128,
      "endchar" : 5
     },
     {
      "name" : "readIds",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 131,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTkZQr",
      "originalType" : "const pure nothrow @property ()",
      "endline" : 134,
      "endchar" : 5
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Create an `InsertionDb` from `dbFile`. A lock is placed on `dbFile`\nif possible.\n\nSee_also: `dentist.common.binio.common.lockIfPossible`\n",
      "line" : 141,
      "char" : 24,
      "storageClass" : [
       "static"
      ],
      "deco" : "FIAyaZS7dentist6common5binio11insertiondb11InsertionDb",
      "parameters" : [
       {
        "name" : "dbFile",
        "deco" : "xAya",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 149,
      "endchar" : 5
     },
     {
      "name" : "releaseDb",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Closes the underlying file.\n",
      "line" : 153,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 156,
      "endchar" : 5
     },
     {
      "name" : "opIndex",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Read the entire DB at once.\n",
      "line" : 160,
      "char" : 17,
      "deco" : "FZAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "originalType" : "Insertion[]()",
      "endline" : 165,
      "endchar" : 5
     },
     {
      "name" : "opIndex",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Read `Insertion` at index `i`.\n\nThrows: `InsertionDbException` if `i` is out of bounds.\n",
      "line" : 171,
      "char" : 15,
      "deco" : "FmZS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "originalType" : "Insertion(size_t i)",
      "parameters" : [
       {
        "name" : "i",
        "deco" : "m"
       }
      ],
      "endline" : 181,
      "endchar" : 5
     },
     {
      "name" : "opIndex",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Read a slice of `Insertion`s.\n\nThrows: `InsertionDbException` if `slice` is out of bounds.\n",
      "line" : 187,
      "char" : 17,
      "deco" : "FG2mZAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "originalType" : "Insertion[](size_t[2] slice)",
      "parameters" : [
       {
        "name" : "slice",
        "deco" : "G2m"
       }
      ],
      "endline" : 199,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 201,
      "char" : 15,
      "name" : "opSlice",
      "parameters" : [
       {
        "name" : "dim",
        "kind" : "value",
        "deco" : "m"
       }
      ],
      "constraint" : "dim == 0",
      "members" : [
       {
        "name" : "opSlice",
        "kind" : "function",
        "line" : 201,
        "char" : 15,
        "type" : "size_t[2](size_t from, size_t to)",
        "parameters" : [
         {
          "name" : "from",
          "type" : "size_t"
         },
         {
          "name" : "to",
          "type" : "size_t"
         }
        ],
        "endline" : 207,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "length",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return the number of insertions in this DB.\n",
      "line" : 211,
      "char" : 22,
      "deco" : "FNdZm",
      "originalType" : "@property size_t()",
      "endline" : 216,
      "endchar" : 5
     },
     {
      "name" : "opDollar",
      "kind" : "alias",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 219,
      "char" : 5,
      "originalType" : "length"
     },
     {
      "name" : "ensureDbIndex",
      "kind" : "function",
      "protection" : "private",
      "line" : 222,
      "char" : 18,
      "deco" : "FZv",
      "endline" : 228,
      "endchar" : 5
     },
     {
      "name" : "readSlice",
      "kind" : "function",
      "protection" : "private",
      "line" : 231,
      "char" : 25,
      "deco" : "FmmZAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "originalType" : "Insertion[](size_t from, size_t to)",
      "parameters" : [
       {
        "name" : "from",
        "deco" : "m"
       },
       {
        "name" : "to",
        "deco" : "m"
       }
      ],
      "endline" : 259,
      "endchar" : 5
     },
     {
      "name" : "getSlices",
      "kind" : "function",
      "protection" : "private",
      "line" : 262,
      "char" : 22,
      "deco" : "FmmZS3std8typecons__T5TupleTS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh11insertiondb16InsertionStorageZQCfVAyaa10_696e73657274696f6e73TSQEmQEhQEdQEn__TQEbTSQFgQFbQExQFh18CompressedBaseQuadZQFnVQDia19_636f6d70726573736564426173655175616473TSQImQIhQIdQIn__TQIbTSQJgQJbQIxQHq22SeededAlignmentStorageZQJrVQHma8_6f7665726c617073TSQLtQLoQLkQLu__TQLiTSQMnQMiQMeQKx21LocalAlignmentStorageZQMxVQKsa15_6c6f63616c416c69676e6d656e7473TSQPoQPjQPfQPp__TQPdTSQQiQQdQPzQOs17TracePointStorageZQQoVQOja11_7472616365506f696e7473TSQSxQSsQSoQSy__TQSmTkZQSsVQQna7_72656164496473ZQUz",
      "originalType" : "DbSlices(size_t from, size_t to)",
      "parameters" : [
       {
        "name" : "from",
        "deco" : "m"
       },
       {
        "name" : "to",
        "deco" : "m"
       }
      ],
      "endline" : 306,
      "endchar" : 5
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "private",
      "line" : 309,
      "char" : 18,
      "deco" : "FKAS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeASQJfQGf5binioQGo18CompressedBaseQuadASQKqQHq10alignments4base15SeededAlignmentAkZv",
      "originalType" : "void(ref Insertion[] insertions, CompressedBaseQuad[] compressedBaseQuads, SeededAlignment[] overlaps, id_t[] readIds)",
      "parameters" : [
       {
        "name" : "insertions",
        "deco" : "AS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "compressedBaseQuads",
        "deco" : "AS7dentist6common5binioQn18CompressedBaseQuad"
       },
       {
        "name" : "overlaps",
        "deco" : "AS7dentist6common10alignments4base15SeededAlignment"
       },
       {
        "name" : "readIds",
        "deco" : "Ak"
       }
      ],
      "endline" : 352,
      "endchar" : 5
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "private",
      "line" : 355,
      "char" : 18,
      "deco" : "FKAS7dentist6common5binioQn18CompressedBaseQuadZv",
      "parameters" : [
       {
        "name" : "compressedBaseQuads",
        "deco" : "AS7dentist6common5binioQn18CompressedBaseQuad",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 362,
      "endchar" : 5
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "private",
      "line" : 365,
      "char" : 18,
      "deco" : "FKAkZv",
      "originalType" : "void(ref id_t[] readIds)",
      "parameters" : [
       {
        "name" : "readIds",
        "deco" : "Ak",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 372,
      "endchar" : 5
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "private",
      "line" : 375,
      "char" : 18,
      "deco" : "FKAS7dentist6common10alignments4base15SeededAlignmentASQBzQBuQBqQBh14AlignmentChain14LocalAlignmentZv",
      "originalType" : "void(ref SeededAlignment[] overlaps, AlignmentChain.LocalAlignment[] localAlignments)",
      "parameters" : [
       {
        "name" : "overlaps",
        "deco" : "AS7dentist6common10alignments4base15SeededAlignment",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "localAlignments",
        "deco" : "AS7dentist6common10alignments4base14AlignmentChain14LocalAlignment"
       }
      ],
      "endline" : 409,
      "endchar" : 5
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "private",
      "line" : 412,
      "char" : 18,
      "deco" : "FKAS7dentist6common10alignments4base14AlignmentChain14LocalAlignmentASQCoQCjQCfQBw10TracePointZv",
      "originalType" : "void(ref AlignmentChain.LocalAlignment[] localAlignments, TracePoint[] tracePoints)",
      "parameters" : [
       {
        "name" : "localAlignments",
        "deco" : "AS7dentist6common10alignments4base14AlignmentChain14LocalAlignment",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "tracePoints",
        "deco" : "AS7dentist6common10alignments4base10TracePoint"
       }
      ],
      "endline" : 442,
      "endchar" : 5
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "private",
      "line" : 445,
      "char" : 18,
      "deco" : "FKAS7dentist6common10alignments4base10TracePointZv",
      "parameters" : [
       {
        "name" : "tracePoints",
        "deco" : "AS7dentist6common10alignments4base10TracePoint",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 453,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Write `insertions` to binary `dbFile`. A lock is placed on the file\nif possible.\n\nSee_also: `dentist.common.binio.common.lockIfPossible`\n",
      "line" : 460,
      "char" : 17,
      "name" : "write",
      "parameters" : [
       {
        "name" : "R",
        "kind" : "type"
       }
      ],
      "constraint" : "isForwardRange!R && hasLength!R && is(ElementType!R : const(Insertion))",
      "members" : [
       {
        "name" : "write",
        "kind" : "function",
        "line" : 460,
        "char" : 17,
        "type" : "void(in string dbFile, R insertions)",
        "parameters" : [
         {
          "name" : "dbFile",
          "type" : "string",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "insertions",
          "type" : "R"
         }
        ],
        "endline" : 467,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 79,
      "char" : 1,
      "deco" : "FNeZv"
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 79,
      "char" : 1,
      "deco" : "FNcNjS7dentist6common5binio11insertiondb11InsertionDbZQBx",
      "originalType" : "ref InsertionDb(InsertionDb p) return",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S7dentist6common5binio11insertiondb11InsertionDb"
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L470_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 470,
    "char" : 1,
    "endline" : 514,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 514,
    "char" : 9,
    "name" : "InsertionDbFileWriter",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "isForwardRange!R && hasLength!R && is(ElementType!R : const(Insertion))",
    "members" : [
     {
      "name" : "InsertionDbFileWriter",
      "kind" : "struct",
      "protection" : "public",
      "line" : 514,
      "char" : 9,
      "members" : [
       {
        "name" : "LocalAlignment",
        "kind" : "alias",
        "line" : 517,
        "char" : 13,
        "type" : "AlignmentChain.LocalAlignment"
       },
       {
        "name" : "TracePoint",
        "kind" : "alias",
        "line" : 518,
        "char" : 13,
        "type" : "LocalAlignment.TracePoint"
       },
       {
        "name" : "file",
        "kind" : "variable",
        "line" : 520,
        "char" : 10,
        "type" : "File"
       },
       {
        "name" : "insertions",
        "kind" : "variable",
        "line" : 521,
        "char" : 7,
        "type" : "R"
       },
       {
        "name" : "index",
        "kind" : "variable",
        "line" : 522,
        "char" : 22,
        "type" : "InsertionDbIndex"
       },
       {
        "name" : "writeToFile",
        "kind" : "function",
        "line" : 524,
        "char" : 10,
        "type" : "void()",
        "endline" : 535,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "line" : 537,
        "char" : 10,
        "name" : "writeBlock",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "type",
          "type" : "Insertion"
         }
        ],
        "members" : [
         {
          "name" : "writeBlock",
          "kind" : "function",
          "line" : 537,
          "char" : 10,
          "type" : "void()",
          "endline" : 579,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "line" : 581,
        "char" : 10,
        "name" : "writeBlock",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "type",
          "type" : "CompressedBaseQuad"
         }
        ],
        "members" : [
         {
          "name" : "writeBlock",
          "kind" : "function",
          "line" : 581,
          "char" : 10,
          "type" : "void()",
          "endline" : 600,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "line" : 602,
        "char" : 10,
        "name" : "writeBlock",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "type",
          "type" : "SeededAlignment"
         }
        ],
        "members" : [
         {
          "name" : "writeBlock",
          "kind" : "function",
          "line" : 602,
          "char" : 10,
          "type" : "void()",
          "endline" : 642,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "line" : 644,
        "char" : 10,
        "name" : "writeBlock",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "type",
          "type" : "LocalAlignment"
         }
        ],
        "members" : [
         {
          "name" : "writeBlock",
          "kind" : "function",
          "line" : 644,
          "char" : 10,
          "type" : "void()",
          "endline" : 684,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "line" : 686,
        "char" : 10,
        "name" : "writeBlock",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "type",
          "type" : "TracePoint"
         }
        ],
        "members" : [
         {
          "name" : "writeBlock",
          "kind" : "function",
          "line" : 686,
          "char" : 10,
          "type" : "void()",
          "endline" : 712,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "line" : 714,
        "char" : 10,
        "name" : "writeBlock",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "type",
          "type" : "id_t"
         }
        ],
        "members" : [
         {
          "name" : "writeBlock",
          "kind" : "function",
          "line" : 714,
          "char" : 10,
          "type" : "void()",
          "endline" : 734,
          "endchar" : 5
         }
        ]
       }
      ]
     }
    ]
   },
   {
    "name" : "InsertionDbIndex",
    "kind" : "struct",
    "protection" : "private",
    "line" : 738,
    "char" : 9,
    "members" : [
     {
      "name" : "LocalAlignment",
      "kind" : "alias",
      "protection" : "public",
      "line" : 740,
      "char" : 5,
      "deco" : "S7dentist6common10alignments4base14AlignmentChain14LocalAlignment",
      "originalType" : "AlignmentChain.LocalAlignment"
     },
     {
      "name" : "TracePoint",
      "kind" : "alias",
      "protection" : "public",
      "line" : 741,
      "char" : 5,
      "deco" : "S7dentist6common10alignments4base10TracePoint",
      "originalType" : "LocalAlignment.TracePoint"
     },
     {
      "name" : "DbIndex!()",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 743,
      "char" : 5
     },
     {
      "kind" : "template",
      "protection" : "private",
      "line" : 745,
      "char" : 20,
      "name" : "NextType",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "NextType",
        "kind" : "alias",
        "line" : 748,
        "char" : 13,
        "type" : "CompressedBaseQuad"
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "private",
      "line" : 761,
      "char" : 20,
      "name" : "fieldPtr",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "fieldPtr",
        "kind" : "alias",
        "line" : 764,
        "char" : 13,
        "type" : "insertionsPtr"
       }
      ]
     },
     {
      "name" : "insertionsPtr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 779,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "compressedBaseQuadsPtr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 780,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 8
     },
     {
      "name" : "overlapsPtr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 781,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 16
     },
     {
      "name" : "localAlignmentsPtr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 782,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 24
     },
     {
      "name" : "tracePointsPtr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 783,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 32
     },
     {
      "name" : "readIdsPtr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 784,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 40
     },
     {
      "name" : "eofPtr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 785,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 48
     },
     {
      "name" : "insertions",
      "kind" : "alias",
      "protection" : "public",
      "line" : 787,
      "char" : 15,
      "originalType" : "arrayStorage!Insertion"
     },
     {
      "name" : "compressedBaseQuads",
      "kind" : "alias",
      "protection" : "public",
      "line" : 788,
      "char" : 15,
      "originalType" : "arrayStorage!CompressedBaseQuad"
     },
     {
      "name" : "overlaps",
      "kind" : "alias",
      "protection" : "public",
      "line" : 789,
      "char" : 15,
      "originalType" : "arrayStorage!SeededAlignment"
     },
     {
      "name" : "localAlignments",
      "kind" : "alias",
      "protection" : "public",
      "line" : 790,
      "char" : 15,
      "originalType" : "arrayStorage!LocalAlignment"
     },
     {
      "name" : "tracePoints",
      "kind" : "alias",
      "protection" : "public",
      "line" : 791,
      "char" : 15,
      "originalType" : "arrayStorage!TracePoint"
     },
     {
      "name" : "readIds",
      "kind" : "alias",
      "protection" : "public",
      "line" : 792,
      "char" : 15,
      "originalType" : "arrayStorage!id_t"
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 794,
      "char" : 29,
      "name" : "from",
      "parameters" : [
       {
        "name" : "R",
        "kind" : "type"
       }
      ],
      "constraint" : "isInputRange!R && hasLength!R && is(ElementType!R : const(Insertion))",
      "members" : [
       {
        "name" : "from",
        "kind" : "function",
        "line" : 794,
        "char" : 29,
        "type" : "pure nothrow InsertionDbIndex(R insertions)",
        "parameters" : [
         {
          "name" : "insertions",
          "type" : "R"
         }
        ],
        "endline" : 830,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L832_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 832,
      "char" : 5,
      "endline" : 856,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L858_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 858,
    "char" : 1,
    "endline" : 960,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 960,
    "char" : 9,
    "name" : "StorageType",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "StorageType",
      "kind" : "alias",
      "line" : 963,
      "char" : 9,
      "type" : "InsertionStorage"
     }
    ]
   },
   {
    "name" : "InsertionStorage",
    "kind" : "struct",
    "protection" : "private",
    "line" : 987,
    "char" : 9,
    "members" : [
     {
      "name" : "start",
      "kind" : "variable",
      "protection" : "public",
      "line" : 989,
      "char" : 16,
      "deco" : "S3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
      "originalType" : "ContigNode",
      "offset" : 0
     },
     {
      "name" : "end",
      "kind" : "variable",
      "protection" : "public",
      "line" : 990,
      "char" : 16,
      "deco" : "S3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
      "originalType" : "ContigNode",
      "offset" : 16
     },
     {
      "name" : "baseOffset",
      "kind" : "variable",
      "protection" : "public",
      "line" : 991,
      "char" : 11,
      "deco" : "h",
      "offset" : 32
     },
     {
      "name" : "sequenceLength",
      "kind" : "variable",
      "protection" : "public",
      "line" : 992,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 40
     },
     {
      "name" : "sequence",
      "kind" : "variable",
      "protection" : "public",
      "line" : 993,
      "char" : 40,
      "deco" : "S7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBhQBr18CompressedBaseQuadZQBx",
      "originalType" : "StorageType!(CompressedBaseQuad[])",
      "offset" : 48
     },
     {
      "name" : "contigLength",
      "kind" : "variable",
      "protection" : "public",
      "line" : 994,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 64
     },
     {
      "name" : "overlaps",
      "kind" : "variable",
      "protection" : "public",
      "line" : 995,
      "char" : 37,
      "deco" : "S7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh11insertiondb22SeededAlignmentStorageZQCl",
      "originalType" : "StorageType!(SeededAlignment[])",
      "offset" : 72
     },
     {
      "name" : "readIds",
      "kind" : "variable",
      "protection" : "public",
      "line" : 996,
      "char" : 26,
      "deco" : "S7dentist6common5binioQn__T12ArrayStorageTkZQr",
      "originalType" : "StorageType!(id_t[])",
      "offset" : 88
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 987,
      "char" : 9,
      "deco" : "FNaNbNcNiNjNfS7dentist6common5binio11insertiondb16InsertionStorageZQCc",
      "originalType" : "ref InsertionStorage(InsertionStorage p) return",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S7dentist6common5binio11insertiondb16InsertionStorage"
       }
      ]
     }
    ]
   },
   {
    "name" : "SeededAlignmentStorage",
    "kind" : "struct",
    "protection" : "private",
    "line" : 1000,
    "char" : 9,
    "members" : [
     {
      "name" : "LocalAlignment",
      "kind" : "alias",
      "protection" : "public",
      "line" : 1002,
      "char" : 5,
      "deco" : "S7dentist6common10alignments4base14AlignmentChain14LocalAlignment",
      "originalType" : "AlignmentChain.LocalAlignment"
     },
     {
      "name" : "id",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1004,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "contigAId",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1005,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 8
     },
     {
      "name" : "contigALength",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1006,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 12
     },
     {
      "name" : "contigBId",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1007,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 16
     },
     {
      "name" : "contigBLength",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1008,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 20
     },
     {
      "name" : "flags",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1009,
      "char" : 20,
      "deco" : "S3std8typecons__T8BitFlagsTE7dentist6common10alignments4base4FlagVEQCoQCn__TQqVAyaa6_756e73616665ZQBmi0ZQDj",
      "originalType" : "AlignmentFlags",
      "offset" : 24
     },
     {
      "name" : "localAlignments",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1010,
      "char" : 36,
      "deco" : "S7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh11insertiondb21LocalAlignmentStorageZQCk",
      "originalType" : "StorageType!(LocalAlignment[])",
      "offset" : 32
     },
     {
      "name" : "tracePointDistance",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1011,
      "char" : 19,
      "deco" : "t",
      "originalType" : "trace_point_t",
      "offset" : 48
     },
     {
      "name" : "seed",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1012,
      "char" : 27,
      "deco" : "E7dentist6common10alignments4base21AlignmentLocationSeed",
      "offset" : 50
     }
    ]
   },
   {
    "name" : "LocalAlignmentStorage",
    "kind" : "struct",
    "protection" : "private",
    "line" : 1016,
    "char" : 9,
    "members" : [
     {
      "name" : "contigABegin",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1018,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 0
     },
     {
      "name" : "contigAEnd",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1019,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 4
     },
     {
      "name" : "contigBBegin",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1020,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 8
     },
     {
      "name" : "contigBEnd",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1021,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 12
     },
     {
      "name" : "numDiffs",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1022,
      "char" : 12,
      "deco" : "k",
      "originalType" : "diff_t",
      "offset" : 16
     },
     {
      "name" : "tracePoints",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1023,
      "char" : 32,
      "deco" : "S7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh11insertiondb17TracePointStorageZQCg",
      "originalType" : "StorageType!(TracePoint[])",
      "offset" : 24
     }
    ]
   },
   {
    "name" : "TracePointStorage",
    "kind" : "struct",
    "protection" : "private",
    "line" : 1027,
    "char" : 9,
    "members" : [
     {
      "name" : "numDiffs",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1029,
      "char" : 19,
      "deco" : "t",
      "originalType" : "trace_point_t",
      "offset" : 0
     },
     {
      "name" : "numBasePairs",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1030,
      "char" : 19,
      "deco" : "t",
      "originalType" : "trace_point_t",
      "offset" : 2
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.common.binio",
  "kind" : "module",
  "file" : "source/dentist/common/binio/package.d",
  "comment" : "    This package contains methods to handle the proprietary binary data\n    containers used to store information between stages of the algorithm.\n    Currently, there are two containers:\n\n    $(UL\n        $(LI `dentist.common.binio.pileupdb` for pile ups,\n            i.e. candidate sets of reads for gap closing)\n        $(LI `dentist.common.binio.insertiondb` for insertions,\n            i.e. consensus sequence and splicing information generated\n            from pile ups)\n    )\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.common.binio.common",
    "kind" : "import",
    "line" : 22,
    "char" : 15
   },
   {
    "name" : "dentist.common.binio.insertiondb",
    "kind" : "import",
    "line" : 23,
    "char" : 15
   },
   {
    "name" : "dentist.common.binio.pileupdb",
    "kind" : "import",
    "line" : 24,
    "char" : 15
   }
  ]
 },
 {
  "name" : "dentist.common.binio.pileupdb",
  "kind" : "module",
  "file" : "source/dentist/common/binio/pileupdb.d",
  "comment" : "    This package contains methods to handle the proprietary binary data\n    container for `PileUp`s.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "core.exception",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AssertError"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "AlignmentFlags" : "Flags"
    },
    "selective" : [
     "AlignmentChain",
     "AlignmentLocationSeed",
     "Contig",
     "coord_t",
     "diff_t",
     "id_t",
     "PileUp",
     "ReadAlignment",
     "SeededAlignment",
     "trace_point_t"
    ]
   },
   {
    "name" : "dentist.common.binio.common",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ArrayStorage",
     "DbIndex",
     "lockIfPossible",
     "readRecord",
     "readRecordAt",
     "readRecords"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 32,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "minimallyInitializedArray"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 33,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 34,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assertThrown",
     "enforce",
     "ErrnoException"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 35,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 36,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "tuple",
     "Tuple"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "File"
    ]
   },
   {
    "name" : "PileUpDbException",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Thrown if an error is encountered.\n",
    "line" : 49,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 51,
      "char" : 30,
      "deco" : "FNaNbNiNfAyaQdmC6object9ThrowableZC7dentist6common5binio8pileupdb17PileUpDbException",
      "originalType" : "pure nothrow @nogc @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
      "parameters" : [
       {
        "name" : "msg",
        "deco" : "Aya"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "m",
        "default" : "cast(ulong)__LINE__"
       },
       {
        "name" : "nextInChain",
        "deco" : "C6object9Throwable",
        "default" : "null"
       }
      ],
      "endline" : 55,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "PileUpDb",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Structure to access pile ups stored in a binary file.\n",
    "line" : 60,
    "char" : 1,
    "members" : [
     {
      "name" : "LocalAlignment",
      "kind" : "alias",
      "protection" : "private",
      "line" : 62,
      "char" : 13,
      "deco" : "S7dentist6common10alignments4base14AlignmentChain14LocalAlignment",
      "originalType" : "AlignmentChain.LocalAlignment"
     },
     {
      "name" : "TracePoint",
      "kind" : "alias",
      "protection" : "private",
      "line" : 63,
      "char" : 13,
      "deco" : "S7dentist6common10alignments4base10TracePoint",
      "originalType" : "LocalAlignment.TracePoint"
     },
     {
      "name" : "DbSlices",
      "kind" : "alias",
      "protection" : "private",
      "line" : 64,
      "char" : 13,
      "deco" : "S3std8typecons__T5TupleTS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBhQBr__TQBfTSQCkQCfQCbQCl__TQBzTSQDeQCzQCv8pileupdb22SeededAlignmentStorageZQDvZQDzZQEdVAyaa7_70696c65557073TQEnVQza14_72656164416c69676e6d656e7473TQFgVQCma16_736565646564416c69676e6d656e7473TSQJiQJdQIzQJj__TQIxTSQKcQJxQJtQGy21LocalAlignmentStorageZQKmVQGja15_6c6f63616c416c69676e6d656e7473TSQNdQMyQMuQNe__TQMsTSQNxQNsQNoQKt17TracePointStorageZQOdVQKaa11_7472616365506f696e7473ZQQt",
      "originalType" : "Tuple!(ArrayStorage!(StorageType!PileUp), \"pileUps\", ArrayStorage!(StorageType!ReadAlignment), \"readAlignments\", ArrayStorage!(StorageType!SeededAlignment), \"seededAlignments\", ArrayStorage!(StorageType!LocalAlignment), \"localAlignments\", ArrayStorage!(StorageType!TracePoint), \"tracePoints\")"
     },
     {
      "name" : "pileUpDb",
      "kind" : "variable",
      "protection" : "private",
      "line" : 72,
      "char" : 18,
      "deco" : "S3std5stdio4File",
      "offset" : 0
     },
     {
      "name" : "dbIndex",
      "kind" : "variable",
      "protection" : "private",
      "line" : 73,
      "char" : 27,
      "deco" : "S7dentist6common5binio8pileupdb13PileUpDbIndex",
      "offset" : 24
     },
     {
      "name" : "dbSlices",
      "kind" : "variable",
      "protection" : "private",
      "line" : 74,
      "char" : 22,
      "deco" : "S3std8typecons__T5TupleTS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBhQBr__TQBfTSQCkQCfQCbQCl__TQBzTSQDeQCzQCv8pileupdb22SeededAlignmentStorageZQDvZQDzZQEdVAyaa7_70696c65557073TQEnVQza14_72656164416c69676e6d656e7473TQFgVQCma16_736565646564416c69676e6d656e7473TSQJiQJdQIzQJj__TQIxTSQKcQJxQJtQGy21LocalAlignmentStorageZQKmVQGja15_6c6f63616c416c69676e6d656e7473TSQNdQMyQMuQNe__TQMsTSQNxQNsQNoQKt17TracePointStorageZQOdVQKaa11_7472616365506f696e7473ZQQt",
      "originalType" : "DbSlices",
      "offset" : 72
     },
     {
      "name" : "pileUps",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return the respective `ArrayStorage`s. This is used to report details\nof the DB in command `show-pile-ups`.\n\nSee_also: `dentist.commands.showPileUps`,\n`dentist.common.binio.common.ArrayStorage`\n",
      "line" : 82,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBhQBr__TQBfTSQCkQCfQCbQCl__TQBzTSQDeQCzQCv8pileupdb22SeededAlignmentStorageZQDvZQDzZQEd",
      "originalType" : "const pure nothrow @property ()",
      "endline" : 85,
      "endchar" : 5
     },
     {
      "name" : "readAlignments",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 89,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBhQBr__TQBfTSQCkQCfQCb8pileupdb22SeededAlignmentStorageZQDbZQDf",
      "originalType" : "const pure nothrow @property ()",
      "endline" : 92,
      "endchar" : 5
     },
     {
      "name" : "seededAlignments",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 96,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh8pileupdb22SeededAlignmentStorageZQCh",
      "originalType" : "const pure nothrow @property ()",
      "endline" : 99,
      "endchar" : 5
     },
     {
      "name" : "localAlignments",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 103,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh8pileupdb21LocalAlignmentStorageZQCg",
      "originalType" : "const pure nothrow @property ()",
      "endline" : 106,
      "endchar" : 5
     },
     {
      "name" : "tracePoints",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 110,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNaNbNdNiNfZS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh8pileupdb17TracePointStorageZQCc",
      "originalType" : "const pure nothrow @property ()",
      "endline" : 113,
      "endchar" : 5
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Create a `PileUpDb` from `dbFile`. A lock is placed on `dbFile`\nif possible.\n\nSee_also: `dentist.common.binio.common.lockIfPossible`\n",
      "line" : 120,
      "char" : 21,
      "storageClass" : [
       "static"
      ],
      "deco" : "FIAyaZS7dentist6common5binio8pileupdb8PileUpDb",
      "parameters" : [
       {
        "name" : "dbFile",
        "deco" : "xAya",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 129,
      "endchar" : 5
     },
     {
      "name" : "releaseDb",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Closes the underlying file.\n",
      "line" : 133,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 136,
      "endchar" : 5
     },
     {
      "name" : "opIndex",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Read the entire DB at once.\n",
      "line" : 140,
      "char" : 14,
      "deco" : "FZAAS7dentist6common10alignments4base13ReadAlignment",
      "originalType" : "PileUp[]()",
      "endline" : 145,
      "endchar" : 5
     },
     {
      "name" : "opIndex",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Read `PileUp` at index `i`.\n\nThrows: `InsertionDbException` if `i` is out of bounds.\n",
      "line" : 151,
      "char" : 12,
      "deco" : "FmZAS7dentist6common10alignments4base13ReadAlignment",
      "originalType" : "PileUp(size_t i)",
      "parameters" : [
       {
        "name" : "i",
        "deco" : "m"
       }
      ],
      "endline" : 161,
      "endchar" : 5
     },
     {
      "name" : "opIndex",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Read a slice of `PileUp`s.\n\nThrows: `InsertionDbException` if `slice` is out of bounds.\n",
      "line" : 167,
      "char" : 14,
      "deco" : "FG2mZAAS7dentist6common10alignments4base13ReadAlignment",
      "originalType" : "PileUp[](size_t[2] slice)",
      "parameters" : [
       {
        "name" : "slice",
        "deco" : "G2m"
       }
      ],
      "endline" : 179,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 182,
      "char" : 15,
      "name" : "opSlice",
      "parameters" : [
       {
        "name" : "dim",
        "kind" : "value",
        "deco" : "m"
       }
      ],
      "constraint" : "dim == 0",
      "members" : [
       {
        "name" : "opSlice",
        "kind" : "function",
        "line" : 182,
        "char" : 15,
        "type" : "size_t[2](size_t from, size_t to)",
        "parameters" : [
         {
          "name" : "from",
          "type" : "size_t"
         },
         {
          "name" : "to",
          "type" : "size_t"
         }
        ],
        "endline" : 188,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "length",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return the number of pile ups in this DB.\n",
      "line" : 192,
      "char" : 22,
      "deco" : "FNdZm",
      "originalType" : "@property size_t()",
      "endline" : 197,
      "endchar" : 5
     },
     {
      "name" : "opDollar",
      "kind" : "alias",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 200,
      "char" : 5,
      "originalType" : "length"
     },
     {
      "name" : "ensureDbIndex",
      "kind" : "function",
      "protection" : "private",
      "line" : 203,
      "char" : 18,
      "deco" : "FZv",
      "endline" : 209,
      "endchar" : 5
     },
     {
      "name" : "readSlice",
      "kind" : "function",
      "protection" : "private",
      "line" : 212,
      "char" : 22,
      "deco" : "FmmZAAS7dentist6common10alignments4base13ReadAlignment",
      "originalType" : "PileUp[](size_t from, size_t to)",
      "parameters" : [
       {
        "name" : "from",
        "deco" : "m"
       },
       {
        "name" : "to",
        "deco" : "m"
       }
      ],
      "endline" : 238,
      "endchar" : 5
     },
     {
      "name" : "getDbSlices",
      "kind" : "function",
      "protection" : "private",
      "line" : 241,
      "char" : 22,
      "deco" : "FmmZS3std8typecons__T5TupleTS7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBhQBr__TQBfTSQCkQCfQCbQCl__TQBzTSQDeQCzQCv8pileupdb22SeededAlignmentStorageZQDvZQDzZQEdVAyaa7_70696c65557073TQEnVQza14_72656164416c69676e6d656e7473TQFgVQCma16_736565646564416c69676e6d656e7473TSQJiQJdQIzQJj__TQIxTSQKcQJxQJtQGy21LocalAlignmentStorageZQKmVQGja15_6c6f63616c416c69676e6d656e7473TSQNdQMyQMuQNe__TQMsTSQNxQNsQNoQKt17TracePointStorageZQOdVQKaa11_7472616365506f696e7473ZQQt",
      "originalType" : "DbSlices(size_t from, size_t to)",
      "parameters" : [
       {
        "name" : "from",
        "deco" : "m"
       },
       {
        "name" : "to",
        "deco" : "m"
       }
      ],
      "endline" : 280,
      "endchar" : 5
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "private",
      "line" : 283,
      "char" : 18,
      "deco" : "FKAAS7dentist6common10alignments4base13ReadAlignmentQBxZv",
      "originalType" : "void(ref PileUp[] pileUps, ReadAlignment[] readAlignments)",
      "parameters" : [
       {
        "name" : "pileUps",
        "deco" : "AAS7dentist6common10alignments4base13ReadAlignment",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "readAlignments",
        "deco" : "AS7dentist6common10alignments4base13ReadAlignment"
       }
      ],
      "endline" : 298,
      "endchar" : 5
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "private",
      "line" : 301,
      "char" : 18,
      "deco" : "FKAS7dentist6common10alignments4base15SeededAlignmentASQBzQBuQBqQBh14AlignmentChain14LocalAlignmentZv",
      "originalType" : "void(ref SeededAlignment[] seededAlignments, AlignmentChain.LocalAlignment[] localAlignments)",
      "parameters" : [
       {
        "name" : "seededAlignments",
        "deco" : "AS7dentist6common10alignments4base15SeededAlignment",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "localAlignments",
        "deco" : "AS7dentist6common10alignments4base14AlignmentChain14LocalAlignment"
       }
      ],
      "endline" : 335,
      "endchar" : 5
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "private",
      "line" : 338,
      "char" : 18,
      "deco" : "FKAS7dentist6common10alignments4base13ReadAlignmentASQBxQBsQBoQBf15SeededAlignmentZv",
      "parameters" : [
       {
        "name" : "readAlignments",
        "deco" : "AS7dentist6common10alignments4base13ReadAlignment",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "seededAlignments",
        "deco" : "AS7dentist6common10alignments4base15SeededAlignment"
       }
      ],
      "endline" : 354,
      "endchar" : 5
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "private",
      "line" : 357,
      "char" : 18,
      "deco" : "FKAS7dentist6common10alignments4base14AlignmentChain14LocalAlignmentASQCoQCjQCfQBw10TracePointZv",
      "originalType" : "void(ref AlignmentChain.LocalAlignment[] localAlignments, AlignmentChain.LocalAlignment.TracePoint[] tracePoints)",
      "parameters" : [
       {
        "name" : "localAlignments",
        "deco" : "AS7dentist6common10alignments4base14AlignmentChain14LocalAlignment",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "tracePoints",
        "deco" : "AS7dentist6common10alignments4base10TracePoint"
       }
      ],
      "endline" : 387,
      "endchar" : 5
     },
     {
      "name" : "parse",
      "kind" : "function",
      "protection" : "private",
      "line" : 390,
      "char" : 18,
      "deco" : "FKAS7dentist6common10alignments4base10TracePointZv",
      "originalType" : "void(ref AlignmentChain.LocalAlignment.TracePoint[] tracePoints)",
      "parameters" : [
       {
        "name" : "tracePoints",
        "deco" : "AS7dentist6common10alignments4base10TracePoint",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 398,
      "endchar" : 5
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 60,
      "char" : 1,
      "deco" : "FNeZv"
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 60,
      "char" : 1,
      "deco" : "FNcNjS7dentist6common5binio8pileupdb8PileUpDbZQBp",
      "originalType" : "ref PileUpDb(PileUpDb p) return",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S7dentist6common5binio8pileupdb8PileUpDb"
       }
      ]
     }
    ]
   },
   {
    "name" : "writePileUpsDb",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Write `pileUps` to binary `dbFile`. A lock is placed on the file\nif possible.\n\nSee_also: `dentist.common.binio.common.lockIfPossible`\n",
    "line" : 405,
    "char" : 6,
    "deco" : "FIAAS7dentist6common10alignments4base13ReadAlignmentIAyaZv",
    "originalType" : "void(in PileUp[] pileUps, in string dbFile)",
    "parameters" : [
     {
      "name" : "pileUps",
      "deco" : "xAAS7dentist6common10alignments4base13ReadAlignment",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 411,
    "endchar" : 1
   },
   {
    "name" : "writePileUpsDb",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 414,
    "char" : 6,
    "deco" : "FIAAS7dentist6common10alignments4base13ReadAlignmentS3std5stdio4FileZv",
    "originalType" : "void(in PileUp[] pileUps, File pileUpDb)",
    "parameters" : [
     {
      "name" : "pileUps",
      "deco" : "xAAS7dentist6common10alignments4base13ReadAlignment",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "pileUpDb",
      "deco" : "S3std5stdio4File"
     }
    ],
    "endline" : 428,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L430_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 430,
    "char" : 1,
    "endline" : 467,
    "endchar" : 1
   },
   {
    "name" : "buildPileUpDbIndex",
    "kind" : "function",
    "protection" : "private",
    "line" : 467,
    "char" : 23,
    "deco" : "FNaNbIAAS7dentist6common10alignments4base13ReadAlignmentZSQBxQBs5binio8pileupdb13PileUpDbIndex",
    "originalType" : "pure nothrow PileUpDbIndex(in PileUp[] pileUps)",
    "parameters" : [
     {
      "name" : "pileUps",
      "deco" : "xAAS7dentist6common10alignments4base13ReadAlignment",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 500,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L502_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 502,
    "char" : 1,
    "endline" : 529,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 529,
    "char" : 14,
    "name" : "writePileUpsDbBlock",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "is(T == PileUp)",
    "members" : [
     {
      "name" : "writePileUpsDbBlock",
      "kind" : "function",
      "line" : 529,
      "char" : 14,
      "type" : "void(ref File pileUpDb, in PileUp[] pileUps, in PileUpDbIndex dbIndex)",
      "parameters" : [
       {
        "name" : "pileUpDb",
        "type" : "File",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "pileUps",
        "type" : "PileUp[]",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "dbIndex",
        "type" : "PileUpDbIndex",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 553,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 556,
    "char" : 14,
    "name" : "writePileUpsDbBlock",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "is(T == ReadAlignment)",
    "members" : [
     {
      "name" : "writePileUpsDbBlock",
      "kind" : "function",
      "line" : 556,
      "char" : 14,
      "type" : "void(ref File pileUpDb, in PileUp[] pileUps, in PileUpDbIndex dbIndex)",
      "parameters" : [
       {
        "name" : "pileUpDb",
        "type" : "File",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "pileUps",
        "type" : "PileUp[]",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "dbIndex",
        "type" : "PileUpDbIndex",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 583,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 586,
    "char" : 14,
    "name" : "writePileUpsDbBlock",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "is(T == SeededAlignment)",
    "members" : [
     {
      "name" : "writePileUpsDbBlock",
      "kind" : "function",
      "line" : 586,
      "char" : 14,
      "type" : "void(ref File pileUpDb, in PileUp[] pileUps, in PileUpDbIndex dbIndex)",
      "parameters" : [
       {
        "name" : "pileUpDb",
        "type" : "File",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "pileUps",
        "type" : "PileUp[]",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "dbIndex",
        "type" : "PileUpDbIndex",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 628,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 631,
    "char" : 14,
    "name" : "writePileUpsDbBlock",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "is(T == AlignmentChain.LocalAlignment)",
    "members" : [
     {
      "name" : "writePileUpsDbBlock",
      "kind" : "function",
      "line" : 631,
      "char" : 14,
      "type" : "void(ref File pileUpDb, in PileUp[] pileUps, in PileUpDbIndex dbIndex)",
      "parameters" : [
       {
        "name" : "pileUpDb",
        "type" : "File",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "pileUps",
        "type" : "PileUp[]",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "dbIndex",
        "type" : "PileUpDbIndex",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 674,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 677,
    "char" : 14,
    "name" : "writePileUpsDbBlock",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "is(T == AlignmentChain.LocalAlignment.TracePoint)",
    "members" : [
     {
      "name" : "writePileUpsDbBlock",
      "kind" : "function",
      "line" : 677,
      "char" : 14,
      "type" : "void(ref File pileUpDb, in PileUp[] pileUps, in PileUpDbIndex dbIndex)",
      "parameters" : [
       {
        "name" : "pileUpDb",
        "type" : "File",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "pileUps",
        "type" : "PileUp[]",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "dbIndex",
        "type" : "PileUpDbIndex",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 707,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "PileUpDbIndex",
    "kind" : "struct",
    "protection" : "private",
    "line" : 710,
    "char" : 9,
    "members" : [
     {
      "name" : "DbIndex!()",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 712,
      "char" : 5
     },
     {
      "kind" : "template",
      "protection" : "private",
      "line" : 714,
      "char" : 20,
      "name" : "NextType",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "NextType",
        "kind" : "alias",
        "line" : 717,
        "char" : 13,
        "type" : "ReadAlignment"
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "private",
      "line" : 728,
      "char" : 20,
      "name" : "fieldPtr",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "fieldPtr",
        "kind" : "alias",
        "line" : 731,
        "char" : 13,
        "type" : "pileUpsPtr"
       }
      ]
     },
     {
      "name" : "pileUpsPtr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 744,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "readAlignmentsPtr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 745,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 8
     },
     {
      "name" : "seededAlignmentsPtr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 746,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 16
     },
     {
      "name" : "localAlignmentsPtr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 747,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 24
     },
     {
      "name" : "tracePointsPtr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 748,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 32
     },
     {
      "name" : "eofPtr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 749,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 40
     },
     {
      "name" : "pileUps",
      "kind" : "alias",
      "protection" : "public",
      "line" : 751,
      "char" : 15,
      "originalType" : "arrayStorage!PileUp"
     },
     {
      "name" : "readAlignments",
      "kind" : "alias",
      "protection" : "public",
      "line" : 752,
      "char" : 15,
      "originalType" : "arrayStorage!ReadAlignment"
     },
     {
      "name" : "seededAlignments",
      "kind" : "alias",
      "protection" : "public",
      "line" : 753,
      "char" : 15,
      "originalType" : "arrayStorage!SeededAlignment"
     },
     {
      "name" : "localAlignments",
      "kind" : "alias",
      "protection" : "public",
      "line" : 754,
      "char" : 15,
      "originalType" : "arrayStorage!(AlignmentChain.LocalAlignment)"
     },
     {
      "name" : "tracePoints",
      "kind" : "alias",
      "protection" : "public",
      "line" : 755,
      "char" : 15,
      "originalType" : "arrayStorage!(AlignmentChain.LocalAlignment.TracePoint)"
     }
    ]
   },
   {
    "name" : "__unittest_L758_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 758,
    "char" : 1,
    "endline" : 845,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 845,
    "char" : 9,
    "name" : "StorageType",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "StorageType",
      "kind" : "alias",
      "line" : 848,
      "char" : 9,
      "type" : "ArrayStorage!(StorageType!ReadAlignment)"
     }
    ]
   },
   {
    "name" : "SeededAlignmentStorage",
    "kind" : "struct",
    "protection" : "private",
    "line" : 864,
    "char" : 9,
    "members" : [
     {
      "name" : "LocalAlignment",
      "kind" : "alias",
      "protection" : "public",
      "line" : 866,
      "char" : 5,
      "deco" : "S7dentist6common10alignments4base14AlignmentChain14LocalAlignment",
      "originalType" : "AlignmentChain.LocalAlignment"
     },
     {
      "name" : "id",
      "kind" : "variable",
      "protection" : "public",
      "line" : 868,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "contigAId",
      "kind" : "variable",
      "protection" : "public",
      "line" : 869,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 8
     },
     {
      "name" : "contigALength",
      "kind" : "variable",
      "protection" : "public",
      "line" : 870,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 12
     },
     {
      "name" : "contigBId",
      "kind" : "variable",
      "protection" : "public",
      "line" : 871,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 16
     },
     {
      "name" : "contigBLength",
      "kind" : "variable",
      "protection" : "public",
      "line" : 872,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 20
     },
     {
      "name" : "flags",
      "kind" : "variable",
      "protection" : "public",
      "line" : 873,
      "char" : 20,
      "deco" : "S3std8typecons__T8BitFlagsTE7dentist6common10alignments4base4FlagVEQCoQCn__TQqVAyaa6_756e73616665ZQBmi0ZQDj",
      "originalType" : "AlignmentFlags",
      "offset" : 24
     },
     {
      "name" : "localAlignments",
      "kind" : "variable",
      "protection" : "public",
      "line" : 874,
      "char" : 36,
      "deco" : "S7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh8pileupdb21LocalAlignmentStorageZQCg",
      "originalType" : "StorageType!(LocalAlignment[])",
      "offset" : 32
     },
     {
      "name" : "tracePointDistance",
      "kind" : "variable",
      "protection" : "public",
      "line" : 875,
      "char" : 19,
      "deco" : "t",
      "originalType" : "trace_point_t",
      "offset" : 48
     },
     {
      "name" : "seed",
      "kind" : "variable",
      "protection" : "public",
      "line" : 876,
      "char" : 27,
      "deco" : "E7dentist6common10alignments4base21AlignmentLocationSeed",
      "offset" : 50
     }
    ]
   },
   {
    "name" : "LocalAlignmentStorage",
    "kind" : "struct",
    "protection" : "private",
    "line" : 880,
    "char" : 9,
    "members" : [
     {
      "name" : "TracePoint",
      "kind" : "alias",
      "protection" : "public",
      "line" : 882,
      "char" : 5,
      "deco" : "S7dentist6common10alignments4base10TracePoint",
      "originalType" : "AlignmentChain.LocalAlignment.TracePoint"
     },
     {
      "name" : "contigABegin",
      "kind" : "variable",
      "protection" : "public",
      "line" : 884,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 0
     },
     {
      "name" : "contigAEnd",
      "kind" : "variable",
      "protection" : "public",
      "line" : 885,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 4
     },
     {
      "name" : "contigBBegin",
      "kind" : "variable",
      "protection" : "public",
      "line" : 886,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 8
     },
     {
      "name" : "contigBEnd",
      "kind" : "variable",
      "protection" : "public",
      "line" : 887,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 12
     },
     {
      "name" : "numDiffs",
      "kind" : "variable",
      "protection" : "public",
      "line" : 888,
      "char" : 12,
      "deco" : "k",
      "originalType" : "diff_t",
      "offset" : 16
     },
     {
      "name" : "tracePoints",
      "kind" : "variable",
      "protection" : "public",
      "line" : 889,
      "char" : 32,
      "deco" : "S7dentist6common5binioQn__T12ArrayStorageTSQBqQBlQBh8pileupdb17TracePointStorageZQCc",
      "originalType" : "StorageType!(TracePoint[])",
      "offset" : 24
     }
    ]
   },
   {
    "name" : "TracePointStorage",
    "kind" : "struct",
    "protection" : "private",
    "line" : 893,
    "char" : 9,
    "members" : [
     {
      "name" : "numDiffs",
      "kind" : "variable",
      "protection" : "public",
      "line" : 895,
      "char" : 19,
      "deco" : "t",
      "originalType" : "trace_point_t",
      "offset" : 0
     },
     {
      "name" : "numBasePairs",
      "kind" : "variable",
      "protection" : "public",
      "line" : 896,
      "char" : 19,
      "deco" : "t",
      "originalType" : "trace_point_t",
      "offset" : 2
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.common.commands",
  "kind" : "module",
  "file" : "source/dentist/common/commands.d",
  "comment" : "    Enums with sub-commands of dentist. This is mostly relevant if you are\n    trying to add a new command to DENTIST.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "std.meta",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "staticMap"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isTesting",
     "testingOnly"
    ]
   },
   {
    "name" : "dentist.util.string",
    "kind" : "import",
    "line" : 16,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "dashCaseCT"
    ]
   },
   {
    "name" : "DentistCommand",
    "kind" : "enum",
    "protection" : "public",
    "file" : "source/dentist/common/commands.d-mixin-20",
    "line" : 20,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "validateConfig",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 20,
      "char" : 22
     },
     {
      "name" : "buildPartialAssembly",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 20,
      "char" : 37
     },
     {
      "name" : "findClosableGaps",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 20,
      "char" : 58
     },
     {
      "name" : "generateDazzlerOptions",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "3",
      "line" : 20,
      "char" : 75
     },
     {
      "name" : "maskRepetitiveRegions",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "4",
      "line" : 20,
      "char" : 98
     },
     {
      "name" : "propagateMask",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "5",
      "line" : 20,
      "char" : 120
     },
     {
      "name" : "filterMask",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "6",
      "line" : 20,
      "char" : 134
     },
     {
      "name" : "mergeMasks",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "7",
      "line" : 20,
      "char" : 145
     },
     {
      "name" : "showMask",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "8",
      "line" : 20,
      "char" : 156
     },
     {
      "name" : "bed2mask",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "9",
      "line" : 20,
      "char" : 165
     },
     {
      "name" : "chainLocalAlignments",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "10",
      "line" : 20,
      "char" : 174
     },
     {
      "name" : "collectPileUps",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "11",
      "line" : 20,
      "char" : 195
     },
     {
      "name" : "showPileUps",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "12",
      "line" : 20,
      "char" : 210
     },
     {
      "name" : "processPileUps",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "13",
      "line" : 20,
      "char" : 222
     },
     {
      "name" : "showInsertions",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "14",
      "line" : 20,
      "char" : 237
     },
     {
      "name" : "mergeInsertions",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "15",
      "line" : 20,
      "char" : 252
     },
     {
      "name" : "output",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "16",
      "line" : 20,
      "char" : 268
     },
     {
      "name" : "translateCoords",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "17",
      "line" : 20,
      "char" : 275
     },
     {
      "name" : "validateRegions",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "18",
      "line" : 20,
      "char" : 291
     },
     {
      "name" : "checkResults",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "19",
      "line" : 20,
      "char" : 307
     },
     {
      "name" : "checkScaffolding",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "20",
      "line" : 20,
      "char" : 320
     }
    ]
   },
   {
    "name" : "TestingCommand",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Helper for sub-commands that are only available in testing version.\n",
    "file" : "source/dentist/common/commands.d",
    "line" : 46,
    "char" : 1,
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 48,
      "char" : 14,
      "storageClass" : [
       "@disable"
      ],
      "deco" : "FNcZS7dentist6common8commands14TestingCommand",
      "originalType" : "ref ()"
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 50,
      "char" : 27,
      "name" : "opDispatch",
      "parameters" : [
       {
        "name" : "command",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "members" : [
       {
        "name" : "opDispatch",
        "kind" : "function",
        "line" : 50,
        "char" : 27,
        "type" : "pure nothrow DentistCommand()",
        "endline" : 56,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "dentistCommands",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "Tuple of dentist sub-command names.\n",
    "line" : 61,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "BAyaQdQfQhQjQlQnQpQrQtQvQxQzQBbQBeQBhQBkQBnQBqQBtQBwZ",
    "init" : "tuple(['v', 'a', 'l', 'i', 'd', 'a', 't', 'e', '-', 'c', 'o', 'n', 'f', 'i', 'g'], ['b', 'u', 'i', 'l', 'd', '-', 'p', 'a', 'r', 't', 'i', 'a', 'l', '-', 'a', 's', 's', 'e', 'm', 'b', 'l', 'y'], ['f', 'i', 'n', 'd', '-', 'c', 'l', 'o', 's', 'a', 'b', 'l', 'e', '-', 'g', 'a', 'p', 's'], ['g', 'e', 'n', 'e', 'r', 'a', 't', 'e', '-', 'd', 'a', 'z', 'z', 'l', 'e', 'r', '-', 'o', 'p', 't', 'i', 'o', 'n', 's'], ['m', 'a', 's', 'k', '-', 'r', 'e', 'p', 'e', 't', 'i', 't', 'i', 'v', 'e', '-', 'r', 'e', 'g', 'i', 'o', 'n', 's'], ['p', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'e', '-', 'm', 'a', 's', 'k'], ['f', 'i', 'l', 't', 'e', 'r', '-', 'm', 'a', 's', 'k'], ['m', 'e', 'r', 'g', 'e', '-', 'm', 'a', 's', 'k', 's'], ['s', 'h', 'o', 'w', '-', 'm', 'a', 's', 'k'], ['b', 'e', 'd', '2', 'm', 'a', 's', 'k'], ['c', 'h', 'a', 'i', 'n', '-', 'l', 'o', 'c', 'a', 'l', '-', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 's'], ['c', 'o', 'l', 'l', 'e', 'c', 't', '-', 'p', 'i', 'l', 'e', '-', 'u', 'p', 's'], ['s', 'h', 'o', 'w', '-', 'p', 'i', 'l', 'e', '-', 'u', 'p', 's'], ['p', 'r', 'o', 'c', 'e', 's', 's', '-', 'p', 'i', 'l', 'e', '-', 'u', 'p', 's'], ['s', 'h', 'o', 'w', '-', 'i', 'n', 's', 'e', 'r', 't', 'i', 'o', 'n', 's'], ['m', 'e', 'r', 'g', 'e', '-', 'i', 'n', 's', 'e', 'r', 't', 'i', 'o', 'n', 's'], ['o', 'u', 't', 'p', 'u', 't'], ['t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '-', 'c', 'o', 'o', 'r', 'd', 's'], ['v', 'a', 'l', 'i', 'd', 'a', 't', 'e', '-', 'r', 'e', 'g', 'i', 'o', 'n', 's'], ['c', 'h', 'e', 'c', 'k', '-', 'r', 'e', 's', 'u', 'l', 't', 's'], ['c', 'h', 'e', 'c', 'k', '-', 's', 'c', 'a', 'f', 'f', 'o', 'l', 'd', 'i', 'n', 'g'])"
   }
  ]
 },
 {
  "name" : "dentist.common.configfile",
  "kind" : "module",
  "file" : "source/dentist/common/configfile.d",
  "comment" : "    Validate and parse config files.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "darg",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Argument",
     "isArgumentHandler",
     "isOptionHandler",
     "Option",
     "OptionFlag"
    ]
   },
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 17,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "OptionsFor"
    ]
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "import",
    "line" : 18,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "DentistCommand",
     "dentistCommands"
    ]
   },
   {
    "name" : "dyaml",
    "kind" : "import",
    "line" : 21,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "YAMLLoader" : "Loader",
     "YAML" : "Node",
     "YAMLType" : "NodeType"
    }
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "all",
     "canFind",
     "endsWith",
     "map",
     "startsWith"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 31,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 32,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "basicExceptionCtors",
     "enforce"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 35,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 36,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isNaN"
    ]
   },
   {
    "name" : "std.meta",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Alias"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 38,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ElementType",
     "only"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 41,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 42,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "File"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 43,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "split"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 45,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "arity",
     "EnumMembers",
     "getSymbolsByUDA",
     "getUDAs",
     "isArray",
     "isAssignable",
     "isCallable",
     "isDynamicArray",
     "isFloatingPoint",
     "isIntegral",
     "isSomeString",
     "isStaticArray",
     "isUnsigned",
     "Parameters",
     "ReturnType"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 61,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "No",
     "tuple"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 62,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Json",
     "parseJson"
    ]
   },
   {
    "name" : "configDefaultKey",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "Identifier for the config object with default values.\n",
    "line" : 68,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"__default__\""
   },
   {
    "name" : "configEmptyArgument",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "Arguments with this value are assigned the config value.\n",
    "line" : 71,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"-\""
   },
   {
    "name" : "configCommentPrefix",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "Keys prefixed with this string are ignored.\n",
    "line" : 74,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"//\""
   },
   {
    "name" : "maxConfigSize",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "Maximum size of a valid config file.\n",
    "line" : 77,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "m",
    "init" : "268435456LU"
   },
   {
    "name" : "ConfigFileException",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Thrown if an error while handling config file occurs.\n",
    "line" : 81,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "protection" : "public",
      "comment" : "\n",
      "line" : 84,
      "char" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Retroactively initialize `options` from `config`.\n\nNote: Since this function has no knowledge about the creation process of\n`options` it assumes that fields are not modified if they have their\ndefault value. This means that a CLI option providing the default\nvalue of that option does NOT overrule the config value. Here is a\nsmall example:\n---\n// config,yaml:\ncollectPileUps:\nmin-spanning-reads: 42\n\n// invocation\ndentist collect-pile-ups --config=config.yaml --min-spanning-reads=3 ...\n\n// --> effectivate value of --min-spanning-reads is 42\n---\n",
    "line" : 105,
    "char" : 9,
    "name" : "retroInitFromConfig",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "retroInitFromConfig",
      "kind" : "function",
      "line" : 105,
      "char" : 9,
      "type" : "Options(ref Options options, in string configFile)",
      "parameters" : [
       {
        "name" : "options",
        "type" : "Options",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "configFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 165,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Create `Options` from `configFile`.\n",
    "line" : 169,
    "char" : 9,
    "name" : "parseConfig",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "parseConfig",
      "kind" : "function",
      "line" : 169,
      "char" : 9,
      "type" : "Options(in string configFile)",
      "parameters" : [
       {
        "name" : "configFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 203,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "validateConfigFile",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Validates the format and structure of `configFile`. These rules must be\nfulfilled:\n$(UL\n$(LI The document must contain a single object (dict type).)\n$(LI The root object may have a `__default__` key with an object as\nvalue.)\n$(LI Each key in the `__default__` object must be a valid option\n(secondary or short option names are allowed) or argument name\nfrom ANY DENTIST command. The value type must be convertible\nto the destination type.)\n$(LI The root object may have a key for each DENTIST command\n(hyphenated as used in the CLI) with an object as value.)\n$(LI Each key in the command objects must be a valid option\n(secondary or short option names are allowed) or argument name\nfrom the named DENTIST command. The value type must be convertible\nto the destination type.)\n$(LI Keys starting with two slashes (`//`) are ignored on all levels.)\n)\n\nThrows: `ConfigFileException` if config is invalid.\n",
    "line" : 226,
    "char" : 6,
    "deco" : "FIAyaZv",
    "parameters" : [
     {
      "name" : "configFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 231,
    "endchar" : 1
   },
   {
    "name" : "validateConfig",
    "kind" : "function",
    "protection" : "protected",
    "comment" : "ditto\n",
    "line" : 234,
    "char" : 16,
    "deco" : "FS4vibe4data4json4JsonZv",
    "parameters" : [
     {
      "name" : "configValues",
      "deco" : "S4vibe4data4json4Json"
     }
    ],
    "endline" : 261,
    "endchar" : 1
   },
   {
    "name" : "validateConfigDefault",
    "kind" : "function",
    "protection" : "private",
    "comment" : "Validate the `__default__` config values.\n",
    "line" : 265,
    "char" : 14,
    "deco" : "FS4vibe4data4json4JsonZv",
    "parameters" : [
     {
      "name" : "defaultConfig",
      "deco" : "S4vibe4data4json4Json"
     }
    ],
    "endline" : 324,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Validate config for `Options.commandName`.\n",
    "line" : 328,
    "char" : 6,
    "name" : "validateConfigCommand",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "validateConfigCommand",
      "kind" : "function",
      "line" : 328,
      "char" : 6,
      "type" : "void(Json commandConfig)",
      "parameters" : [
       {
        "name" : "commandConfig",
        "type" : "Json"
       }
      ],
      "endline" : 378,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "Get an array of names that can be used in a config file to reference\n`symbol`. If symbol is an argument it will split the argument name by\ncolon (`:`) and return the last part stripped off its last character\n(which should be a `>`). If symbol is an option it will return the list\nof names that were provided. Otherwise, an empty array is returned.\n",
    "line" : 386,
    "char" : 11,
    "name" : "configNamesOf",
    "parameters" : [
     {
      "name" : "symbol",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "optUDAs",
      "kind" : "alias",
      "line" : 388,
      "char" : 5,
      "type" : "getUDAs!(symbol, Option)"
     },
     {
      "name" : "argUDAs",
      "kind" : "alias",
      "line" : 389,
      "char" : 5,
      "type" : "getUDAs!(symbol, Argument)"
     },
     {
      "name" : "argName",
      "kind" : "variable",
      "line" : 392,
      "char" : 14,
      "storageClass" : [
       "enum"
      ],
      "init" : "argUDAs[0].name.split(\":\")[__dollar - 1][0..__dollar - 1]"
     },
     {
      "name" : "configNamesOf",
      "kind" : "variable",
      "line" : 396,
      "char" : 14,
      "storageClass" : [
       "enum"
      ],
      "init" : "optUDAs[0].names ~ argName"
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "Convert and assign `configValue` to `member` in `options`.\n\nConversion rules:\n$(UL\n$(LI if `member` has a zero-argument function: $(UL\n$(LI call `member` `configValue` times if `configValue` is an integer)\n$(LI call `member` once if `configValue` is `true`)\n$(LI do not call `member` if `configValue` is `false`)\n))\n$(LI if `member` has a single-argument function: $(UL\n$(LI call `member` with each value of `configValue` if\n`configValue` is a string array)\n$(LI call `member` with `configValue` if `configValue` is a string)\n))\n$(LI if `member` can be assigned to `configValue` will be converted\nto `member`'s type using `getConfigValue`)\n$(LI if none of the above applies a `ConfigFileException` will be thrown)\n)\n",
    "line" : 431,
    "char" : 16,
    "name" : "assignConfigValue",
    "parameters" : [
     {
      "name" : "member",
      "kind" : "value",
      "deco" : "Aya"
     },
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "assignConfigValue",
      "kind" : "function",
      "line" : 431,
      "char" : 16,
      "type" : "void(ref Options options, Json configValue)",
      "parameters" : [
       {
        "name" : "options",
        "type" : "Options",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "configValue",
        "type" : "Json"
       }
      ],
      "endline" : 468,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "protected",
    "comment" : "Convert `configValue` to `SymbolType`.\n\nConversion_Rules:\n\nThe rule (SymbolType ← JsonType) is picked based on `SymbolType` and the\nprovided JSON type(s) are permitted.\n\n$(UL\n$(LI `OptionFlag`|`bool` ← `bool`)\n$(LI `enum` ← `string`)\n$(LI `float`|`double`|`real` ← `int`|`float`)\n$(LI unsigned|signed integer ← `int`)\n$(LI `string` ← `string`)\n$(LI `T[]`|T[n] ← `array`: apply above rules to each member;\nfor static arrays the lengths must match)\n)\n",
    "line" : 487,
    "char" : 16,
    "name" : "getConfigValue",
    "parameters" : [
     {
      "name" : "SymbolType",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "getConfigValue",
      "kind" : "function",
      "line" : 487,
      "char" : 16,
      "storageClass" : [
       "auto"
      ],
      "type" : "(Json configValue)",
      "parameters" : [
       {
        "name" : "configValue",
        "type" : "Json"
       }
      ],
      "endline" : 540,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "parseConfigFile",
    "kind" : "function",
    "protection" : "protected",
    "comment" : "Parse `configFileName` into a `JSON` struct.\n",
    "line" : 544,
    "char" : 16,
    "deco" : "FIAyaZS4vibe4data4json4Json",
    "parameters" : [
     {
      "name" : "configFileName",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 562,
    "endchar" : 1
   },
   {
    "name" : "readConfigFile",
    "kind" : "function",
    "protection" : "protected",
    "comment" : "Read `configFileName` into a string respecting a maximum file size of\n`maxConfigSize` bytes.\n",
    "line" : 567,
    "char" : 18,
    "deco" : "FIAyaZAya",
    "parameters" : [
     {
      "name" : "configFileName",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 580,
    "endchar" : 1
   },
   {
    "name" : "toJson",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Convert `yaml` into `Json` as good as possible. Since YAML is a strict\nsuperset of JSON it not always possible BUT every valid config file\ncan be converted.\n",
    "line" : 586,
    "char" : 6,
    "deco" : "FS5dyaml4node4NodeZS4vibe4data4json4Json",
    "originalType" : "Json(YAML yaml)",
    "parameters" : [
     {
      "name" : "yaml",
      "deco" : "S5dyaml4node4Node"
     }
    ],
    "endline" : 631,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L634_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 634,
    "char" : 1,
    "endline" : 652,
    "endchar" : 1
   },
   {
    "name" : "SizeUnit",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Set of size units for `toBytes` and `fromBytes`.\n",
    "line" : 652,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "B",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 654,
      "char" : 5
     },
     {
      "name" : "KiB",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 655,
      "char" : 5
     },
     {
      "name" : "MiB",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 656,
      "char" : 5
     },
     {
      "name" : "GiB",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "3",
      "line" : 657,
      "char" : 5
     },
     {
      "name" : "TiB",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "4",
      "line" : 658,
      "char" : 5
     },
     {
      "name" : "PiB",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "5",
      "line" : 659,
      "char" : 5
     },
     {
      "name" : "EiB",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "6",
      "line" : 660,
      "char" : 5
     },
     {
      "name" : "ZiB",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "7",
      "line" : 661,
      "char" : 5
     },
     {
      "name" : "YiB",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "8",
      "line" : 662,
      "char" : 5
     }
    ]
   },
   {
    "name" : "sizeUnitBase",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "Base for size units.\n",
    "line" : 667,
    "char" : 13,
    "storageClass" : [
     "enum"
    ],
    "deco" : "m",
    "originalType" : "size_t",
    "init" : "1024LU"
   },
   {
    "name" : "toBytes",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Convert `value` with `unit` to bytes.\n",
    "line" : 671,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNaNbNiNfImIE7dentist6common10configfile8SizeUnitZm",
    "originalType" : "(in size_t value, in SizeUnit unit)",
    "parameters" : [
     {
      "name" : "value",
      "deco" : "xm",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "unit",
      "deco" : "xE7dentist6common10configfile8SizeUnit",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 674,
    "endchar" : 1
   },
   {
    "name" : "fromBytes",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Convert `bytes` to the smallest unit such that the value is between 0\nand 1.\n",
    "line" : 678,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNaNbNiNfImZS3std8typecons__T5TupleTdVAyaa5_76616c7565TE7dentist6common10configfile8SizeUnitVQCda4_756e6974ZQDb",
    "originalType" : "(in size_t bytes)",
    "parameters" : [
     {
      "name" : "bytes",
      "deco" : "xm",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 692,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.common.external",
  "kind" : "module",
  "file" : "source/dentist/common/external.d",
  "comment" : "    This package holds function for easy verification of external tools'\n    existence.\n\n    See_also: `ExternalDependency`, `externalDependencies`\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.modules",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "modules"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 14,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 15,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "joiner",
     "sort",
     "uniq"
    ]
   },
   {
    "name" : "std.meta",
    "kind" : "import",
    "line" : 19,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Filter",
     "staticMap"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 20,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "getUDAs"
    ]
   },
   {
    "name" : "ExternalDependency",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Used as a decorator to mark external dependencies. External dependencies\nare executable that are expected to be on the `PATH`.\n\nThis decorator allows for automatic checks concerning these dependencies\nat start up of the program rather than waiting for an error during\nexecution.\n",
    "line" : 29,
    "char" : 1,
    "members" : [
     {
      "name" : "executable",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Name of the executable, e.g. `LAsort`.\n",
      "line" : 32,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 0
     },
     {
      "name" : "package_",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Package name that is displayed to the user to aid installation of\nmissing dependencies, e.g. `DALIGNER`.\n",
      "line" : 36,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 16
     },
     {
      "name" : "url",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Package url/homepage that is displayed to the user to aid\ninstallation of missing dependencies, e.g.\n`https://github.com/thegenemyers/DALIGNER`.\n",
      "line" : 41,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 32
     },
     {
      "name" : "toString",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Build a human-readable string that contains all available information.\n",
      "line" : 45,
      "char" : 12,
      "deco" : "xFNaNbZAya",
      "endline" : 55,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "private",
      "line" : 58,
      "char" : 25,
      "name" : "isExternalDependency",
      "parameters" : [
       {
        "name" : "value",
        "kind" : "alias"
       }
      ],
      "members" : [
       {
        "name" : "isExternalDependency",
        "kind" : "variable",
        "line" : 58,
        "char" : 25,
        "storageClass" : [
         "enum"
        ],
        "init" : "is(typeof(value) == ExternalDependency)"
       }
      ]
     },
     {
      "name" : "__unittest_L60_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 60,
      "char" : 5,
      "endline" : 66,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L66_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 66,
      "char" : 5,
      "endline" : 76,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "comment" : "Extract external dependencies declared for `symbol`.\n",
    "line" : 80,
    "char" : 42,
    "name" : "fromSymbol",
    "parameters" : [
     {
      "name" : "symbol",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "fromSymbol",
      "kind" : "variable",
      "line" : 80,
      "char" : 42,
      "storageClass" : [
       "static",
       "enum"
      ],
      "type" : "ExternalDependency[]",
      "init" : "[Filter!(ExternalDependency.isExternalDependency, getUDAs!(symbol, ExternalDependency))]"
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "comment" : "Extract all external dependencies of all symbols in the listed `Modules`.\n",
    "line" : 87,
    "char" : 30,
    "name" : "getExternalDependencies",
    "parameters" : [
     {
      "name" : "Modules",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "getExternalDependencies",
      "kind" : "function",
      "line" : 87,
      "char" : 30,
      "type" : "ExternalDependency[]()",
      "endline" : 115,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L117_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 117,
    "char" : 1,
    "endline" : 146,
    "endchar" : 1
   },
   {
    "name" : "externalDependencies",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "All external dependencies in DENTIST. Note that the actual list depends\non the build config (`testing` or not). You can get a valid list by\ncalling `dentist -d`.\n\nSee_also: `ExternalDependency`\n",
    "line" : 146,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "AS7dentist6common8external18ExternalDependency",
    "init" : "[ExternalDependency(\"LAmerge\", \"DALIGNER\", \"https://github.com/thegenemyers/DALIGNER\"), ExternalDependency(\"daligner\", \"DALIGNER\", \"https://github.com/thegenemyers/DALIGNER\"), ExternalDependency(\"damapper\", \"DAMAPPER\", \"https://github.com/thegenemyers/DAMAPPER\"), ExternalDependency(\"DAScover\", \"DASCRUBBER\", \"https://github.com/thegenemyers/DASCRUBBER\"), ExternalDependency(\"DASqv\", \"DASCRUBBER\", \"https://github.com/thegenemyers/DASCRUBBER\"), ExternalDependency(\"DBdump\", \"DAZZ_DB\", \"https://github.com/thegenemyers/DAZZ_DB\"), ExternalDependency(\"DBdust\", \"DAZZ_DB\", \"https://github.com/thegenemyers/DAZZ_DB\"), ExternalDependency(\"DBrm\", \"DAZZ_DB\", \"https://github.com/thegenemyers/DAZZ_DB\"), ExternalDependency(\"DBshow\", \"DAZZ_DB\", \"https://github.com/thegenemyers/DAZZ_DB\"), ExternalDependency(\"DBsplit\", \"DAZZ_DB\", \"https://github.com/thegenemyers/DAZZ_DB\"), ExternalDependency(\"fasta2DAM\", \"DAZZ_DB\", \"https://github.com/thegenemyers/DAZZ_DB\"), ExternalDependency(\"fasta2DB\", \"DAZZ_DB\", \"https://github.com/thegenemyers/DAZZ_DB\"), ExternalDependency(\"stretcher\", \"EMBOSS >=6.0.0\", \"http://emboss.sourceforge.net/apps/\"), ExternalDependency(\"computeintrinsicqv\", \"daccord\", \"https://gitlab.com/german.tischler/daccord\"), ExternalDependency(\"daccord\", \"daccord\", \"https://gitlab.com/german.tischler/daccord\")]"
   }
  ]
 },
 {
  "name" : "dentist.common.insertions",
  "kind" : "module",
  "file" : "source/dentist/common/insertions.d",
  "comment" : "    Everything to handle insertions. `Insertion`s are generated by DENTIST\n    command `process-pile-ups`. They are essentially a consensus sequence\n    alongside alignment that allow precise splicing into the assembly. In\n    addition, the IDs of the reads involved in the consensus are included.\n\n    See_also: `dentist.commands.processPileUps`\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 15,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "dentistEnforce",
     "ReadInterval",
     "ReferenceInterval"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 19,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AlignmentLocationSeed",
     "coord_t",
     "id_t",
     "SeededAlignment"
    ]
   },
   {
    "name" : "dentist.common.binio",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "CompressedSequence"
    ]
   },
   {
    "name" : "dentist.common.scaffold",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ContigNode",
     "ContigPart",
     "isDefault",
     "isExtension",
     "isGap",
     "Scaffold"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 32,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 33,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "add"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 34,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "among",
     "canFind",
     "filter",
     "swap"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 39,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 40,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "tuple"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 41,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    }
   },
   {
    "name" : "InsertionInfo",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "This describes an insertion, existing contig or gap.\n\nSee_also: `Insertion`\n",
    "line" : 47,
    "char" : 1,
    "members" : [
     {
      "name" : "sequence",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "(insertions only) Consensus sequence that overlaps with the\nneighboring contigs.\n",
      "line" : 51,
      "char" : 24,
      "deco" : "S7dentist6common5binioQn18CompressedSequence",
      "offset" : 0
     },
     {
      "name" : "contigLength",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "(contigs and gaps only): the length of the object in bases.\n",
      "line" : 54,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 32
     },
     {
      "name" : "overlaps",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "(insertions and contigs only): Overlaps of the sequence with the\nneighboring contigs. This is used to decide on the quality and exact\nsplicing information in the `output` step.\n\nFor contigs, the overlaps are transferred from incident insertions\nafter the final scaffold graph has been constructed (see\n`dentist.commands.output.fixCropping`).\n",
      "line" : 63,
      "char" : 23,
      "deco" : "AS7dentist6common10alignments4base15SeededAlignment",
      "offset" : 40
     },
     {
      "name" : "readIds",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "(insertions only) Read IDs involved in creation of the consensus.\n",
      "line" : 66,
      "char" : 12,
      "deco" : "Ak",
      "originalType" : "id_t[]",
      "offset" : 56
     }
    ]
   },
   {
    "name" : "OutputScaffold",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "This is used to collect all sub-sequences (contigs, gaps, insertions)\nof the output.\n",
    "line" : 72,
    "char" : 1,
    "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa",
    "originalType" : "Scaffold!InsertionInfo"
   },
   {
    "name" : "Insertion",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "This represents a contig, gap or insertion edge with `InsertionInfo`\npayload.\n\nSee_also: `isValidInsertion`, `isDefault`, `isOutputGap`, `isGap`,\n`isExtension`, `hasSequence`\n",
    "line" : 80,
    "char" : 1,
    "deco" : "S7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
    "originalType" : "OutputScaffold.Edge"
   },
   {
    "name" : "isOutputGap",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns true iff a sequence of `n`s should be written.\n",
    "line" : 84,
    "char" : 6,
    "deco" : "FIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZb",
    "originalType" : "bool(in Insertion insertion)",
    "parameters" : [
     {
      "name" : "insertion",
      "deco" : "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 87,
    "endchar" : 1
   },
   {
    "name" : "isValidInsertion",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns true iff insertion describes a contig (`isDefault`), gap\n(`isOutputGap`) or insertion (`isGap`, `isExtension`, `hasSequence`).\n",
    "line" : 92,
    "char" : 6,
    "deco" : "FIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZb",
    "originalType" : "bool(in Insertion insertion)",
    "parameters" : [
     {
      "name" : "insertion",
      "deco" : "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 99,
    "endchar" : 1
   },
   {
    "name" : "hasSequence",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns true if insertion has a non-empty sequence attached.\n",
    "line" : 103,
    "char" : 6,
    "deco" : "FIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZb",
    "originalType" : "bool(in Insertion insertion)",
    "parameters" : [
     {
      "name" : "insertion",
      "deco" : "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 106,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Return the cropping position on `contig` according to `overlap`.\n",
    "line" : 110,
    "char" : 9,
    "name" : "getCroppingPosition",
    "parameters" : [
     {
      "name" : "contig",
      "kind" : "value",
      "deco" : "Aya"
     }
    ],
    "constraint" : "contig == \"contigA\"",
    "members" : [
     {
      "name" : "getCroppingPosition",
      "kind" : "function",
      "line" : 110,
      "char" : 9,
      "type" : "coord_t(in SeededAlignment overlap)",
      "parameters" : [
       {
        "name" : "overlap",
        "type" : "SeededAlignment",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 119,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 122,
    "char" : 9,
    "name" : "getCroppingPosition",
    "parameters" : [
     {
      "name" : "contig",
      "kind" : "value",
      "deco" : "Aya"
     }
    ],
    "constraint" : "contig == \"contigB\"",
    "members" : [
     {
      "name" : "getCroppingPosition",
      "kind" : "function",
      "line" : 122,
      "char" : 9,
      "type" : "coord_t(in SeededAlignment overlap)",
      "parameters" : [
       {
        "name" : "overlap",
        "type" : "SeededAlignment",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 140,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "getInfoForExistingContig",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns information required when building the assembly.\n\nThe parameters must have a type that matches the function name, e.g.\n`isDefault(insertion)` must be true for `getInfoForExistingContig`.\n\nParams:\nbegin            = start node of `insertion` is required because\n`insertion` is undirected\ninsertion        = undirected edge with `InsertionInfo` payload\nglobalComplement = current complement status in the assembly process\n",
    "line" : 153,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNaNfIS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuISQCs4util4math__T5GraphTSQFnQFm__TQFgTmVQFda8_636f6e7469674964TQFdVQGea10_636f6e74696750617274ZQHpTvVEQImQIl__T4FlagVQIca10_69734469726563746564ZQBii0TSQInQIi10insertions13InsertionInfoZQGn4EdgeIbZSQMeQMd__TQLxTkVQLua8_636f6e7469674964TxmVQMua12_636f6e7469674c656e677468TSQNdQKl6region__T6RegionTmTmVQPda8_636f6e7469674964Vmi0ZQBn14TaggedIntervalVQQya8_63726f7070696e67TmVQRxa6_6c656e677468TxbVQSta10_636f6d706c656d656e74ZQUe",
    "originalType" : "(in ContigNode begin, in Insertion insertion, in bool globalComplement)",
    "parameters" : [
     {
      "name" : "begin",
      "deco" : "xS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "insertion",
      "deco" : "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "globalComplement",
      "deco" : "xb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 219,
    "endchar" : 1
   },
   {
    "name" : "getInfoForGap",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 222,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNaNbNiNfIS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4EdgeZSQIcQIb__TQHvTxmVQHta6_6c656e677468ZQIv",
    "originalType" : "(in Insertion insertion)",
    "parameters" : [
     {
      "name" : "insertion",
      "deco" : "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 225,
    "endchar" : 1
   },
   {
    "name" : "getInfoForNewSequenceInsertion",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 228,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNaNbIS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDuISQCs4util4math__T5GraphTSQFnQFm__TQFgTmVQFda8_636f6e7469674964TQFdVQGea10_636f6e74696750617274ZQHpTvVEQImQIl__T4FlagVQIca10_69734469726563746564ZQBii0TSQInQIi10insertions13InsertionInfoZQGn4EdgeIbZSQMeQMd__TQLxTxSQKwQKr5binioQLa18CompressedSequenceVQNea8_73657175656e6365TSQNeQKm6region__T6RegionTmTmVQPea6_726561644964Vmi0ZQBj14TaggedIntervalVQQva8_63726f7070696e67TmVQRua6_6c656e677468TbVQSpa10_636f6d706c656d656e74ZQUa",
    "originalType" : "(in ContigNode begin, in Insertion insertion, in bool globalComplement)",
    "parameters" : [
     {
      "name" : "begin",
      "deco" : "xS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "insertion",
      "deco" : "xS7dentist4util4math__T5GraphTS3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TEQDa6common8scaffold10ContigPartVQCea10_636f6e74696750617274ZQDpTvVEQEmQEl__T4FlagVQEca10_69734469726563746564ZQBii0TSQHnQEn10insertions13InsertionInfoZQIa4Edge",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "globalComplement",
      "deco" : "xb",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 284,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.common",
  "kind" : "module",
  "file" : "source/dentist/common/package.d",
  "comment" : "    This package holds common code for the DENTIST algorithm.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.region",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Region"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "among",
     "count",
     "fold",
     "map",
     "max",
     "sum"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 20,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 21,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 22,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enforce"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "floor"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "TemplateOf"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 26,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Flag"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 27,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Json"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 29,
    "char" : 15
   },
   {
    "name" : "dentist.common.binio",
    "kind" : "import",
    "line" : 30,
    "char" : 15
   },
   {
    "name" : "dentist.common.scaffold",
    "kind" : "import",
    "line" : 31,
    "char" : 15
   },
   {
    "name" : "isTesting",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "True iff building with testing commands.\n",
    "line" : 36,
    "char" : 10,
    "storageClass" : [
     "enum"
    ],
    "deco" : "b",
    "init" : "true"
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Evaluate to `value` if building with testing command;\notherwise to `typeof(value).init`.\n",
    "line" : 43,
    "char" : 1,
    "name" : "testingOnly",
    "parameters" : [
     {
      "name" : "value",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "testingOnly",
      "kind" : "variable",
      "line" : 46,
      "char" : 14,
      "storageClass" : [
       "enum"
      ],
      "init" : "value"
     }
    ]
   },
   {
    "name" : "DentistException",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Thrown if some runtime error in the DENTIST algorithm occurs.\n",
    "line" : 53,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "payload",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Auxiliary data describing the circumstances under which the exception\noccurred.\n",
      "line" : 57,
      "char" : 10,
      "deco" : "S4vibe4data4json4Json",
      "offset" : 80,
      "align" : 8
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : "        Construct a new `DentistException`.\n\n        Params:\n            msg      = The message for the exception.\n            payload  = Additional information for the exception.\n            file     = The file where the exception occurred.\n            line     = The line number where the exception occurred.\n            next     = The previous exception in the chain of exceptions, if any.\n",
      "line" : 69,
      "char" : 5,
      "deco" : "FNaNbNiNfAyaQdmC6object9ThrowableZC7dentist6common16DentistException",
      "originalType" : "pure nothrow @nogc @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
      "parameters" : [
       {
        "name" : "msg",
        "deco" : "Aya"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "m",
        "default" : "cast(ulong)__LINE__"
       },
       {
        "name" : "next",
        "deco" : "C6object9Throwable",
        "default" : "null"
       }
      ],
      "endline" : 73,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 76,
      "char" : 5,
      "deco" : "FNaNbNiNfAyaC6object9ThrowableQvmZC7dentist6common16DentistException",
      "originalType" : "pure nothrow @nogc @safe (string msg, Throwable next, string file = __FILE__, size_t line = __LINE__)",
      "parameters" : [
       {
        "name" : "msg",
        "deco" : "Aya"
       },
       {
        "name" : "next",
        "deco" : "C6object9Throwable"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "m",
        "default" : "cast(ulong)__LINE__"
       }
      ],
      "endline" : 80,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 83,
      "char" : 5,
      "deco" : "FNaNbNiNfAyaS4vibe4data4json4JsonQymC6object9ThrowableZC7dentist6common16DentistException",
      "originalType" : "pure nothrow @nogc @safe (string msg, Json payload, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
      "parameters" : [
       {
        "name" : "msg",
        "deco" : "Aya"
       },
       {
        "name" : "payload",
        "deco" : "S4vibe4data4json4Json"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "m",
        "default" : "cast(ulong)__LINE__"
       },
       {
        "name" : "next",
        "deco" : "C6object9Throwable",
        "default" : "null"
       }
      ],
      "endline" : 88,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 91,
      "char" : 5,
      "deco" : "FNaNbNiNfAyaS4vibe4data4json4JsonC6object9ThrowableQBqmZC7dentist6common16DentistException",
      "originalType" : "pure nothrow @nogc @safe (string msg, Json payload, Throwable next, string file = __FILE__, size_t line = __LINE__)",
      "parameters" : [
       {
        "name" : "msg",
        "deco" : "Aya"
       },
       {
        "name" : "payload",
        "deco" : "S4vibe4data4json4Json"
       },
       {
        "name" : "next",
        "deco" : "C6object9Throwable"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "m",
        "default" : "cast(ulong)__LINE__"
       }
      ],
      "endline" : 96,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Enforces that the given value is true. If the given value is false, a\n    `DentistException` is thrown.\n\n    Params:\n        value    = Test value.\n        msg      = The message for the exception.\n        payload  = Additional information for the exception.\n        file     = The file where the exception occurred.\n        line     = The line number where the exception occurred.\n    See_also: `std.exception.enforce`\n    Returns:  `value`, if `cast(bool) value` is true. Otherwise,\n              `new DentistException(msg, payload)` is thrown.\n",
    "line" : 114,
    "char" : 3,
    "name" : "dentistEnforce",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "dentistEnforce",
      "kind" : "function",
      "line" : 114,
      "char" : 3,
      "type" : "T(T value, lazy string msg, lazy Json payload = Json(), string file = __FILE__, size_t line = __LINE__)",
      "parameters" : [
       {
        "name" : "value",
        "type" : "T"
       },
       {
        "name" : "msg",
        "type" : "string",
        "storageClass" : [
         "lazy"
        ]
       },
       {
        "name" : "payload",
        "type" : "Json",
        "storageClass" : [
         "lazy"
        ],
        "default" : "Json()"
       },
       {
        "name" : "file",
        "type" : "string",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "type" : "size_t",
        "default" : "__LINE__"
       }
      ],
      "endline" : 128,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "ReferenceRegion",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "A region, interval or point of the reference/read.\n\nA point is a zero-based coordinate (property `value`) on the contig/read\nspecified by `contigId`/`readId`.\n\nAn interval is a pair of zero-based coordinates describing the right-open\ninterval `[begin, end)` on the contig/read specified by\n`contigId`/`readId`.\n\nA region is a collection of disjunctive intervals. When creating or\nexpanding a region the intervals are normalized, i.e. merged if they\noverlap. This is the internal representation of masks.\n\nSee_also: `dentist.util.region.Region`,\n`dentist.util.region.Region.TaggedInterval`,\n`dentist.util.region.Region.TaggedPoint`\n",
    "line" : 146,
    "char" : 1,
    "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn",
    "originalType" : "Region!(size_t, size_t, \"contigId\")"
   },
   {
    "name" : "ReferenceInterval",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 148,
    "char" : 1,
    "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn14TaggedInterval",
    "originalType" : "ReferenceRegion.TaggedInterval"
   },
   {
    "name" : "ReferencePoint",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 150,
    "char" : 1,
    "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa8_636f6e7469674964Vmi0ZQBn11TaggedPoint",
    "originalType" : "ReferenceRegion.TaggedPoint"
   },
   {
    "name" : "ReadRegion",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 152,
    "char" : 1,
    "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa6_726561644964Vmi0ZQBj",
    "originalType" : "Region!(size_t, size_t, \"readId\")"
   },
   {
    "name" : "ReadInterval",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 154,
    "char" : 1,
    "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa6_726561644964Vmi0ZQBj14TaggedInterval",
    "originalType" : "ReadRegion.TaggedInterval"
   },
   {
    "name" : "ReadPoint",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 156,
    "char" : 1,
    "deco" : "S7dentist4util6region__T6RegionTmTmVAyaa6_726561644964Vmi0ZQBj11TaggedPoint",
    "originalType" : "ReadRegion.TaggedPoint"
   },
   {
    "name" : "OutputCoordinate",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "A point on the output assembly. This is used in the `translate-coords`\ncommand.\n\nSee_also: `dentist.commands.translateCoords`\n",
    "line" : 163,
    "char" : 1,
    "members" : [
     {
      "name" : "OriginType",
      "kind" : "enum",
      "protection" : "public",
      "comment" : "Type of the coordinate origin or reference system.\n",
      "line" : 166,
      "char" : 12,
      "baseDeco" : "h",
      "members" : [
       {
        "name" : "global",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "cast(ubyte)0u",
        "comment" : "Not implemented. Global base pair position counting all ACGTN's.\n",
        "line" : 169,
        "char" : 9
       },
       {
        "name" : "contig",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "1",
        "comment" : "Not implemented. Position on a specific contig (only ACGT).\n",
        "line" : 171,
        "char" : 9
       },
       {
        "name" : "scaffold",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "2",
        "comment" : "Position on specific contig counting all ACGTN's.\n",
        "line" : 173,
        "char" : 9
       },
       {
        "name" : "scaffoldContig",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "3",
        "comment" : "Not implemented. Position on a specific contig of a specific\nscaffold (only ACGT).\n",
        "line" : 176,
        "char" : 9
       }
      ]
     },
     {
      "name" : "scaffoldId",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "One-based scaffold ID; a value of zero signifies absence.\n",
      "line" : 180,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 0
     },
     {
      "name" : "contigId",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "One-based contig ID; a value of zero signifies absence.\n",
      "line" : 182,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 4
     },
     {
      "name" : "coord",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "One-based coordinate.\n",
      "line" : 184,
      "char" : 13,
      "deco" : "k",
      "originalType" : "coord_t",
      "offset" : 8
     },
     {
      "name" : "idx",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Zero-based coordinate.\n",
      "line" : 188,
      "char" : 23,
      "deco" : "xFNaNbNdZk",
      "originalType" : "const pure nothrow @property coord_t()",
      "endline" : 191,
      "endchar" : 5
     },
     {
      "name" : "originType",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return the origin type or reference system of this coordinate.\n",
      "line" : 195,
      "char" : 26,
      "deco" : "xFNaNbNdZE7dentist6common16OutputCoordinate10OriginType",
      "endline" : 205,
      "endchar" : 5
     },
     {
      "name" : "toString",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Encode this coordinate in a string with format\n`[scaffold/<scaff>/][contig/<contig>/]<coord>`.\n",
      "line" : 210,
      "char" : 12,
      "deco" : "xFZAya",
      "endline" : 223,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns the alignment region of `alignmentChain`.\n",
    "line" : 228,
    "char" : 3,
    "name" : "to",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     },
     {
      "name" : "contig",
      "kind" : "value",
      "deco" : "Aya",
      "defaultValue" : "\"contigA\""
     }
    ],
    "constraint" : "__traits(isSame, TemplateOf!R, Region)",
    "members" : [
     {
      "name" : "to",
      "kind" : "function",
      "line" : 228,
      "char" : 3,
      "type" : "pure R(in AlignmentChain alignmentChain)",
      "parameters" : [
       {
        "name" : "alignmentChain",
        "type" : "AlignmentChain",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 242,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Get the interval that the alignment covers. This method does returns a\n    single interval from the first to the last matching base pair. It takes\n    complementary alignments into account when an interval on `contigB` is\n    requested\n\n    Params:\n        Interval  = interval type with (at least) three fields `contigId`,\n                   `begin` and `end`\n        contig    = either `\"contigA\"` or `\"contigB\"`\n        alignment = alignment chain\n\n    Returns: interval from the first to the last matching base pair.\n",
    "line" : 259,
    "char" : 10,
    "name" : "toInterval",
    "parameters" : [
     {
      "name" : "Interval",
      "kind" : "type"
     },
     {
      "name" : "contig",
      "kind" : "value",
      "deco" : "Aya"
     }
    ],
    "members" : [
     {
      "name" : "toInterval",
      "kind" : "function",
      "line" : 259,
      "char" : 10,
      "type" : "Interval(in AlignmentChain alignment)",
      "parameters" : [
       {
        "name" : "alignment",
        "type" : "AlignmentChain",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 288,
      "endchar" : 1
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.common.scaffold",
  "kind" : "module",
  "file" : "source/dentist/common/scaffold.d",
  "comment" : "    Work with scaffold graphs. A scaffold graph is an undirected graph with\n    optional edge payloads.\n\n    For each contig of the input assembly there exist four nodes in the graph:\n    `ContigPart.pre`, `ContigPart.begin`, `ContigPart.end` and\n    `ContigPart.post`. These represent four locations relative to the contig.\n\n    Canonical edges are categorized by `isDefault` (the contig itself),\n    `isUnkown` (a gap marked by `n`s), `isGap` (pile up or insertion that\n    connects two contigs), `isFrontExtension` or ` isBackExtension` (pile up\n    or insertion that extends beyond the begin/end of a contig).\n\n    Gap edges are further categorized as `isParallel` or `isAntiParallel`\n    depending on weather the involved contigs are connected in the same\n    (parallel) or opposite (anti-parallel) orientation.\n\n    The scaffold graph is used to collect pile ups of read alignments and\n    represent the final assembly.\n\n\n    See_also: `dentist.commands.collectPileUps`,\n        `dentist.commands.output`\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 31,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "getType"
    ]
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 32,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "uniqInPlace"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 33,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 34,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "add",
     "bulkAdd",
     "EdgeExistsException",
     "filterEdges",
     "Graph",
     "MissingNodeException",
     "NaturalNumberSet"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 42,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "count",
     "equal",
     "filter",
     "fold",
     "joiner",
     "map",
     "minElement",
     "setDifference",
     "sort",
     "sum"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 53,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "appender",
     "array"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 54,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.functional",
    "kind" : "import",
    "line" : 55,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "binaryFun"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 56,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enumerate",
     "iota",
     "isForwardRange",
     "only",
     "refRange",
     "retro",
     "save",
     "walkLength"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 65,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 66,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Flag",
     "No",
     "Tuple",
     "Yes"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 67,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    }
   },
   {
    "name" : "ContigPart",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Each contig has four designated parts where joins can start or end.\n",
    "line" : 77,
    "char" : 8,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "pre",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)0u",
      "comment" : "Designates a transcendent point *before* the contig where\nfront extensions end.\n",
      "line" : 81,
      "char" : 5
     },
     {
      "name" : "begin",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "Designates the begin of the contig.\n",
      "line" : 83,
      "char" : 5
     },
     {
      "name" : "end",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "comment" : "Designates the end of the contig.\n",
      "line" : 85,
      "char" : 5
     },
     {
      "name" : "post",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "3",
      "comment" : "Designates a transcendent point *after* the contig where\nback extensions end.\n",
      "line" : 88,
      "char" : 5
     }
    ]
   },
   {
    "name" : "isReal",
    "kind" : "function",
    "protection" : "public",
    "comment" : "True for the two real locations `begin` and `end`.\n",
    "line" : 93,
    "char" : 6,
    "deco" : "FNaNbIE7dentist6common8scaffold10ContigPartZb",
    "parameters" : [
     {
      "name" : "contigPart",
      "deco" : "xE7dentist6common8scaffold10ContigPart",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 96,
    "endchar" : 1
   },
   {
    "name" : "isTranscendent",
    "kind" : "function",
    "protection" : "public",
    "comment" : "True for the two symbolic locations `pre` and `post`.\n",
    "line" : 100,
    "char" : 6,
    "deco" : "FNaNbIE7dentist6common8scaffold10ContigPartZb",
    "parameters" : [
     {
      "name" : "contigPart",
      "deco" : "xE7dentist6common8scaffold10ContigPart",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 103,
    "endchar" : 1
   },
   {
    "name" : "ContigNode",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "A contig is represented by four `ContigNodes` in the scaffold graph: one\nfor each `ContigPart`.\n",
    "line" : 108,
    "char" : 1,
    "deco" : "S3std8typecons__T5TupleTmVAyaa8_636f6e7469674964TE7dentist6common8scaffold10ContigPartVQCja10_636f6e74696750617274ZQDu",
    "originalType" : "Tuple!(size_t, \"contigId\", ContigPart, \"contigPart\")"
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Data structure for the scaffold graph described in the module\ndocumentation.\n\nSee_also: `dentist.util.math.Graph`\n",
    "line" : 115,
    "char" : 1,
    "name" : "Scaffold",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "Scaffold",
      "kind" : "alias",
      "line" : 115,
      "char" : 1,
      "type" : "Graph!(ContigNode, void, No.isDirected, T)"
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "An edge of the scaffold graph.\n",
    "line" : 119,
    "char" : 1,
    "name" : "Join",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "Join",
      "kind" : "alias",
      "line" : 119,
      "char" : 1,
      "type" : "Scaffold!T.Edge"
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "`IncidentEdgesCache` for `Scaffold!T`.\n",
    "line" : 123,
    "char" : 1,
    "name" : "IncidentEdgesCache",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "IncidentEdgesCache",
      "kind" : "alias",
      "line" : 123,
      "char" : 1,
      "type" : "Scaffold!T.IncidentEdgesCache"
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Combine joins by summing their payloads.\n\nThis is used in unit tests.\n",
    "line" : 129,
    "char" : 8,
    "name" : "sumPayloads",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "sumPayloads",
      "kind" : "function",
      "line" : 129,
      "char" : 8,
      "type" : "nothrow Join!T(Join!T[] joins...)",
      "parameters" : [
       {
        "name" : "joins",
        "type" : "Join!T[]"
       }
      ],
      "endline" : 140,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Combine joins by concatenating their payloads.\n",
    "line" : 144,
    "char" : 8,
    "name" : "concatenatePayloads",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "concatenatePayloads",
      "kind" : "function",
      "line" : 144,
      "char" : 8,
      "type" : "nothrow Join!T(Join!T[] joins...)",
      "parameters" : [
       {
        "name" : "joins",
        "type" : "Join!T[]"
       }
      ],
      "endline" : 156,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns true iff join is a default/contig edge of the scaffold graph.\n",
    "line" : 160,
    "char" : 6,
    "name" : "isDefault",
    "parameters" : [
     {
      "name" : "J",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "isDefault",
      "kind" : "function",
      "line" : 160,
      "char" : 6,
      "type" : "pure nothrow bool(in J join)",
      "parameters" : [
       {
        "name" : "join",
        "type" : "J",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 165,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns true iff join is a unknown edge, ie. an edge for unknown sequence\n(`n`s) of the scaffold graph.\n",
    "line" : 170,
    "char" : 6,
    "name" : "isUnkown",
    "parameters" : [
     {
      "name" : "J",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "isUnkown",
      "kind" : "function",
      "line" : 170,
      "char" : 6,
      "type" : "pure nothrow bool(in J join)",
      "parameters" : [
       {
        "name" : "join",
        "type" : "J",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 176,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns true iff join is a gap edge of the scaffold graph.\n",
    "line" : 180,
    "char" : 6,
    "name" : "isGap",
    "parameters" : [
     {
      "name" : "J",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "isGap",
      "kind" : "function",
      "line" : 180,
      "char" : 6,
      "type" : "pure nothrow bool(in J join)",
      "parameters" : [
       {
        "name" : "join",
        "type" : "J",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 185,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns true iff join is a gap edge and anti-parallel.\n",
    "line" : 189,
    "char" : 6,
    "name" : "isAntiParallel",
    "parameters" : [
     {
      "name" : "J",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "isAntiParallel",
      "kind" : "function",
      "line" : 189,
      "char" : 6,
      "type" : "pure nothrow bool(in J join)",
      "parameters" : [
       {
        "name" : "join",
        "type" : "J",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 192,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns true iff join is a gap edge and parallel.\n",
    "line" : 196,
    "char" : 6,
    "name" : "isParallel",
    "parameters" : [
     {
      "name" : "J",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "isParallel",
      "kind" : "function",
      "line" : 196,
      "char" : 6,
      "type" : "pure nothrow bool(in J join)",
      "parameters" : [
       {
        "name" : "join",
        "type" : "J",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 199,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns true iff join is an extension edge of the scaffold graph.\n",
    "line" : 203,
    "char" : 6,
    "name" : "isExtension",
    "parameters" : [
     {
      "name" : "J",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "isExtension",
      "kind" : "function",
      "line" : 203,
      "char" : 6,
      "type" : "pure nothrow bool(in J join)",
      "parameters" : [
       {
        "name" : "join",
        "type" : "J",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 206,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns true iff join is a front extension edge of the scaffold graph.\n",
    "line" : 210,
    "char" : 6,
    "name" : "isFrontExtension",
    "parameters" : [
     {
      "name" : "J",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "isFrontExtension",
      "kind" : "function",
      "line" : 210,
      "char" : 6,
      "type" : "pure nothrow bool(in J join)",
      "parameters" : [
       {
        "name" : "join",
        "type" : "J",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 215,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns true iff join is a back extension edge of the scaffold graph.\n",
    "line" : 219,
    "char" : 6,
    "name" : "isBackExtension",
    "parameters" : [
     {
      "name" : "J",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "isBackExtension",
      "kind" : "function",
      "line" : 219,
      "char" : 6,
      "type" : "pure nothrow bool(in J join)",
      "parameters" : [
       {
        "name" : "join",
        "type" : "J",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 224,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns true iff join is a valid canonical edge of the scaffold graph.\n",
    "line" : 228,
    "char" : 6,
    "name" : "isValid",
    "parameters" : [
     {
      "name" : "J",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "isValid",
      "kind" : "function",
      "line" : 228,
      "char" : 6,
      "type" : "pure nothrow bool(in J join)",
      "parameters" : [
       {
        "name" : "join",
        "type" : "J",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 231,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Build a scaffold graph using `rawJoins`. This creates default edges for\ncontigs `1 .. numReferenceContigs + 1` and inserts the `rawJoins`.\nMulti-edges are merged using `mergeMultiEdges`.\n",
    "line" : 237,
    "char" : 12,
    "name" : "buildScaffold",
    "parameters" : [
     {
      "name" : "mergeMultiEdges",
      "kind" : "alias"
     },
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "buildScaffold",
      "kind" : "function",
      "line" : 237,
      "char" : 12,
      "type" : "Scaffold!T(in size_t numReferenceContigs, R rawJoins)",
      "parameters" : [
       {
        "name" : "numReferenceContigs",
        "type" : "size_t",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "rawJoins",
        "type" : "R"
       }
      ],
      "endline" : 244,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Build a scaffold graph using `rawJoins`. The nodes are deduced from\n`rawJoins`.\n\nThrows: `dentist.util.math.EdgeExistsException` if `rawJoins` contains\nduplicate joins.\n",
    "line" : 252,
    "char" : 6,
    "name" : "buildScaffold",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "buildScaffold",
      "kind" : "function",
      "line" : 252,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(R rawJoins)",
      "parameters" : [
       {
        "name" : "rawJoins",
        "type" : "R"
       }
      ],
      "endline" : 273,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Creates a scaffold the default edges for contigs\n`1 .. numReferenceContigs + 1`. Optionally specify\na function that produces the payloads.\n\nSee_Also: `getDefaultJoin`\n",
    "line" : 281,
    "char" : 12,
    "name" : "initScaffold",
    "parameters" : [
     {
      "name" : "getPayload",
      "kind" : "alias"
     },
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "initScaffold",
      "kind" : "function",
      "line" : 281,
      "char" : 12,
      "type" : "Scaffold!T(in size_t numReferenceContigs)",
      "parameters" : [
       {
        "name" : "numReferenceContigs",
        "type" : "size_t",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 307,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 310,
    "char" : 12,
    "name" : "initScaffold",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "initScaffold",
      "kind" : "function",
      "line" : 310,
      "char" : 12,
      "type" : "Scaffold!T(in size_t numReferenceContigs)",
      "parameters" : [
       {
        "name" : "numReferenceContigs",
        "type" : "size_t",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 313,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Construct the default join for `contigId`. Initialize `payload` with\n`getPayload(contigId)` if given.\n",
    "line" : 318,
    "char" : 8,
    "name" : "getDefaultJoin",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "getDefaultJoin",
      "kind" : "function",
      "line" : 318,
      "char" : 8,
      "type" : "pure nothrow Join!T(size_t contigId)",
      "parameters" : [
       {
        "name" : "contigId",
        "type" : "size_t"
       }
      ],
      "endline" : 324,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 327,
    "char" : 8,
    "name" : "getDefaultJoin",
    "parameters" : [
     {
      "name" : "getPayload",
      "kind" : "alias"
     },
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "getDefaultJoin",
      "kind" : "function",
      "line" : 327,
      "char" : 8,
      "type" : "pure nothrow Join!T(size_t contigId)",
      "parameters" : [
       {
        "name" : "contigId",
        "type" : "size_t"
       }
      ],
      "endline" : 334,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "comment" : "Add `rawJoins` to `scaffold` merging multi-edges with `mergeMultiEdges`.\nAsserts that the inserted are valid and non-default.\n",
    "line" : 339,
    "char" : 20,
    "name" : "addJoins",
    "parameters" : [
     {
      "name" : "mergeMultiEdges",
      "kind" : "alias"
     },
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "isForwardRange!R",
    "members" : [
     {
      "name" : "addJoins",
      "kind" : "function",
      "line" : 339,
      "char" : 20,
      "type" : "Scaffold!T(Scaffold!T scaffold, R rawJoins)",
      "parameters" : [
       {
        "name" : "scaffold",
        "type" : "Scaffold!T"
       },
       {
        "name" : "rawJoins",
        "type" : "R"
       }
      ],
      "endline" : 355,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Get join for a stretch of unknown sequence (`n`s).\n",
    "line" : 359,
    "char" : 8,
    "name" : "getUnkownJoin",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "getUnkownJoin",
      "kind" : "function",
      "line" : 359,
      "char" : 8,
      "type" : "pure nothrow Join!T(size_t preContigId, size_t postContigId, T payload)",
      "parameters" : [
       {
        "name" : "preContigId",
        "type" : "size_t"
       },
       {
        "name" : "postContigId",
        "type" : "size_t"
       },
       {
        "name" : "payload",
        "type" : "T"
       }
      ],
      "endline" : 367,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Normalizes unknown joins such that they join contigs or are removed as\napplicable. Afterwards the gap joins may not be canonical anymore, i.e.\n`isUnkown` may be false.\n",
    "line" : 373,
    "char" : 12,
    "name" : "normalizeUnkownJoins",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "normalizeUnkownJoins",
      "kind" : "function",
      "line" : 373,
      "char" : 12,
      "type" : "Scaffold!T(Scaffold!T scaffold)",
      "parameters" : [
       {
        "name" : "scaffold",
        "type" : "Scaffold!T"
       }
      ],
      "endline" : 451,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L454_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 454,
    "char" : 1,
    "endline" : 625,
    "endchar" : 1
   },
   {
    "name" : "JoinPolicy",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Determine which kinds of joins are allowed.\n",
    "line" : 625,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "scaffoldGaps",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "comment" : "Only join gaps inside of scaffolds (marked by `n`s in FASTA).\n",
      "line" : 628,
      "char" : 5
     },
     {
      "name" : "scaffolds",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "Join gaps inside of scaffolds (marked by `n`s in FASTA) and try to\njoin scaffolds.\n",
      "line" : 631,
      "char" : 5
     },
     {
      "name" : "contigs",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "comment" : "Break input into contigs and re-scaffold everything; maintains scaffold gaps where new\nscaffolds are consistent.\n",
      "line" : 634,
      "char" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Enforce `joinPolicy` in `scaffold`. Write discarded joins to\n`forbiddenJoins` if given.\n\nSee_also: `JoinPolicy`\n",
    "line" : 642,
    "char" : 12,
    "name" : "enforceJoinPolicy",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "enforceJoinPolicy",
      "kind" : "function",
      "line" : 642,
      "char" : 12,
      "type" : "Scaffold!T(Scaffold!T scaffold, in JoinPolicy joinPolicy)",
      "parameters" : [
       {
        "name" : "scaffold",
        "type" : "Scaffold!T"
       },
       {
        "name" : "joinPolicy",
        "type" : "JoinPolicy",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 647,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 650,
    "char" : 12,
    "name" : "enforceJoinPolicy",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "enforceJoinPolicy",
      "kind" : "function",
      "line" : 650,
      "char" : 12,
      "type" : "Scaffold!T(Scaffold!T scaffold, in JoinPolicy joinPolicy, out Join!T[] forbiddenJoins)",
      "parameters" : [
       {
        "name" : "scaffold",
        "type" : "Scaffold!T"
       },
       {
        "name" : "joinPolicy",
        "type" : "JoinPolicy",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "forbiddenJoins",
        "type" : "Join!T[]",
        "storageClass" : [
         "out"
        ]
       }
      ],
      "endline" : 722,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Remove blacklisted gap joins. Write discarded joins to\n`forbiddenJoins` if given.\n",
    "line" : 727,
    "char" : 12,
    "name" : "removeBlacklisted",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "removeBlacklisted",
      "kind" : "function",
      "line" : 727,
      "char" : 12,
      "type" : "Scaffold!T(Scaffold!T scaffold, in bool[size_t[2]] blacklist)",
      "parameters" : [
       {
        "name" : "scaffold",
        "type" : "Scaffold!T"
       },
       {
        "name" : "blacklist",
        "type" : "bool[size_t[2]]",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 732,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 735,
    "char" : 12,
    "name" : "removeBlacklisted",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "removeBlacklisted",
      "kind" : "function",
      "line" : 735,
      "char" : 12,
      "type" : "Scaffold!T(Scaffold!T scaffold, in bool[size_t[2]] blacklist, out Join!T[] forbiddenJoins)",
      "parameters" : [
       {
        "name" : "scaffold",
        "type" : "Scaffold!T"
       },
       {
        "name" : "blacklist",
        "type" : "bool[size_t[2]]",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "forbiddenJoins",
        "type" : "Join!T[]",
        "storageClass" : [
         "out"
        ]
       }
      ],
      "endline" : 768,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Remove marked edges from the graph. This always keeps the default edges.\n",
    "line" : 772,
    "char" : 12,
    "name" : "removeNoneJoins",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "removeNoneJoins",
      "kind" : "function",
      "line" : 772,
      "char" : 12,
      "type" : "Scaffold!T(Scaffold!T scaffold)",
      "parameters" : [
       {
        "name" : "scaffold",
        "type" : "Scaffold!T"
       }
      ],
      "endline" : 777,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 780,
    "char" : 14,
    "name" : "noneJoinFilter",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "noneJoinFilter",
      "kind" : "function",
      "line" : 780,
      "char" : 14,
      "type" : "bool(Join!T join)",
      "parameters" : [
       {
        "name" : "join",
        "type" : "Join!T"
       }
      ],
      "endline" : 783,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Remove extension edges were they coincide with a gap edge combining their\npayloads. This is intended to build pile ups with all reads that contribute\nto each gap.\n",
    "line" : 789,
    "char" : 12,
    "name" : "mergeExtensionsWithGaps",
    "parameters" : [
     {
      "name" : "mergePayloads",
      "kind" : "alias"
     },
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "mergeExtensionsWithGaps",
      "kind" : "function",
      "line" : 789,
      "char" : 12,
      "type" : "Scaffold!T(Scaffold!T scaffold)",
      "parameters" : [
       {
        "name" : "scaffold",
        "type" : "Scaffold!T"
       }
      ],
      "endline" : 816,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L819_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 819,
    "char" : 1,
    "endline" : 879,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Performs a linear walk through a scaffold graph starting in `startNode`.\n    A linear walk is a sequence of adjacent joins where no node is visited\n    twice unless the graph is cyclic in which case the first node will appear\n    twice. The implementation requires the graph to have linear components,\n    i.e. for every node the degree must be at most two. If the component of\n    `startNode` is cyclic then the walk will end in `startNode` and the\n    `isCyclic` flag will be set.\n\n    The direction of the walk can be influenced by giving `firstJoin`.\n\n*Note:** if one wants to read the `isCyclic` flag it is required to use\n    `std.range.refRange` in most cases.\n\n    Returns: range of joins in the scaffold graph.\n    Throws: `MissingNodeException` if any node is encountered that is not part\n            of the graph.\n",
    "line" : 879,
    "char" : 14,
    "name" : "linearWalk",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "linearWalk",
      "kind" : "function",
      "line" : 879,
      "char" : 14,
      "type" : "LinearWalk!T(Scaffold!T scaffold, ContigNode startNode, IncidentEdgesCache!T incidentEdgesCache = IncidentEdgesCache!T.init)",
      "parameters" : [
       {
        "name" : "scaffold",
        "type" : "Scaffold!T"
       },
       {
        "name" : "startNode",
        "type" : "ContigNode"
       },
       {
        "name" : "incidentEdgesCache",
        "type" : "IncidentEdgesCache!T",
        "default" : "IncidentEdgesCache!T.init"
       }
      ],
      "endline" : 886,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 889,
    "char" : 14,
    "name" : "linearWalk",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "linearWalk",
      "kind" : "function",
      "line" : 889,
      "char" : 14,
      "type" : "LinearWalk!T(Scaffold!T scaffold, ContigNode startNode, Join!T firstJoin, IncidentEdgesCache!T incidentEdgesCache = IncidentEdgesCache!T.init)",
      "parameters" : [
       {
        "name" : "scaffold",
        "type" : "Scaffold!T"
       },
       {
        "name" : "startNode",
        "type" : "ContigNode"
       },
       {
        "name" : "firstJoin",
        "type" : "Join!T"
       },
       {
        "name" : "incidentEdgesCache",
        "type" : "IncidentEdgesCache!T",
        "default" : "IncidentEdgesCache!T.init"
       }
      ],
      "endline" : 897,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L900_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 900,
    "char" : 1,
    "endline" : 1022,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Range that walks linearly through its scaffold graph.\n",
    "line" : 1022,
    "char" : 1,
    "name" : "LinearWalk",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "LinearWalk",
      "kind" : "struct",
      "protection" : "public",
      "line" : 1022,
      "char" : 1,
      "members" : [
       {
        "name" : "emptyIncidentEdgesCache",
        "kind" : "variable",
        "line" : 1024,
        "char" : 17,
        "storageClass" : [
         "enum"
        ],
        "init" : "IncidentEdgesCache!T.init"
       },
       {
        "name" : "scaffold",
        "kind" : "variable",
        "line" : 1026,
        "char" : 24,
        "type" : "Scaffold!T"
       },
       {
        "name" : "incidentEdgesCache",
        "kind" : "variable",
        "line" : 1027,
        "char" : 34,
        "type" : "IncidentEdgesCache!T"
       },
       {
        "name" : "currentNodeIdx",
        "kind" : "variable",
        "line" : 1028,
        "char" : 20,
        "type" : "size_t"
       },
       {
        "name" : "currentJoin",
        "kind" : "variable",
        "line" : 1029,
        "char" : 20,
        "type" : "Join!T"
       },
       {
        "name" : "isEmpty",
        "kind" : "variable",
        "line" : 1030,
        "char" : 18,
        "deco" : "b",
        "init" : "false"
       },
       {
        "name" : "_isCyclic",
        "kind" : "variable",
        "line" : 1031,
        "char" : 29,
        "type" : "Flag!\"isCyclic\"",
        "init" : "No.isCyclic"
       },
       {
        "name" : "visitedNodes",
        "kind" : "variable",
        "line" : 1032,
        "char" : 30,
        "type" : "NaturalNumberSet"
       },
       {
        "name" : "isCyclic",
        "kind" : "function",
        "comment" : "Set to `Yes.isCyclic` if a cycle was detected.\n",
        "line" : 1036,
        "char" : 31,
        "type" : "const pure nothrow @property @safe Flag!\"isCyclic\"()",
        "endline" : 1039,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : "See `linearWalk` instead.\n",
        "line" : 1043,
        "char" : 13,
        "type" : "(Scaffold!T scaffold, ContigNode startNode, IncidentEdgesCache!T incidentEdgesCache = emptyIncidentEdgesCache)",
        "parameters" : [
         {
          "name" : "scaffold",
          "type" : "Scaffold!T"
         },
         {
          "name" : "startNode",
          "type" : "ContigNode"
         },
         {
          "name" : "incidentEdgesCache",
          "type" : "IncidentEdgesCache!T",
          "default" : "emptyIncidentEdgesCache"
         }
        ],
        "endline" : 1057,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : "ditto\n",
        "line" : 1061,
        "char" : 13,
        "type" : "(Scaffold!T scaffold, ContigNode startNode, Join!T firstJoin, IncidentEdgesCache!T incidentEdgesCache = emptyIncidentEdgesCache)",
        "parameters" : [
         {
          "name" : "scaffold",
          "type" : "Scaffold!T"
         },
         {
          "name" : "startNode",
          "type" : "ContigNode"
         },
         {
          "name" : "firstJoin",
          "type" : "Join!T"
         },
         {
          "name" : "incidentEdgesCache",
          "type" : "IncidentEdgesCache!T",
          "default" : "emptyIncidentEdgesCache"
         }
        ],
        "endline" : 1078,
        "endchar" : 5
       },
       {
        "name" : "popFront",
        "kind" : "function",
        "comment" : "Input range interface.\n",
        "line" : 1082,
        "char" : 10,
        "type" : "void()",
        "endline" : 1117,
        "endchar" : 5
       },
       {
        "name" : "front",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 1121,
        "char" : 22,
        "type" : "@property Join!T()",
        "endline" : 1125,
        "endchar" : 5
       },
       {
        "name" : "empty",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 1129,
        "char" : 20,
        "type" : "@property bool()",
        "endline" : 1132,
        "endchar" : 5
       },
       {
        "name" : "lastEdgeOfCycle",
        "kind" : "function",
        "line" : 1135,
        "char" : 18,
        "type" : "void()",
        "endline" : 1143,
        "endchar" : 5
       },
       {
        "name" : "endOfWalk",
        "kind" : "function",
        "line" : 1146,
        "char" : 18,
        "type" : "void()",
        "endline" : 1150,
        "endchar" : 5
       },
       {
        "name" : "currentNode",
        "kind" : "function",
        "line" : 1153,
        "char" : 34,
        "type" : "@property ContigNode()",
        "endline" : 1156,
        "endchar" : 5
       },
       {
        "name" : "currentNode",
        "kind" : "function",
        "line" : 1159,
        "char" : 28,
        "type" : "@property void(ContigNode node)",
        "parameters" : [
         {
          "name" : "node",
          "type" : "ContigNode"
         }
        ],
        "endline" : 1162,
        "endchar" : 5
       },
       {
        "name" : "markVisited",
        "kind" : "function",
        "line" : 1165,
        "char" : 18,
        "type" : "void(size_t nodeIdx)",
        "parameters" : [
         {
          "name" : "nodeIdx",
          "type" : "size_t"
         }
        ],
        "endline" : 1168,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Use `linearWalk` to determine if `startNode` is part of a cycle.\n\nSee_also: `linearWalk`\n",
    "line" : 1175,
    "char" : 17,
    "name" : "isCyclic",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "isCyclic",
      "kind" : "function",
      "line" : 1175,
      "char" : 17,
      "type" : "Flag!\"isCyclic\"(Scaffold!T scaffold, ContigNode startNode, IncidentEdgesCache!T incidentEdgesCache = IncidentEdgesCache!T.init)",
      "parameters" : [
       {
        "name" : "scaffold",
        "type" : "Scaffold!T"
       },
       {
        "name" : "startNode",
        "type" : "ContigNode"
       },
       {
        "name" : "incidentEdgesCache",
        "type" : "IncidentEdgesCache!T",
        "default" : "IncidentEdgesCache!T.init"
       }
      ],
      "endline" : 1184,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 1187,
    "char" : 17,
    "name" : "isCyclic",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "isCyclic",
      "kind" : "function",
      "line" : 1187,
      "char" : 17,
      "type" : "Flag!\"isCyclic\"(Scaffold!T scaffold, ContigNode startNode, Join!T firstJoin, IncidentEdgesCache!T incidentEdgesCache = IncidentEdgesCache!T.init)",
      "parameters" : [
       {
        "name" : "scaffold",
        "type" : "Scaffold!T"
       },
       {
        "name" : "startNode",
        "type" : "ContigNode"
       },
       {
        "name" : "firstJoin",
        "type" : "Join!T"
       },
       {
        "name" : "incidentEdgesCache",
        "type" : "IncidentEdgesCache!T",
        "default" : "IncidentEdgesCache!T.init"
       }
      ],
      "endline" : 1197,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 1200,
    "char" : 25,
    "name" : "isCyclic",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "isCyclic",
      "kind" : "function",
      "line" : 1200,
      "char" : 25,
      "type" : "Flag!\"isCyclic\"(ref LinearWalk!T walk)",
      "parameters" : [
       {
        "name" : "walk",
        "type" : "LinearWalk!T",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 1206,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns a range of `ContigNode`s where full contig walks should start.\n",
    "line" : 1210,
    "char" : 6,
    "name" : "scaffoldStarts",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "scaffoldStarts",
      "kind" : "function",
      "line" : 1210,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(Scaffold!T scaffold, IncidentEdgesCache!T incidentEdgesCache = IncidentEdgesCache!T.init)",
      "parameters" : [
       {
        "name" : "scaffold",
        "type" : "Scaffold!T"
       },
       {
        "name" : "incidentEdgesCache",
        "type" : "IncidentEdgesCache!T",
        "default" : "IncidentEdgesCache!T.init"
       }
      ],
      "endline" : 1295,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L1298_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 1298,
    "char" : 1,
    "endline" : 1351,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.dazzler",
  "kind" : "module",
  "file" : "source/dentist/dazzler.d",
  "comment" : "    Defines bindings to and utilities for the Dazzler tool suite.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "core.memory",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "GC"
    ]
   },
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ReferenceInterval",
     "ReferenceRegion"
    ]
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "AlignmentFlag" : "Flag",
     "AlignmentFlags" : "Flags",
     "chainLocalAlignmentsAlgo" : "chainLocalAlignments"
    },
    "selective" : [
     "AlignmentChain",
     "ChainingOptions",
     "Contig",
     "coord_t",
     "diff_t",
     "FlatLocalAlignment",
     "id_t",
     "Locus",
     "trace_point_t",
     "TracePoint",
     "TranslatedTracePoint"
    ]
   },
   {
    "name" : "dentist.common.binio",
    "kind" : "import",
    "line" : 28,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "CompressedSequence"
    ]
   },
   {
    "name" : "dentist.common.external",
    "kind" : "import",
    "line" : 29,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ExternalDependency"
    ]
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 30,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "sliceUntil"
    ]
   },
   {
    "name" : "dentist.util.fasta",
    "kind" : "import",
    "line" : 31,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "parseFastaRecord",
     "reverseComplement"
    ]
   },
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 32,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 33,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "absdiff",
     "floor",
     "ceil",
     "RoundingMode"
    ]
   },
   {
    "name" : "dentist.util.process",
    "kind" : "import",
    "line" : 34,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "executePipe" : "pipeLines"
    }
   },
   {
    "name" : "dentist.util.range",
    "kind" : "import",
    "line" : 35,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "arrayChunks",
     "takeExactly"
    ]
   },
   {
    "name" : "dentist.util.region",
    "kind" : "import",
    "line" : 36,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "convexHull",
     "findTilings",
     "min",
     "sup"
    ]
   },
   {
    "name" : "dentist.util.string",
    "kind" : "import",
    "line" : 37,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "EditOp",
     "findAlignment",
     "longestInputsLength",
     "memoryRequired",
     "score_t",
     "SequenceAlignment"
    ]
   },
   {
    "name" : "dentist.util.tempfile",
    "kind" : "import",
    "line" : 44,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "mkstemp"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 45,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "all",
     "among",
     "cache",
     "canFind",
     "copy",
     "countUntil",
     "cumulativeFold",
     "endsWith",
     "filter",
     "find",
     "isSorted",
     "joiner",
     "map",
     "max",
     "maxElement",
     "min",
     "minElement",
     "remove",
     "sort",
     "splitter",
     "startsWith",
     "sum",
     "SwapStrategy",
     "uniq",
     "until"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 71,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "appender",
     "Appender",
     "array",
     "replace",
     "split",
     "uninitializedArray"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 78,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ConvException",
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 81,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enforce"
    ]
   },
   {
    "name" : "std.file",
    "kind" : "import",
    "line" : 82,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "exists",
     "remove"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 83,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format",
     "formattedRead"
    ]
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 84,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isNaN"
    ]
   },
   {
    "name" : "std.meta",
    "kind" : "import",
    "line" : 85,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AliasSeq"
    ]
   },
   {
    "name" : "std.path",
    "kind" : "import",
    "line" : 86,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "absolutePath",
     "baseName",
     "buildPath",
     "dirName",
     "extension",
     "relativePath",
     "stripExtension",
     "withExtension"
    ]
   },
   {
    "name" : "std.process",
    "kind" : "import",
    "line" : 95,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Config",
     "escapeShellCommand",
     "kill",
     "pipeProcess",
     "ProcessPipes",
     "Redirect",
     "wait"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 97,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "chain",
     "chunks",
     "drop",
     "enumerate",
     "generate",
     "iota",
     "only",
     "repeat",
     "slide",
     "take",
     "takeExactly",
     "zip"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 110,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ElementType",
     "empty",
     "front",
     "hasLength",
     "isForwardRange",
     "isInputRange",
     "popFront",
     "save",
     "walkLength"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 120,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "File"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 121,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "lineSplitter",
     "outdent"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 122,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isArray",
     "isIntegral",
     "isSomeString",
     "ReturnType",
     "Unqual"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 123,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Flag",
     "No",
     "tuple",
     "Tuple",
     "Yes"
    ]
   },
   {
    "name" : "std.uni",
    "kind" : "import",
    "line" : 124,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "toUpper"
    ]
   },
   {
    "name" : "std.variant",
    "kind" : "import",
    "line" : 125,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Algebraic"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 126,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    },
    "selective" : [
     "Json"
    ]
   },
   {
    "name" : "hiddenDbFileSuffixes",
    "kind" : "variable",
    "protection" : "private",
    "comment" : "File suffixes of hidden .db files.\n",
    "line" : 137,
    "char" : 14,
    "storageClass" : [
     "enum"
    ],
    "deco" : "AAya",
    "init" : "[\".bps\", \".idx\"]"
   },
   {
    "name" : "hiddenDamFileSuffixes",
    "kind" : "variable",
    "protection" : "private",
    "comment" : "File suffixes of hidden .dam files.\n",
    "line" : 140,
    "char" : 14,
    "storageClass" : [
     "enum"
    ],
    "deco" : "AAya",
    "init" : "[\".bps\", \".hdr\", \".idx\"]"
   },
   {
    "name" : "dbFileExtension",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "Constant holding the .db file extension.\n",
    "line" : 143,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\".db\""
   },
   {
    "name" : "damFileExtension",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "Constant holding the .dam file extension.\n",
    "line" : 146,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\".dam\""
   },
   {
    "name" : "minSequenceLength",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "The Dazzler tools require sequence of\nat least `minSequenceLength` base pairs.\n",
    "line" : 150,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "i",
    "init" : "14"
   },
   {
    "name" : "forceLargeTracePointType",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "This trace point spacing enforces the use\nof `ushort` for trace point encoding.\n",
    "line" : 154,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "i",
    "init" : "126"
   },
   {
    "name" : "minAverageCorrelationRate",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "Minimum allowed value for `-e` option of `daligner`/`damapper`\n",
    "line" : 157,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "d",
    "init" : "0.7"
   },
   {
    "name" : "minBestMatches",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "Minimum allowed value for `-n` option of `damapper`\n",
    "line" : 160,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "d",
    "init" : "0.7"
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "True if `T` is some array of strings.\n",
    "line" : 163,
    "char" : 6,
    "name" : "isOptionsList",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "isOptionsList",
      "kind" : "variable",
      "line" : 163,
      "char" : 6,
      "storageClass" : [
       "enum"
      ],
      "init" : "isArray!T && isSomeString!(ElementType!T)"
     }
    ]
   },
   {
    "name" : "getHiddenDbFiles",
    "kind" : "function",
    "protection" : "public",
    "comment" : "    Return a list of hidden files associated to every `.dam`/`.db` file. These\n    files contain the actual data used in all the computation. Thus, we\n    carefully check for their existence.\n",
    "line" : 171,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNaNfAyaZS3std9algorithm9iteration__T9MapResultS7dentist7dazzler16getHiddenDbFilesFQDaZ9__lambda3TAQDqZQCo",
    "originalType" : "(string dbFile)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "Aya"
     }
    ],
    "endline" : 182,
    "endchar" : 1
   },
   {
    "name" : "stripDbExtension",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Strip extension of `dbFile` if its is `dbFileExtension`\nor `damFileExtension`. Otherwise return `dbFile` untouched.\n",
    "line" : 187,
    "char" : 8,
    "deco" : "FNaNbNfIAyaZAya",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 195,
    "endchar" : 1
   },
   {
    "name" : "DazzlerCommandException",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Signal error from the Dazzler bindings.\n",
    "line" : 199,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 201,
      "char" : 30,
      "deco" : "FNaNbNiNfAyaQdmC6object9ThrowableZC7dentist7dazzler23DazzlerCommandException",
      "originalType" : "pure nothrow @nogc @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
      "parameters" : [
       {
        "name" : "msg",
        "deco" : "Aya"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "m",
        "default" : "cast(ulong)__LINE__"
       },
       {
        "name" : "nextInChain",
        "deco" : "C6object9Throwable",
        "default" : "null"
       }
      ],
      "endline" : 205,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "Append",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Flag used to signal if DB write operations should append to an existing\nDB or call `handleExistingDb` instead (default).\n",
    "line" : 211,
    "char" : 1,
    "deco" : "E3std8typecons__T4FlagVAyaa6_617070656e64ZQz",
    "originalType" : "Flag!\"append\""
   },
   {
    "name" : "handleExistingDb",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "This funcion is called if writing to an existing DB is attempted without\npassing `Yes.append` or similar to the called function.\n",
    "line" : 216,
    "char" : 30,
    "deco" : "DFAyaZv",
    "init" : "delegate void(string dbFile) @system\n{\nremoveDB(dbFile);\nreturn ;\n}\n"
   },
   {
    "name" : "lasEmpty",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns true iff lasFile contains zero parts.\n",
    "line" : 220,
    "char" : 6,
    "deco" : "FIAyaZb",
    "parameters" : [
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 225,
    "endchar" : 1
   },
   {
    "name" : "numDbRecords",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns the (trimmed) number of records in `dbFile`.\n",
    "line" : 229,
    "char" : 6,
    "deco" : "FIAyaZk",
    "originalType" : "id_t(in string dbFile)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 241,
    "endchar" : 1
   },
   {
    "name" : "dbEmpty",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns true iff `dbFile` is empty.\n",
    "line" : 245,
    "char" : 6,
    "deco" : "FIAyaZb",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 248,
    "endchar" : 1
   },
   {
    "name" : "removeDB",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Remove database and hidden files.\n",
    "line" : 253,
    "char" : 6,
    "deco" : "FIAyaZv",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 256,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Build DB file by using the given subset of reads in `inDbFile`.\nWrites to `outputDB` if given; otherwise a name with the same extenion as\n`inDbFile` under `options.tmpdir` is safely generated. The resulting DB\nis implictly split using `options.dbsplitOptions`.\n\nNote that the returned DB path always has the same extension as `inDbFile`.\nIf `outputDb` is given and does not have the expected extension it will be\nappend.\n\nReturns: path to resulting DB\n",
    "line" : 269,
    "char" : 8,
    "name" : "dbSubset",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     },
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "isSomeString!(typeof(options.tmpdir)) && isOptionsList!(typeof(options.dbsplitOptions))",
    "members" : [
     {
      "name" : "dbSubset",
      "kind" : "function",
      "line" : 269,
      "char" : 8,
      "type" : "string(in string inDbFile, R readIds, in Options options, Append append = No.append)",
      "parameters" : [
       {
        "name" : "inDbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "readIds",
        "type" : "R"
       },
       {
        "name" : "options",
        "type" : "Options",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "append",
        "type" : "Append",
        "default" : "No.append"
       }
      ],
      "endline" : 282,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 285,
    "char" : 8,
    "name" : "dbSubset",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     },
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "isOptionsList!(typeof(options.dbsplitOptions))",
    "members" : [
     {
      "name" : "dbSubset",
      "kind" : "function",
      "line" : 285,
      "char" : 8,
      "type" : "string(in string outputDb, in string inDbFile, R readIds, in Options options, Append append = No.append)",
      "parameters" : [
       {
        "name" : "outputDb",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "inDbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "readIds",
        "type" : "R"
       },
       {
        "name" : "options",
        "type" : "Options",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "append",
        "type" : "Append",
        "default" : "No.append"
       }
      ],
      "endline" : 296,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Merge given las files.\n",
    "line" : 301,
    "char" : 6,
    "name" : "LAmerge",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "LAmerge",
      "kind" : "function",
      "line" : 301,
      "char" : 6,
      "type" : "void(in string mergedLas, R lasFiles)",
      "parameters" : [
       {
        "name" : "mergedLas",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "lasFiles",
        "type" : "R"
       }
      ],
      "endline" : 304,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Compute local alignments of given DBs using `daligner`. Uses `dbB = dbA`\nif `dbB` is omitted.\n\nThe resulting LAS file is placed in `options.tmpdir`. Its name can be\nretrieved by calling `getLasFile(dbA, dbB, options.tmpdir)`. `daligner`\nwill not be executed if a file with that name already exists to avoid\nredundant computations.\n\nReturns: alignment data\nSee_also: `getAlignments`, `getLasFile`\n",
    "line" : 317,
    "char" : 18,
    "name" : "getLocalAlignments",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "constraint" : "isOptionsList!(typeof(options.dalignerOptions)) && isSomeString!(typeof(options.tmpdir))",
    "members" : [
     {
      "name" : "getLocalAlignments",
      "kind" : "function",
      "line" : 317,
      "char" : 18,
      "type" : "AlignmentChain[](in string dbA, in Options options)",
      "parameters" : [
       {
        "name" : "dbA",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "options",
        "type" : "Options",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 325,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 328,
    "char" : 18,
    "name" : "getLocalAlignments",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "constraint" : "isOptionsList!(typeof(options.dalignerOptions)) && isSomeString!(typeof(options.tmpdir))",
    "members" : [
     {
      "name" : "getLocalAlignments",
      "kind" : "function",
      "line" : 328,
      "char" : 18,
      "type" : "AlignmentChain[](in string dbA, in string dbB, in Options options)",
      "parameters" : [
       {
        "name" : "dbA",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "dbB",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "options",
        "type" : "Options",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 336,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Compute local alignments of given DBs using `damapper`.\n\nThe resulting LAS file is placed in `options.tmpdir`. Its name can be\nretrieved by calling `getLasFile(dbA, dbB, options.tmpdir)`. `damapper`\nwill not be executed if a file with that name already exists to avoid\nredundant computations.\n\nReturns: alignment data\nSee_also: `getAlignments`, `getLasFile`\n",
    "line" : 348,
    "char" : 18,
    "name" : "getMappings",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "constraint" : "isOptionsList!(typeof(options.damapperOptions)) && isSomeString!(typeof(options.tmpdir))",
    "members" : [
     {
      "name" : "getMappings",
      "kind" : "function",
      "line" : 348,
      "char" : 18,
      "type" : "AlignmentChain[](in string dbA, in string dbB, in Options options)",
      "parameters" : [
       {
        "name" : "dbA",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "dbB",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "options",
        "type" : "Options",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 356,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 359,
    "char" : 26,
    "name" : "getGeneratedAlignments",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "constraint" : "isSomeString!(typeof(options.tmpdir))",
    "members" : [
     {
      "name" : "getGeneratedAlignments",
      "kind" : "function",
      "line" : 359,
      "char" : 26,
      "type" : "AlignmentChain[](in string dbA, in string dbB, in Options options)",
      "parameters" : [
       {
        "name" : "dbA",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "dbB",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "options",
        "type" : "Options",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 368,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "AlignmentReaderFlag",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Control operation of `LocalAlignmentReader`.\n",
    "line" : 372,
    "char" : 1,
    "baseDeco" : "k",
    "members" : [
     {
      "name" : "none",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0u",
      "comment" : "Perform only minimal set of operations.\n",
      "line" : 375,
      "char" : 5
     },
     {
      "name" : "includeTracePoints",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1u",
      "comment" : "Read trace points and include them in the result.\n",
      "line" : 378,
      "char" : 5
     },
     {
      "name" : "sort",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2u",
      "comment" : "Sort the alignments after reading.\n",
      "line" : 381,
      "char" : 5
     }
    ]
   },
   {
    "name" : "getAlignments",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Read all alignment chains from `lasFile`.\n\nParams:\ndbA         = A-read DB\ndbB         = optional B-read DB; if omitted `dbB = dbA` is used\nlasFile     = file with alignment\nincludeTracePoints = include trace points in output; this signature\nimplies `AlignmentReaderFlag.sort`. Skipping trace points is\nfaster and requires less memory.\nflags       = specify additional operations (see `AlignmentReaderFlag`)\n",
    "line" : 395,
    "char" : 18,
    "deco" : "FIAyaIQeE3std8typecons__T4FlagVAyaa18_696e636c7564655472616365506f696e7473ZQByZAS7dentist6common10alignments4base14AlignmentChain",
    "originalType" : "AlignmentChain[](in string dbA, in string lasFile, Flag!\"includeTracePoints\" includeTracePoints = No.includeTracePoints)",
    "parameters" : [
     {
      "name" : "dbA",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "includeTracePoints",
      "deco" : "E3std8typecons__T4FlagVAyaa18_696e636c7564655472616365506f696e7473ZQBy",
      "default" : "Flag.no"
     }
    ],
    "endline" : 402,
    "endchar" : 1
   },
   {
    "name" : "getAlignments",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 405,
    "char" : 18,
    "deco" : "FIAyaIQeIQhE3std8typecons__T4FlagVAyaa18_696e636c7564655472616365506f696e7473ZQByZAS7dentist6common10alignments4base14AlignmentChain",
    "originalType" : "AlignmentChain[](in string dbA, in string dbB, in string lasFile, Flag!\"includeTracePoints\" includeTracePoints = No.includeTracePoints)",
    "parameters" : [
     {
      "name" : "dbA",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dbB",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "includeTracePoints",
      "deco" : "E3std8typecons__T4FlagVAyaa18_696e636c7564655472616365506f696e7473ZQBy",
      "default" : "Flag.no"
     }
    ],
    "endline" : 418,
    "endchar" : 1
   },
   {
    "name" : "getAlignments",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 421,
    "char" : 18,
    "deco" : "FIAyaIQeE7dentist7dazzler19AlignmentReaderFlagZASQBo6common10alignments4base14AlignmentChain",
    "parameters" : [
     {
      "name" : "dbA",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "flags",
      "deco" : "E7dentist7dazzler19AlignmentReaderFlag"
     }
    ],
    "endline" : 428,
    "endchar" : 1
   },
   {
    "name" : "getAlignments",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 431,
    "char" : 18,
    "deco" : "FIAyaIQeIQhE7dentist7dazzler19AlignmentReaderFlagZASQBo6common10alignments4base14AlignmentChain",
    "parameters" : [
     {
      "name" : "dbA",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dbB",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "flags",
      "deco" : "E7dentist7dazzler19AlignmentReaderFlag"
     }
    ],
    "endline" : 477,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L479_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 479,
    "char" : 1,
    "endline" : 661,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Transforms a range `R` of `FlatLocalAlignment`s into a range of\n`AlignmentChain`s.\n\nSee_also: `alignmentChainPacker` for more details.\n",
    "line" : 661,
    "char" : 1,
    "name" : "AlignmentChainPacker",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "AlignmentChainPacker",
      "kind" : "struct",
      "protection" : "public",
      "line" : 661,
      "char" : 1,
      "members" : [
       {
        "name" : "LocalAlignment",
        "kind" : "alias",
        "line" : 663,
        "char" : 13,
        "type" : "AlignmentChain.LocalAlignment"
       },
       {
        "name" : "alignments",
        "kind" : "variable",
        "line" : 665,
        "char" : 15,
        "type" : "R"
       },
       {
        "name" : "bufferMode",
        "kind" : "variable",
        "line" : 666,
        "char" : 24,
        "type" : "BufferMode"
       },
       {
        "name" : "localAlignmentBuffer",
        "kind" : "variable",
        "line" : 667,
        "char" : 30,
        "type" : "LocalAlignment[]"
       },
       {
        "name" : "numBufferedLocalAlignments",
        "kind" : "variable",
        "line" : 668,
        "char" : 20,
        "type" : "size_t"
       },
       {
        "name" : "localAlignmentAcc",
        "kind" : "variable",
        "line" : 669,
        "char" : 41,
        "type" : "Appender!(LocalAlignment[])"
       },
       {
        "name" : "currentChain",
        "kind" : "variable",
        "line" : 670,
        "char" : 28,
        "type" : "AlignmentChain"
       },
       {
        "name" : "lastTracePointLocation",
        "kind" : "variable",
        "line" : 672,
        "char" : 25,
        "type" : "TracePoint*"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 675,
        "char" : 15,
        "type" : "(R alignments, BufferMode bufferMode, LocalAlignment[] localAlignmentBuffer = [])",
        "parameters" : [
         {
          "name" : "alignments",
          "type" : "R"
         },
         {
          "name" : "bufferMode",
          "type" : "BufferMode"
         },
         {
          "name" : "localAlignmentBuffer",
          "type" : "LocalAlignment[]",
          "default" : "[]"
         }
        ],
        "endline" : 695,
        "endchar" : 5
       },
       {
        "name" : "empty",
        "kind" : "function",
        "comment" : "Input range interface.\n",
        "line" : 699,
        "char" : 20,
        "type" : "const pure nothrow @property @safe bool()",
        "endline" : 702,
        "endchar" : 5
       },
       {
        "name" : "popFront",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 705,
        "char" : 10,
        "type" : "void()",
        "endline" : 740,
        "endchar" : 5
       },
       {
        "name" : "front",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 744,
        "char" : 30,
        "type" : "pure nothrow @property @safe AlignmentChain()",
        "endline" : 749,
        "endchar" : 5
       },
       {
        "name" : "setEmpty",
        "kind" : "function",
        "line" : 752,
        "char" : 18,
        "type" : "pure nothrow @safe void()",
        "endline" : 755,
        "endchar" : 5
       },
       {
        "name" : "assertMatchingAlignmentHead",
        "kind" : "function",
        "line" : 758,
        "char" : 35,
        "type" : "pure nothrow @safe void()",
        "endline" : 773,
        "endchar" : 5
       },
       {
        "name" : "bufferCurrentLocalAlignment",
        "kind" : "function",
        "line" : 776,
        "char" : 18,
        "type" : "pure nothrow @safe void()",
        "endline" : 790,
        "endchar" : 5
       },
       {
        "name" : "finishLocalAlignmentBuffer",
        "kind" : "function",
        "line" : 793,
        "char" : 30,
        "type" : "pure nothrow @safe LocalAlignment[]()",
        "endline" : 817,
        "endchar" : 5
       },
       {
        "name" : "makeCurrentLocalAlignment",
        "kind" : "function",
        "line" : 820,
        "char" : 43,
        "type" : "pure nothrow @safe AlignmentChain.LocalAlignment()",
        "endline" : 838,
        "endchar" : 5
       },
       {
        "name" : "currentFLA",
        "kind" : "function",
        "line" : 841,
        "char" : 28,
        "storageClass" : [
         "auto"
        ],
        "type" : "pure nothrow @property @safe ()",
        "endline" : 844,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Transforms a range `R` of `FlatLocalAlignment`s into a range of\n`AlignmentChain`s.\n\nParams:\nlocalAlignments = input range of `FlatLocalAlignment`s\nbufferMode      = selects how `LocalAlignment`s are buffered\nlocalAlignmentBuffer = buffer for `LocalAlignment`s. If provided by\nthe caller it must be adequately sized with respect to\n`bufferMode`; otherwise an adequate buffer is allocated.\nSee_also: `BufferMode`, `getFlatLocalAlignments`\n",
    "line" : 858,
    "char" : 6,
    "name" : "alignmentChainPacker",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!R && is(ElementType!R == FlatLocalAlignment)",
    "members" : [
     {
      "name" : "alignmentChainPacker",
      "kind" : "function",
      "line" : 858,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(R localAlignments, BufferMode bufferMode = BufferMode.skip, AlignmentChain.LocalAlignment[] localAlignmentBuffer = [])",
      "parameters" : [
       {
        "name" : "localAlignments",
        "type" : "R"
       },
       {
        "name" : "bufferMode",
        "type" : "BufferMode",
        "default" : "BufferMode.skip"
       },
       {
        "name" : "localAlignmentBuffer",
        "type" : "AlignmentChain.LocalAlignment[]",
        "default" : "[]"
       }
      ],
      "endline" : 866,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L869_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 869,
    "char" : 1,
    "endline" : 878,
    "endchar" : 1
   },
   {
    "name" : "fingerprint",
    "kind" : "function",
    "protection" : "protected",
    "comment" : "Returns a tuple of contig IDs and first and last begin/end coords.\n",
    "line" : 878,
    "char" : 16,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNaNbNfIKS7dentist6common10alignments4base14AlignmentChainZS3std8typecons__T5TupleTxkTxkTkTkTkTkZQv",
    "originalType" : "pure nothrow (in ref AlignmentChain alignmentChain)",
    "parameters" : [
     {
      "name" : "alignmentChain",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "in",
       "ref"
      ]
     }
    ],
    "endline" : 888,
    "endchar" : 1
   },
   {
    "name" : "getFlatLocalAlignments",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Lazily read individual local alignments from `lasFile`.\n\nReturns: input range of `FlatLocalAlignment` with defined length.\nParams:\ndbA         = A-read DB used to insert contig lengths if present\ndbB         = optional B-read DB; if omitted but `dbA` is given\n`dbB = dbA` is used\nlasFile     = file with alignment\nbufferMode  = select buffer strategy for trace points\ntracePointBuffer = buffer for `TracePoint`s. If provided by the caller\nit must be adequately sized with respect to `bufferMode`;\notherwise an adequate buffer is allocated.\nSee_also: `BufferMode`, `FlatLocalAlignment`, `LocalAlignmentReader`\n",
    "line" : 904,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FIAyaE7dentist7dazzler10BufferModeASQBe6common10alignments4base10TracePointZCQCtQCo20LocalAlignmentReader",
    "originalType" : "(in string lasFile, BufferMode bufferMode = BufferMode.skip, TracePoint[] tracePointBuffer = [])",
    "parameters" : [
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "bufferMode",
      "deco" : "E7dentist7dazzler10BufferMode",
      "default" : "BufferMode.skip"
     },
     {
      "name" : "tracePointBuffer",
      "deco" : "AS7dentist6common10alignments4base10TracePoint",
      "default" : "[]"
     }
    ],
    "endline" : 911,
    "endchar" : 1
   },
   {
    "name" : "getFlatLocalAlignments",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 914,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FIAyaIQeE7dentist7dazzler10BufferModeASQBe6common10alignments4base10TracePointZCQCtQCo20LocalAlignmentReader",
    "originalType" : "(in string dbA, in string lasFile, BufferMode bufferMode = BufferMode.skip, TracePoint[] tracePointBuffer = [])",
    "parameters" : [
     {
      "name" : "dbA",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "bufferMode",
      "deco" : "E7dentist7dazzler10BufferMode",
      "default" : "BufferMode.skip"
     },
     {
      "name" : "tracePointBuffer",
      "deco" : "AS7dentist6common10alignments4base10TracePoint",
      "default" : "[]"
     }
    ],
    "endline" : 922,
    "endchar" : 1
   },
   {
    "name" : "getFlatLocalAlignments",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 925,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FIAyaIQeIQhE7dentist7dazzler10BufferModeASQBe6common10alignments4base10TracePointZCQCtQCo20LocalAlignmentReader",
    "originalType" : "(in string dbA, in string dbB, in string lasFile, BufferMode bufferMode = BufferMode.skip, TracePoint[] tracePointBuffer = [])",
    "parameters" : [
     {
      "name" : "dbA",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dbB",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "bufferMode",
      "deco" : "E7dentist7dazzler10BufferMode",
      "default" : "BufferMode.skip"
     },
     {
      "name" : "tracePointBuffer",
      "deco" : "AS7dentist6common10alignments4base10TracePoint",
      "default" : "[]"
     }
    ],
    "endline" : 957,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L1026_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 1026,
    "char" : 1,
    "endline" : 1174,
    "endchar" : 1
   },
   {
    "name" : "AlignmentHeader",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Meta information about a set of alignments, e.g. a LAS file.\n\nUsually this is created by reading a LAS file as efficiently as possible\nto improve performance of subsequent operations on the LAS file, e.g.\nby pre-allocating memory.\n",
    "line" : 1174,
    "char" : 1,
    "members" : [
     {
      "name" : "numAlignments",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Sum of number of alignment chains and number of unchained alignments\n",
      "line" : 1177,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "numAlignmentChains",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Number of alignment chains (i.e. the unchained flag is unset)\n",
      "line" : 1179,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 8
     },
     {
      "name" : "numLocalAlignments",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Total number of local alignments disregarding chaining\n",
      "line" : 1181,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 16
     },
     {
      "name" : "maxLocalAlignments",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Maximum number of local alignments per chain\n",
      "line" : 1183,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 24
     },
     {
      "name" : "maxLocalAlignmentsPerContig",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Maximum total number of local alignments per contig\n",
      "line" : 1185,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 32
     },
     {
      "name" : "numTracePoints",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Total number of trace points\n",
      "line" : 1187,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 40
     },
     {
      "name" : "maxTracePoints",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Maximum number of trace points per local alignment\n",
      "line" : 1189,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 48
     },
     {
      "name" : "tracePointDistance",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Trace point distance\n",
      "line" : 1192,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 56
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Infer header data from a range of alignments with a single pass\nacross the data.\n\nThe range signatures accepts currently only a range of\n`AlignmentChain`s.\n\nThe `lasFile` signature walks through `lasFile` using a\n`LocalAlignmentReader` with `BufferMode.skip`.\n",
      "line" : 1203,
      "char" : 28,
      "name" : "inferFrom",
      "parameters" : [
       {
        "name" : "R",
        "kind" : "type"
       }
      ],
      "constraint" : "isInputRange!R",
      "members" : [
       {
        "name" : "inferFrom",
        "kind" : "function",
        "line" : 1203,
        "char" : 28,
        "type" : "AlignmentHeader(R alignmentChains)",
        "parameters" : [
         {
          "name" : "alignmentChains",
          "type" : "R"
         }
        ],
        "endline" : 1245,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "inferFrom",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 1249,
      "char" : 28,
      "storageClass" : [
       "static"
      ],
      "deco" : "FAyaZS7dentist7dazzler15AlignmentHeader",
      "parameters" : [
       {
        "name" : "lasFile",
        "deco" : "Aya"
       }
      ],
      "endline" : 1303,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Infer trace points spacing from `alignments`.\n\nThis do NOT advance `alignments`.\n\nReturns: `tracePointDistance` of the first element of `alignments` or\n`100` if `alignments` is empty.\n",
      "line" : 1312,
      "char" : 19,
      "name" : "inferTracePointDistanceFrom",
      "parameters" : [
       {
        "name" : "R",
        "kind" : "type"
       }
      ],
      "constraint" : "isInputRange!R && (is(const(ElementType!R) == const(AlignmentChain)) || is(const(ElementType!R) == const(FlatLocalAlignment)))",
      "members" : [
       {
        "name" : "inferTracePointDistanceFrom",
        "kind" : "function",
        "line" : 1312,
        "char" : 19,
        "type" : "size_t(R alignments)",
        "parameters" : [
         {
          "name" : "alignments",
          "type" : "R"
         }
        ],
        "endline" : 1322,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "BufferMode",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Controls how to manage the buffer when reading data into memory.\n",
    "line" : 1423,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "overwrite",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)0u",
      "comment" : "Keep a single buffer and keep overwriting it with every new record.\n",
      "line" : 1426,
      "char" : 5
     },
     {
      "name" : "dynamic",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "Allocate a new buffer for every record. Use a `std.array.Appender`\nif the number of records is unknown.\n",
      "line" : 1429,
      "char" : 5
     },
     {
      "name" : "preallocated",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "comment" : "Write all records to a continuous stretch of memory pre-allocated by\nthe caller. The memory may be uninitialized since it will always be\nwritten to before any read occurs.\n",
      "line" : 1433,
      "char" : 5
     },
     {
      "name" : "skip",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "3",
      "comment" : "Do not use memory at all instead just skip over the records.\n",
      "line" : 1435,
      "char" : 5
     }
    ]
   },
   {
    "name" : "LocalAlignmentReader",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Read local alignments from a LAS file.\n\nSee_also: `getFlatLocalAlignments` for more details\n",
    "line" : 1442,
    "char" : 1,
    "members" : [
     {
      "name" : "las",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1444,
      "char" : 18,
      "deco" : "S3std5stdio4File",
      "offset" : 16
     },
     {
      "name" : "aLengths",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1445,
      "char" : 23,
      "deco" : "Ak",
      "originalType" : "coord_t[]",
      "offset" : 40
     },
     {
      "name" : "bLengths",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1446,
      "char" : 23,
      "deco" : "Ak",
      "originalType" : "coord_t[]",
      "offset" : 56
     },
     {
      "name" : "bufferMode",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1447,
      "char" : 24,
      "deco" : "E7dentist7dazzler10BufferMode",
      "offset" : 72
     },
     {
      "name" : "_numLocalAlignments",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1448,
      "char" : 20,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 80
     },
     {
      "name" : "_tracePointDistance",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1449,
      "char" : 27,
      "deco" : "t",
      "originalType" : "trace_point_t",
      "offset" : 88
     },
     {
      "name" : "isLargeTraceType",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1450,
      "char" : 18,
      "deco" : "b",
      "offset" : 90
     },
     {
      "name" : "numLocalAlignmentsLeft",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1452,
      "char" : 20,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 96
     },
     {
      "name" : "currentLA",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1453,
      "char" : 32,
      "deco" : "S7dentist6common10alignments4base18FlatLocalAlignment",
      "offset" : 104
     },
     {
      "name" : "overlapHead",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1454,
      "char" : 28,
      "deco" : "S7dentist7dazzler14DazzlerOverlap",
      "offset" : 168
     },
     {
      "name" : "tracePointBuffer",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1455,
      "char" : 26,
      "deco" : "AS7dentist6common10alignments4base10TracePoint",
      "offset" : 216
     },
     {
      "name" : "fullTracePointBuffer",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1456,
      "char" : 26,
      "deco" : "AS7dentist6common10alignments4base10TracePoint",
      "offset" : 232
     },
     {
      "name" : "numLocalAlignments",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Total number of local alignments in the LAS file. This is not affected\nby range operation, e.g. `popFront`.\n\nSee_also: `length`\n",
      "line" : 1463,
      "char" : 22,
      "deco" : "xFNaNbNdNiNfZm",
      "originalType" : "const pure nothrow @nogc @property @safe size_t()",
      "endline" : 1466,
      "endchar" : 5
     },
     {
      "name" : "numLocalAlignments",
      "kind" : "function",
      "protection" : "private",
      "line" : 1468,
      "char" : 28,
      "deco" : "FNaNbNdNiNfmZv",
      "originalType" : "pure nothrow @nogc @property @safe void(size_t newValue)",
      "parameters" : [
       {
        "name" : "newValue",
        "deco" : "m"
       }
      ],
      "endline" : 1471,
      "endchar" : 5
     },
     {
      "name" : "tracePointDistance",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Trace point spacing of the LAS file.\n",
      "line" : 1475,
      "char" : 29,
      "deco" : "xFNaNbNdNiNfZt",
      "originalType" : "const pure nothrow @nogc @property @safe trace_point_t()",
      "endline" : 1478,
      "endchar" : 5
     },
     {
      "name" : "tracePointDistance",
      "kind" : "function",
      "protection" : "private",
      "line" : 1480,
      "char" : 28,
      "deco" : "FNaNbNdNiNftZv",
      "originalType" : "pure nothrow @nogc @property @safe void(trace_point_t newValue)",
      "parameters" : [
       {
        "name" : "newValue",
        "deco" : "t"
       }
      ],
      "endline" : 1483,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "protected",
      "line" : 1486,
      "char" : 15,
      "deco" : "FxAyaE7dentist7dazzler10BufferModeASQBe6common10alignments4base10TracePointZCQCtQCo20LocalAlignmentReader",
      "originalType" : "(const string lasFile, BufferMode bufferMode, TracePoint[] tracePointBuffer = [])",
      "parameters" : [
       {
        "name" : "lasFile",
        "deco" : "xAya"
       },
       {
        "name" : "bufferMode",
        "deco" : "E7dentist7dazzler10BufferMode"
       },
       {
        "name" : "tracePointBuffer",
        "deco" : "AS7dentist6common10alignments4base10TracePoint",
        "default" : "[]"
       }
      ],
      "endline" : 1495,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "protected",
      "line" : 1498,
      "char" : 15,
      "deco" : "FxAyaAyaQdE7dentist7dazzler10BufferModeASQBe6common10alignments4base10TracePointZCQCtQCo20LocalAlignmentReader",
      "originalType" : "(const string lasFile, string dbA, string dbB, BufferMode bufferMode, TracePoint[] tracePointBuffer = [])",
      "parameters" : [
       {
        "name" : "lasFile",
        "deco" : "xAya"
       },
       {
        "name" : "dbA",
        "deco" : "Aya"
       },
       {
        "name" : "dbB",
        "deco" : "Aya"
       },
       {
        "name" : "bufferMode",
        "deco" : "E7dentist7dazzler10BufferMode"
       },
       {
        "name" : "tracePointBuffer",
        "deco" : "AS7dentist6common10alignments4base10TracePoint",
        "default" : "[]"
       }
      ],
      "endline" : 1515,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "private",
      "line" : 1518,
      "char" : 13,
      "deco" : "FxAyaAkQcE7dentist7dazzler10BufferModeASQBe6common10alignments4base10TracePointZCQCtQCo20LocalAlignmentReader",
      "originalType" : "(const string lasFile, coord_t[] aLengths, coord_t[] bLengths, BufferMode bufferMode, TracePoint[] tracePointBuffer)",
      "parameters" : [
       {
        "name" : "lasFile",
        "deco" : "xAya"
       },
       {
        "name" : "aLengths",
        "deco" : "Ak"
       },
       {
        "name" : "bLengths",
        "deco" : "Ak"
       },
       {
        "name" : "bufferMode",
        "deco" : "E7dentist7dazzler10BufferMode"
       },
       {
        "name" : "tracePointBuffer",
        "deco" : "AS7dentist6common10alignments4base10TracePoint"
       }
      ],
      "endline" : 1546,
      "endchar" : 5
     },
     {
      "name" : "contigLengths",
      "kind" : "function",
      "protection" : "private",
      "line" : 1549,
      "char" : 23,
      "deco" : "FAyaZAk",
      "originalType" : "coord_t[](string db)",
      "parameters" : [
       {
        "name" : "db",
        "deco" : "Aya"
       }
      ],
      "endline" : 1557,
      "endchar" : 5
     },
     {
      "name" : "initialize",
      "kind" : "function",
      "protection" : "private",
      "line" : 1560,
      "char" : 18,
      "deco" : "FZv",
      "endline" : 1570,
      "endchar" : 5
     },
     {
      "name" : "reset",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Reset the range. This can be used to walk over a LAS file multiple\ntimes without reopening the `std.stdio.File` or recreating the\nbuffers.\n\nThis requires a seek-able file as it seeks to the begin of the\nunderlying LAS file and adjusts the range state accordingly.\n",
      "line" : 1579,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 1584,
      "endchar" : 5
     },
     {
      "name" : "empty",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Range interface.\n",
      "line" : 1588,
      "char" : 20,
      "deco" : "xFNaNbNdNfZb",
      "endline" : 1591,
      "endchar" : 5
     },
     {
      "name" : "length",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 1595,
      "char" : 22,
      "deco" : "xFNaNbNdNfZm",
      "originalType" : "const pure nothrow @property @safe size_t()",
      "endline" : 1598,
      "endchar" : 5
     },
     {
      "name" : "popFront",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 1602,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 1609,
      "endchar" : 5
     },
     {
      "name" : "front",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 1613,
      "char" : 34,
      "deco" : "FNaNbNdNfZS7dentist6common10alignments4base18FlatLocalAlignment",
      "endline" : 1618,
      "endchar" : 5
     },
     {
      "name" : "skipTracePoints",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Returns whether reading or skipping trace points.\n",
      "line" : 1622,
      "char" : 20,
      "deco" : "xFNaNbNdNfZb",
      "endline" : 1625,
      "endchar" : 5
     },
     {
      "name" : "currentNumTracePoints",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Returns the number of trace points in the current local alignment\neven if `skipTracePoints` is true.\n\nThis is required because the number of trace points is unavailable in\nthe `front` element if `skipTracePoints` is true.\n",
      "line" : 1633,
      "char" : 22,
      "deco" : "xFNaNbNdNfZm",
      "originalType" : "const pure nothrow @property @safe size_t()",
      "endline" : 1636,
      "endchar" : 5
     },
     {
      "name" : "readHeader",
      "kind" : "function",
      "protection" : "protected",
      "line" : 1640,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 1644,
      "endchar" : 5
     },
     {
      "name" : "readNumLocalAlignments",
      "kind" : "function",
      "protection" : "protected",
      "line" : 1647,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 1653,
      "endchar" : 5
     },
     {
      "name" : "readTracePointDistance",
      "kind" : "function",
      "protection" : "protected",
      "line" : 1656,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 1663,
      "endchar" : 5
     },
     {
      "name" : "readLocalAlignment",
      "kind" : "function",
      "protection" : "protected",
      "line" : 1666,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 1689,
      "endchar" : 5
     },
     {
      "name" : "readOverlapHead",
      "kind" : "function",
      "protection" : "protected",
      "line" : 1692,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 1700,
      "endchar" : 5
     },
     {
      "name" : "fillInOverlapHead",
      "kind" : "function",
      "protection" : "protected",
      "line" : 1703,
      "char" : 10,
      "deco" : "FNaNbNfZv",
      "endline" : 1733,
      "endchar" : 5
     },
     {
      "name" : "fillInContigLengths",
      "kind" : "function",
      "protection" : "protected",
      "line" : 1736,
      "char" : 10,
      "deco" : "FNaNfZv",
      "endline" : 1755,
      "endchar" : 5
     },
     {
      "name" : "getTraceVectorLength",
      "kind" : "function",
      "protection" : "protected",
      "line" : 1758,
      "char" : 12,
      "deco" : "xFNaNfZm",
      "originalType" : "const pure @safe size_t()",
      "endline" : 1770,
      "endchar" : 5
     },
     {
      "name" : "readTraceVector",
      "kind" : "function",
      "protection" : "protected",
      "line" : 1773,
      "char" : 10,
      "deco" : "FmZv",
      "originalType" : "void(size_t traceLength)",
      "parameters" : [
       {
        "name" : "traceLength",
        "deco" : "m"
       }
      ],
      "endline" : 1780,
      "endchar" : 5
     },
     {
      "name" : "skipTraceVector",
      "kind" : "function",
      "protection" : "protected",
      "line" : 1783,
      "char" : 10,
      "deco" : "FmZv",
      "originalType" : "void(size_t traceLength)",
      "parameters" : [
       {
        "name" : "traceLength",
        "deco" : "m"
       }
      ],
      "endline" : 1788,
      "endchar" : 5
     },
     {
      "name" : "rewriteTracePointBufferToLargeTracePointType",
      "kind" : "function",
      "protection" : "protected",
      "line" : 1791,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 1809,
      "endchar" : 5
     },
     {
      "name" : "getRawTracePointBuffer",
      "kind" : "function",
      "protection" : "protected",
      "line" : 1812,
      "char" : 23,
      "deco" : "FNaNbNdmZAh",
      "originalType" : "pure nothrow @property ubyte[](size_t traceLength)",
      "parameters" : [
       {
        "name" : "traceLength",
        "deco" : "m"
       }
      ],
      "endline" : 1821,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "protected",
      "line" : 1824,
      "char" : 10,
      "name" : "unexpectedEOF",
      "parameters" : [
       {
        "name" : "what",
        "kind" : "value",
        "deco" : "Aya"
       },
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "unexpectedEOF",
        "kind" : "function",
        "line" : 1824,
        "char" : 10,
        "type" : "void(const T[] gotBuffer, const T[] expBuffer)",
        "parameters" : [
         {
          "name" : "gotBuffer",
          "type" : "T[]",
          "storageClass" : [
           "const"
          ]
         },
         {
          "name" : "expBuffer",
          "type" : "T[]",
          "storageClass" : [
           "const"
          ]
         }
        ],
        "endline" : 1832,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 1442,
      "char" : 1,
      "deco" : "FNeZv"
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     }
    ]
   },
   {
    "name" : "__unittest_L1839_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 1839,
    "char" : 1,
    "endline" : 1888,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Write alignments to `lasFile`. This method takes care of the differences\nbetween alignment flags in DENTIST and Dazzler code.\n\n`lasFile` must point to a seek-able file because the LAS header is updated\nafter writing all data to avoid traversing the data twice.\n",
    "line" : 1888,
    "char" : 6,
    "name" : "writeAlignments",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!R && is(const(ElementType!R) == const(FlatLocalAlignment))",
    "members" : [
     {
      "name" : "writeAlignments",
      "kind" : "function",
      "line" : 1888,
      "char" : 6,
      "type" : "void(const string lasFile, R flatLocalAlignments)",
      "parameters" : [
       {
        "name" : "lasFile",
        "type" : "string",
        "storageClass" : [
         "const"
        ]
       },
       {
        "name" : "flatLocalAlignments",
        "type" : "R"
       }
      ],
      "endline" : 1910,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 1913,
    "char" : 6,
    "name" : "writeAlignments",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!R && is(const(ElementType!R) == const(AlignmentChain))",
    "members" : [
     {
      "name" : "writeAlignments",
      "kind" : "function",
      "line" : 1913,
      "char" : 6,
      "type" : "void(const string lasFile, R alignmentChains)",
      "parameters" : [
       {
        "name" : "lasFile",
        "type" : "string",
        "storageClass" : [
         "const"
        ]
       },
       {
        "name" : "alignmentChains",
        "type" : "R"
       }
      ],
      "endline" : 1935,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L1937_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 1937,
    "char" : 1,
    "endline" : 1963,
    "endchar" : 1
   },
   {
    "name" : "DazzlerOverlap",
    "kind" : "struct",
    "protection" : "private",
    "comment" : "Struct `Overlap` from `dalign.h` used for LAS file I/O.\n",
    "line" : 1963,
    "char" : 9,
    "members" : [
     {
      "name" : "Flag",
      "kind" : "enum",
      "protection" : "public",
      "comment" : "Flags as defined in `dalign.h`\n",
      "line" : 1966,
      "char" : 12,
      "baseDeco" : "k",
      "members" : [
       {
        "name" : "complement",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "1u",
        "line" : 1968,
        "char" : 9
       },
       {
        "name" : "chainStart",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "4u",
        "line" : 1969,
        "char" : 9
       },
       {
        "name" : "chainContinuation",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "8u",
        "line" : 1970,
        "char" : 9
       },
       {
        "name" : "bestChain",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "16u",
        "line" : 1971,
        "char" : 9
       },
       {
        "name" : "disabled",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "32u",
        "line" : 1972,
        "char" : 9
       }
      ]
     },
     {
      "name" : "Path",
      "kind" : "struct",
      "protection" : "public",
      "comment" : "Struct `Path` from `dalign.h`\n",
      "line" : 1976,
      "char" : 12,
      "members" : [
       {
        "name" : "trace",
        "kind" : "variable",
        "protection" : "public",
        "line" : 1978,
        "char" : 15,
        "deco" : "Pv",
        "offset" : 0
       },
       {
        "name" : "tlen",
        "kind" : "variable",
        "protection" : "public",
        "line" : 1979,
        "char" : 13,
        "deco" : "i",
        "offset" : 8
       },
       {
        "name" : "diffs",
        "kind" : "variable",
        "protection" : "public",
        "line" : 1980,
        "char" : 13,
        "deco" : "i",
        "offset" : 12
       },
       {
        "name" : "abpos",
        "kind" : "variable",
        "protection" : "public",
        "line" : 1981,
        "char" : 13,
        "deco" : "i",
        "offset" : 16
       },
       {
        "name" : "bbpos",
        "kind" : "variable",
        "protection" : "public",
        "line" : 1982,
        "char" : 13,
        "deco" : "i",
        "offset" : 20
       },
       {
        "name" : "aepos",
        "kind" : "variable",
        "protection" : "public",
        "line" : 1983,
        "char" : 13,
        "deco" : "i",
        "offset" : 24
       },
       {
        "name" : "bepos",
        "kind" : "variable",
        "protection" : "public",
        "line" : 1984,
        "char" : 13,
        "deco" : "i",
        "offset" : 28
       }
      ]
     },
     {
      "name" : "path",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1987,
      "char" : 10,
      "deco" : "S7dentist7dazzler14DazzlerOverlap4Path",
      "offset" : 0
     },
     {
      "name" : "flags",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1988,
      "char" : 10,
      "deco" : "k",
      "offset" : 32
     },
     {
      "name" : "aread",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1989,
      "char" : 9,
      "deco" : "i",
      "offset" : 36
     },
     {
      "name" : "bread",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1990,
      "char" : 9,
      "deco" : "i",
      "offset" : 40
     },
     {
      "name" : "isLargeTraceType",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Utility function to determine the type of trace points.\n",
      "line" : 1994,
      "char" : 17,
      "storageClass" : [
       "static"
      ],
      "deco" : "FNaNbNfxiZb",
      "originalType" : "pure nothrow @safe bool(const int tracePointDistance)",
      "parameters" : [
       {
        "name" : "tracePointDistance",
        "deco" : "xi"
       }
      ],
      "endline" : 2000,
      "endchar" : 5
     },
     {
      "name" : "largeTraceType",
      "kind" : "alias",
      "protection" : "public",
      "comment" : "Aliases for trace point types.\n",
      "line" : 2004,
      "char" : 5,
      "deco" : "t"
     },
     {
      "name" : "smallTraceType",
      "kind" : "alias",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 2006,
      "char" : 5,
      "deco" : "h"
     }
    ]
   },
   {
    "name" : "writeAlignmentChain",
    "kind" : "function",
    "protection" : "private",
    "comment" : "Write a single `AlignmentChain` to `las` taking care of the appropriate\nflags for chaining.\n",
    "line" : 2012,
    "char" : 14,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FS3std5stdio4FilexS7dentist6common10alignments4base14AlignmentChainxiZv",
    "originalType" : "(File las, const AlignmentChain alignmentChain, const int tracePointDistance)",
    "parameters" : [
     {
      "name" : "las",
      "deco" : "S3std5stdio4File"
     },
     {
      "name" : "alignmentChain",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain"
     },
     {
      "name" : "tracePointDistance",
      "deco" : "xi"
     }
    ],
    "endline" : 2058,
    "endchar" : 1
   },
   {
    "name" : "writeFlatLocalAlignment",
    "kind" : "function",
    "protection" : "private",
    "comment" : "Write a single `AlignmentChain` to `las` taking care of translating flags\nfrom DENTIST to Dazzler.\n",
    "line" : 2063,
    "char" : 14,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FS3std5stdio4FilexS7dentist6common10alignments4base18FlatLocalAlignmentxiZv",
    "originalType" : "(File las, const FlatLocalAlignment flatLocalAlignment, const int tracePointDistance)",
    "parameters" : [
     {
      "name" : "las",
      "deco" : "S3std5stdio4File"
     },
     {
      "name" : "flatLocalAlignment",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment"
     },
     {
      "name" : "tracePointDistance",
      "deco" : "xi"
     }
    ],
    "endline" : 2098,
    "endchar" : 1
   },
   {
    "name" : "writeDazzlerOverlap",
    "kind" : "function",
    "protection" : "private",
    "comment" : "Write `dazzlerOverlap` to `las` compressing the trace vector if\n`tracePointDistance` is sufficiently small.\n\nSee_also: `DazzlerOverlap.isLargeTraceType`\n",
    "line" : 2105,
    "char" : 14,
    "deco" : "FS3std5stdio4FileKS7dentist7dazzler14DazzlerOverlapxASQBj6common10alignments4base10TracePointxiZv",
    "originalType" : "void(File las, ref DazzlerOverlap dazzlerOverlap, const TracePoint[] tracePoints, const int tracePointDistance)",
    "parameters" : [
     {
      "name" : "las",
      "deco" : "S3std5stdio4File"
     },
     {
      "name" : "dazzlerOverlap",
      "deco" : "S7dentist7dazzler14DazzlerOverlap",
      "storageClass" : [
       "ref"
      ]
     },
     {
      "name" : "tracePoints",
      "deco" : "xAS7dentist6common10alignments4base10TracePoint"
     },
     {
      "name" : "tracePointDistance",
      "deco" : "xi"
     }
    ],
    "endline" : 2145,
    "endchar" : 1
   },
   {
    "name" : "getTracePointDistance",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns the trace point distance in `lasFile`.\n",
    "line" : 2149,
    "char" : 15,
    "deco" : "FIAyaZt",
    "originalType" : "trace_point_t(in string lasFile)",
    "parameters" : [
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 2152,
    "endchar" : 1
   },
   {
    "name" : "getExactAlignment",
    "kind" : "function",
    "protection" : "public",
    "comment" : "$(RED [Experimental]) Reconstruct the alignment matrix for `ac`\nforce-filling gaps in the chain. Restrict reconstruction to\n`[beginA, endA)` on contig A if given.\n\nThe implementation is rather inefficient and should be avoided.\n",
    "line" : 2160,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FIAyaIQeIS7dentist6common10alignments4base14AlignmentChainImZSQCa4util6string__T17SequenceAlignmentTAyaVQea14_61203d3d2062203f2030203a2031ZQCh",
    "originalType" : "(in string dbA, in string dbB, in AlignmentChain ac, in size_t memoryLimit = 2 ^^ 20)",
    "parameters" : [
     {
      "name" : "dbA",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dbB",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "ac",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "memoryLimit",
      "deco" : "xm",
      "storageClass" : [
       "in"
      ],
      "default" : "1048576LU"
     }
    ],
    "endline" : 2175,
    "endchar" : 1
   },
   {
    "name" : "getExactAlignment",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 2178,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FIAyaIQeIS7dentist6common10alignments4base14AlignmentChainIkIkImZSQCe4util6string__T17SequenceAlignmentTAyaVQea14_61203d3d2062203f2030203a2031ZQCh",
    "originalType" : "(in string dbA, in string dbB, in AlignmentChain ac, in coord_t beginA, in coord_t endA, in size_t memoryLimit = 2 ^^ 20)",
    "parameters" : [
     {
      "name" : "dbA",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dbB",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "ac",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "beginA",
      "deco" : "xk",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "endA",
      "deco" : "xk",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "memoryLimit",
      "deco" : "xm",
      "storageClass" : [
       "in"
      ],
      "default" : "1048576LU"
     }
    ],
    "endline" : 2221,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 2224,
    "char" : 14,
    "name" : "getPaddedAlignment",
    "parameters" : [
     {
      "name" : "S",
      "kind" : "type"
     },
     {
      "name" : "TranslatedTracePoint",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "getPaddedAlignment",
      "kind" : "function",
      "line" : 2224,
      "char" : 14,
      "storageClass" : [
       "auto"
      ],
      "type" : "(in AlignmentChain ac, in TranslatedTracePoint begin, in TranslatedTracePoint end, S aSequence, S bSequence, in size_t memoryLimit = 2 ^^ 20)",
      "parameters" : [
       {
        "name" : "ac",
        "type" : "AlignmentChain",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "begin",
        "type" : "TranslatedTracePoint",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "end",
        "type" : "TranslatedTracePoint",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "aSequence",
        "type" : "S"
       },
       {
        "name" : "bSequence",
        "type" : "S"
       },
       {
        "name" : "memoryLimit",
        "type" : "size_t",
        "storageClass" : [
         "in"
        ],
        "default" : "2 ^^ 20"
       }
      ],
      "endline" : 2582,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L2584_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 2584,
    "char" : 1,
    "endline" : 2665,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L2665_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 2665,
    "char" : 1,
    "endline" : 2737,
    "endchar" : 1
   },
   {
    "name" : "getDbRecords",
    "kind" : "function",
    "protection" : "public",
    "comment" : "    Get the designated records of `dbFile`. Returns all records unless\n    `recordNumbers` is given.\n\n    Returns: lazy range of designated `DbRecord`s.\n    Throws: `DazzlerCommandException` if `recordNumber` is not in `dbFile`\n",
    "line" : 2737,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FIAyaIAE7dentist7dazzler13DBdumpOptionsZSQBhQBc__T12DbDumpReaderTCQCg4util7process__T9LinesPipeTSQDlQBfQBd11ProcessInfoVE3std8typecons__T4FlagVAyaa10_69734275666665726564ZQBii0ZQDoZQFb",
    "originalType" : "(in string dbFile, in DBdumpOptions[] dbdumpOptions = [])",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dbdumpOptions",
      "deco" : "xAE7dentist7dazzler13DBdumpOptions",
      "storageClass" : [
       "in"
      ],
      "default" : "[]"
     }
    ],
    "endline" : 2742,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 2745,
    "char" : 6,
    "name" : "getDbRecords",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isForwardRange!Range && is(ElementType!Range : size_t)",
    "members" : [
     {
      "name" : "getDbRecords",
      "kind" : "function",
      "line" : 2745,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(in string dbFile, Range recordNumbers, in DBdumpOptions[] dbdumpOptions = [])",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "recordNumbers",
        "type" : "Range"
       },
       {
        "name" : "dbdumpOptions",
        "type" : "DBdumpOptions[]",
        "storageClass" : [
         "in"
        ],
        "default" : "[]"
       }
      ],
      "endline" : 2753,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "DbDumpLineFormatTuple",
    "kind" : "struct",
    "protection" : "private",
    "line" : 2756,
    "char" : 9,
    "members" : [
     {
      "name" : "indicator",
      "kind" : "variable",
      "protection" : "public",
      "line" : 2758,
      "char" : 10,
      "deco" : "a",
      "offset" : 0
     },
     {
      "name" : "subIndicator",
      "kind" : "variable",
      "protection" : "public",
      "line" : 2759,
      "char" : 10,
      "deco" : "a",
      "offset" : 1
     },
     {
      "name" : "format",
      "kind" : "variable",
      "protection" : "public",
      "line" : 2760,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 8
     }
    ]
   },
   {
    "name" : "DbDumpLineFormat",
    "kind" : "enum",
    "protection" : "private",
    "line" : 2763,
    "char" : 9,
    "baseDeco" : "S7dentist7dazzler21DbDumpLineFormatTuple",
    "members" : [
     {
      "name" : "totalReadNumberCount",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('+', 'R', \"+ R %d\")",
      "line" : 2765,
      "char" : 5
     },
     {
      "name" : "totalMCount",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('+', 'M', \"+ M %d\")",
      "line" : 2766,
      "char" : 5
     },
     {
      "name" : "totalHeaderCount",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('+', 'H', \"+ H %d\")",
      "line" : 2767,
      "char" : 5
     },
     {
      "name" : "maxHeaderLength",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('@', 'H', \"@ H %d\")",
      "line" : 2768,
      "char" : 5
     },
     {
      "name" : "totalSequenceCount",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('+', 'S', \"+ S %d\")",
      "line" : 2769,
      "char" : 5
     },
     {
      "name" : "maxSequenceLength",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('@', 'S', \"@ S %d\")",
      "line" : 2770,
      "char" : 5
     },
     {
      "name" : "totalIntrinsicQualityVector",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('+', 'I', \"+ I %d\")",
      "line" : 2771,
      "char" : 5
     },
     {
      "name" : "maxIntrinsicQualityVector",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('@', 'I', \"@ I %d\")",
      "line" : 2772,
      "char" : 5
     },
     {
      "name" : "readNumber",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('R', '\\x00', \"R %d\")",
      "line" : 2773,
      "char" : 5
     },
     {
      "name" : "header",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('H', '\\x00', \"H %d %s\")",
      "line" : 2774,
      "char" : 5
     },
     {
      "name" : "pbLocation",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('L', '\\x00', \"L %d %d %d\")",
      "line" : 2775,
      "char" : 5
     },
     {
      "name" : "pbQuality",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('Q', '\\x00', \"Q %f\")",
      "line" : 2776,
      "char" : 5
     },
     {
      "name" : "sequence",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('S', '\\x00', \"S %d %s\")",
      "line" : 2777,
      "char" : 5
     },
     {
      "name" : "arrowSNR",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('N', '\\x00', \"S %d %d %d %d\")",
      "line" : 2778,
      "char" : 5
     },
     {
      "name" : "arrowPulseWidth",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('A', '\\x00', \"A %d %s\")",
      "line" : 2779,
      "char" : 5
     },
     {
      "name" : "intrinsicQualityVector",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('I', '\\x00', \"I %d %s\")",
      "line" : 2780,
      "char" : 5
     },
     {
      "name" : "quivaDeletionValues",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('d', '\\x00', \"d %d %s\")",
      "line" : 2781,
      "char" : 5
     },
     {
      "name" : "quivaDeletionString",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('c', '\\x00', \"c %d %s\")",
      "line" : 2782,
      "char" : 5
     },
     {
      "name" : "quivaInsertionValues",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('i', '\\x00', \"i %d %s\")",
      "line" : 2783,
      "char" : 5
     },
     {
      "name" : "quivaMergeValues",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('m', '\\x00', \"m %d %s\")",
      "line" : 2784,
      "char" : 5
     },
     {
      "name" : "quivaSubstitutionValues",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('s', '\\x00', \"s %d %s\")",
      "line" : 2785,
      "char" : 5
     },
     {
      "name" : "repeatProfileVector",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('P', '\\x00', \"P %d %s\")",
      "line" : 2786,
      "char" : 5
     },
     {
      "name" : "maskTrack",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "DbDumpLineFormatTuple('T', '\\x00', \"T%d %d %(%d %d%)\")",
      "line" : 2787,
      "char" : 5
     }
    ]
   },
   {
    "name" : "DbRecord",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Captures information about a single entry in a Dazzler DB.\n",
    "line" : 2792,
    "char" : 1,
    "members" : [
     {
      "name" : "PacBioReadInfo",
      "kind" : "struct",
      "protection" : "public",
      "line" : 2794,
      "char" : 12,
      "members" : [
       {
        "name" : "well",
        "kind" : "variable",
        "protection" : "public",
        "comment" : "ID of the well where the read occurred or zero-based contig index\nin the containing scaffold.\n",
        "line" : 2798,
        "char" : 14,
        "deco" : "k",
        "originalType" : "id_t",
        "offset" : 0
       },
       {
        "name" : "contigIdx",
        "kind" : "alias",
        "protection" : "public",
        "comment" : "ditto\n",
        "line" : 2800,
        "char" : 9,
        "originalType" : "well"
       },
       {
        "name" : "pulseStart",
        "kind" : "variable",
        "protection" : "public",
        "comment" : "Start of the high-quality region for reads or begin coordinate\non the scaffold (including gaps) for contigs.\n",
        "line" : 2804,
        "char" : 17,
        "deco" : "k",
        "originalType" : "coord_t",
        "offset" : 4
       },
       {
        "name" : "begin",
        "kind" : "alias",
        "protection" : "public",
        "line" : 2805,
        "char" : 9,
        "originalType" : "pulseStart"
       },
       {
        "name" : "pulseEnd",
        "kind" : "variable",
        "protection" : "public",
        "comment" : "End of the high-quality region for reads or end coordinate\non the scaffold (including gaps) for contigs.\n",
        "line" : 2809,
        "char" : 17,
        "deco" : "k",
        "originalType" : "coord_t",
        "offset" : 8
       },
       {
        "name" : "end",
        "kind" : "alias",
        "protection" : "public",
        "line" : 2810,
        "char" : 9,
        "originalType" : "pulseEnd"
       },
       {
        "name" : "readQuality",
        "kind" : "variable",
        "protection" : "public",
        "comment" : "Read quality in [0, 1] for reads. Does not apply to contigs.\n",
        "line" : 2813,
        "char" : 15,
        "deco" : "f",
        "offset" : 12
       },
       {
        "name" : "pulseLength",
        "kind" : "function",
        "protection" : "public",
        "comment" : "Length of the high-quality region for reads or length of the\ncontig for contigs.\n",
        "line" : 2818,
        "char" : 27,
        "deco" : "xFNaNbNdNfZk",
        "originalType" : "const pure nothrow @property @safe coord_t()",
        "endline" : 2821,
        "endchar" : 9
       },
       {
        "name" : "length",
        "kind" : "alias",
        "protection" : "public",
        "comment" : "ditto\n",
        "line" : 2824,
        "char" : 9,
        "originalType" : "pulseLength"
       }
      ]
     },
     {
      "name" : "readNumber",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "One-based read/contig number.\n",
      "line" : 2828,
      "char" : 10,
      "deco" : "k",
      "originalType" : "id_t",
      "offset" : 0
     },
     {
      "name" : "contigId",
      "kind" : "alias",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 2830,
      "char" : 5,
      "originalType" : "readNumber"
     },
     {
      "name" : "header",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "FASTA header\n",
      "line" : 2833,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 8
     },
     {
      "name" : "pacBioReadInfo",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "PacBio read information for reads and assembly location for contigs.\n",
      "line" : 2836,
      "char" : 20,
      "deco" : "S7dentist7dazzler8DbRecord14PacBioReadInfo",
      "offset" : 24
     },
     {
      "name" : "location",
      "kind" : "alias",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 2838,
      "char" : 5,
      "originalType" : "pacBioReadInfo"
     },
     {
      "name" : "sequence",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Base pair sequence.\n",
      "line" : 2841,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 40
     },
     {
      "name" : "intrinsicQualityVector",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Intrinsic QVs.\n",
      "line" : 2844,
      "char" : 12,
      "deco" : "Ag",
      "offset" : 56
     },
     {
      "name" : "intrinsicQVs",
      "kind" : "alias",
      "protection" : "public",
      "line" : 2845,
      "char" : 5,
      "originalType" : "intrinsicQualityVector"
     },
     {
      "name" : "maxQV",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Maximum allowed QV value.\n",
      "line" : 2848,
      "char" : 10,
      "storageClass" : [
       "enum"
      ],
      "deco" : "i",
      "init" : "50"
     },
     {
      "name" : "fromQVChar",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Get numeric QV from character `qv`.\n",
      "line" : 2852,
      "char" : 17,
      "storageClass" : [
       "static"
      ],
      "deco" : "FxaZg",
      "originalType" : "byte(const char qv)",
      "parameters" : [
       {
        "name" : "qv",
        "deco" : "xa"
       }
      ],
      "endline" : 2860,
      "endchar" : 5
     },
     {
      "name" : "toQVChar",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Get QV character from numeric `qv` value.\n",
      "line" : 2864,
      "char" : 17,
      "storageClass" : [
       "static"
      ],
      "deco" : "FxgZa",
      "originalType" : "char(const byte qv)",
      "parameters" : [
       {
        "name" : "qv",
        "deco" : "xg"
       }
      ],
      "endline" : 2872,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 2876,
    "char" : 9,
    "name" : "DbDumpReader",
    "parameters" : [
     {
      "name" : "S",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!S && isSomeString!(ElementType!S)",
    "members" : [
     {
      "name" : "DbDumpReader",
      "kind" : "struct",
      "protection" : "public",
      "line" : 2876,
      "char" : 9,
      "members" : [
       {
        "name" : "dstring",
        "kind" : "alias",
        "line" : 2878,
        "char" : 12,
        "type" : "dstring"
       },
       {
        "name" : "DbDump",
        "kind" : "alias",
        "line" : 2879,
        "char" : 12,
        "type" : "ReturnType!getDumpLines"
       },
       {
        "name" : "dbDump",
        "kind" : "variable",
        "line" : 2882,
        "char" : 12,
        "type" : "DbDump"
       },
       {
        "name" : "_empty",
        "kind" : "variable",
        "line" : 2883,
        "char" : 10,
        "deco" : "b"
       },
       {
        "name" : "numReads",
        "kind" : "variable",
        "line" : 2884,
        "char" : 10,
        "type" : "id_t"
       },
       {
        "name" : "currentRecord",
        "kind" : "variable",
        "line" : 2885,
        "char" : 14,
        "type" : "DbRecord"
       },
       {
        "name" : "currentDumpLine",
        "kind" : "variable",
        "line" : 2886,
        "char" : 13,
        "type" : "dstring"
       },
       {
        "name" : "currentDumpLineNumber",
        "kind" : "variable",
        "line" : 2887,
        "char" : 12,
        "type" : "size_t"
       },
       {
        "name" : "currentLineType",
        "kind" : "variable",
        "line" : 2888,
        "char" : 11,
        "deco" : "w"
       },
       {
        "name" : "currentLineSubType",
        "kind" : "variable",
        "line" : 2889,
        "char" : 11,
        "deco" : "w"
       },
       {
        "name" : "totalSequence",
        "kind" : "variable",
        "line" : 2893,
        "char" : 13,
        "type" : "coord_t"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 2895,
        "char" : 5,
        "type" : "(S dbDump)",
        "parameters" : [
         {
          "name" : "dbDump",
          "type" : "S"
         }
        ],
        "endline" : 2912,
        "endchar" : 5
       },
       {
        "name" : "popFront",
        "kind" : "function",
        "line" : 2914,
        "char" : 10,
        "type" : "void()",
        "endline" : 2924,
        "endchar" : 5
       },
       {
        "name" : "empty",
        "kind" : "function",
        "line" : 2926,
        "char" : 20,
        "type" : "const pure nothrow @property bool()",
        "endline" : 2929,
        "endchar" : 5
       },
       {
        "name" : "front",
        "kind" : "function",
        "line" : 2931,
        "char" : 24,
        "type" : "pure nothrow @property DbRecord()",
        "endline" : 2936,
        "endchar" : 5
       },
       {
        "name" : "length",
        "kind" : "function",
        "line" : 2938,
        "char" : 22,
        "type" : "pure nothrow @property size_t()",
        "endline" : 2941,
        "endchar" : 5
       },
       {
        "name" : "closePipe",
        "kind" : "alias",
        "line" : 2944,
        "char" : 9,
        "type" : "setEmpty"
       },
       {
        "name" : "setEmpty",
        "kind" : "function",
        "line" : 2946,
        "char" : 10,
        "type" : "pure nothrow void()",
        "endline" : 2951,
        "endchar" : 5
       },
       {
        "name" : "getDumpLines",
        "kind" : "function",
        "line" : 2955,
        "char" : 17,
        "storageClass" : [
         "auto",
         "static"
        ],
        "type" : "(S dbDump)",
        "parameters" : [
         {
          "name" : "dbDump",
          "type" : "S"
         }
        ],
        "endline" : 2958,
        "endchar" : 5
       },
       {
        "name" : "readNextDbRecord",
        "kind" : "function",
        "line" : 2960,
        "char" : 10,
        "type" : "void()",
        "endline" : 3064,
        "endchar" : 5
       },
       {
        "name" : "peekDumpLine",
        "kind" : "function",
        "line" : 3066,
        "char" : 10,
        "type" : "void()",
        "endline" : 3074,
        "endchar" : 5
       },
       {
        "name" : "popDumpLine",
        "kind" : "function",
        "line" : 3076,
        "char" : 18,
        "type" : "Flag!\"empty\"()",
        "endline" : 3096,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "line" : 3098,
        "char" : 9,
        "name" : "readTotal",
        "parameters" : [
         {
          "name" : "lineTypeFormat",
          "kind" : "value",
          "type" : "DbDumpLineFormat"
         },
         {
          "name" : "Int",
          "kind" : "type"
         }
        ],
        "members" : [
         {
          "name" : "readTotal",
          "kind" : "function",
          "line" : 3098,
          "char" : 9,
          "type" : "Int()",
          "endline" : 3104,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "line" : 3106,
        "char" : 10,
        "name" : "read",
        "parameters" : [
         {
          "name" : "lineTypeFormat",
          "kind" : "value",
          "type" : "DbDumpLineFormat"
         }
        ],
        "constraint" : "lineTypeFormat == DbDumpLineFormat.totalReadNumberCount",
        "members" : [
         {
          "name" : "read",
          "kind" : "function",
          "line" : 3106,
          "char" : 10,
          "type" : "void()",
          "endline" : 3110,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "line" : 3112,
        "char" : 10,
        "name" : "read",
        "parameters" : [
         {
          "name" : "lineTypeFormat",
          "kind" : "value",
          "type" : "DbDumpLineFormat"
         }
        ],
        "constraint" : "lineTypeFormat == DbDumpLineFormat.totalSequenceCount",
        "members" : [
         {
          "name" : "read",
          "kind" : "function",
          "line" : 3112,
          "char" : 10,
          "type" : "void()",
          "endline" : 3116,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "line" : 3118,
        "char" : 10,
        "name" : "read",
        "parameters" : [
         {
          "name" : "lineTypeFormat",
          "kind" : "value",
          "type" : "DbDumpLineFormat"
         }
        ],
        "constraint" : "lineTypeFormat == DbDumpLineFormat.header",
        "members" : [
         {
          "name" : "read",
          "kind" : "function",
          "line" : 3118,
          "char" : 10,
          "type" : "void()",
          "endline" : 3129,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "line" : 3131,
        "char" : 10,
        "name" : "read",
        "parameters" : [
         {
          "name" : "lineTypeFormat",
          "kind" : "value",
          "type" : "DbDumpLineFormat"
         }
        ],
        "constraint" : "lineTypeFormat == DbDumpLineFormat.readNumber",
        "members" : [
         {
          "name" : "read",
          "kind" : "function",
          "line" : 3131,
          "char" : 10,
          "type" : "void()",
          "endline" : 3135,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "line" : 3137,
        "char" : 10,
        "name" : "read",
        "parameters" : [
         {
          "name" : "lineTypeFormat",
          "kind" : "value",
          "type" : "DbDumpLineFormat"
         }
        ],
        "constraint" : "lineTypeFormat == DbDumpLineFormat.pbLocation",
        "members" : [
         {
          "name" : "read",
          "kind" : "function",
          "line" : 3137,
          "char" : 10,
          "type" : "void()",
          "endline" : 3145,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "line" : 3147,
        "char" : 10,
        "name" : "read",
        "parameters" : [
         {
          "name" : "lineTypeFormat",
          "kind" : "value",
          "type" : "DbDumpLineFormat"
         }
        ],
        "constraint" : "lineTypeFormat == DbDumpLineFormat.pbQuality",
        "members" : [
         {
          "name" : "read",
          "kind" : "function",
          "line" : 3147,
          "char" : 10,
          "type" : "void()",
          "endline" : 3153,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "line" : 3155,
        "char" : 10,
        "name" : "read",
        "parameters" : [
         {
          "name" : "lineTypeFormat",
          "kind" : "value",
          "type" : "DbDumpLineFormat"
         }
        ],
        "constraint" : "lineTypeFormat == DbDumpLineFormat.sequence",
        "members" : [
         {
          "name" : "read",
          "kind" : "function",
          "line" : 3155,
          "char" : 10,
          "type" : "void()",
          "endline" : 3166,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "line" : 3168,
        "char" : 10,
        "name" : "read",
        "parameters" : [
         {
          "name" : "lineTypeFormat",
          "kind" : "value",
          "type" : "DbDumpLineFormat"
         }
        ],
        "constraint" : "lineTypeFormat == DbDumpLineFormat.intrinsicQualityVector",
        "members" : [
         {
          "name" : "read",
          "kind" : "function",
          "line" : 3168,
          "char" : 10,
          "type" : "void()",
          "endline" : 3184,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "error",
        "kind" : "function",
        "line" : 3192,
        "char" : 10,
        "type" : "void(in string reason)",
        "parameters" : [
         {
          "name" : "reason",
          "type" : "string",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 3195,
        "endchar" : 5
       },
       {
        "name" : "_enforce",
        "kind" : "function",
        "line" : 3197,
        "char" : 10,
        "type" : "void(bool condition, lazy string reason)",
        "parameters" : [
         {
          "name" : "condition",
          "deco" : "b"
         },
         {
          "name" : "reason",
          "type" : "string",
          "storageClass" : [
           "lazy"
          ]
         }
        ],
        "endline" : 3200,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 3203,
    "char" : 14,
    "name" : "readDbDump",
    "parameters" : [
     {
      "name" : "S",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "readDbDump",
      "kind" : "function",
      "line" : 3203,
      "char" : 14,
      "storageClass" : [
       "auto"
      ],
      "type" : "(S lasDump)",
      "parameters" : [
       {
        "name" : "lasDump",
        "type" : "S"
       }
      ],
      "endline" : 3206,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L3208_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 3208,
    "char" : 1,
    "endline" : 3329,
    "endchar" : 1
   },
   {
    "name" : "getFastaSequences",
    "kind" : "function",
    "protection" : "public",
    "comment" : "    Get the base pair sequences of the designated records. This does NOT\n    include the header.\n\n    Returns sequences from all records if `recordNumbers` is empty.\n\n    Throws: `DazzlerCommandException` if `recordNumber` is not in `dbFile`\n",
    "line" : 3329,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FIAyaZS3std5range__T4TakeTSQuQs__T9GeneratorS_D7dentist7dazzler__T17getFastaSequencesTAmZQxFIQDnQkZ16countedSequencesMFZAyaZQDmZQEe",
    "originalType" : "(in string dbFile)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 3334,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 3337,
    "char" : 6,
    "name" : "getFastaSequences",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isForwardRange!Range && is(ElementType!Range : size_t)",
    "members" : [
     {
      "name" : "getFastaSequences",
      "kind" : "function",
      "line" : 3337,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(in string dbFile, Range recordNumbers)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "recordNumbers",
        "type" : "Range"
       }
      ],
      "endline" : 3370,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "getFastaSequence",
    "kind" : "function",
    "protection" : "public",
    "comment" : "    Get the base pair sequence of the designated record.\n\n    This methods caches and pre-fetches sequences in order to improve\n    performance and reduce the number of forks. It uses two caches selected\n    by `dbFile` which each hold up to `cacheSize` many read sequence at once.\n    If `recordNumber` is not in the pre-fetched segment the next `cacheSize`\n    many sequences starting with `recordNumber` are fetched.\n\n    Params:\n        dbFile = path to DB\n        recordNumber = one-based number of the desired record\n        cacheSize = maximum number of reads in the cache\n    Throws: DazzlerCommandException if recordNumber is not in dbFile\n",
    "line" : 3388,
    "char" : 8,
    "deco" : "FIAyakIkZAya",
    "originalType" : "string(in string dbFile, id_t recordNumber, in id_t cacheSize = 1024)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "recordNumber",
      "deco" : "k"
     },
     {
      "name" : "cacheSize",
      "deco" : "xk",
      "storageClass" : [
       "in"
      ],
      "default" : "1024u"
     }
    ],
    "endline" : 3433,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "comment" : "Lazily extract sequence from `S` lines in `dbdump`.\n",
    "line" : 3437,
    "char" : 14,
    "name" : "readSequences",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "readSequences",
      "kind" : "function",
      "line" : 3437,
      "char" : 14,
      "storageClass" : [
       "auto"
      ],
      "type" : "(R dbdump)",
      "parameters" : [
       {
        "name" : "dbdump",
        "type" : "R"
       }
      ],
      "endline" : 3444,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L3446_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 3446,
    "char" : 1,
    "endline" : 3474,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Get the designated set of records in FASTA format. If `recordNumbers` is\n    empty the whole DB will be converted.\n\n    Returns: lazy range of strings\n",
    "line" : 3474,
    "char" : 6,
    "name" : "getFastaEntries",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!Range && is(ElementType!Range : size_t)",
    "members" : [
     {
      "name" : "getFastaEntries",
      "kind" : "function",
      "line" : 3474,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(in string dbFile, Range recordNumbers, in size_t fastaLineWidth)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "recordNumbers",
        "type" : "Range"
       },
       {
        "name" : "fastaLineWidth",
        "type" : "size_t",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 3488,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 3491,
    "char" : 14,
    "name" : "readDbDumpForFastaEntries",
    "parameters" : [
     {
      "name" : "S",
      "kind" : "type"
     },
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!S && isSomeString!(ElementType!S) && isInputRange!Range && is(ElementType!Range : size_t)",
    "members" : [
     {
      "name" : "readDbDumpForFastaEntries",
      "kind" : "function",
      "line" : 3491,
      "char" : 14,
      "storageClass" : [
       "auto"
      ],
      "type" : "(S dbDump, Range recordNumbers, in size_t lineLength)",
      "parameters" : [
       {
        "name" : "dbDump",
        "type" : "S"
       },
       {
        "name" : "recordNumbers",
        "type" : "Range"
       },
       {
        "name" : "lineLength",
        "type" : "size_t",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 3558,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L3560_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 3560,
    "char" : 1,
    "endline" : 3619,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Build `outputDb` with the given set of FASTA records. If no `outputDb`\n    is given a temporary `.dam` file in `tmpdir` will be created.\n\n    Returns: path to DB\n",
    "line" : 3619,
    "char" : 8,
    "name" : "buildDamFile",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!Range && isSomeString!(ElementType!Range)",
    "members" : [
     {
      "name" : "buildDamFile",
      "kind" : "function",
      "line" : 3619,
      "char" : 8,
      "type" : "string(Range fastaRecords, in string tmpdir, in string[] dbsplitOptions = [], Append append = No.append)",
      "parameters" : [
       {
        "name" : "fastaRecords",
        "type" : "Range"
       },
       {
        "name" : "tmpdir",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "dbsplitOptions",
        "type" : "string[]",
        "storageClass" : [
         "in"
        ],
        "default" : "[]"
       },
       {
        "name" : "append",
        "type" : "Append",
        "default" : "No.append"
       }
      ],
      "endline" : 3631,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 3634,
    "char" : 8,
    "name" : "buildDamFile",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!Range && isSomeString!(ElementType!Range)",
    "members" : [
     {
      "name" : "buildDamFile",
      "kind" : "function",
      "line" : 3634,
      "char" : 8,
      "type" : "string(string outputDb, Range fastaRecords, in string[] dbsplitOptions = [], Append append = No.append)",
      "parameters" : [
       {
        "name" : "outputDb",
        "type" : "string"
       },
       {
        "name" : "fastaRecords",
        "type" : "Range"
       },
       {
        "name" : "dbsplitOptions",
        "type" : "string[]",
        "storageClass" : [
         "in"
        ],
        "default" : "[]"
       },
       {
        "name" : "append",
        "type" : "Append",
        "default" : "No.append"
       }
      ],
      "endline" : 3643,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L3645_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 3645,
    "char" : 1,
    "endline" : 3684,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Build `outputDb` with the given set of FASTA records. If no `outputDb`\n    is given a temporary `.db` file in `tmpdir` will be created.\n\n    Returns: path to DB\n",
    "line" : 3684,
    "char" : 8,
    "name" : "buildDbFile",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!Range && isSomeString!(ElementType!Range)",
    "members" : [
     {
      "name" : "buildDbFile",
      "kind" : "function",
      "line" : 3684,
      "char" : 8,
      "type" : "string(Range fastaRecords, in string tmpdir, in string[] dbsplitOptions = [], Append append = No.append)",
      "parameters" : [
       {
        "name" : "fastaRecords",
        "type" : "Range"
       },
       {
        "name" : "tmpdir",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "dbsplitOptions",
        "type" : "string[]",
        "storageClass" : [
         "in"
        ],
        "default" : "[]"
       },
       {
        "name" : "append",
        "type" : "Append",
        "default" : "No.append"
       }
      ],
      "endline" : 3696,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 3699,
    "char" : 8,
    "name" : "buildDbFile",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!Range && isSomeString!(ElementType!Range)",
    "members" : [
     {
      "name" : "buildDbFile",
      "kind" : "function",
      "line" : 3699,
      "char" : 8,
      "type" : "string(string outputDb, Range fastaRecords, in string[] dbsplitOptions = [], Append append = No.append)",
      "parameters" : [
       {
        "name" : "outputDb",
        "type" : "string"
       },
       {
        "name" : "fastaRecords",
        "type" : "Range"
       },
       {
        "name" : "dbsplitOptions",
        "type" : "string[]",
        "storageClass" : [
         "in"
        ],
        "default" : "[]"
       },
       {
        "name" : "append",
        "type" : "Append",
        "default" : "No.append"
       }
      ],
      "endline" : 3708,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L3710_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 3710,
    "char" : 1,
    "endline" : 3746,
    "endchar" : 1
   },
   {
    "name" : "minQVCoverage",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "Minimum alignment coverage required to compute intrinsic quality values\n(QVs).\n",
    "line" : 3746,
    "char" : 11,
    "storageClass" : [
     "enum"
    ],
    "deco" : "k",
    "originalType" : "id_t",
    "init" : "4u"
   },
   {
    "name" : "computeQVs",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Compute intrinsic quality values (QVs) from the alignments in `lasFile`.\n\nParams:\ndbFile = path to DB\nlasFile = alignments of entries in `dbFile`\nmasks = list of soft masks used with `DAScover`\ncoverage = coverage estimate passed to `DASqv`; estimate from\n`DAScover` will be used unless a positive `coverage` is provided.\n",
    "line" : 3757,
    "char" : 6,
    "deco" : "FIAyaIQekZv",
    "originalType" : "void(in string dbFile, in string lasFile, id_t coverage = 0)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "coverage",
      "deco" : "k",
      "default" : "0u"
     }
    ],
    "endline" : 3760,
    "endchar" : 1
   },
   {
    "name" : "computeQVs",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 3763,
    "char" : 6,
    "deco" : "FIAyaIQeIAQikZv",
    "originalType" : "void(in string dbFile, in string lasFile, in string[] masks, id_t coverage = 0)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "masks",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "coverage",
      "deco" : "k",
      "default" : "0u"
     }
    ],
    "endline" : 3767,
    "endchar" : 1
   },
   {
    "name" : "DBdustOptions",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Options for `DBdump`.\n",
    "line" : 3771,
    "char" : 1,
    "baseDeco" : "Aya",
    "members" : [
     {
      "name" : "windowSize",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-w\"",
      "line" : 3774,
      "char" : 5
     },
     {
      "name" : "dustThreshold",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-t\"",
      "line" : 3776,
      "char" : 5
     },
     {
      "name" : "minIntervalSize",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-m\"",
      "line" : 3778,
      "char" : 5
     },
     {
      "name" : "baseCompositionBias",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-b\"",
      "line" : 3780,
      "char" : 5
     }
    ]
   },
   {
    "name" : "dbdustMaskName",
    "kind" : "variable",
    "protection" : "public",
    "comment" : "`DBdust` always produces a mask with this name.\n",
    "line" : 3785,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"dust\""
   },
   {
    "name" : "dbdust",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Run `DBdust` on `dbFile`.\n",
    "line" : 3790,
    "char" : 6,
    "deco" : "FIAyaIAQfZv",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dbdustOptions",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 3793,
    "endchar" : 1
   },
   {
    "name" : "getDalignment",
    "kind" : "function",
    "protection" : "public",
    "comment" : "    Align DB(s) to each other using `daligner` executed in `outdir`.\n\n    The paths `dbFile`, `referenceDb`, `queryDb` are relative to the current\n    working directory – NOT `outdir`.\n\n    Returns: path to LAS file.\n",
    "line" : 3804,
    "char" : 8,
    "deco" : "FIAyaIAQfIQiZAya",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dalignerOptions",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "outdir",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 3810,
    "endchar" : 1
   },
   {
    "name" : "getDalignment",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 3813,
    "char" : 8,
    "deco" : "FIAyaIQeIAQiIQlZAya",
    "parameters" : [
     {
      "name" : "referenceDb",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "queryDb",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dalignerOptions",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "outdir",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 3819,
    "endchar" : 1
   },
   {
    "name" : "getDamapping",
    "kind" : "function",
    "protection" : "public",
    "comment" : "    Align `queryDb` against `refDb` using `damapper` executed in `outdir`.\n\n    The paths `refDb`, `queryDb` are relative to the current working\n    directory – NOT `outdir`.\n\n    Returns: path to LAS file.\n",
    "line" : 3830,
    "char" : 8,
    "deco" : "FIAyaIQeIAQiIQlZAya",
    "parameters" : [
     {
      "name" : "refDb",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "queryDb",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "damapperOptions",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "outdir",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 3841,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Filter local alignments in `lasFile` producing a new LAS file.\n\nThe `lasFile` is read using `getFlatLocalAlignments` and `pred`\nis applied to every `FlatLocalAlignment`. The alignment is kept if `pred`\nevaluates to a truthy value and discarded otherwise.\n\nRead/contig lengths are filled in if `dbFile` is provided.\n\nBugs: LAs files referring to two different DBs cannot makes use of the\nfill-in feature for contig lengths.\n",
    "line" : 3854,
    "char" : 8,
    "name" : "filterLocalAlignments",
    "parameters" : [
     {
      "name" : "pred",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "filterLocalAlignments",
      "kind" : "function",
      "line" : 3854,
      "char" : 8,
      "type" : "string(in string lasFile)",
      "parameters" : [
       {
        "name" : "lasFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 3857,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 3860,
    "char" : 8,
    "name" : "filterLocalAlignments",
    "parameters" : [
     {
      "name" : "pred",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "filterLocalAlignments",
      "kind" : "function",
      "line" : 3860,
      "char" : 8,
      "type" : "string(in string dbFile, in string lasFile)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "lasFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 3872,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L3874_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 3874,
    "char" : 1,
    "endline" : 3968,
    "endchar" : 1
   },
   {
    "name" : "chainLocalAlignments",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Chain local alignments in `lasFile` and write back to a LAS file.\n\nReturns: path to LAS file\nSee_also: `dentist.common.alignments.chaining`\n",
    "line" : 3968,
    "char" : 8,
    "deco" : "FIAyaIQeIS7dentist6common10alignments8chaining15ChainingOptionsZAya",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "options",
      "deco" : "xS7dentist6common10alignments8chaining15ChainingOptions",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 3989,
    "endchar" : 1
   },
   {
    "name" : "filterPileUpAlignments",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Disables alignments that should not appear in a pile up.\n\nIf using the `lasFile` signature then this reads `lasFile` with contig\nlengths from `dbFile`, applies the filter and writes the result to the\nreturned LAS file. The resulting LAS file will have the same amount of\ndata as the input LAS file.\n\nIf using the array signature then the disabled flag of the array entries\nis modified according to the filter.\n\nReturns: path to LAS file or nothing.\nParams:\ndbFile = DB of involved reads\nlasFile = file of alignments\nalignments = array of alignments\nproperAlignmentAllowance = allowance when determining if an alignment\nends or starts at the tips of a contig.\nforceFlat = set alignment flags to make it look unchained and sort\nthe unchained alignments. This is required if theisValidPileUpAlignment alignments are\nchained and sorted as chains. $(I Warning: this changes the passed\narray!)\nSee_also: `isValidPileUpAlignment`\n",
    "line" : 4014,
    "char" : 8,
    "deco" : "FIAyaIQeIkE3std8typecons__T4FlagVAyaa9_666f726365466c6174ZQBfZQBd",
    "originalType" : "string(in string dbFile, in string lasFile, in coord_t properAlignmentAllowance, Flag!\"forceFlat\" forceFlat = No.forceFlat)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "properAlignmentAllowance",
      "deco" : "xk",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "forceFlat",
      "deco" : "E3std8typecons__T4FlagVAyaa9_666f726365466c6174ZQBf",
      "default" : "Flag.no"
     }
    ],
    "endline" : 4030,
    "endchar" : 1
   },
   {
    "name" : "filterPileUpAlignments",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 4033,
    "char" : 6,
    "deco" : "FKAS7dentist6common10alignments4base14AlignmentChainIkZv",
    "originalType" : "void(ref AlignmentChain[] alignments, in coord_t properAlignmentAllowance)",
    "parameters" : [
     {
      "name" : "alignments",
      "deco" : "AS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "ref"
      ]
     },
     {
      "name" : "properAlignmentAllowance",
      "deco" : "xk",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 4040,
    "endchar" : 1
   },
   {
    "name" : "filterPileUpAlignments",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 4044,
    "char" : 6,
    "deco" : "FKAS7dentist6common10alignments4base18FlatLocalAlignmentIkE3std8typecons__T4FlagVAyaa9_666f726365466c6174ZQBfZv",
    "originalType" : "void(ref FlatLocalAlignment[] alignments, in coord_t properAlignmentAllowance, Flag!\"forceFlat\" forceFlat = No.forceFlat)",
    "parameters" : [
     {
      "name" : "alignments",
      "deco" : "AS7dentist6common10alignments4base18FlatLocalAlignment",
      "storageClass" : [
       "ref"
      ]
     },
     {
      "name" : "properAlignmentAllowance",
      "deco" : "xk",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "forceFlat",
      "deco" : "E3std8typecons__T4FlagVAyaa9_666f726365466c6174ZQBf",
      "default" : "Flag.no"
     }
    ],
    "endline" : 4064,
    "endchar" : 1
   },
   {
    "name" : "isValidPileUpAlignment",
    "kind" : "function",
    "protection" : "public",
    "comment" : "An alignment in a pile up is valid iff it is proper and the begin/end\nof both reads match.\n\nParams:\nalignment = alignment to investigate\nallowance = allowance when determining if an alignment\nends or starts at the tips of a contig.\nSee_also: `dentist.common.alignments.base.AlignmentChain.beginsWith`,\n`dentist.common.alignments.base.AlignmentChain.endsWith`,\n`dentist.common.alignments.base.FlatLocalAlignment.FlatLocus.beginsWithin`,\n`dentist.common.alignments.base.FlatLocalAlignment.FlatLocus.endsWithin`,\n",
    "line" : 4078,
    "char" : 6,
    "deco" : "FKxS7dentist6common10alignments4base14AlignmentChainxkZb",
    "originalType" : "bool(const ref AlignmentChain alignment, const coord_t allowance)",
    "parameters" : [
     {
      "name" : "alignment",
      "deco" : "xS7dentist6common10alignments4base14AlignmentChain",
      "storageClass" : [
       "ref"
      ]
     },
     {
      "name" : "allowance",
      "deco" : "xk"
     }
    ],
    "endline" : 4093,
    "endchar" : 1
   },
   {
    "name" : "isValidPileUpAlignment",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 4096,
    "char" : 6,
    "deco" : "FKxS7dentist6common10alignments4base18FlatLocalAlignmentxkZb",
    "originalType" : "bool(const ref FlatLocalAlignment alignment, const coord_t allowance)",
    "parameters" : [
     {
      "name" : "alignment",
      "deco" : "xS7dentist6common10alignments4base18FlatLocalAlignment",
      "storageClass" : [
       "ref"
      ]
     },
     {
      "name" : "allowance",
      "deco" : "xk"
     }
    ],
    "endline" : 4111,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Build consensus using `daccord`.\n\n    If no `filteredLasFile` is provided the reads will be self-aligned using\n    `daligner` and filtered with `filterPileUpAlignments`.\n\n    If `readId` is provided the option `\"-I{readId},{readId}\"` will be appended\n    to a copy of `options.daccordOptions`. This means the user may not provide\n    `readId` and limit the operation themselves or run `daccord` on all reads.\n\n    Params:\n        dbFile          = DB of reads\n        filteredLasFile = only \"true\" local alignments, i.e. without\n            repeat-induced alignments –  as good as possible.\n        readId          = the reference read used in the consensus procedure\n        options         = control the various aspects of the process\n    Returns: filename of consensus DB.\n",
    "line" : 4132,
    "char" : 8,
    "name" : "getConsensus",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "constraint" : "isOptionsList!(typeof(options.daccordOptions)) && isOptionsList!(typeof(options.dalignerOptions)) && isOptionsList!(typeof(options.dbsplitOptions)) && is(typeof(options.properAlignmentAllowance) == const(coord_t)) && isSomeString!(typeof(options.tmpdir))",
    "members" : [
     {
      "name" : "getConsensus",
      "kind" : "function",
      "line" : 4132,
      "char" : 8,
      "type" : "string(in string dbFile, in size_t readId, in Options options)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "readId",
        "type" : "size_t",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "options",
        "type" : "Options",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 4163,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 4166,
    "char" : 8,
    "name" : "getConsensus",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "constraint" : "isOptionsList!(typeof(options.daccordOptions)) && isOptionsList!(typeof(options.dalignerOptions)) && isOptionsList!(typeof(options.dbsplitOptions)) && is(typeof(options.properAlignmentAllowance) == const(coord_t)) && isSomeString!(typeof(options.tmpdir))",
    "members" : [
     {
      "name" : "getConsensus",
      "kind" : "function",
      "line" : 4166,
      "char" : 8,
      "type" : "string(in string dbFile, in Options options)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "options",
        "type" : "Options",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 4180,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 4183,
    "char" : 8,
    "name" : "getConsensus",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "constraint" : "isOptionsList!(typeof(options.daccordOptions)) && isOptionsList!(typeof(options.dbsplitOptions)) && isSomeString!(typeof(options.tmpdir))",
    "members" : [
     {
      "name" : "getConsensus",
      "kind" : "function",
      "line" : 4183,
      "char" : 8,
      "type" : "string(in string dbFile, in string filteredLasFile, in size_t readId, in Options options)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "filteredLasFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "readId",
        "type" : "size_t",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "options",
        "type" : "Options",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 4208,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 4211,
    "char" : 8,
    "name" : "getConsensus",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "constraint" : "isOptionsList!(typeof(options.daccordOptions)) && isOptionsList!(typeof(options.dbsplitOptions)) && isSomeString!(typeof(options.tmpdir))",
    "members" : [
     {
      "name" : "getConsensus",
      "kind" : "function",
      "line" : 4211,
      "char" : 8,
      "type" : "string(in string dbFile, in string filteredLasFile, in Options options)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "filteredLasFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "options",
        "type" : "Options",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 4225,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L4227_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 4227,
    "char" : 1,
    "endline" : 4273,
    "endchar" : 1
   },
   {
    "name" : "computeIntrinsticQualityValuesForConsensus",
    "kind" : "function",
    "protection" : "private",
    "line" : 4273,
    "char" : 14,
    "deco" : "FIAyaIQeZv",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 4278,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 4282,
    "char" : 14,
    "name" : "computeErrorProfile",
    "parameters" : [
     {
      "name" : "Options",
      "kind" : "type"
     }
    ],
    "constraint" : "isOptionsList!(typeof(options.daccordOptions))",
    "members" : [
     {
      "name" : "computeErrorProfile",
      "kind" : "function",
      "line" : 4282,
      "char" : 14,
      "type" : "void(in string dbFile, in string lasFile, in Options options)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "lasFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "options",
        "type" : "Options",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 4297,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "getLasFile",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Generate the LAS file name as `daligner`/`damapper` run in `baseDirectory`\ndoes.\n\nUses `dbB = dbA` if no `dbB` is provided.\n\nParams:\ndbA           = A-read DB\ndbB           = B-read DB\nbaseDirectory = directory where LAS file is/should be located\n",
    "line" : 4309,
    "char" : 8,
    "deco" : "FIAyaIQeZAya",
    "parameters" : [
     {
      "name" : "dbA",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "baseDirectory",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 4312,
    "endchar" : 1
   },
   {
    "name" : "getLasFile",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 4315,
    "char" : 8,
    "deco" : "FIAyaIQeIQhZAya",
    "parameters" : [
     {
      "name" : "dbA",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dbB",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "baseDirectory",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 4324,
    "endchar" : 1
   },
   {
    "name" : "lasFileGenerated",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Check if a LAS file was generated by `daligner`/`damapper` run in\n`baseDirectory`.\n\nUses `dbB = dbA` if no `dbB` is provided.\n\nParams:\ndbA           = A-read DB\ndbB           = B-read DB\nbaseDirectory = directory where LAS file is/should be located\nSee_also: `getLasFile`\n",
    "line" : 4337,
    "char" : 6,
    "deco" : "FIAyaIQeZb",
    "parameters" : [
     {
      "name" : "dbA",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "baseDirectory",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 4340,
    "endchar" : 1
   },
   {
    "name" : "lasFileGenerated",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 4343,
    "char" : 6,
    "deco" : "FIAyaIQeIQhZb",
    "parameters" : [
     {
      "name" : "dbA",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dbB",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "baseDirectory",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 4346,
    "endchar" : 1
   },
   {
    "name" : "getNumBlocks",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Return the number of blocks in `dbFile`.\n\nThrows: `DazzlerCommandException` if the DB is not split or the block\ncount could not be read.\n",
    "line" : 4353,
    "char" : 6,
    "deco" : "FIAyaZk",
    "originalType" : "id_t(in string dbFile)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 4380,
    "endchar" : 1
   },
   {
    "name" : "getBlockSize",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Return the of block size of `dbFile`.\n\nThrows: `DazzlerCommandException` if the DB is not split or the block\nsize could not be read.\n",
    "line" : 4387,
    "char" : 9,
    "deco" : "FIAyaZk",
    "originalType" : "coord_t(in string dbFile)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 4414,
    "endchar" : 1
   },
   {
    "name" : "getContigCutoff",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Return the contig/read length cutoff of `dbFile`.\n\nThrows: `DazzlerCommandException` if the DB is not split or the cutoff\ncould not be read.\n",
    "line" : 4421,
    "char" : 9,
    "deco" : "FIAyaZk",
    "originalType" : "coord_t(in string dbFile)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 4449,
    "endchar" : 1
   },
   {
    "name" : "getNumContigs",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Get the number of reads/contig in `dbFile`.\n\nParams:\ndbFile      = path to DB\nuntrimmedDb = return count for trimmed/untrimmed DB\n",
    "line" : 4457,
    "char" : 6,
    "deco" : "FIAyaZk",
    "originalType" : "id_t(in string dbFile)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 4460,
    "endchar" : 1
   },
   {
    "name" : "getNumContigs",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 4463,
    "char" : 6,
    "deco" : "FIAyaE3std8typecons__T4FlagVAyaa11_756e7472696d6d65644462ZQBkZk",
    "originalType" : "id_t(in string dbFile, Flag!\"untrimmedDb\" untrimmedDb = No.untrimmedDb)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "untrimmedDb",
      "deco" : "E3std8typecons__T4FlagVAyaa11_756e7472696d6d65644462ZQBk",
      "default" : "Flag.no"
     }
    ],
    "endline" : 4489,
    "endchar" : 1
   },
   {
    "name" : "getScaffoldStructure",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns a lazy range of `ScaffoldSegment`s describing the scaffold\nstructure.\n\nReturns: range of alternating `ContigSegment`s and `GapSegment`s packed in\n`ScaffoldSegment`s.\n",
    "line" : 4497,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FIAyaZS7dentist7dazzler23ScaffoldStructureReader",
    "originalType" : "(in string dbFile)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 4504,
    "endchar" : 1
   },
   {
    "name" : "ScaffoldSegment",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Either `ContigSegment` or `GapSegment`. Used to create a mixed range of\nthe two base types.\n",
    "line" : 4509,
    "char" : 1,
    "deco" : "S3std7variant__T8VariantNVmi56TS7dentist7dazzler13ContigSegmentTSQBhQBc10GapSegmentZQCq",
    "originalType" : "Algebraic!(ContigSegment, GapSegment)"
   },
   {
    "name" : "ContigSegment",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Describes the location of a contig inside its scaffold.\n",
    "line" : 4513,
    "char" : 1,
    "members" : [
     {
      "name" : "globalContigId",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "One-based contig ID in the Dazzler DB.\n",
      "line" : 4516,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "scaffoldId",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Zero-based ID of the scaffold.\n",
      "line" : 4518,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 8
     },
     {
      "name" : "contigId",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Zero-based ID of the contig within the scaffold.\n",
      "line" : 4520,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 16
     },
     {
      "name" : "begin",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Begin coordinate within the scaffold.\n",
      "line" : 4522,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 24
     },
     {
      "name" : "end",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "End coordinate within the scaffold.\n",
      "line" : 4524,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 32
     },
     {
      "name" : "header",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "FASTA header of the scaffold.\n",
      "line" : 4526,
      "char" : 12,
      "deco" : "Aya",
      "offset" : 40
     },
     {
      "name" : "__invariant398",
      "kind" : "function",
      "protection" : "public",
      "line" : 4528,
      "char" : 5,
      "deco" : "xFZv",
      "endline" : 4534,
      "endchar" : 5
     },
     {
      "name" : "length",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Length of the contig.\n",
      "line" : 4534,
      "char" : 22,
      "deco" : "xFNaNbNdZm",
      "originalType" : "const pure nothrow @property size_t()",
      "endline" : 4537,
      "endchar" : 5
     },
     {
      "name" : "__invariant",
      "kind" : "function",
      "protection" : "public",
      "line" : 4513,
      "char" : 1,
      "deco" : "xFZv"
     }
    ]
   },
   {
    "name" : "GapSegment",
    "kind" : "struct",
    "protection" : "public",
    "line" : 4540,
    "char" : 1,
    "members" : [
     {
      "name" : "beginGlobalContigId",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "One-based contig ID in the Dazzler DB of the contig preceding the gap.\n",
      "line" : 4543,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "endGlobalContigId",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "One-based contig ID in the Dazzler DB of the contig following the gap.\n",
      "line" : 4545,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 8
     },
     {
      "name" : "scaffoldId",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Zero-based ID of the scaffold.\n",
      "line" : 4547,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 16
     },
     {
      "name" : "beginContigId",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Zero-based ID of the contig preceding the gap within the scaffold.\n",
      "line" : 4549,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 24
     },
     {
      "name" : "endContigId",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Zero-based ID of the contig following the gap within the scaffold.\n",
      "line" : 4551,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 32
     },
     {
      "name" : "begin",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Begin coordinate within the scaffold.\n",
      "line" : 4553,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 40
     },
     {
      "name" : "end",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "End coordinate within the scaffold.\n",
      "line" : 4555,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 48
     },
     {
      "name" : "__invariant399",
      "kind" : "function",
      "protection" : "public",
      "line" : 4557,
      "char" : 5,
      "deco" : "xFZv",
      "endline" : 4564,
      "endchar" : 5
     },
     {
      "name" : "length",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Length of the gap.\n",
      "line" : 4564,
      "char" : 22,
      "deco" : "xFNaNbNdZm",
      "originalType" : "const pure nothrow @property size_t()",
      "endline" : 4567,
      "endchar" : 5
     },
     {
      "name" : "__invariant",
      "kind" : "function",
      "protection" : "public",
      "line" : 4540,
      "char" : 1,
      "deco" : "xFZv"
     }
    ]
   },
   {
    "name" : "ScaffoldStructureReader",
    "kind" : "struct",
    "protection" : "private",
    "comment" : "Parses the output of `DBshow` to generate `ScaffoldSegment`s.\n\nBugs: occurrences of `\" :: \"` in FASTA headers cause an exception. This\ncan be fixed by relying on `DBdump` instead.\n",
    "line" : 4575,
    "char" : 9,
    "members" : [
     {
      "name" : "scaffoldInfoLineSeparator",
      "kind" : "variable",
      "protection" : "public",
      "line" : 4577,
      "char" : 17,
      "storageClass" : [
       "static",
       "enum"
      ],
      "deco" : "Aya",
      "init" : "\" :: \""
     },
     {
      "name" : "scaffoldInfoLineFormat",
      "kind" : "variable",
      "protection" : "public",
      "line" : 4578,
      "char" : 17,
      "storageClass" : [
       "static",
       "enum"
      ],
      "deco" : "Aya",
      "init" : "\"Contig %d[%d,%d]\""
     },
     {
      "name" : "RawScaffoldInfo",
      "kind" : "alias",
      "protection" : "public",
      "line" : 4579,
      "char" : 5,
      "deco" : "S3std6string__T12LineSplitterVEQBe8typecons__T4FlagVAyaa14_6b6565705465726d696e61746f72ZQBqi0TQBqZQDf",
      "originalType" : "typeof(\"\".lineSplitter)"
     },
     {
      "name" : "rawScaffoldInfo",
      "kind" : "variable",
      "protection" : "private",
      "line" : 4581,
      "char" : 29,
      "deco" : "S3std6string__T12LineSplitterVEQBe8typecons__T4FlagVAyaa14_6b6565705465726d696e61746f72ZQBqi0TQBqZQDf",
      "originalType" : "RawScaffoldInfo",
      "offset" : 0
     },
     {
      "name" : "lastContigPart",
      "kind" : "variable",
      "protection" : "private",
      "line" : 4582,
      "char" : 27,
      "deco" : "S7dentist7dazzler13ContigSegment",
      "offset" : 40
     },
     {
      "name" : "currentPart",
      "kind" : "variable",
      "protection" : "private",
      "line" : 4583,
      "char" : 29,
      "deco" : "S3std7variant__T8VariantNVmi56TS7dentist7dazzler13ContigSegmentTSQBhQBc10GapSegmentZQCq",
      "originalType" : "ScaffoldSegment",
      "offset" : 96
     },
     {
      "name" : "_empty",
      "kind" : "variable",
      "protection" : "private",
      "line" : 4584,
      "char" : 18,
      "deco" : "b",
      "offset" : 160
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 4586,
      "char" : 5,
      "deco" : "FNcAyaZS7dentist7dazzler23ScaffoldStructureReader",
      "originalType" : "ref (string rawScaffoldInfo)",
      "parameters" : [
       {
        "name" : "rawScaffoldInfo",
        "deco" : "Aya"
       }
      ],
      "endline" : 4598,
      "endchar" : 5
     },
     {
      "name" : "popFront",
      "kind" : "function",
      "protection" : "public",
      "line" : 4600,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 4650,
      "endchar" : 5
     },
     {
      "name" : "front",
      "kind" : "function",
      "protection" : "public",
      "line" : 4652,
      "char" : 31,
      "deco" : "xFNdZS3std7variant__T8VariantNVmi56TS7dentist7dazzler13ContigSegmentTSQBhQBc10GapSegmentZQCq",
      "originalType" : "const @property ScaffoldSegment()",
      "endline" : 4656,
      "endchar" : 5
     },
     {
      "name" : "empty",
      "kind" : "function",
      "protection" : "public",
      "line" : 4658,
      "char" : 20,
      "deco" : "xFNdZb",
      "endline" : 4661,
      "endchar" : 5
     },
     {
      "name" : "save",
      "kind" : "function",
      "protection" : "public",
      "line" : 4663,
      "char" : 29,
      "deco" : "FZS7dentist7dazzler23ScaffoldStructureReader",
      "endline" : 4673,
      "endchar" : 5
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 4575,
      "char" : 9,
      "deco" : "FNcNjS7dentist7dazzler23ScaffoldStructureReaderZQBr",
      "originalType" : "ref ScaffoldStructureReader(ScaffoldStructureReader p) return",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S7dentist7dazzler23ScaffoldStructureReader"
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L4676_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 4676,
    "char" : 1,
    "endline" : 4758,
    "endchar" : 1
   },
   {
    "name" : "getMaskFiles",
    "kind" : "function",
    "protection" : "public",
    "comment" : "    Get the hidden files comprising the designated mask.\n\n    Returns: tuple with fields `header` and `data`\n    Params:\n        dbFile = path to DB\n        maskName = name of the mask. This must not contain dots (`\".\"`) unless\n            `allowBlock` is true in which case a single dot followed by the\n            block ID is allowed. Slashes (`\"/`) are never allowed.\n        allowBlock = whether or not `maskName` contains a block ID\n",
    "line" : 4758,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNaNfIAyaIQeE3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBiZSQCdQCc__T5TupleTQBxVQCba6_686561646572TQCuVQCya4_64617461ZQBx",
    "originalType" : "(in string dbFile, in string maskName, Flag!\"allowBlock\" allowBlock = No.allowBlock)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "maskName",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "allowBlock",
      "deco" : "E3std8typecons__T4FlagVAyaa10_616c6c6f77426c6f636bZQBi",
      "default" : "Flag.no"
     }
    ],
    "endline" : 4797,
    "endchar" : 1
   },
   {
    "name" : "MaskReaderException",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Thrown on failure while reading a Dazzler mask.\n\nSee_Also: `readMask`\n",
    "line" : 4803,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 4805,
      "char" : 30,
      "deco" : "FNaNbNiNfAyaQdmC6object9ThrowableZC7dentist7dazzler19MaskReaderException",
      "originalType" : "pure nothrow @nogc @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
      "parameters" : [
       {
        "name" : "msg",
        "deco" : "Aya"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "m",
        "default" : "cast(ulong)__LINE__"
       },
       {
        "name" : "nextInChain",
        "deco" : "C6object9Throwable",
        "default" : "null"
       }
      ],
      "endline" : 4809,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "MaskHeaderEntry",
    "kind" : "alias",
    "protection" : "private",
    "line" : 4814,
    "char" : 5,
    "deco" : "i"
   },
   {
    "name" : "MaskDataPointer",
    "kind" : "alias",
    "protection" : "private",
    "line" : 4815,
    "char" : 5,
    "deco" : "l"
   },
   {
    "name" : "MaskDataEntry",
    "kind" : "alias",
    "protection" : "private",
    "line" : 4816,
    "char" : 5,
    "deco" : "i"
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Read the `Interval`s of a Dazzler mask for `dbFile`.\n\n    Params:\n        Interval = target type for intervals the is default-constructible\n            and has three fields `tag`, `begin` and `end`.\n        dbFile   = path to DB\n        maskName = name of the mask\n    Throws: `MaskReaderException`\n    See_Also: `writeMask`, `getMaskFiles`\n",
    "line" : 4831,
    "char" : 12,
    "name" : "readMask",
    "parameters" : [
     {
      "name" : "Interval",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "readMask",
      "kind" : "function",
      "line" : 4831,
      "char" : 12,
      "type" : "Interval[](in string dbFile, in string maskName)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "maskName",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 4899,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "readMaskHeader",
    "kind" : "function",
    "protection" : "private",
    "line" : 4902,
    "char" : 14,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNfIAyaZS3std8typecons__T5TupleTiVAyaa8_6e756d5265616473TiVQza4_73697a65TAlVQBqa12_64617461506f696e74657273ZQDf",
    "originalType" : "(in string fileName)",
    "parameters" : [
     {
      "name" : "fileName",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 4907,
    "endchar" : 1
   },
   {
    "name" : "readMaskHeader",
    "kind" : "function",
    "protection" : "private",
    "line" : 4910,
    "char" : 14,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNfS3std5stdio4FileEQq8typecons__T4FlagVAyaa12_72656164506f696e74657273ZQBmZSQCvQCg__T5TupleTiVQCda8_6e756d5265616473TiVQDca4_73697a65TAlVQDua12_64617461506f696e74657273ZQDg",
    "originalType" : "(File headerFile, Flag!\"readPointers\" readPointers = Yes.readPointers)",
    "parameters" : [
     {
      "name" : "headerFile",
      "deco" : "S3std5stdio4File"
     },
     {
      "name" : "readPointers",
      "deco" : "E3std8typecons__T4FlagVAyaa12_72656164506f696e74657273ZQBm",
      "default" : "Flag.yes"
     }
    ],
    "endline" : 4932,
    "endchar" : 1
   },
   {
    "name" : "skipMaskHeader",
    "kind" : "function",
    "protection" : "private",
    "line" : 4935,
    "char" : 14,
    "deco" : "FS3std5stdio4FileZv",
    "parameters" : [
     {
      "name" : "headerFile",
      "deco" : "S3std5stdio4File"
     }
    ],
    "endline" : 4938,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "comment" : "Read the contents of `fileName` into a `T[]`.\n",
    "line" : 4942,
    "char" : 13,
    "name" : "getBinaryFile",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "getBinaryFile",
      "kind" : "function",
      "line" : 4942,
      "char" : 13,
      "type" : "T[](in string fileName)",
      "parameters" : [
       {
        "name" : "fileName",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 4957,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "getTrimmedDbTranslateTable",
    "kind" : "function",
    "protection" : "private",
    "comment" : "Construct an translation table from untrimmed to trimmed DB IDs.\n\nExample:\n---\nauto tr = getTrimmedDbTranslateTable(dbFile);\n\nauto untrimmedId = 42;\nauto trimmedId = tr[untrimmedId - 1];\nauto isContainedInTrimmedDb = trimmedId < id_t.max;\n---\n\nReturns: an array of IDs in the trimmed DB. Excluded contigs/reads are\nmarked by a value of `id_t.max`.\nBugs: this disregards the `-alm` options to `DBsplit`, i.e. only the\nlength cutoff `-x` is applied.\n",
    "line" : 4975,
    "char" : 16,
    "deco" : "FIAyaZAk",
    "originalType" : "id_t[](in string dbFile)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 4995,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Write the list of intervals to a Dazzler mask for `dbFile`.\n\n    Params:\n        dbFile   = path to DB\n        maskName = name of the mask\n        intervals = range of intervals the have three fields `tag`, `begin`\n            and `end`\n    See_Also: `readMask`, `getMaskFiles`\n",
    "line" : 5008,
    "char" : 6,
    "name" : "writeMask",
    "parameters" : [
     {
      "name" : "Intervals",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!Intervals",
    "members" : [
     {
      "name" : "writeMask",
      "kind" : "function",
      "line" : 5008,
      "char" : 6,
      "type" : "void(in string dbFile, in string maskName, Intervals intervals)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "maskName",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "intervals",
        "type" : "Intervals"
       }
      ],
      "endline" : 5058,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "AccumMode",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Accumulation mode for merging extras of block tracks.\n\nSee_also: `DazzExtra`\n",
    "line" : 5064,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "exact",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "comment" : "Extra contents must match exactly for all blocks.\n",
      "line" : 5067,
      "char" : 5
     },
     {
      "name" : "sum",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "Extra contents are summed like vectors across blocks.\n",
      "line" : 5069,
      "char" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Represents a track extra, i.e. additional data stored alongside a DB track.\n\nUse `dazzExtra` to construct objects.\n\nSee_also: `dazzExtra`, `readDazzExtra`, `writeDazzExtra`\n",
    "line" : 5078,
    "char" : 1,
    "name" : "DazzExtra",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "is(T == long) || is(T == double)",
    "members" : [
     {
      "name" : "DazzExtra",
      "kind" : "struct",
      "protection" : "public",
      "line" : 5078,
      "char" : 1,
      "members" : [
       {
        "name" : "vtype",
        "kind" : "variable",
        "comment" : "Dynamic value type representation.\n",
        "line" : 5082,
        "char" : 18,
        "storageClass" : [
         "enum"
        ],
        "deco" : "i",
        "init" : "0"
       },
       {
        "name" : "name",
        "kind" : "variable",
        "comment" : "Extra name.\n",
        "line" : 5089,
        "char" : 12,
        "type" : "string"
       },
       {
        "name" : "data",
        "kind" : "variable",
        "comment" : "Extra data. Alias this allows accessing data directly in this\n`DazzExtra`, e.g. `extra[0 .. 10]` returns a slice of the first 10\nelements.\n",
        "line" : 5093,
        "char" : 9,
        "type" : "T[]"
       },
       {
        "name" : "accumMode",
        "kind" : "variable",
        "comment" : "Defines how data from a different block-level extras is combined\nin `Catrack`.\n",
        "line" : 5098,
        "char" : 15,
        "type" : "AccumMode"
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Represents a track extra, i.e. additional data stored alongside a DB track.\n\nSee_also: `DazzExtra`, `readDazzExtra`, `writeDazzExtra`\n",
    "line" : 5105,
    "char" : 13,
    "name" : "dazzExtra",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "is(T == long) || is(T == double)",
    "members" : [
     {
      "name" : "dazzExtra",
      "kind" : "function",
      "line" : 5105,
      "char" : 13,
      "type" : "DazzExtra!T(string name, T[] data, AccumMode accumMode = AccumMode.init)",
      "parameters" : [
       {
        "name" : "name",
        "type" : "string"
       },
       {
        "name" : "data",
        "type" : "T[]"
       },
       {
        "name" : "accumMode",
        "type" : "AccumMode",
        "default" : "AccumMode.init"
       }
      ],
      "endline" : 5109,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "DazzExtraNotFound",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Thrown on failure while reading a Dazzler mask.\n\nSee_Also: `readMask`\n",
    "line" : 5115,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "std.exception",
      "kind" : "import",
      "line" : 5117,
      "char" : 12,
      "protection" : "private",
      "selective" : [
       "basicExceptionCtors"
      ]
     },
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 5119,
      "char" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Read extra `extraName` of track `maskName` with elements of type `T` from\n    `dbFile`.\n\n    Returns: fully populated `DazzExtra!T`.\n    Throws: $(UL\n        $(LI `MaskReaderException` on read errors)\n        $(LI `DazzExtraNotFound` if no extra with given name exists)\n    )\n    See_Also: `writeDazzExtra`, `DazzExtra`\n",
    "line" : 5134,
    "char" : 13,
    "name" : "readDazzExtra",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "is(T == long) || is(T == double)",
    "members" : [
     {
      "name" : "readDazzExtra",
      "kind" : "function",
      "line" : 5134,
      "char" : 13,
      "type" : "DazzExtra!T(in string dbFile, in string maskName, string extraName)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "maskName",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "extraName",
        "type" : "string"
       }
      ],
      "endline" : 5203,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Write extra `extraName` of track `maskName` with elements of type `T` from\n    `dbFile`.\n\n    Use `dazzExtra` to construct `DazzExtra` objects.\n\n    Note: the extra will be appended to the list of extras regardless of any\n        existing extras. You may use `readDazzExtra` to check for existing\n        extras.\n    See_Also: `dazzExtra`, `readDazzExtra`\n",
    "line" : 5217,
    "char" : 6,
    "name" : "writeDazzExtra",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "is(T == long) || is(T == double)",
    "members" : [
     {
      "name" : "writeDazzExtra",
      "kind" : "function",
      "line" : 5217,
      "char" : 6,
      "type" : "void(in string dbFile, in string maskName, DazzExtra!T extra)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "maskName",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "extra",
        "type" : "DazzExtra!T"
       }
      ],
      "endline" : 5232,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L5234_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 5234,
    "char" : 1,
    "endline" : 5271,
    "endchar" : 1
   },
   {
    "name" : "OptionModifier",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Specifies the type of action `withOption` should take.\n",
    "line" : 5271,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "replaceOrAdd",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)0u",
      "comment" : "Replace existing option or add as new option.\n",
      "line" : 5274,
      "char" : 5
     },
     {
      "name" : "ensurePresent",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "Make sure option is present, e.i. option name and value must match.\n",
      "line" : 5276,
      "char" : 5
     },
     {
      "name" : "defaultValue",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "comment" : "Make sure option is present, e.i. an option with the given name exists.\nDoes not modify existing options. This does nothing if no option value\nis given.\n",
      "line" : 5280,
      "char" : 5
     },
     {
      "name" : "add",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "3",
      "comment" : "Append new option.\n",
      "line" : 5282,
      "char" : 5
     },
     {
      "name" : "remove",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "4",
      "comment" : "Remove existing options.\n",
      "line" : 5284,
      "char" : 5
     },
     {
      "name" : "replace",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "5",
      "comment" : "Replace existing options. Does not add new option.\n",
      "line" : 5286,
      "char" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Lazily modifies `dazzlerOptions` as specified.\n",
    "line" : 5291,
    "char" : 6,
    "name" : "withOption",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!R && is(ElementType!R == string)",
    "members" : [
     {
      "name" : "withOption",
      "kind" : "function",
      "line" : 5291,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(R dazzlerOptions, string optionName, OptionModifier mod)",
      "parameters" : [
       {
        "name" : "dazzlerOptions",
        "type" : "R"
       },
       {
        "name" : "optionName",
        "type" : "string"
       },
       {
        "name" : "mod",
        "type" : "OptionModifier"
       }
      ],
      "endline" : 5295,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 5298,
    "char" : 6,
    "name" : "withOption",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!R && is(ElementType!R == string)",
    "members" : [
     {
      "name" : "withOption",
      "kind" : "function",
      "line" : 5298,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(R dazzlerOptions, string optionName, string value, OptionModifier mod)",
      "parameters" : [
       {
        "name" : "dazzlerOptions",
        "type" : "R"
       },
       {
        "name" : "optionName",
        "type" : "string"
       },
       {
        "name" : "value",
        "type" : "string"
       },
       {
        "name" : "mod",
        "type" : "OptionModifier"
       }
      ],
      "endline" : 5311,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L5314_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "`OptionModifier.replaceOrAdd`\n",
    "line" : 5314,
    "char" : 1,
    "endline" : 5349,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5349_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "`OptionModifier.ensurePresent`\n",
    "line" : 5349,
    "char" : 1,
    "endline" : 5386,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5386_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "`OptionModifier.defaultValue`\n",
    "line" : 5386,
    "char" : 1,
    "endline" : 5422,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5422_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "`OptionModifier.add` and `OptionModifier.remove`\n",
    "line" : 5422,
    "char" : 1,
    "endline" : 5457,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5457_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 5457,
    "char" : 1,
    "endline" : 5478,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 5478,
    "char" : 9,
    "name" : "WithOptionsImpl",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!R && is(ElementType!R == string)",
    "members" : [
     {
      "name" : "WithOptionsImpl",
      "kind" : "struct",
      "protection" : "public",
      "line" : 5478,
      "char" : 9,
      "members" : [
       {
        "name" : "options",
        "kind" : "variable",
        "line" : 5480,
        "char" : 15,
        "type" : "R"
       },
       {
        "name" : "optionName",
        "kind" : "variable",
        "line" : 5481,
        "char" : 20,
        "type" : "string"
       },
       {
        "name" : "value",
        "kind" : "variable",
        "line" : 5482,
        "char" : 20,
        "type" : "string"
       },
       {
        "name" : "mod",
        "kind" : "variable",
        "line" : 5483,
        "char" : 28,
        "type" : "OptionModifier"
       },
       {
        "name" : "currentOption",
        "kind" : "variable",
        "line" : 5484,
        "char" : 20,
        "type" : "string"
       },
       {
        "name" : "optionPresent",
        "kind" : "variable",
        "line" : 5485,
        "char" : 18,
        "deco" : "b"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 5488,
        "char" : 5,
        "type" : "(R options, string optionName, string value, OptionModifier mod)",
        "parameters" : [
         {
          "name" : "options",
          "type" : "R"
         },
         {
          "name" : "optionName",
          "type" : "string"
         },
         {
          "name" : "value",
          "type" : "string"
         },
         {
          "name" : "mod",
          "type" : "OptionModifier"
         }
        ],
        "endline" : 5502,
        "endchar" : 5
       },
       {
        "name" : "newOption",
        "kind" : "function",
        "line" : 5512,
        "char" : 22,
        "type" : "const pure nothrow @property @safe string()",
        "endline" : 5515,
        "endchar" : 5
       },
       {
        "name" : "empty",
        "kind" : "function",
        "line" : 5518,
        "char" : 20,
        "type" : "const @property bool()",
        "endline" : 5523,
        "endchar" : 5
       },
       {
        "name" : "front",
        "kind" : "function",
        "line" : 5526,
        "char" : 22,
        "type" : "const pure nothrow @property @safe string()",
        "endline" : 5531,
        "endchar" : 5
       },
       {
        "name" : "popFront",
        "kind" : "function",
        "line" : 5534,
        "char" : 10,
        "type" : "void()",
        "endline" : 5591,
        "endchar" : 5
       },
       {
        "name" : "emitOption",
        "kind" : "function",
        "line" : 5594,
        "char" : 18,
        "type" : "void(string option)",
        "parameters" : [
         {
          "name" : "option",
          "type" : "string"
         }
        ],
        "endline" : 5600,
        "endchar" : 5
       },
       {
        "name" : "shouldRemove",
        "kind" : "function",
        "line" : 5603,
        "char" : 18,
        "type" : "const pure nothrow @safe bool(string option)",
        "parameters" : [
         {
          "name" : "option",
          "type" : "string"
         }
        ],
        "endline" : 5608,
        "endchar" : 5
       },
       {
        "name" : "isAdditiveModifier",
        "kind" : "function",
        "line" : 5611,
        "char" : 18,
        "type" : "const pure nothrow @safe bool()",
        "endline" : 5619,
        "endchar" : 5
       },
       {
        "name" : "save",
        "kind" : "function",
        "line" : 5623,
        "char" : 24,
        "storageClass" : [
         "auto"
        ],
        "type" : "@property ()",
        "endline" : 5628,
        "endchar" : 9
       }
      ]
     }
    ]
   },
   {
    "name" : "DaccordOptions",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Options for `daccord`.\n",
    "line" : 5633,
    "char" : 1,
    "baseDeco" : "Aya",
    "members" : [
     {
      "name" : "numberOfThreads",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-t\"",
      "comment" : "number of threads (default 4)\n",
      "line" : 5636,
      "char" : 5
     },
     {
      "name" : "windowSize",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-w\"",
      "comment" : "window size (default 40)\n",
      "line" : 5638,
      "char" : 5
     },
     {
      "name" : "advanceSize",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-a\"",
      "comment" : "advance size (default 10)\n",
      "line" : 5640,
      "char" : 5
     },
     {
      "name" : "maxDepth",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-d\"",
      "comment" : "max depth (default 18446744073709551615)\n",
      "line" : 5642,
      "char" : 5
     },
     {
      "name" : "produceFullSequences",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-f\"",
      "comment" : "produce full sequences (default 0)\n",
      "line" : 5644,
      "char" : 5
     },
     {
      "name" : "verbosity",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-V\"",
      "comment" : "verbosity (default 18446744073709551615)\n",
      "line" : 5646,
      "char" : 5
     },
     {
      "name" : "readInterval",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-I\"",
      "comment" : "read interval (default 0,18446744073709551615)\n",
      "line" : 5648,
      "char" : 5
     },
     {
      "name" : "readsPart",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-J\"",
      "comment" : "reads part (default 0,1)\n",
      "line" : 5650,
      "char" : 5
     },
     {
      "name" : "errorProfileFileName",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-E\"",
      "comment" : "error profile file name (default input.las.eprof)\n",
      "line" : 5652,
      "char" : 5
     },
     {
      "name" : "minWindowCoverage",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-m\"",
      "comment" : "minimum window coverage (default 3)\n",
      "line" : 5654,
      "char" : 5
     },
     {
      "name" : "maxWindowError",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-e\"",
      "comment" : "maximum window error (default 18446744073709551615)\n",
      "line" : 5656,
      "char" : 5
     },
     {
      "name" : "minLengthOfOutput",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-l\"",
      "comment" : "minimum length of output (default 0)\n",
      "line" : 5658,
      "char" : 5
     },
     {
      "name" : "minKMerFilterFrequency",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"--minfilterfreq\"",
      "comment" : "minimum k-mer filter frequency (default 0)\n",
      "line" : 5660,
      "char" : 5
     },
     {
      "name" : "maxKMerFilterFrequency",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"--maxfilterfreq\"",
      "comment" : "maximum k-mer filter frequency (default 2)\n",
      "line" : 5662,
      "char" : 5
     },
     {
      "name" : "temporaryFilePrefix",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-T\"",
      "comment" : "temporary file prefix (default daccord_ozelot_4500_1529654843)\n",
      "line" : 5664,
      "char" : 5
     },
     {
      "name" : "maxAlignmentsPerRead",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-D\"",
      "comment" : "maximum number of alignments considered per read (default 5000)\n",
      "line" : 5666,
      "char" : 5
     },
     {
      "name" : "maxAlignmentsPerReadVard",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"--vard\"",
      "comment" : "maximum number of alignments considered per read (default 0)\n",
      "line" : 5668,
      "char" : 5
     },
     {
      "name" : "computeErrorProfileOnly",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"--eprofonly\"",
      "comment" : "compute error profile only (default disable)\n",
      "line" : 5670,
      "char" : 5
     },
     {
      "name" : "computeErrorDistributionEstimate",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"--deepprofileonly\"",
      "comment" : "compute error distribution estimate (default disable)\n",
      "line" : 5672,
      "char" : 5
     },
     {
      "name" : "kmerSize",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-k\"",
      "comment" : "kmer size (default 8)\n",
      "line" : 5674,
      "char" : 5
     }
    ]
   },
   {
    "name" : "DalignerOptions",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Options for `daligner`.\n",
    "line" : 5679,
    "char" : 1,
    "baseDeco" : "Aya",
    "members" : [
     {
      "name" : "verbose",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-v\"",
      "line" : 5681,
      "char" : 5
     },
     {
      "name" : "strongCompositionalBias",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-b\"",
      "comment" : "If the -b option is set, then the daligner assumes the data has a\nstrong compositional bias (e.g. >65% AT rich).\n",
      "line" : 5684,
      "char" : 5
     },
     {
      "name" : "asymmetric",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-A\"",
      "comment" : "If the -A option is set (“A” for “asymmetric”) then just overlaps\nwhere the a-read is in block X and the b-read is in block Y are\nreported, and if X = Y then it further reports only those overlaps\nwhere the a-read index is less than the b-read index.\n",
      "line" : 5689,
      "char" : 5
     },
     {
      "name" : "identity",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-I\"",
      "comment" : "If the -I option is set (“I” for “identity”) then when X = Y, overlaps\nbetween different portions of the same read will also be found and\nreported.\n",
      "line" : 5693,
      "char" : 5
     },
     {
      "name" : "kMerSize",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-k\"",
      "comment" : "Search code looks for a pair of diagonal bands of width 2^^w\n(default 26 = 64) that contain a collection of exact matching k-mers\n(default 14) between the two reads, such that the total number of\nbases covered by the k-mer hits is h (default 35).\n",
      "line" : 5698,
      "char" : 5
     },
     {
      "name" : "bandWidth",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-w\"",
      "comment" : "ditto\n",
      "line" : 5700,
      "char" : 5
     },
     {
      "name" : "hitBaseCoverage",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-h\"",
      "comment" : "ditto\n",
      "line" : 5702,
      "char" : 5
     },
     {
      "name" : "modimerPercentage",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-%\"",
      "comment" : "Modimer percentage (take % of the k-mers)\n",
      "line" : 5704,
      "char" : 5
     },
     {
      "name" : "maxKmerOccurence",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-t\"",
      "comment" : "Suppresses the use of any k-mer that occurs more than t times in\neither the subject or target block.\n",
      "line" : 5707,
      "char" : 5
     },
     {
      "name" : "maxKmerMemory",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-M\"",
      "comment" : "Let the program automatically select a value of t that meets a given\nmemory usage limit specified (in Gb) by the -M parameter.\n",
      "line" : 5710,
      "char" : 5
     },
     {
      "name" : "bridge",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-B\"",
      "comment" : "Bridge consecutive aligned segments into one if possible\n",
      "line" : 5712,
      "char" : 5
     },
     {
      "name" : "tempDir",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-P\"",
      "line" : 5713,
      "char" : 5
     },
     {
      "name" : "minAlignmentLength",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-l\"",
      "comment" : "Searching for local alignments involving at least -l base pairs\n(default 1000) or more, that have an average correlation rate of\n-e (default 70%).\n",
      "line" : 5717,
      "char" : 5
     },
     {
      "name" : "averageCorrelationRate",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-e\"",
      "comment" : "ditto\n",
      "line" : 5719,
      "char" : 5
     },
     {
      "name" : "tracePointDistance",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-s\"",
      "comment" : "The local alignments found will be output in a sparse encoding where\na trace point on the alignment is recorded every -s base pairs of\nthe a-read (default 100bp).\n",
      "line" : 5723,
      "char" : 5
     },
     {
      "name" : "minAReadLength",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-H\"",
      "comment" : "By setting the -H parameter to say N, one alters daligner so that it\nonly reports overlaps where the a-read is over N base-pairs long.\n",
      "line" : 5726,
      "char" : 5
     },
     {
      "name" : "numThreads",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-T\"",
      "comment" : "The program runs with 4 threads by default, but this may be set to\nany power of 2 with the -T option.\n",
      "line" : 5729,
      "char" : 5
     },
     {
      "name" : "masks",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-m\"",
      "comment" : "If there are one or more interval tracks specified with the -m option\n(m for mask), then the reads of the DB or DB’s to which the track\napplies are soft masked with the union of the intervals of all the\ninterval tracks that apply, that is any k-mers that contain any bases\nin any of the masked intervals are ignored for the purposes of seeding\na match.\n",
      "line" : 5736,
      "char" : 5
     },
     {
      "name" : "sortMap",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-a\"",
      "comment" : "sort .las by A-read,A-position pairs for map usecase;\noff => sort .las by A,B-read pairs for overlap piles\n",
      "line" : 5739,
      "char" : 5
     }
    ]
   },
   {
    "name" : "DatanderOptions",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Options for `datander`.\n",
    "line" : 5744,
    "char" : 1,
    "baseDeco" : "Aya",
    "members" : [
     {
      "name" : "verbose",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-v\"",
      "line" : 5746,
      "char" : 5
     },
     {
      "name" : "kMerSize",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-k\"",
      "comment" : "Search code looks for a pair of diagonal bands of width 2^^w\n(default 26 = 64) that contain a collection of exact matching k-mers\n(default 12) between the two reads, such that the total number of\nbases covered by the k-mer hits is h (default 35).\n",
      "line" : 5751,
      "char" : 5
     },
     {
      "name" : "bandWidth",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-w\"",
      "comment" : "ditto\n",
      "line" : 5753,
      "char" : 5
     },
     {
      "name" : "hitBaseCoverage",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-h\"",
      "comment" : "ditto\n",
      "line" : 5755,
      "char" : 5
     },
     {
      "name" : "tempDir",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-P\"",
      "line" : 5756,
      "char" : 5
     },
     {
      "name" : "minAlignmentLength",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-l\"",
      "comment" : "Searching for local alignments involving at least -l base pairs\n(default 1000) or more, that have an average correlation rate of\n-e (default 70%).\n",
      "line" : 5760,
      "char" : 5
     },
     {
      "name" : "averageCorrelationRate",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-e\"",
      "comment" : "ditto\n",
      "line" : 5762,
      "char" : 5
     },
     {
      "name" : "tracePointDistance",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-s\"",
      "comment" : "The local alignments found will be output in a sparse encoding where\na trace point on the alignment is recorded every -s base pairs of\nthe a-read (default 100bp).\n",
      "line" : 5766,
      "char" : 5
     },
     {
      "name" : "numThreads",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-T\"",
      "comment" : "The program runs with 4 threads by default, but this may be set to\nany power of 2 with the -T option.\n",
      "line" : 5769,
      "char" : 5
     }
    ]
   },
   {
    "name" : "DamapperOptions",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Options for `damapper`.\n",
    "line" : 5774,
    "char" : 1,
    "baseDeco" : "Aya",
    "members" : [
     {
      "name" : "verbose",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-v\"",
      "line" : 5776,
      "char" : 5
     },
     {
      "name" : "strongCompositionalBias",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-b\"",
      "comment" : "If the -b option is set, then the daligner assumes the data has a\nstrong compositional bias (e.g. >65% AT rich).\n",
      "line" : 5779,
      "char" : 5
     },
     {
      "name" : "kMerSize",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-k\"",
      "comment" : "Search code looks for a pair of diagonal bands of width 2^^w\n(default 26 = 64) that contain a collection of exact matching k-mers\n(default 14) between the two reads, such that the total number of\nbases covered by the k-mer hits is h (default 35).\n",
      "line" : 5784,
      "char" : 5
     },
     {
      "name" : "maxKmerOccurence",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-t\"",
      "comment" : "Suppresses the use of any k-mer that occurs more than t times in\neither the subject or target block.\n",
      "line" : 5787,
      "char" : 5
     },
     {
      "name" : "maxKmerMemory",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-M\"",
      "comment" : "Let the program automatically select a value of t that meets a given\nmemory usage limit specified (in Gb) by the -M parameter.\n",
      "line" : 5790,
      "char" : 5
     },
     {
      "name" : "averageCorrelationRate",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-e\"",
      "comment" : "ditto\n",
      "line" : 5792,
      "char" : 5
     },
     {
      "name" : "tracePointDistance",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-s\"",
      "comment" : "The local alignments found will be output in a sparse encoding where\na trace point on the alignment is recorded every -s base pairs of\nthe a-read (default 100bp).\n",
      "line" : 5796,
      "char" : 5
     },
     {
      "name" : "numThreads",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-T\"",
      "comment" : "The program runs with 4 threads by default, but this may be set to\nany power of 2 with the -T option.\n",
      "line" : 5799,
      "char" : 5
     },
     {
      "name" : "tempDir",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-P\"",
      "line" : 5800,
      "char" : 5
     },
     {
      "name" : "masks",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-m\"",
      "comment" : "If there are one or more interval tracks specified with the -m option\n(m for mask), then the reads of the DB or DB’s to which the track\napplies are soft masked with the union of the intervals of all the\ninterval tracks that apply, that is any k-mers that contain any bases\nin any of the masked intervals are ignored for the purposes of seeding\na match.\n",
      "line" : 5807,
      "char" : 5
     },
     {
      "name" : "bestMatches",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-n\"",
      "comment" : "If the -n option is given then all chains that are within the given\nfraction of the best are also reported, e.g. -n.95 reports all\nmatches within 95% of the top match.\n",
      "line" : 5811,
      "char" : 5
     },
     {
      "name" : "repeatProfileTrack",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-p\"",
      "comment" : "The -p option requests that damapper produce a repeat profile track\nfor each read.\n",
      "line" : 5814,
      "char" : 5
     },
     {
      "name" : "sortPileOrder",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-z\"",
      "comment" : "The parameter -z asks that LAs are sorted in pile order as opposed to\nmap order (see the -a option of daligner for which this is the\nnegation).\n",
      "line" : 5818,
      "char" : 5
     },
     {
      "name" : "symmetric",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-C\"",
      "comment" : "If the -C option is set, then damapper also outputs a file Y.X.las\nfor a given block pair that contains all the same matches as in\nX.Y.las but where the A-read is a contig of the reference and the\nB-read is a mapped read. And if the -N options is set, then the file\nY.X.las is not produced.\n",
      "line" : 5824,
      "char" : 5
     },
     {
      "name" : "oneDirection",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-N\"",
      "comment" : "ditto\n",
      "line" : 5826,
      "char" : 5
     }
    ]
   },
   {
    "name" : "DBdumpOptions",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Options for `DBdump`.\n",
    "line" : 5831,
    "char" : 1,
    "baseDeco" : "Aya",
    "members" : [
     {
      "name" : "readNumber",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-r\"",
      "line" : 5833,
      "char" : 5
     },
     {
      "name" : "originalHeader",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-h\"",
      "line" : 5834,
      "char" : 5
     },
     {
      "name" : "sequenceString",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-s\"",
      "line" : 5835,
      "char" : 5
     },
     {
      "name" : "sNROfACGTChannels",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-a\"",
      "line" : 5836,
      "char" : 5
     },
     {
      "name" : "intrinsicQualityVector",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-i\"",
      "line" : 5837,
      "char" : 5
     },
     {
      "name" : "quivaValues",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-q\"",
      "line" : 5838,
      "char" : 5
     },
     {
      "name" : "repeatProfileVector",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-p\"",
      "line" : 5839,
      "char" : 5
     },
     {
      "name" : "masks",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-m\"",
      "line" : 5840,
      "char" : 5
     },
     {
      "name" : "untrimmedDatabase",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-u\"",
      "line" : 5841,
      "char" : 5
     },
     {
      "name" : "upperCase",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-U\"",
      "line" : 5842,
      "char" : 5
     }
    ]
   },
   {
    "name" : "DBshowOptions",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Options for `DBshow`.\n",
    "line" : 5847,
    "char" : 1,
    "baseDeco" : "Aya",
    "members" : [
     {
      "name" : "untrimmedDatabase",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-u\"",
      "line" : 5849,
      "char" : 5
     },
     {
      "name" : "showQuiva",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-q\"",
      "line" : 5850,
      "char" : 5
     },
     {
      "name" : "showArrowPulseSequence",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-a\"",
      "line" : 5851,
      "char" : 5
     },
     {
      "name" : "noSequence",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-n\"",
      "line" : 5852,
      "char" : 5
     },
     {
      "name" : "masks",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-m\"",
      "line" : 5853,
      "char" : 5
     },
     {
      "name" : "produceQuivaFile",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-Q\"",
      "line" : 5854,
      "char" : 5
     },
     {
      "name" : "produceArrowFile",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-A\"",
      "line" : 5855,
      "char" : 5
     },
     {
      "name" : "upperCase",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-U\"",
      "line" : 5856,
      "char" : 5
     },
     {
      "name" : "fastaLineWidth",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-w\"",
      "line" : 5857,
      "char" : 5
     }
    ]
   },
   {
    "name" : "Fasta2DazzlerOptions",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Options for `fasta2DAM` and `fasta2DB`.\n",
    "line" : 5862,
    "char" : 1,
    "baseDeco" : "Aya",
    "members" : [
     {
      "name" : "verbose",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-v\"",
      "line" : 5864,
      "char" : 5
     },
     {
      "name" : "fromFile",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-f\"",
      "comment" : "Import files listed 1/line in given file.\n",
      "line" : 5866,
      "char" : 5
     },
     {
      "name" : "fromStdin",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-i\"",
      "comment" : "Import data from stdin, use optional name as data source.\n",
      "line" : 5868,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ComputeIntrinsicQVOptions",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Options for `computeintrinsicqv`.\n",
    "line" : 5885,
    "char" : 1,
    "baseDeco" : "Aya",
    "members" : [
     {
      "name" : "readDepth",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-d\"",
      "comment" : "Read depth aka. read coverage. (mandatory)\n",
      "line" : 5888,
      "char" : 5
     }
    ]
   },
   {
    "name" : "DbSplitOptions",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Options for `DBsplit`.\n",
    "line" : 5893,
    "char" : 1,
    "baseDeco" : "Aya",
    "members" : [
     {
      "name" : "blockSize",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-s\"",
      "comment" : "Target size of blocks (in Mbp).\n",
      "line" : 5896,
      "char" : 5
     },
     {
      "name" : "minReadLength",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-x\"",
      "comment" : "Trimmed DB has reads >= this threshold.\n",
      "line" : 5898,
      "char" : 5
     },
     {
      "name" : "allReads",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-a\"",
      "comment" : "Trimmed DB contains all reads from a well (not just longest).\n",
      "line" : 5900,
      "char" : 5
     },
     {
      "name" : "force",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-f\"",
      "comment" : "Force the split to occur even if already split.\n",
      "line" : 5902,
      "char" : 5
     },
     {
      "name" : "onlyLongest",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-l\"",
      "comment" : "Set primary read for a well to be the longest.\n",
      "line" : 5904,
      "char" : 5
     },
     {
      "name" : "onlyMedian",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "\"-m\"",
      "comment" : "Set primary read for a well to be the median.\n",
      "line" : 5906,
      "char" : 5
     }
    ]
   },
   {
    "name" : "readLasHeader",
    "kind" : "function",
    "protection" : "private",
    "line" : 5912,
    "char" : 10,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FIAyaZS3std8typecons__T5TupleTmVAyaa8_6e756d5061727473TtVQza17_7472616365506f696e7453706163696e67ZQCx",
    "originalType" : "(in string lasFile)",
    "parameters" : [
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 5935,
    "endchar" : 5
   },
   {
    "name" : "__unittest_L5937_C5",
    "kind" : "function",
    "protection" : "private",
    "line" : 5937,
    "char" : 5,
    "endline" : 6003,
    "endchar" : 5
   },
   {
    "name" : "ensureWritableDb",
    "kind" : "function",
    "protection" : "private",
    "line" : 6003,
    "char" : 10,
    "deco" : "FAyaE3std8typecons__T4FlagVQBaa6_617070656e64ZQzZv",
    "originalType" : "void(string dbFile, Append append)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "Aya"
     },
     {
      "name" : "append",
      "deco" : "E3std8typecons__T4FlagVAyaa6_617070656e64ZQz"
     }
    ],
    "endline" : 6007,
    "endchar" : 5
   },
   {
    "name" : "dalign",
    "kind" : "function",
    "protection" : "private",
    "line" : 6009,
    "char" : 10,
    "deco" : "FIAyaIAQfIQiZv",
    "parameters" : [
     {
      "name" : "refDam",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dalignerOpts",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "outdir",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6012,
    "endchar" : 5
   },
   {
    "name" : "dalign",
    "kind" : "function",
    "protection" : "private",
    "line" : 6014,
    "char" : 10,
    "deco" : "FIAyaIQeIAQiIQlZv",
    "parameters" : [
     {
      "name" : "refDam",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "readsDam",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dalignerOpts",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "outdir",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6017,
    "endchar" : 5
   },
   {
    "name" : "dalign",
    "kind" : "function",
    "protection" : "private",
    "line" : 6020,
    "char" : 10,
    "deco" : "FIAAyaIQfIQhZv",
    "parameters" : [
     {
      "name" : "dbList",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dalignerOpts",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "outdir",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6028,
    "endchar" : 5
   },
   {
    "name" : "dascover",
    "kind" : "function",
    "protection" : "private",
    "line" : 6031,
    "char" : 10,
    "deco" : "FIAyaIQeIAQiZv",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "masks",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6036,
    "endchar" : 5
   },
   {
    "name" : "dasqv",
    "kind" : "function",
    "protection" : "private",
    "line" : 6039,
    "char" : 10,
    "deco" : "FIAyaIQeIkZv",
    "originalType" : "void(in string dbFile, in string lasFile, in id_t coverage)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "coverage",
      "deco" : "xk",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6044,
    "endchar" : 5
   },
   {
    "name" : "damapper",
    "kind" : "function",
    "protection" : "private",
    "line" : 6046,
    "char" : 10,
    "deco" : "FIAyaIQeIAQiIQlZv",
    "parameters" : [
     {
      "name" : "refDam",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "readsDam",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "damapperOpts",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "outdir",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6049,
    "endchar" : 5
   },
   {
    "name" : "damapper",
    "kind" : "function",
    "protection" : "private",
    "line" : 6052,
    "char" : 10,
    "deco" : "FIAAyaIQfIQhZv",
    "parameters" : [
     {
      "name" : "dbList",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "damapperOpts",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "outdir",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6058,
    "endchar" : 5
   },
   {
    "name" : "computeIntrinsicQV",
    "kind" : "function",
    "protection" : "private",
    "line" : 6061,
    "char" : 10,
    "deco" : "FIAyaIQeImZv",
    "originalType" : "void(in string dbFile, in string lasFile, in size_t readDepth)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "readDepth",
      "deco" : "xm",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6071,
    "endchar" : 5
   },
   {
    "name" : "daccord",
    "kind" : "function",
    "protection" : "private",
    "line" : 6075,
    "char" : 12,
    "deco" : "FIAyaIQeIAQiZAya",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "daccordOpts",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6108,
    "endchar" : 5
   },
   {
    "name" : "silentDaccord",
    "kind" : "function",
    "protection" : "private",
    "line" : 6111,
    "char" : 10,
    "deco" : "FIAyaIQeIAQiZv",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "lasFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "daccordOpts",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6119,
    "endchar" : 5
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 6124,
    "char" : 10,
    "name" : "buildSubsetDb",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "buildSubsetDb",
      "kind" : "function",
      "line" : 6124,
      "char" : 10,
      "type" : "void(in string inDbFile, in string outDbFile, R readIds, Append append)",
      "parameters" : [
       {
        "name" : "inDbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "outDbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "readIds",
        "type" : "R"
       },
       {
        "name" : "append",
        "type" : "Append"
       }
      ],
      "endline" : 6143,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 6146,
    "char" : 10,
    "name" : "fasta2dam",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!(Unqual!Range) && isSomeString!(ElementType!(Unqual!Range))",
    "members" : [
     {
      "name" : "fasta2dam",
      "kind" : "function",
      "line" : 6146,
      "char" : 10,
      "type" : "void(in string outFile, Range fastaRecords, Append append = No.append)",
      "parameters" : [
       {
        "name" : "outFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "fastaRecords",
        "type" : "Range"
       },
       {
        "name" : "append",
        "type" : "Append",
        "default" : "No.append"
       }
      ],
      "endline" : 6199,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "fasta2dam",
    "kind" : "function",
    "protection" : "private",
    "line" : 6202,
    "char" : 10,
    "deco" : "FIAyaIQeE3std8typecons__T4FlagVAyaa6_617070656e64ZQzZv",
    "originalType" : "void(in string inFile, in string outFile, Append append = No.append)",
    "parameters" : [
     {
      "name" : "inFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "outFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "append",
      "deco" : "E3std8typecons__T4FlagVAyaa6_617070656e64ZQz",
      "default" : "Flag.no"
     }
    ],
    "endline" : 6207,
    "endchar" : 5
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 6210,
    "char" : 10,
    "name" : "fasta2db",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!(Unqual!Range) && isSomeString!(ElementType!(Unqual!Range))",
    "members" : [
     {
      "name" : "fasta2db",
      "kind" : "function",
      "line" : 6210,
      "char" : 10,
      "type" : "void(in string outFile, Range fastaRecords, Append append = No.append)",
      "parameters" : [
       {
        "name" : "outFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "fastaRecords",
        "type" : "Range"
       },
       {
        "name" : "append",
        "type" : "Append",
        "default" : "No.append"
       }
      ],
      "endline" : 6263,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "fasta2db",
    "kind" : "function",
    "protection" : "private",
    "line" : 6266,
    "char" : 10,
    "deco" : "FIAyaIQeE3std8typecons__T4FlagVAyaa6_617070656e64ZQzZv",
    "originalType" : "void(in string inFile, in string outFile, Append append = No.append)",
    "parameters" : [
     {
      "name" : "inFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "outFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "append",
      "deco" : "E3std8typecons__T4FlagVAyaa6_617070656e64ZQz",
      "default" : "Flag.no"
     }
    ],
    "endline" : 6271,
    "endchar" : 5
   },
   {
    "name" : "dbsplit",
    "kind" : "function",
    "protection" : "private",
    "line" : 6274,
    "char" : 10,
    "deco" : "FIAyaIAQfZv",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dbsplitOptions",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6277,
    "endchar" : 5
   },
   {
    "name" : "dbdump",
    "kind" : "function",
    "protection" : "private",
    "line" : 6322,
    "char" : 10,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNbNfIAyaIAQfZC7dentist4util7process__T9LinesPipeTSQBkQBfQBd11ProcessInfoVE3std8typecons__T4FlagVAyaa10_69734275666665726564ZQBii0ZQDo",
    "originalType" : "(in string dbFile, in string[] dbdumpOptions)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dbdumpOptions",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6329,
    "endchar" : 5
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 6332,
    "char" : 10,
    "name" : "dbdump",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isForwardRange!Range && (is(Range.length) && (Range.length == 0) || is(ElementType!Range : size_t))",
    "members" : [
     {
      "name" : "dbdump",
      "kind" : "function",
      "line" : 6332,
      "char" : 10,
      "storageClass" : [
       "auto"
      ],
      "type" : "(in string dbFile, Range recordNumbers, in string[] dbdumpOptions)",
      "parameters" : [
       {
        "name" : "dbFile",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "recordNumbers",
        "type" : "Range"
       },
       {
        "name" : "dbdumpOptions",
        "type" : "string[]",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 6358,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "dbdump",
    "kind" : "function",
    "protection" : "private",
    "line" : 6361,
    "char" : 10,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FIAyakkIAQhZC7dentist4util7process__T9LinesPipeTSQBkQBfQBd11ProcessInfoVE3std8typecons__T4FlagVAyaa10_69734275666665726564ZQBii0ZQDo",
    "originalType" : "(in string dbFile, id_t firstRecord, id_t lastRecord, in string[] dbdumpOptions)",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "firstRecord",
      "deco" : "k"
     },
     {
      "name" : "lastRecord",
      "deco" : "k"
     },
     {
      "name" : "dbdumpOptions",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6381,
    "endchar" : 5
   },
   {
    "name" : "dbshow",
    "kind" : "function",
    "protection" : "private",
    "line" : 6384,
    "char" : 12,
    "deco" : "FIAyaIQeZAya",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "contigId",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6387,
    "endchar" : 5
   },
   {
    "name" : "dbshow",
    "kind" : "function",
    "protection" : "private",
    "line" : 6390,
    "char" : 12,
    "deco" : "FIAyaIAQfZAya",
    "parameters" : [
     {
      "name" : "dbFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "dbshowOptions",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6393,
    "endchar" : 5
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 6395,
    "char" : 12,
    "name" : "executeCommand",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!(Unqual!Range) && isSomeString!(ElementType!(Unqual!Range))",
    "members" : [
     {
      "name" : "executeCommand",
      "kind" : "function",
      "line" : 6395,
      "char" : 12,
      "type" : "string(Range command, in string workdir = null)",
      "parameters" : [
       {
        "name" : "command",
        "type" : "Range"
       },
       {
        "name" : "workdir",
        "type" : "string",
        "storageClass" : [
         "in"
        ],
        "default" : "null"
       }
      ],
      "endline" : 6404,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 6406,
    "char" : 10,
    "name" : "executeShell",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!(Unqual!Range) && isSomeString!(ElementType!(Unqual!Range))",
    "members" : [
     {
      "name" : "executeShell",
      "kind" : "function",
      "line" : 6406,
      "char" : 10,
      "type" : "void(Range command, in string workdir = null)",
      "parameters" : [
       {
        "name" : "command",
        "type" : "Range"
       },
       {
        "name" : "workdir",
        "type" : "string",
        "storageClass" : [
         "in"
        ],
        "default" : "null"
       }
      ],
      "endline" : 6415,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 6417,
    "char" : 10,
    "name" : "executeScript",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!(Unqual!Range) && isSomeString!(ElementType!(Unqual!Range))",
    "members" : [
     {
      "name" : "executeScript",
      "kind" : "function",
      "line" : 6417,
      "char" : 10,
      "type" : "void(Range command, in string workdir = null)",
      "parameters" : [
       {
        "name" : "command",
        "type" : "Range"
       },
       {
        "name" : "workdir",
        "type" : "string",
        "storageClass" : [
         "in"
        ],
        "default" : "null"
       }
      ],
      "endline" : 6425,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 6427,
    "char" : 12,
    "name" : "executeWrapper",
    "parameters" : [
     {
      "name" : "type",
      "kind" : "value",
      "deco" : "Aya"
     },
     {
      "name" : "execCall",
      "kind" : "alias"
     },
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!(Unqual!Range) && isSomeString!(ElementType!(Unqual!Range))",
    "members" : [
     {
      "name" : "executeWrapper",
      "kind" : "function",
      "line" : 6427,
      "char" : 12,
      "type" : "string(Range command)",
      "parameters" : [
       {
        "name" : "command",
        "type" : "Range"
       }
      ],
      "endline" : 6463,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "buildScriptLine",
    "kind" : "function",
    "protection" : "private",
    "line" : 6465,
    "char" : 12,
    "deco" : "FIAAyaZAya",
    "parameters" : [
     {
      "name" : "command",
      "deco" : "xAAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6468,
    "endchar" : 5
   },
   {
    "name" : "stripBlock",
    "kind" : "function",
    "protection" : "private",
    "line" : 6470,
    "char" : 12,
    "deco" : "FIAyaZAya",
    "parameters" : [
     {
      "name" : "fileName",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 6477,
    "endchar" : 5
   },
   {
    "name" : "__unittest_L6479_C5",
    "kind" : "function",
    "protection" : "private",
    "line" : 6479,
    "char" : 5,
    "endline" : 6486,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.modules",
  "kind" : "module",
  "file" : "source/dentist/modules.d",
  "comment" : "    This module lists all modules in DENTIST. This is used to derive a list of\n    all external dependencies in DENTIST.\n\n    DO NOT EDIT! This file is generated by `update-modules.sh`.\n\n    See_also: `dentist.common.external.externalDependencies`\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "std.meta",
    "kind" : "import",
    "line" : 16,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AliasSeq"
    ]
   },
   {
    "name" : "dentist",
    "kind" : "static import",
    "line" : 17,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commandline",
    "kind" : "static import",
    "line" : 18,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands",
    "kind" : "static import",
    "line" : 19,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.bed2mask",
    "kind" : "static import",
    "line" : 20,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.buildPartialAssembly",
    "kind" : "static import",
    "line" : 21,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.chainLocalAlignments",
    "kind" : "static import",
    "line" : 22,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.checkResults",
    "kind" : "static import",
    "line" : 23,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.checkScaffolding",
    "kind" : "static import",
    "line" : 24,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.collectPileUps",
    "kind" : "static import",
    "line" : 25,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.collectPileUps.filter",
    "kind" : "static import",
    "line" : 26,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.collectPileUps.pileups",
    "kind" : "static import",
    "line" : 27,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.filterMask",
    "kind" : "static import",
    "line" : 28,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.findClosableGaps",
    "kind" : "static import",
    "line" : 29,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.generateDazzlerOptions",
    "kind" : "static import",
    "line" : 30,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.maskRepetitiveRegions",
    "kind" : "static import",
    "line" : 31,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.mergeInsertions",
    "kind" : "static import",
    "line" : 32,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.mergeMasks",
    "kind" : "static import",
    "line" : 33,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.output",
    "kind" : "static import",
    "line" : 34,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.processPileUps",
    "kind" : "static import",
    "line" : 35,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.processPileUps.cropper",
    "kind" : "static import",
    "line" : 36,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.propagateMask",
    "kind" : "static import",
    "line" : 37,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.showInsertions",
    "kind" : "static import",
    "line" : 38,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.showMask",
    "kind" : "static import",
    "line" : 39,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.showPileUps",
    "kind" : "static import",
    "line" : 40,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.translateCoords",
    "kind" : "static import",
    "line" : 41,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.validateConfig",
    "kind" : "static import",
    "line" : 42,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.commands.validateRegions",
    "kind" : "static import",
    "line" : 43,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common",
    "kind" : "static import",
    "line" : 44,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.alignments",
    "kind" : "static import",
    "line" : 45,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.alignments.base",
    "kind" : "static import",
    "line" : 46,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.alignments.chaining",
    "kind" : "static import",
    "line" : 47,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.binio",
    "kind" : "static import",
    "line" : 48,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.binio._testdata.insertiondb",
    "kind" : "static import",
    "line" : 49,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.binio._testdata.pileupdb",
    "kind" : "static import",
    "line" : 50,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.binio.common",
    "kind" : "static import",
    "line" : 51,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.binio.insertiondb",
    "kind" : "static import",
    "line" : 52,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.binio.pileupdb",
    "kind" : "static import",
    "line" : 53,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.commands",
    "kind" : "static import",
    "line" : 54,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.configfile",
    "kind" : "static import",
    "line" : 55,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.external",
    "kind" : "static import",
    "line" : 56,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.insertions",
    "kind" : "static import",
    "line" : 57,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.common.scaffold",
    "kind" : "static import",
    "line" : 58,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.dazzler",
    "kind" : "static import",
    "line" : 59,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.modules",
    "kind" : "static import",
    "line" : 60,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.swinfo",
    "kind" : "static import",
    "line" : 61,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.algorithm",
    "kind" : "static import",
    "line" : 62,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.containers",
    "kind" : "static import",
    "line" : 63,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.fasta",
    "kind" : "static import",
    "line" : 64,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.graphalgo",
    "kind" : "static import",
    "line" : 65,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.log",
    "kind" : "static import",
    "line" : 66,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.math",
    "kind" : "static import",
    "line" : 67,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.process",
    "kind" : "static import",
    "line" : 68,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.range",
    "kind" : "static import",
    "line" : 69,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.region",
    "kind" : "static import",
    "line" : 70,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.saturationmath",
    "kind" : "static import",
    "line" : 71,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.string",
    "kind" : "static import",
    "line" : 72,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "dentist.util.tempfile",
    "kind" : "static import",
    "line" : 73,
    "char" : 15,
    "protection" : "private"
   },
   {
    "name" : "modules",
    "kind" : "alias",
    "protection" : "public",
    "line" : 76,
    "char" : 1,
    "originalType" : "AliasSeq!(dentist, dentist.commandline, dentist.commands, dentist.commands.bed2mask, dentist.commands.buildPartialAssembly, dentist.commands.chainLocalAlignments, dentist.commands.checkResults, dentist.commands.checkScaffolding, dentist.commands.collectPileUps, dentist.commands.collectPileUps.filter, dentist.commands.collectPileUps.pileups, dentist.commands.filterMask, dentist.commands.findClosableGaps, dentist.commands.generateDazzlerOptions, dentist.commands.maskRepetitiveRegions, dentist.commands.mergeInsertions, dentist.commands.mergeMasks, dentist.commands.output, dentist.commands.processPileUps, dentist.commands.processPileUps.cropper, dentist.commands.propagateMask, dentist.commands.showInsertions, dentist.commands.showMask, dentist.commands.showPileUps, dentist.commands.translateCoords, dentist.commands.validateConfig, dentist.commands.validateRegions, dentist.common, dentist.common.alignments, dentist.common.alignments.base, dentist.common.alignments.chaining, dentist.common.binio, dentist.common.binio._testdata.insertiondb, dentist.common.binio._testdata.pileupdb, dentist.common.binio.common, dentist.common.binio.insertiondb, dentist.common.binio.pileupdb, dentist.common.commands, dentist.common.configfile, dentist.common.external, dentist.common.insertions, dentist.common.scaffold, dentist.dazzler, dentist.modules, dentist.swinfo, dentist.util.algorithm, dentist.util.containers, dentist.util.fasta, dentist.util.graphalgo, dentist.util.log, dentist.util.math, dentist.util.process, dentist.util.range, dentist.util.region, dentist.util.saturationmath, dentist.util.string, dentist.util.tempfile)"
   }
  ]
 },
 {
  "name" : "dentist",
  "kind" : "module",
  "file" : "source/dentist/package.d",
  "comment" : "    Exposes the `run` function to execute DENTIST commands. It takes an array\n    of CLI arguments to select the command and construct its options.\n\n    See_also: `dentist.commandline.run`, `dentist.commands`\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.commandline",
    "kind" : "import",
    "line" : 13,
    "char" : 15,
    "selective" : [
     "run"
    ]
   }
  ]
 },
 {
  "name" : "dentist.swinfo",
  "kind" : "module",
  "file" : "source/dentist/swinfo.d",
  "comment" : "    This module contains information about this software.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.common",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "testingOnly"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "wrap"
    ]
   },
   {
    "name" : "executableName",
    "kind" : "variable",
    "protection" : "public",
    "line" : 14,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"dentist\""
   },
   {
    "name" : "gitVersion",
    "kind" : "variable",
    "protection" : "public",
    "line" : 15,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"v2.0.0-63-g3a16918\""
   },
   {
    "name" : "gitCommit",
    "kind" : "variable",
    "protection" : "public",
    "line" : 16,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"3a1691852a4e36842d4e124340c522c67bb747ee\""
   },
   {
    "name" : "version_",
    "kind" : "variable",
    "protection" : "public",
    "line" : 17,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"v2.0.0-63-g3a16918+testing\""
   },
   {
    "name" : "description",
    "kind" : "variable",
    "protection" : "public",
    "line" : 18,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"Close assembly gaps using long-reads with focus on correctness.\\x0a\""
   },
   {
    "name" : "copyright",
    "kind" : "variable",
    "protection" : "public",
    "line" : 19,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"Copyright \\xc2\\xa9 2018, Arne Ludwig <arne.ludwig@posteo.de>\\x0a\""
   },
   {
    "name" : "license",
    "kind" : "variable",
    "protection" : "public",
    "line" : 20,
    "char" : 6,
    "storageClass" : [
     "enum"
    ],
    "deco" : "Aya",
    "init" : "\"Subject to the terms of the MIT license, as written in the included LICENSE file\\x0a\""
   }
  ]
 },
 {
  "name" : "dentist.util.algorithm",
  "kind" : "module",
  "file" : "source/dentist/util/algorithm.d",
  "comment" : "    Some additional alogorithm functions.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "copy",
     "countUntil",
     "min",
     "OpenRight",
     "uniq"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 17,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.functional",
    "kind" : "import",
    "line" : 18,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "binaryFun",
     "unaryFun"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 19,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isDynamicArray"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 20,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Yes"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 21,
    "char" : 8,
    "protection" : "private"
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Order `a` and `b` lexicographically by applying each `fun` to them. For\n    unary functions compares `fun(a) < fun(b)`.\n",
    "line" : 28,
    "char" : 6,
    "name" : "orderLexicographically",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "fun",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "orderLexicographically",
      "kind" : "function",
      "line" : 28,
      "char" : 6,
      "type" : "bool(T a, T b)",
      "parameters" : [
       {
        "name" : "a",
        "type" : "T"
       },
       {
        "name" : "b",
        "type" : "T"
       }
      ],
      "endline" : 44,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L47_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 47,
    "char" : 1,
    "endline" : 69,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Compare `a` and `b` lexicographically by applying each `fun` to them. For\n    unary functions compares `fun(a) < fun(b)`.\n",
    "line" : 69,
    "char" : 5,
    "name" : "cmpLexicographically",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "fun",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "cmpLexicographically",
      "kind" : "function",
      "line" : 69,
      "char" : 5,
      "type" : "int(T a, T b)",
      "parameters" : [
       {
        "name" : "a",
        "type" : "T"
       },
       {
        "name" : "b",
        "type" : "T"
       }
      ],
      "endline" : 89,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L92_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 92,
    "char" : 1,
    "endline" : 146,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Slices an input array into slices of equivalent adjacent elements.\n    In other languages this is often called `partitionBy`, `groupBy`\n    or `sliceWhen`.\n\n    Equivalence is defined by the predicate `pred`, which can be binary,\n    which is passed to `std.functional.binaryFun`. Two range elements\n    `a` and `b` are considered equivalent if `pred(a,b)` is true.\n\n    This predicate must be an equivalence relation, that is, it must be\n    reflexive (`pred(x,x)` is always true), symmetric\n    (`pred(x,y) == pred(y,x)`), and transitive (`pred(x,y) && pred(y,z)`\n    implies `pred(x,z)`). If this is not the case, the range returned by\n    sliceBy may assert at runtime or behave erratically.\n\n    Params:\n     pred = Predicate for determining equivalence.\n     array = An array to be sliced.\n\n    Returns: With a binary predicate, a range of slices is returned in which\n    all elements in a given slice are equivalent under the given predicate.\n\n    Notes:\n\n    Equivalent elements separated by an intervening non-equivalent element will\n    appear in separate subranges; this function only considers adjacent\n    equivalence. Elements in the subranges will always appear in the same order\n    they appear in the original range.\n\n    See_also: `std.algorithm.iteration.chunkBy`\n",
    "line" : 146,
    "char" : 6,
    "name" : "sliceBy",
    "parameters" : [
     {
      "name" : "pred",
      "kind" : "alias"
     },
     {
      "name" : "Array",
      "kind" : "type"
     }
    ],
    "constraint" : "isDynamicArray!Array",
    "members" : [
     {
      "name" : "sliceBy",
      "kind" : "function",
      "line" : 146,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "pure nothrow (Array array)",
      "parameters" : [
       {
        "name" : "array",
        "type" : "Array"
       }
      ],
      "endline" : 150,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L153_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 153,
    "char" : 1,
    "endline" : 179,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 179,
    "char" : 9,
    "name" : "SliceByImpl",
    "parameters" : [
     {
      "name" : "pred",
      "kind" : "alias"
     },
     {
      "name" : "Array",
      "kind" : "type"
     }
    ],
    "constraint" : "isDynamicArray!Array",
    "members" : [
     {
      "name" : "SliceByImpl",
      "kind" : "struct",
      "protection" : "public",
      "line" : 179,
      "char" : 9,
      "members" : [
       {
        "name" : "equivalent",
        "kind" : "alias",
        "line" : 182,
        "char" : 13,
        "type" : "binaryFun!pred"
       },
       {
        "name" : "array",
        "kind" : "variable",
        "line" : 184,
        "char" : 19,
        "type" : "Array"
       },
       {
        "name" : "sliceStart",
        "kind" : "variable",
        "line" : 185,
        "char" : 20,
        "type" : "size_t"
       },
       {
        "name" : "sliceEnd",
        "kind" : "variable",
        "line" : 186,
        "char" : 20,
        "type" : "size_t"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 188,
        "char" : 5,
        "type" : "(Array array)",
        "parameters" : [
         {
          "name" : "array",
          "type" : "Array"
         }
        ],
        "endline" : 196,
        "endchar" : 5
       },
       {
        "name" : "popFront",
        "kind" : "function",
        "line" : 198,
        "char" : 10,
        "type" : "void()",
        "endline" : 214,
        "endchar" : 5
       },
       {
        "name" : "empty",
        "kind" : "function",
        "line" : 216,
        "char" : 20,
        "type" : "const pure nothrow @property bool()",
        "endline" : 219,
        "endchar" : 5
       },
       {
        "name" : "front",
        "kind" : "function",
        "line" : 221,
        "char" : 20,
        "storageClass" : [
         "auto"
        ],
        "type" : "@property ()",
        "endline" : 226,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Return the prefix of `haystack` where `pred` is not satisfied.\n\nSee_also: `std.algorithm.searching.until`\n",
    "line" : 233,
    "char" : 7,
    "name" : "sliceUntil",
    "parameters" : [
     {
      "name" : "pred",
      "kind" : "alias",
      "defaultAlias" : "\"a == b\""
     },
     {
      "name" : "Array",
      "kind" : "type"
     },
     {
      "name" : "Needle",
      "kind" : "type"
     }
    ],
    "constraint" : "isDynamicArray!Array && !is(const(Needle) == const(Array))",
    "members" : [
     {
      "name" : "sliceUntil",
      "kind" : "function",
      "line" : 233,
      "char" : 7,
      "type" : "Array(Array haystack, Needle needle, OpenRight openRight = Yes.openRight)",
      "parameters" : [
       {
        "name" : "haystack",
        "type" : "Array"
       },
       {
        "name" : "needle",
        "type" : "Needle"
       },
       {
        "name" : "openRight",
        "type" : "OpenRight",
        "default" : "Yes.openRight"
       }
      ],
      "endline" : 247,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 250,
    "char" : 7,
    "name" : "sliceUntil",
    "parameters" : [
     {
      "name" : "pred",
      "kind" : "alias",
      "defaultAlias" : "\"equal(a, b)\""
     },
     {
      "name" : "Array",
      "kind" : "type"
     },
     {
      "name" : "Needle",
      "kind" : "type"
     }
    ],
    "constraint" : "isDynamicArray!Array && is(const(Needle) == const(Array))",
    "members" : [
     {
      "name" : "sliceUntil",
      "kind" : "function",
      "line" : 250,
      "char" : 7,
      "type" : "Array(Array haystack, Needle needle, OpenRight openRight = Yes.openRight)",
      "parameters" : [
       {
        "name" : "haystack",
        "type" : "Array"
       },
       {
        "name" : "needle",
        "type" : "Needle"
       },
       {
        "name" : "openRight",
        "type" : "OpenRight",
        "default" : "Yes.openRight"
       }
      ],
      "endline" : 267,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 270,
    "char" : 7,
    "name" : "sliceUntil",
    "parameters" : [
     {
      "name" : "pred",
      "kind" : "alias",
      "defaultAlias" : "\"a\""
     },
     {
      "name" : "Array",
      "kind" : "type"
     }
    ],
    "constraint" : "isDynamicArray!Array",
    "members" : [
     {
      "name" : "sliceUntil",
      "kind" : "function",
      "line" : 270,
      "char" : 7,
      "type" : "Array(Array haystack, OpenRight openRight = Yes.openRight)",
      "parameters" : [
       {
        "name" : "haystack",
        "type" : "Array"
       },
       {
        "name" : "openRight",
        "type" : "OpenRight",
        "default" : "Yes.openRight"
       }
      ],
      "endline" : 283,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L286_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 286,
    "char" : 1,
    "endline" : 305,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns `array` filtered in-place by `pred`.\n\nThis is a shorthand for:\n---\nauto bufferRest = array.filter!pred.copy(array);\narray.length -= bufferRest.length;\n---\n",
    "line" : 305,
    "char" : 16,
    "name" : "filterInPlace",
    "parameters" : [
     {
      "name" : "pred",
      "kind" : "alias",
      "defaultAlias" : "\"a\""
     },
     {
      "name" : "Array",
      "kind" : "type"
     }
    ],
    "constraint" : "isDynamicArray!Array",
    "members" : [
     {
      "name" : "filterInPlace",
      "kind" : "function",
      "line" : 305,
      "char" : 16,
      "storageClass" : [
       "auto"
      ],
      "type" : "ref Array(auto ref Array array)",
      "parameters" : [
       {
        "name" : "array",
        "type" : "Array",
        "storageClass" : [
         "auto",
         "ref"
        ]
       }
      ],
      "endline" : 314,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L317_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 317,
    "char" : 1,
    "endline" : 338,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns array `uniq`ified in-place.\n\nThis is a shorthand for:\n---\nauto bufferRest = array.uniq.copy(array);\narray.length -= bufferRest.length;\n---\n",
    "line" : 338,
    "char" : 16,
    "name" : "uniqInPlace",
    "parameters" : [
     {
      "name" : "pred",
      "kind" : "alias",
      "defaultAlias" : "\"a == b\""
     },
     {
      "name" : "Array",
      "kind" : "type"
     }
    ],
    "constraint" : "isDynamicArray!Array",
    "members" : [
     {
      "name" : "uniqInPlace",
      "kind" : "function",
      "line" : 338,
      "char" : 16,
      "storageClass" : [
       "auto"
      ],
      "type" : "ref Array(auto ref Array array)",
      "parameters" : [
       {
        "name" : "array",
        "type" : "Array",
        "storageClass" : [
         "auto",
         "ref"
        ]
       }
      ],
      "endline" : 345,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L348_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 348,
    "char" : 1,
    "endline" : 363,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Replaces the first occurrence of `needle` by `replacement` in `array` if\npresent. Modifies `array`.\n",
    "line" : 363,
    "char" : 7,
    "name" : "replaceInPlace",
    "parameters" : [
     {
      "name" : "pred",
      "kind" : "alias",
      "defaultAlias" : "\"a == b\""
     },
     {
      "name" : "Array",
      "kind" : "type"
     },
     {
      "name" : "E",
      "kind" : "type"
     }
    ],
    "constraint" : "isDynamicArray!Array",
    "members" : [
     {
      "name" : "replaceInPlace",
      "kind" : "function",
      "line" : 363,
      "char" : 7,
      "type" : "Array(auto ref Array array, E needle, E replacement)",
      "parameters" : [
       {
        "name" : "array",
        "type" : "Array",
        "storageClass" : [
         "auto",
         "ref"
        ]
       },
       {
        "name" : "needle",
        "type" : "E"
       },
       {
        "name" : "replacement",
        "type" : "E"
       }
      ],
      "endline" : 374,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L377_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 377,
    "char" : 1,
    "endline" : 393,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Get the first element in range assuming it to be non-empty.\n",
    "line" : 393,
    "char" : 19,
    "name" : "first",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!Range",
    "members" : [
     {
      "name" : "first",
      "kind" : "function",
      "line" : 393,
      "char" : 19,
      "type" : "ElementType!Range(Range range)",
      "parameters" : [
       {
        "name" : "range",
        "type" : "Range"
       }
      ],
      "endline" : 398,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L401_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 401,
    "char" : 1,
    "endline" : 409,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Get the last element in range assuming it to be non-empty.\n",
    "line" : 409,
    "char" : 19,
    "name" : "last",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!Range",
    "members" : [
     {
      "name" : "last",
      "kind" : "function",
      "line" : 409,
      "char" : 19,
      "type" : "ElementType!Range(Range range)",
      "parameters" : [
       {
        "name" : "range",
        "type" : "Range"
       }
      ],
      "endline" : 450,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L453_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 453,
    "char" : 1,
    "endline" : 495,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns one of a collection of expressions based on the value of the\nswitch expression.\n",
    "line" : 495,
    "char" : 1,
    "name" : "staticPredSwitch",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "kind" : "template",
      "line" : 497,
      "char" : 10,
      "name" : "staticPredSwitch",
      "parameters" : [
       {
        "name" : "E",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "staticPredSwitch",
        "kind" : "function",
        "line" : 497,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "pure nothrow (E switchExpression)",
        "parameters" : [
         {
          "name" : "switchExpression",
          "type" : "E"
         }
        ],
        "endline" : 512,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L516_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 516,
    "char" : 1,
    "endline" : 530,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.util.containers",
  "kind" : "module",
  "file" : "source/dentist/util/containers.d",
  "comment" : "    Useful containers. Currently only `HashSet`.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "any",
     "count",
     "filter",
     "map"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private"
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "A set of `T`s implemented using a hash-table.\n\nIn DENTIST, this is used for situations where the memory footprint of\n`dentist.util.math.NaturalNumberSet` may get too large. They both\nimplement similar interfaces.\n\nSee_also: `hashSet`\n",
    "line" : 22,
    "char" : 1,
    "name" : "HashSet",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "HashSet",
      "kind" : "struct",
      "protection" : "public",
      "line" : 22,
      "char" : 1,
      "members" : [
       {
        "name" : "_hash",
        "kind" : "variable",
        "line" : 24,
        "char" : 21,
        "type" : "bool[T]"
       },
       {
        "name" : "add",
        "kind" : "function",
        "comment" : "Add `value` to this set regardless whether it was present or not.\n",
        "line" : 28,
        "char" : 10,
        "type" : "void(T value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "T"
         }
        ],
        "endline" : 31,
        "endchar" : 5
       },
       {
        "name" : "remove",
        "kind" : "function",
        "comment" : "Remove `value` from this set regardless whether it was present or not.\n",
        "line" : 35,
        "char" : 10,
        "type" : "void(T value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "T"
         }
        ],
        "endline" : 38,
        "endchar" : 5
       },
       {
        "name" : "has",
        "kind" : "function",
        "comment" : "Return whether `value` is in this set.\n",
        "line" : 42,
        "char" : 10,
        "type" : "const pure bool(T value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "T"
         }
        ],
        "endline" : 45,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "ditto\n",
        "line" : 48,
        "char" : 10,
        "name" : "opBinaryRight",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "constraint" : "op == \"in\"",
        "members" : [
         {
          "name" : "opBinaryRight",
          "kind" : "function",
          "line" : 48,
          "char" : 10,
          "type" : "const pure bool(T value)",
          "parameters" : [
           {
            "name" : "value",
            "type" : "T"
           }
          ],
          "endline" : 51,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "empty",
        "kind" : "function",
        "comment" : "Returns true if this set is empty.\n",
        "line" : 55,
        "char" : 10,
        "type" : "const pure bool()",
        "endline" : 58,
        "endchar" : 5
       },
       {
        "name" : "clear",
        "kind" : "function",
        "comment" : "Remove all elements from this set.\n",
        "line" : 62,
        "char" : 10,
        "type" : "pure void()",
        "endline" : 65,
        "endchar" : 5
       },
       {
        "name" : "size",
        "kind" : "function",
        "comment" : "Return the number of elements in this set.\n",
        "line" : 69,
        "char" : 22,
        "type" : "const pure @property size_t()",
        "endline" : 72,
        "endchar" : 5
       },
       {
        "name" : "elements",
        "kind" : "function",
        "comment" : "Return a lazy range of the elements in this set.\n",
        "line" : 76,
        "char" : 20,
        "storageClass" : [
         "auto"
        ],
        "type" : "@property ()",
        "endline" : 82,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Construct a new `HashSet` from `values`.\n",
    "line" : 87,
    "char" : 32,
    "name" : "hashSet",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!R",
    "members" : [
     {
      "name" : "hashSet",
      "kind" : "function",
      "line" : 87,
      "char" : 32,
      "type" : "HashSet!(ElementType!R)(R values)",
      "parameters" : [
       {
        "name" : "values",
        "type" : "R"
       }
      ],
      "endline" : 95,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L98_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 98,
    "char" : 1,
    "endline" : 107,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.util.fasta",
  "kind" : "module",
  "file" : "source/dentist/util/fasta.d",
  "comment" : "    Some functions to work with FASTA data.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "count",
     "equal",
     "find",
     "joiner",
     "startsWith"
    ]
   },
   {
    "name" : "std.ascii",
    "kind" : "import",
    "line" : 17,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "newline"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 18,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "appender",
     "array"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 20,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 21,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enforce"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 22,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format",
     "formattedRead"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "chain",
     "chunks",
     "drop",
     "ElementType",
     "empty",
     "front",
     "isBidirectionalRange",
     "only",
     "popBack",
     "popFront",
     "take",
     "walkLength"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 38,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "File"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 39,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "indexOf",
     "lineSplitter",
     "outdent"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 40,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isSomeChar",
     "isSomeString"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 41,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "tuple",
     "Tuple"
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Gives access to FASTA data. Does not copy the input sequence.\n",
    "line" : 47,
    "char" : 1,
    "name" : "Fasta",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "isSomeString!T",
    "members" : [
     {
      "name" : "Fasta",
      "kind" : "struct",
      "protection" : "public",
      "line" : 47,
      "char" : 1,
      "members" : [
       {
        "name" : "headerIndicator",
        "kind" : "variable",
        "comment" : "FASTA headers start with this character.\n",
        "line" : 50,
        "char" : 17,
        "storageClass" : [
         "enum"
        ],
        "init" : "'>'"
       },
       {
        "name" : "data",
        "kind" : "variable",
        "comment" : "FASTA data.\n",
        "line" : 52,
        "char" : 13,
        "storageClass" : [
         "const"
        ],
        "type" : "T"
       },
       {
        "name" : "recordIndex",
        "kind" : "variable",
        "line" : 53,
        "char" : 22,
        "type" : "size_t[]"
       },
       {
        "name" : "buildIndex",
        "kind" : "function",
        "comment" : "        Build an index in order to give fast access to individual records.\n        This is called implicitly when accessing individual records using\n        `opIndex` or `length`.\n",
        "line" : 62,
        "char" : 10,
        "type" : "void()",
        "endline" : 78,
        "endchar" : 5
       },
       {
        "name" : "opIndex",
        "kind" : "function",
        "comment" : "        Get the FASTA record at idx (zero-based).\n\n        Returns: `FastaRecord!T` at index idx.\n",
        "line" : 86,
        "char" : 19,
        "type" : "FastaRecord!T(size_t idx)",
        "parameters" : [
         {
          "name" : "idx",
          "type" : "size_t"
         }
        ],
        "endline" : 94,
        "endchar" : 5
       },
       {
        "name" : "length",
        "kind" : "function",
        "comment" : "Get the number of FASTA records.\n",
        "line" : 98,
        "char" : 22,
        "type" : "@property size_t()",
        "endline" : 103,
        "endchar" : 5
       },
       {
        "name" : "isHeaderLine",
        "kind" : "function",
        "comment" : "Returns true iff line starts with '>'.\n",
        "line" : 107,
        "char" : 17,
        "storageClass" : [
         "static"
        ],
        "type" : "pure bool(in T line)",
        "parameters" : [
         {
          "name" : "line",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 110,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L114_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 114,
    "char" : 1,
    "endline" : 144,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Convenience wrapper around `Fasta!T(T data)`.\n",
    "line" : 144,
    "char" : 9,
    "name" : "parseFasta",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "parseFasta",
      "kind" : "function",
      "line" : 144,
      "char" : 9,
      "type" : "Fasta!T(T data)",
      "parameters" : [
       {
        "name" : "data",
        "type" : "T"
       }
      ],
      "endline" : 147,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L150_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 150,
    "char" : 1,
    "endline" : 183,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Gives access to a single FASTA record. Does not copy the input sequence.\n",
    "line" : 183,
    "char" : 1,
    "name" : "FastaRecord",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "isSomeString!T",
    "members" : [
     {
      "name" : "FastaRecord",
      "kind" : "struct",
      "protection" : "public",
      "line" : 183,
      "char" : 1,
      "members" : [
       {
        "name" : "lineSep",
        "kind" : "variable",
        "comment" : "Unix line separator.\n",
        "line" : 186,
        "char" : 17,
        "storageClass" : [
         "enum"
        ],
        "init" : "\"\\x0a\""
       },
       {
        "name" : "Slice",
        "kind" : "alias",
        "line" : 188,
        "char" : 13,
        "type" : "Tuple!(int, int)"
       },
       {
        "name" : "data",
        "kind" : "variable",
        "comment" : "FASTA data.\n",
        "line" : 191,
        "char" : 13,
        "storageClass" : [
         "const"
        ],
        "type" : "T"
       },
       {
        "name" : "toFasta",
        "kind" : "function",
        "comment" : "Get this record in FASTA format.\n",
        "line" : 197,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure (in size_t lineWidth = 50)",
        "parameters" : [
         {
          "name" : "lineWidth",
          "type" : "size_t",
          "storageClass" : [
           "in"
          ],
          "default" : "50"
         }
        ],
        "endline" : 202,
        "endchar" : 5
       },
       {
        "name" : "header",
        "kind" : "function",
        "comment" : "Get the complete header line including the leading `>`.\n",
        "line" : 206,
        "char" : 20,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure @property ()",
        "endline" : 209,
        "endchar" : 5
       },
       {
        "name" : "length",
        "kind" : "function",
        "comment" : "Get the length of the sequence (in characters).\n",
        "line" : 213,
        "char" : 22,
        "type" : "const pure @property size_t()",
        "endline" : 216,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "ditto\n",
        "line" : 219,
        "char" : 22,
        "name" : "opDollar",
        "parameters" : [
         {
          "name" : "dim",
          "kind" : "value",
          "type" : "size_t",
          "specValue" : "0"
         }
        ],
        "members" : [
         {
          "name" : "opDollar",
          "kind" : "function",
          "line" : 219,
          "char" : 22,
          "type" : "@property size_t()",
          "endline" : 222,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "opIndex",
        "kind" : "function",
        "comment" : "Get the sequence of this FASTA record without newlines.\n",
        "line" : 226,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure ()",
        "endline" : 229,
        "endchar" : 5
       },
       {
        "name" : "opIndex",
        "kind" : "function",
        "comment" : "Get the sequence character at index `i` of this FASTA record.\n",
        "line" : 233,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure (int i)",
        "parameters" : [
         {
          "name" : "i",
          "deco" : "i"
         }
        ],
        "endline" : 240,
        "endchar" : 5
       },
       {
        "name" : "opIndex",
        "kind" : "function",
        "comment" : "Get sub-sequence from `i` to `j` (exclusive) of this FASTA record.\n",
        "line" : 244,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure (in Slice slice)",
        "parameters" : [
         {
          "name" : "slice",
          "type" : "Slice",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 252,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "line" : 255,
        "char" : 10,
        "name" : "opSlice",
        "parameters" : [
         {
          "name" : "dim",
          "kind" : "value",
          "type" : "size_t",
          "specValue" : "0"
         }
        ],
        "members" : [
         {
          "name" : "opSlice",
          "kind" : "function",
          "line" : 255,
          "char" : 10,
          "storageClass" : [
           "auto"
          ],
          "type" : "(int i, int j)",
          "parameters" : [
           {
            "name" : "i",
            "deco" : "i"
           },
           {
            "name" : "j",
            "deco" : "i"
           }
          ],
          "endline" : 258,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "line" : 260,
        "char" : 10,
        "name" : "opSlice",
        "parameters" : [
         {
          "name" : "dim",
          "kind" : "value",
          "type" : "size_t",
          "specValue" : "0"
         }
        ],
        "members" : [
         {
          "name" : "opSlice",
          "kind" : "function",
          "line" : 260,
          "char" : 10,
          "storageClass" : [
           "auto"
          ],
          "type" : "(size_t i, size_t j)",
          "parameters" : [
           {
            "name" : "i",
            "type" : "size_t"
           },
           {
            "name" : "j",
            "type" : "size_t"
           }
          ],
          "endline" : 263,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "normalizeIndex",
        "kind" : "function",
        "line" : 266,
        "char" : 17,
        "type" : "const int(int i)",
        "parameters" : [
         {
          "name" : "i",
          "deco" : "i"
         }
        ],
        "endline" : 274,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L278_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 278,
    "char" : 1,
    "endline" : 320,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Convenience wrapper around `FastaRecord!T(T data)`.\n",
    "line" : 320,
    "char" : 15,
    "name" : "parseFastaRecord",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "parseFastaRecord",
      "kind" : "function",
      "line" : 320,
      "char" : 15,
      "type" : "FastaRecord!T(T data)",
      "parameters" : [
       {
        "name" : "data",
        "type" : "T"
       }
      ],
      "endline" : 323,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L326_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 326,
    "char" : 1,
    "endline" : 345,
    "endchar" : 1
   },
   {
    "name" : "getFastaLength",
    "kind" : "function",
    "protection" : "public",
    "comment" : "    Calculate the sequence length of the first record in `fastaFile`. Returns\n    the length of the next record in `fastaFile` if it is a File object.\n",
    "line" : 345,
    "char" : 8,
    "deco" : "FIAyaZm",
    "originalType" : "size_t(in string fastaFile)",
    "parameters" : [
     {
      "name" : "fastaFile",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 351,
    "endchar" : 1
   },
   {
    "name" : "getFastaLength",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 354,
    "char" : 8,
    "deco" : "FS3std5stdio4FileZm",
    "originalType" : "size_t(File fastaFile)",
    "parameters" : [
     {
      "name" : "fastaFile",
      "deco" : "S3std5stdio4File"
     }
    ],
    "endline" : 395,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L398_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 398,
    "char" : 1,
    "endline" : 417,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L417_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 417,
    "char" : 1,
    "endline" : 439,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L439_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 439,
    "char" : 1,
    "endline" : 453,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Represents standard PacBio header format:\n`>{smrtId}/{well}/{hqBegin}_{hqEnd} {readQuality}`\n",
    "line" : 453,
    "char" : 1,
    "name" : "PacBioHeader",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "isSomeString!T",
    "members" : [
     {
      "name" : "PacBioHeader",
      "kind" : "struct",
      "protection" : "public",
      "line" : 453,
      "char" : 1,
      "members" : [
       {
        "name" : "headerFormat",
        "kind" : "variable",
        "line" : 455,
        "char" : 25,
        "storageClass" : [
         "enum"
        ],
        "init" : "\">%s/%d/%d_%d %s\""
       },
       {
        "name" : "name",
        "kind" : "variable",
        "comment" : "Name of the SMRT© Cell.\n",
        "line" : 458,
        "char" : 7,
        "type" : "T"
       },
       {
        "name" : "well",
        "kind" : "variable",
        "comment" : "Index of the well where the read occurred.\n",
        "line" : 461,
        "char" : 12,
        "type" : "size_t"
       },
       {
        "name" : "qualityRegionBegin",
        "kind" : "variable",
        "comment" : "Begin of the high quality region.\n",
        "line" : 464,
        "char" : 12,
        "type" : "size_t"
       },
       {
        "name" : "qualityRegionEnd",
        "kind" : "variable",
        "comment" : "End of the high quality region.\n",
        "line" : 467,
        "char" : 12,
        "type" : "size_t"
       },
       {
        "name" : "additionalInformation",
        "kind" : "variable",
        "comment" : "More information, usually `RQ=0.xx`\n",
        "line" : 470,
        "char" : 12,
        "type" : "string"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : "Construct a `PacBioHeader!T` from `header`.\n",
        "line" : 474,
        "char" : 5,
        "type" : "(T header)",
        "parameters" : [
         {
          "name" : "header",
          "type" : "T"
         }
        ],
        "endline" : 477,
        "endchar" : 5
       },
       {
        "name" : "opAssign",
        "kind" : "function",
        "comment" : "Assign new `header` data.\n",
        "line" : 481,
        "char" : 10,
        "type" : "void(T header)",
        "parameters" : [
         {
          "name" : "header",
          "type" : "T"
         }
        ],
        "endline" : 484,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "Builds the header string.\n",
        "line" : 488,
        "char" : 7,
        "name" : "to",
        "parameters" : [
         {
          "name" : "S",
          "kind" : "type",
          "type" : "T"
         }
        ],
        "members" : [
         {
          "name" : "to",
          "kind" : "function",
          "line" : 488,
          "char" : 7,
          "type" : "const S()",
          "endline" : 491,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "buildHeader",
        "kind" : "function",
        "line" : 493,
        "char" : 15,
        "type" : "const T()",
        "endline" : 502,
        "endchar" : 5
       },
       {
        "name" : "parse",
        "kind" : "function",
        "line" : 504,
        "char" : 18,
        "type" : "void(in T header)",
        "parameters" : [
         {
          "name" : "header",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 515,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L519_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 519,
    "char" : 1,
    "endline" : 538,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Convenience wrapper around `PacBioHeader!T(T header)`.\n",
    "line" : 538,
    "char" : 16,
    "name" : "parsePacBioHeader",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "parsePacBioHeader",
      "kind" : "function",
      "line" : 538,
      "char" : 16,
      "type" : "PacBioHeader!T(T header)",
      "parameters" : [
       {
        "name" : "header",
        "type" : "T"
       }
      ],
      "endline" : 541,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L544_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 544,
    "char" : 1,
    "endline" : 563,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Get the complement of a DNA base. Only bases A, T, C, G (case-insensitive)\n    will be translated; all other characters are left as is. Replacement\n    preserves casing of the characters.\n",
    "line" : 563,
    "char" : 3,
    "name" : "complement",
    "parameters" : [
     {
      "name" : "C",
      "kind" : "type"
     }
    ],
    "constraint" : "isSomeChar!C",
    "members" : [
     {
      "name" : "complement",
      "kind" : "function",
      "line" : 563,
      "char" : 3,
      "type" : "C(C base)",
      "parameters" : [
       {
        "name" : "base",
        "type" : "C"
       }
      ],
      "endline" : 580,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Compute the reverse complement of a DNA sequence. Only bases A, T, C, G\n    (case-insensitive) will be translated; all other characters are left as\n    is. Replacement preserves casing of the characters.\n",
    "line" : 588,
    "char" : 6,
    "name" : "reverseComplementer",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isBidirectionalRange!Range && isSomeChar!(ElementType!Range)",
    "members" : [
     {
      "name" : "reverseComplementer",
      "kind" : "function",
      "line" : 588,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(Range sequence)",
      "parameters" : [
       {
        "name" : "sequence",
        "type" : "Range"
       }
      ],
      "endline" : 597,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 600,
    "char" : 3,
    "name" : "reverseComplement",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "isSomeString!T",
    "members" : [
     {
      "name" : "reverseComplement",
      "kind" : "function",
      "line" : 600,
      "char" : 3,
      "type" : "T(in T sequence)",
      "parameters" : [
       {
        "name" : "sequence",
        "type" : "T",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 605,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Return a copy of `fastaRecord` with reverse-complemented sequence.\n",
    "line" : 609,
    "char" : 15,
    "name" : "reverseComplement",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "isSomeString!T",
    "members" : [
     {
      "name" : "reverseComplement",
      "kind" : "function",
      "line" : 609,
      "char" : 15,
      "type" : "FastaRecord!T(in FastaRecord!T fastaRecord)",
      "parameters" : [
       {
        "name" : "fastaRecord",
        "type" : "FastaRecord!T",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 624,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L627_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 627,
    "char" : 1,
    "endline" : 657,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.util.graphalgo",
  "kind" : "module",
  "file" : "source/dentist/util/graphalgo.d",
  "comment" : "    A selection of graph algorithms.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.util.math",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "absdiff",
     "NaturalNumberSet"
    ]
   },
   {
    "name" : "dentist.util.saturationmath",
    "kind" : "import",
    "line" : 14,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 15,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "any",
     "copy",
     "countUntil",
     "map"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 20,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "appender",
     "array",
     "uninitializedArray"
    ]
   },
   {
    "name" : "std.functional",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "binaryFun"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enumerate",
     "iota"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 28,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Tuple",
     "Yes"
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Calculate connected components of the graph defined by `hasEdge`.\n\n    Params:\n        hasEdge = Binary predicate taking two nodes of type `size_t` which is\n                  true iff the first node is adjacent to the second node.\n        n =       Number of nodes in the graph. `hasEdge` must be defined for\n                  every pair of integer in `0 .. n`.\n    Returns: Array of components represented as arrays of node indices.\n",
    "line" : 43,
    "char" : 12,
    "name" : "connectedComponents",
    "parameters" : [
     {
      "name" : "hasEdge",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "connectedComponents",
      "kind" : "function",
      "line" : 43,
      "char" : 12,
      "type" : "size_t[][](size_t n)",
      "parameters" : [
       {
        "name" : "n",
        "type" : "size_t"
       }
      ],
      "endline" : 67,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L70_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 70,
    "char" : 1,
    "endline" : 95,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L95_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 95,
    "char" : 1,
    "endline" : 122,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 122,
    "char" : 26,
    "name" : "discoverComponent",
    "parameters" : [
     {
      "name" : "hasEdge",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "discoverComponent",
      "kind" : "function",
      "line" : 122,
      "char" : 26,
      "type" : "NaturalNumberSet(ref NaturalNumberSet nodes)",
      "parameters" : [
       {
        "name" : "nodes",
        "type" : "NaturalNumberSet",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 134,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 137,
    "char" : 14,
    "name" : "discoverComponent",
    "parameters" : [
     {
      "name" : "hasEdge",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "discoverComponent",
      "kind" : "function",
      "line" : 137,
      "char" : 14,
      "type" : "void(ref NaturalNumberSet nodes, size_t currentNode, ref NaturalNumberSet component)",
      "parameters" : [
       {
        "name" : "nodes",
        "type" : "NaturalNumberSet",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "currentNode",
        "type" : "size_t"
       },
       {
        "name" : "component",
        "type" : "NaturalNumberSet",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 157,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Provides access to the all pairs shortest paths solution.\n\nThis is the result of the Floyd-Warshall algorithm generated by\n`shortestPathsFloydWarshall`.\n",
    "line" : 164,
    "char" : 1,
    "name" : "FloydWarshallMatrix",
    "parameters" : [
     {
      "name" : "weight_t",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "FloydWarshallMatrix",
      "kind" : "struct",
      "protection" : "public",
      "line" : 164,
      "char" : 1,
      "members" : [
       {
        "name" : "unconnectedWeight",
        "kind" : "variable",
        "comment" : "Weight returned if two nodes are not connected.\n\nSee_also: do not use directly but through `isConnected`\n",
        "line" : 169,
        "char" : 10,
        "storageClass" : [
         "enum"
        ],
        "init" : "saturatedInfinity!weight_t"
       },
       {
        "name" : "noNext",
        "kind" : "variable",
        "comment" : "Weight returned if the end of a path is reached.\n\nSee_also: do not use directly but through `hasNext`\n",
        "line" : 174,
        "char" : 10,
        "storageClass" : [
         "enum"
        ],
        "init" : "size_t.max"
       },
       {
        "name" : "_numNodes",
        "kind" : "variable",
        "line" : 176,
        "char" : 20,
        "type" : "size_t"
       },
       {
        "name" : "_dist",
        "kind" : "variable",
        "line" : 177,
        "char" : 24,
        "type" : "weight_t[]"
       },
       {
        "name" : "_next",
        "kind" : "variable",
        "line" : 178,
        "char" : 22,
        "type" : "size_t[]"
       },
       {
        "name" : "numNodes",
        "kind" : "function",
        "comment" : "Number of nodes in the graph. This is the limit (exclusive) for\nnode indices.\n",
        "line" : 183,
        "char" : 22,
        "type" : "const pure nothrow @property @safe size_t()",
        "endline" : 186,
        "endchar" : 5
       },
       {
        "name" : "hasNegativeCycles",
        "kind" : "function",
        "comment" : "True if a negative cycle was detected.\n",
        "line" : 190,
        "char" : 10,
        "type" : "const pure nothrow @safe bool()",
        "endline" : 193,
        "endchar" : 5
       },
       {
        "name" : "idx",
        "kind" : "function",
        "line" : 196,
        "char" : 20,
        "type" : "const pure nothrow @safe size_t(size_t u, size_t v)",
        "parameters" : [
         {
          "name" : "u",
          "type" : "size_t"
         },
         {
          "name" : "v",
          "type" : "size_t"
         }
        ],
        "endline" : 200,
        "endchar" : 5
       },
       {
        "name" : "dist",
        "kind" : "function",
        "comment" : "Get the distance from `u` to `v`.\n",
        "line" : 204,
        "char" : 28,
        "type" : "pure nothrow @property ref @safe weight_t(size_t u, size_t v)",
        "parameters" : [
         {
          "name" : "u",
          "type" : "size_t"
         },
         {
          "name" : "v",
          "type" : "size_t"
         }
        ],
        "endline" : 207,
        "endchar" : 5
       },
       {
        "name" : "dist",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 210,
        "char" : 24,
        "type" : "const pure nothrow @property @safe weight_t(size_t u, size_t v)",
        "parameters" : [
         {
          "name" : "u",
          "type" : "size_t"
         },
         {
          "name" : "v",
          "type" : "size_t"
         }
        ],
        "endline" : 213,
        "endchar" : 5
       },
       {
        "name" : "isConnected",
        "kind" : "function",
        "comment" : "Return true if there is a path from `u` to `v`.\n",
        "line" : 217,
        "char" : 20,
        "type" : "const pure nothrow @property @safe bool(size_t u, size_t v)",
        "parameters" : [
         {
          "name" : "u",
          "type" : "size_t"
         },
         {
          "name" : "v",
          "type" : "size_t"
         }
        ],
        "endline" : 220,
        "endchar" : 5
       },
       {
        "name" : "next",
        "kind" : "function",
        "comment" : "Return the next node after `u` on a shortest path from `u` to `v`.\n",
        "line" : 224,
        "char" : 26,
        "type" : "pure nothrow @property ref @safe size_t(size_t u, size_t v)",
        "parameters" : [
         {
          "name" : "u",
          "type" : "size_t"
         },
         {
          "name" : "v",
          "type" : "size_t"
         }
        ],
        "endline" : 227,
        "endchar" : 5
       },
       {
        "name" : "next",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 230,
        "char" : 22,
        "type" : "const pure nothrow @property @safe size_t(size_t u, size_t v)",
        "parameters" : [
         {
          "name" : "u",
          "type" : "size_t"
         },
         {
          "name" : "v",
          "type" : "size_t"
         }
        ],
        "endline" : 233,
        "endchar" : 5
       },
       {
        "name" : "hasNext",
        "kind" : "function",
        "comment" : "Returns whether there is a next node after `u` on a shortest path\nfrom `u` to `v`.\n\n`false` is returned if `u == v` or if there is no shortest path\nfrom `u` to `v`.\n",
        "line" : 241,
        "char" : 20,
        "type" : "const pure nothrow @property @safe bool(size_t u, size_t v)",
        "parameters" : [
         {
          "name" : "u",
          "type" : "size_t"
         },
         {
          "name" : "v",
          "type" : "size_t"
         }
        ],
        "endline" : 244,
        "endchar" : 5
       },
       {
        "name" : "ShortestPath",
        "kind" : "struct",
        "protection" : "public",
        "comment" : "Range of nodes that form a shortest path between two nodes.\n",
        "line" : 248,
        "char" : 12,
        "members" : [
         {
          "name" : "_matrix",
          "kind" : "variable",
          "line" : 250,
          "char" : 54,
          "type" : "const(FloydWarshallMatrix!weight_t)*"
         },
         {
          "name" : "_from",
          "kind" : "variable",
          "line" : 251,
          "char" : 24,
          "type" : "size_t"
         },
         {
          "name" : "_to",
          "kind" : "variable",
          "line" : 252,
          "char" : 24,
          "type" : "size_t"
         },
         {
          "name" : "_current",
          "kind" : "variable",
          "line" : 253,
          "char" : 24,
          "type" : "size_t"
         },
         {
          "name" : "this",
          "kind" : "constructor",
          "line" : 256,
          "char" : 17,
          "type" : "(const(FloydWarshallMatrix!weight_t)* matrix, size_t from, size_t to)",
          "parameters" : [
           {
            "name" : "matrix",
            "type" : "const(FloydWarshallMatrix!weight_t)*"
           },
           {
            "name" : "from",
            "type" : "size_t"
           },
           {
            "name" : "to",
            "type" : "size_t"
           }
          ],
          "endline" : 264,
          "endchar" : 9
         },
         {
          "name" : "matrix",
          "kind" : "function",
          "comment" : "Reference to the underlying solution matrix.\n",
          "line" : 268,
          "char" : 55,
          "type" : "pure nothrow @property @safe const(FloydWarshallMatrix!weight_t)()",
          "endline" : 271,
          "endchar" : 9
         },
         {
          "name" : "from",
          "kind" : "function",
          "comment" : "Source node of the path.\n",
          "line" : 275,
          "char" : 26,
          "type" : "const pure nothrow @property @safe size_t()",
          "endline" : 278,
          "endchar" : 9
         },
         {
          "name" : "to",
          "kind" : "function",
          "comment" : "Destination node of the path.\n",
          "line" : 282,
          "char" : 26,
          "type" : "const pure nothrow @property @safe size_t()",
          "endline" : 285,
          "endchar" : 9
         },
         {
          "name" : "empty",
          "kind" : "function",
          "comment" : "Range interface.\n",
          "line" : 289,
          "char" : 24,
          "type" : "const pure nothrow @property @safe bool()",
          "endline" : 292,
          "endchar" : 9
         },
         {
          "name" : "front",
          "kind" : "function",
          "comment" : "ditto\n",
          "line" : 295,
          "char" : 26,
          "type" : "const pure nothrow @property @safe size_t()",
          "endline" : 303,
          "endchar" : 9
         },
         {
          "name" : "popFront",
          "kind" : "function",
          "comment" : "ditto\n",
          "line" : 306,
          "char" : 14,
          "type" : "pure nothrow @safe void()",
          "endline" : 313,
          "endchar" : 9
         },
         {
          "name" : "save",
          "kind" : "function",
          "comment" : "ditto\n",
          "line" : 316,
          "char" : 32,
          "type" : "const pure nothrow @property @safe ShortestPath()",
          "endline" : 319,
          "endchar" : 9
         }
        ]
       },
       {
        "name" : "shortestPath",
        "kind" : "function",
        "comment" : "Returns a lazy range of nodes that form a shortest path between `from`\nand `to`.\n",
        "line" : 325,
        "char" : 18,
        "type" : "const pure nothrow ShortestPath(size_t from, size_t to)",
        "parameters" : [
         {
          "name" : "from",
          "type" : "size_t"
         },
         {
          "name" : "to",
          "type" : "size_t"
         }
        ],
        "endline" : 328,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 332,
    "char" : 14,
    "name" : "updateBestConnections",
    "parameters" : [
     {
      "name" : "weight_t",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "updateBestConnections",
      "kind" : "function",
      "line" : 332,
      "char" : 14,
      "type" : "nothrow @safe void(size_t u, size_t v, weight_t d, ref size_t[2][] bestConnections, ref weight_t[] bestDists)",
      "parameters" : [
       {
        "name" : "u",
        "type" : "size_t"
       },
       {
        "name" : "v",
        "type" : "size_t"
       },
       {
        "name" : "d",
        "type" : "weight_t"
       },
       {
        "name" : "bestConnections",
        "type" : "size_t[2][]",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "bestDists",
        "type" : "weight_t[]",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 357,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 360,
    "char" : 14,
    "name" : "floydWarshallMatrix",
    "parameters" : [
     {
      "name" : "hasEdge",
      "kind" : "alias"
     },
     {
      "name" : "weight",
      "kind" : "alias"
     },
     {
      "name" : "weight_t",
      "kind" : "type",
      "default" : "typeof(weight(size_t.init, size_t.init))"
     }
    ],
    "members" : [
     {
      "name" : "floydWarshallMatrix",
      "kind" : "function",
      "line" : 360,
      "char" : 14,
      "storageClass" : [
       "auto"
      ],
      "type" : "(size_t n, ref size_t[2][] bestConnections, ref weight_t[] bestDists)",
      "parameters" : [
       {
        "name" : "n",
        "type" : "size_t"
       },
       {
        "name" : "bestConnections",
        "type" : "size_t[2][]",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "bestDists",
        "type" : "weight_t[]",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 399,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "GraphType",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Specify the type of the graph for performance improvements.\n",
    "line" : 403,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "general",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(ubyte)0u",
      "comment" : "Any weighted graph (directed or undirected). Negative cycles are\nallowed and may be detected after the algorithm finished.\n",
      "line" : 407,
      "char" : 5
     },
     {
      "name" : "DAG",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "Directed acyclic graph. The algorithm can be faster by a constant\nfactor by first sorting in topological order and than skipping\nirrelevant edges.\n",
      "line" : 411,
      "char" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Calculate all shortest paths between all pairs of nodes. The functions\n    `hasEdge` and `weight` define the graphs structure and weights,\n    respectively. Nodes are represented as `size_t` integers.\n\n    Params:\n        hasEdge = Binary predicate taking two nodes of type `size_t` which is\n                  true iff the first node is adjacent to the second node.\n        weight =  Binary function taking two nodes of type `size_t` which\n                  returns the weight of the edge between the first and the\n                  second node. The function may be undefined if `hasEdge`\n                  returns false for the given arguments.\n        n =       Number of nodes in the graph. `hasEdge` must be defined for\n                  every pair of integer in `0 .. n`.\n        bestConnections =\n                  If given, the array will be populated with the\n                  `bestConnections.length` best connections, that\n                  is the pairs of nodes with optimal distances.\n        graphType =\n                  Specify `GraphType.DAG` to improve performance if the graph\n                  is in fact a directed acyclic graph.\n    Returns: `FloydWarshallMatrix`\n    See_also: $(LINK https://en.wikipedia.org/wiki/Floyd-Warshall_algorithm)\n",
    "line" : 439,
    "char" : 6,
    "name" : "shortestPathsFloydWarshall",
    "parameters" : [
     {
      "name" : "hasEdge",
      "kind" : "alias"
     },
     {
      "name" : "weight",
      "kind" : "alias"
     },
     {
      "name" : "graphType",
      "kind" : "value",
      "deco" : "E7dentist4util9graphalgo9GraphType",
      "defaultValue" : "GraphType.general"
     }
    ],
    "members" : [
     {
      "name" : "shortestPathsFloydWarshall",
      "kind" : "function",
      "line" : 439,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(size_t n)",
      "parameters" : [
       {
        "name" : "n",
        "type" : "size_t"
       }
      ],
      "endline" : 448,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 451,
    "char" : 6,
    "name" : "shortestPathsFloydWarshall",
    "parameters" : [
     {
      "name" : "hasEdge",
      "kind" : "alias"
     },
     {
      "name" : "weight",
      "kind" : "alias"
     },
     {
      "name" : "graphType",
      "kind" : "value",
      "deco" : "E7dentist4util9graphalgo9GraphType",
      "defaultValue" : "GraphType.general"
     }
    ],
    "members" : [
     {
      "name" : "shortestPathsFloydWarshall",
      "kind" : "function",
      "line" : 451,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(size_t n, ref size_t[2][] bestConnections)",
      "parameters" : [
       {
        "name" : "n",
        "type" : "size_t"
       },
       {
        "name" : "bestConnections",
        "type" : "size_t[2][]",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 509,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "allPairsShortestPaths",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 512,
    "char" : 1,
    "originalType" : "shortestPathsFloydWarshall"
   },
   {
    "name" : "__unittest_L515_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 515,
    "char" : 1,
    "endline" : 542,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L542_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 542,
    "char" : 1,
    "endline" : 570,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L570_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 570,
    "char" : 1,
    "endline" : 608,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L608_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Optimize performance by choosing appropriate `graphType`\n",
    "line" : 608,
    "char" : 1,
    "endline" : 645,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L645_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 645,
    "char" : 1,
    "endline" : 677,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L677_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 677,
    "char" : 1,
    "endline" : 686,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L686_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 686,
    "char" : 1,
    "endline" : 703,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Provides access to the single source shortest paths solution.\n\nSee_also: `dagSingleSourceShortestPaths`.\n",
    "line" : 733,
    "char" : 1,
    "name" : "SingleSourceShortestPathsSolution",
    "parameters" : [
     {
      "name" : "weight_t",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "SingleSourceShortestPathsSolution",
      "kind" : "struct",
      "protection" : "public",
      "line" : 733,
      "char" : 1,
      "members" : [
       {
        "name" : "unconnectedWeight",
        "kind" : "variable",
        "line" : 735,
        "char" : 10,
        "storageClass" : [
         "enum"
        ],
        "init" : "saturatedInfinity!weight_t"
       },
       {
        "name" : "noPredecessor",
        "kind" : "variable",
        "line" : 736,
        "char" : 10,
        "storageClass" : [
         "enum"
        ],
        "init" : "size_t.max"
       },
       {
        "name" : "startNode",
        "kind" : "variable",
        "comment" : "Source node of the shortest paths problem.\n",
        "line" : 740,
        "char" : 12,
        "type" : "size_t"
       },
       {
        "name" : "topologicalOrder",
        "kind" : "variable",
        "comment" : "Topologically ordered nodes.\n",
        "line" : 743,
        "char" : 14,
        "type" : "size_t[]"
       },
       {
        "name" : "_distance",
        "kind" : "variable",
        "line" : 745,
        "char" : 24,
        "type" : "weight_t[]"
       },
       {
        "name" : "_predecessor",
        "kind" : "variable",
        "line" : 746,
        "char" : 22,
        "type" : "size_t[]"
       },
       {
        "name" : "numNodes",
        "kind" : "function",
        "comment" : "Number of nodes in the graph. This is the limit (exclusive) for\nnode indices.\n",
        "line" : 751,
        "char" : 22,
        "type" : "const pure nothrow @property @safe size_t()",
        "endline" : 754,
        "endchar" : 5
       },
       {
        "name" : "originalNode",
        "kind" : "function",
        "comment" : "Returns the original ID of the node at index `u` in topological order.\n",
        "line" : 758,
        "char" : 20,
        "type" : "const pure nothrow @safe size_t(size_t u)",
        "parameters" : [
         {
          "name" : "u",
          "type" : "size_t"
         }
        ],
        "endline" : 761,
        "endchar" : 5
       },
       {
        "name" : "distances",
        "kind" : "function",
        "comment" : "Return the array of distances from `startNode` to the indexed node.\n",
        "line" : 765,
        "char" : 33,
        "type" : "const pure nothrow @property @safe const(weight_t)[]()",
        "endline" : 768,
        "endchar" : 5
       },
       {
        "name" : "distance",
        "kind" : "function",
        "comment" : "Return the distance from `startNode` to `u`.\n",
        "line" : 772,
        "char" : 28,
        "type" : "pure nothrow @property ref @safe weight_t(size_t u)",
        "parameters" : [
         {
          "name" : "u",
          "type" : "size_t"
         }
        ],
        "endline" : 775,
        "endchar" : 5
       },
       {
        "name" : "distance",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 779,
        "char" : 24,
        "type" : "const pure nothrow @property @safe weight_t(size_t u)",
        "parameters" : [
         {
          "name" : "u",
          "type" : "size_t"
         }
        ],
        "endline" : 782,
        "endchar" : 5
       },
       {
        "name" : "isConnected",
        "kind" : "function",
        "comment" : "Return true if there is a path from `startNode` to `u`.\n",
        "line" : 787,
        "char" : 20,
        "type" : "const pure nothrow @property @safe bool(size_t u)",
        "parameters" : [
         {
          "name" : "u",
          "type" : "size_t"
         }
        ],
        "endline" : 790,
        "endchar" : 5
       },
       {
        "name" : "predecessor",
        "kind" : "function",
        "comment" : "Return the predecessor of `u` on a shortest path\nfrom `startNode` to `u`.\n",
        "line" : 795,
        "char" : 26,
        "type" : "pure nothrow @property ref @safe size_t(size_t u)",
        "parameters" : [
         {
          "name" : "u",
          "type" : "size_t"
         }
        ],
        "endline" : 798,
        "endchar" : 5
       },
       {
        "name" : "predecessor",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 801,
        "char" : 22,
        "type" : "const pure nothrow @property @safe size_t(size_t u)",
        "parameters" : [
         {
          "name" : "u",
          "type" : "size_t"
         }
        ],
        "endline" : 804,
        "endchar" : 5
       },
       {
        "name" : "hasPredecessor",
        "kind" : "function",
        "comment" : "Returns true if `u` has a predecessor on a shortest path\nfrom `startNode` to `u`.\n\nThis is true if there exists a path from `startNode` to `u` and\n`u != startNode`.\n",
        "line" : 812,
        "char" : 20,
        "type" : "const pure nothrow @property @safe bool(size_t u)",
        "parameters" : [
         {
          "name" : "u",
          "type" : "size_t"
         }
        ],
        "endline" : 815,
        "endchar" : 5
       },
       {
        "name" : "ReverseShortestPath",
        "kind" : "struct",
        "protection" : "public",
        "comment" : "Reverse range of nodes that form a shortest path starting in\n`startNode` and ending in `to`.\n\nThe order is reversed because solutions to the single source shortest\npaths problem always from a tree that is tersely represented by a\npredecessor list.\n",
        "line" : 824,
        "char" : 12,
        "members" : [
         {
          "name" : "_solution",
          "kind" : "variable",
          "line" : 826,
          "char" : 68,
          "type" : "const(SingleSourceShortestPathsSolution!weight_t)*"
         },
         {
          "name" : "_to",
          "kind" : "variable",
          "line" : 827,
          "char" : 24,
          "type" : "size_t"
         },
         {
          "name" : "_current",
          "kind" : "variable",
          "line" : 828,
          "char" : 24,
          "type" : "size_t"
         },
         {
          "name" : "this",
          "kind" : "constructor",
          "line" : 831,
          "char" : 17,
          "type" : "(const(SingleSourceShortestPathsSolution!weight_t)* solution, size_t to)",
          "parameters" : [
           {
            "name" : "solution",
            "type" : "const(SingleSourceShortestPathsSolution!weight_t)*"
           },
           {
            "name" : "to",
            "type" : "size_t"
           }
          ],
          "endline" : 838,
          "endchar" : 9
         },
         {
          "name" : "solution",
          "kind" : "function",
          "comment" : "Reference to the underlying solution object.\n",
          "line" : 842,
          "char" : 69,
          "type" : "pure nothrow @property @safe const(SingleSourceShortestPathsSolution!weight_t)()",
          "endline" : 845,
          "endchar" : 9
         },
         {
          "name" : "from",
          "kind" : "function",
          "comment" : "Source node.\n",
          "line" : 849,
          "char" : 26,
          "type" : "const pure nothrow @property @safe size_t()",
          "endline" : 852,
          "endchar" : 9
         },
         {
          "name" : "to",
          "kind" : "function",
          "comment" : "Target node.\n",
          "line" : 856,
          "char" : 26,
          "type" : "const pure nothrow @property @safe size_t()",
          "endline" : 859,
          "endchar" : 9
         },
         {
          "name" : "empty",
          "kind" : "function",
          "comment" : "Range interface.\n",
          "line" : 863,
          "char" : 24,
          "type" : "const pure nothrow @property @safe bool()",
          "endline" : 866,
          "endchar" : 9
         },
         {
          "name" : "front",
          "kind" : "function",
          "comment" : "ditto\n",
          "line" : 869,
          "char" : 26,
          "type" : "const pure nothrow @property @safe size_t()",
          "endline" : 877,
          "endchar" : 9
         },
         {
          "name" : "popFront",
          "kind" : "function",
          "comment" : "ditto\n",
          "line" : 880,
          "char" : 14,
          "type" : "pure nothrow @safe void()",
          "endline" : 887,
          "endchar" : 9
         }
        ]
       },
       {
        "name" : "reverseShortestPath",
        "kind" : "function",
        "comment" : "Returns a lazy range of nodes that form a reversed shortest path\nfrom `startNode` to `to`.\n",
        "line" : 893,
        "char" : 25,
        "type" : "const pure nothrow ReverseShortestPath(size_t to)",
        "parameters" : [
         {
          "name" : "to",
          "type" : "size_t"
         }
        ],
        "endline" : 896,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Calculate all shortest paths in a DAG starting at `start`.\n\n    The functions `hasEdge` and `weight` define the graphs structure and\n    weights, respectively. Nodes are represented as `0 .. n`. The graph must\n    be directed and acyclic (DAG).\n\n    The implementation uses `topologicalSort`ing achieving linear time\n    consumption `Θ(n + m)` where `m` is the number of edges.\n\n    Params:\n        hasEdge = Binary predicate taking two nodes of type `size_t` which is\n                  true iff the first node is adjacent to the second node.\n        weight =  Binary function taking two nodes of type `size_t` which\n                  returns the weight of the edge between the first and the\n                  second node. The function is only evaluated if `hasEdge`\n                  is true.\n        start =   Source node.\n        n =       Number of nodes in the graph. `hasEdge` must be defined for\n                  every pair of integer in `0 .. n`.\n    Returns: `SingleSourceShortestPathsSolution`\n    See_also: $(UL\n        $(LI `topologicalSort`)\n        $(LI $(LINK https://en.wikipedia.org/wiki/Topological_sorting#Application_to_shortest_path_finding))\n    )\n",
    "line" : 926,
    "char" : 6,
    "name" : "dagSingleSourceShortestPaths",
    "parameters" : [
     {
      "name" : "hasEdge",
      "kind" : "alias"
     },
     {
      "name" : "weight",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "dagSingleSourceShortestPaths",
      "kind" : "function",
      "line" : 926,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(size_t start, size_t n)",
      "parameters" : [
       {
        "name" : "start",
        "type" : "size_t"
       },
       {
        "name" : "n",
        "type" : "size_t"
       }
      ],
      "endline" : 962,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L965_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 965,
    "char" : 1,
    "endline" : 1011,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Topologically sort a DAG.\n\n    The binary predicate `hasEdge` defines the graphs structure. Nodes are\n    represented as `0 .. n`. The graph must be directed and acyclic (DAG).\n\n    The sorting is implemented using a linear time algorithm based on\n    depth-first search describe by Cormen et al. (2001).\n\n    Returns: array of nodes in topological order.\n    Params:\n        hasEdge = Binary predicate taking two nodes of type `size_t` which is\n                  true iff the first node is adjacent to the second node.\n        n =       Number of nodes in the graph. `hasEdge` must be defined for\n                  every pair of integer in `0 .. n`.\n    Throws: `NoDAG` if a cycle was detected\n    See_also: $(UL\n        $(LI $(LINK https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search))\n        $(LI Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001), \"Section 22.4: Topological sort\", Introduction to Algorithms (2nd ed.), MIT Press and McGraw-Hill, pp. 549–552, ISBN 0-262-03293-7)\n    )\n",
    "line" : 1011,
    "char" : 10,
    "name" : "topologicalSort",
    "parameters" : [
     {
      "name" : "hasEdge",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "topologicalSort",
      "kind" : "function",
      "line" : 1011,
      "char" : 10,
      "type" : "size_t[](size_t n)",
      "parameters" : [
       {
        "name" : "n",
        "type" : "size_t"
       }
      ],
      "endline" : 1054,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L1057_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 1057,
    "char" : 1,
    "endline" : 1074,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L1074_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 1074,
    "char" : 1,
    "endline" : 1092,
    "endchar" : 1
   },
   {
    "name" : "NoDAG",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Thrown if a cycle was detected.\n",
    "line" : 1092,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 1094,
      "char" : 5,
      "deco" : "FAyamC6object9ThrowableZC7dentist4util9graphalgo5NoDAG",
      "originalType" : "(string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "m",
        "default" : "cast(ulong)__LINE__"
       },
       {
        "name" : "next",
        "deco" : "C6object9Throwable",
        "default" : "null"
       }
      ],
      "endline" : 1097,
      "endchar" : 5
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.util.log",
  "kind" : "module",
  "file" : "source/dentist/util/log.d",
  "comment" : "    Central logging facility for DENTIST.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.datetime",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.process",
    "kind" : "import",
    "line" : 14,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 15,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 16,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "core.thread",
    "kind" : "import",
    "line" : 17,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "minLevel",
    "kind" : "variable",
    "protection" : "private",
    "line" : 22,
    "char" : 24,
    "storageClass" : [
     "__gshared"
    ],
    "deco" : "E7dentist4util3log8LogLevel",
    "init" : "LogLevel.info"
   },
   {
    "name" : "setLogLevel",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Sets the minimum log level to be printed.\n",
    "line" : 27,
    "char" : 6,
    "deco" : "FNbE7dentist4util3log8LogLevelZv",
    "parameters" : [
     {
      "name" : "level",
      "deco" : "E7dentist4util3log8LogLevel"
     }
    ],
    "endline" : 31,
    "endchar" : 1
   },
   {
    "name" : "getLogLevel",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Get the minimum log level to be printed. Use `shouldLog` for conditionals.\n",
    "line" : 35,
    "char" : 10,
    "deco" : "FZE7dentist4util3log8LogLevel",
    "endline" : 38,
    "endchar" : 1
   },
   {
    "name" : "shouldLog",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Check whether message of `logLevel` should be logged.\n",
    "line" : 42,
    "char" : 6,
    "deco" : "FE7dentist4util3log8LogLevelZb",
    "parameters" : [
     {
      "name" : "logLevel",
      "deco" : "E7dentist4util3log8LogLevel"
     }
    ],
    "endline" : 45,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Logs a message in compressed single-line JSON format.\n\n    Produces a JSON object with the key-value pairs given as `args` and\n    default fields `\"thread\"`, `\"timestamp\"` and `\"logLevel\"`.\n\n\n    Example:\n    ---\n    logJsonInfo(\n        \"action\", \"findTheTruth\",\n        \"answer\", 42,\n        \"elapsedSecs\", 1337,\n    );\n\n    // --> (real output is compressed in a single line)\n    // {\n    //     \"action\": \"findTheTruth\",\n    //     \"answer\": 42,\n    //     \"elapsedSecs\": 1337\n    //     \"thread\": 123467890,\n    //     \"timestamp\", 123467890\n    //     \"logLevel\", \"info\"\n    // }\n    ---\n\n    Params:\n        args = pairs of `name` (`string`) and `value`\n",
    "line" : 77,
    "char" : 6,
    "name" : "logJsonDebug",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "logJsonDebug",
      "kind" : "function",
      "line" : 77,
      "char" : 6,
      "type" : "nothrow void(lazy T args)",
      "parameters" : [
       {
        "name" : "args",
        "type" : "T",
        "storageClass" : [
         "lazy"
        ]
       }
      ],
      "endline" : 80,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 82,
    "char" : 6,
    "name" : "logJsonDiagnostic",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "logJsonDiagnostic",
      "kind" : "function",
      "line" : 82,
      "char" : 6,
      "type" : "nothrow void(lazy T args)",
      "parameters" : [
       {
        "name" : "args",
        "type" : "T",
        "storageClass" : [
         "lazy"
        ]
       }
      ],
      "endline" : 85,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 87,
    "char" : 6,
    "name" : "logJsonInfo",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "logJsonInfo",
      "kind" : "function",
      "line" : 87,
      "char" : 6,
      "type" : "nothrow void(lazy T args)",
      "parameters" : [
       {
        "name" : "args",
        "type" : "T",
        "storageClass" : [
         "lazy"
        ]
       }
      ],
      "endline" : 90,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 92,
    "char" : 6,
    "name" : "logJsonWarn",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "logJsonWarn",
      "kind" : "function",
      "line" : 92,
      "char" : 6,
      "type" : "nothrow void(lazy T args)",
      "parameters" : [
       {
        "name" : "args",
        "type" : "T",
        "storageClass" : [
         "lazy"
        ]
       }
      ],
      "endline" : 95,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 97,
    "char" : 6,
    "name" : "logJsonError",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "logJsonError",
      "kind" : "function",
      "line" : 97,
      "char" : 6,
      "type" : "nothrow void(lazy T args)",
      "parameters" : [
       {
        "name" : "args",
        "type" : "T",
        "storageClass" : [
         "lazy"
        ]
       }
      ],
      "endline" : 100,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 103,
    "char" : 6,
    "name" : "logJson",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "logJson",
      "kind" : "function",
      "line" : 103,
      "char" : 6,
      "type" : "nothrow void(LogLevel level, lazy T args)",
      "parameters" : [
       {
        "name" : "level",
        "type" : "LogLevel"
       },
       {
        "name" : "args",
        "type" : "T",
        "storageClass" : [
         "lazy"
        ]
       }
      ],
      "endline" : 151,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L154_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 154,
    "char" : 1,
    "endline" : 188,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Logs a message.\n\n    Params:\n        level = The log level for the logged message\n        fmt = See $(LINK http://dlang.org/phobos/std_format.html#format-string)\n",
    "line" : 188,
    "char" : 6,
    "name" : "logDebug",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "logDebug",
      "kind" : "function",
      "line" : 188,
      "char" : 6,
      "type" : "nothrow void(string fmt, lazy T args)",
      "parameters" : [
       {
        "name" : "fmt",
        "type" : "string"
       },
       {
        "name" : "args",
        "type" : "T",
        "storageClass" : [
         "lazy"
        ]
       }
      ],
      "endline" : 191,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 193,
    "char" : 6,
    "name" : "logDiagnostic",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "logDiagnostic",
      "kind" : "function",
      "line" : 193,
      "char" : 6,
      "type" : "nothrow void(string fmt, lazy T args)",
      "parameters" : [
       {
        "name" : "fmt",
        "type" : "string"
       },
       {
        "name" : "args",
        "type" : "T",
        "storageClass" : [
         "lazy"
        ]
       }
      ],
      "endline" : 196,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 198,
    "char" : 6,
    "name" : "logInfo",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "logInfo",
      "kind" : "function",
      "line" : 198,
      "char" : 6,
      "type" : "nothrow void(string fmt, lazy T args)",
      "parameters" : [
       {
        "name" : "fmt",
        "type" : "string"
       },
       {
        "name" : "args",
        "type" : "T",
        "storageClass" : [
         "lazy"
        ]
       }
      ],
      "endline" : 201,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 203,
    "char" : 6,
    "name" : "logWarn",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "logWarn",
      "kind" : "function",
      "line" : 203,
      "char" : 6,
      "type" : "nothrow void(string fmt, lazy T args)",
      "parameters" : [
       {
        "name" : "fmt",
        "type" : "string"
       },
       {
        "name" : "args",
        "type" : "T",
        "storageClass" : [
         "lazy"
        ]
       }
      ],
      "endline" : 206,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 208,
    "char" : 6,
    "name" : "logError",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "logError",
      "kind" : "function",
      "line" : 208,
      "char" : 6,
      "type" : "nothrow void(string fmt, lazy T args)",
      "parameters" : [
       {
        "name" : "fmt",
        "type" : "string"
       },
       {
        "name" : "args",
        "type" : "T",
        "storageClass" : [
         "lazy"
        ]
       }
      ],
      "endline" : 211,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 214,
    "char" : 6,
    "name" : "log",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "log",
      "kind" : "function",
      "line" : 214,
      "char" : 6,
      "type" : "nothrow void(LogLevel level, string fmt, lazy T args)",
      "parameters" : [
       {
        "name" : "level",
        "type" : "LogLevel"
       },
       {
        "name" : "fmt",
        "type" : "string"
       },
       {
        "name" : "args",
        "type" : "T",
        "storageClass" : [
         "lazy"
        ]
       }
      ],
      "endline" : 248,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "LogLevel",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Specifies the log level for a particular log message.\n",
    "line" : 251,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "debug_",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 253,
      "char" : 5
     },
     {
      "name" : "diagnostic",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 254,
      "char" : 5
     },
     {
      "name" : "info",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 255,
      "char" : 5
     },
     {
      "name" : "warn",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "3",
      "line" : 256,
      "char" : 5
     },
     {
      "name" : "error",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "4",
      "line" : 257,
      "char" : 5
     },
     {
      "name" : "fatal",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "5",
      "line" : 258,
      "char" : 5
     },
     {
      "name" : "none",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "6",
      "line" : 259,
      "char" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Do not use directly. Use `mixin(traceExecution)` instead.\n",
    "line" : 264,
    "char" : 1,
    "name" : "ExecutionTracer",
    "parameters" : [
     {
      "name" : "logLevel",
      "kind" : "value",
      "deco" : "E7dentist4util3log8LogLevel",
      "defaultValue" : "LogLevel.diagnostic"
     }
    ],
    "members" : [
     {
      "name" : "ExecutionTracer",
      "kind" : "struct",
      "protection" : "public",
      "line" : 264,
      "char" : 1,
      "members" : [
       {
        "name" : "std.datetime.stopwatch",
        "kind" : "import",
        "line" : 266,
        "char" : 12,
        "protection" : "private",
        "selective" : [
         "StopWatch"
        ]
       },
       {
        "name" : "std.typecons",
        "kind" : "import",
        "line" : 267,
        "char" : 12,
        "protection" : "private",
        "selective" : [
         "Yes"
        ]
       },
       {
        "name" : "functionName",
        "kind" : "variable",
        "line" : 269,
        "char" : 12,
        "type" : "string"
       },
       {
        "name" : "timer",
        "kind" : "variable",
        "line" : 270,
        "char" : 15,
        "type" : "StopWatch"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 272,
        "char" : 5,
        "type" : "(int dummy, string fnName = __FUNCTION__)",
        "parameters" : [
         {
          "name" : "dummy",
          "deco" : "i"
         },
         {
          "name" : "fnName",
          "type" : "string",
          "default" : "__FUNCTION__"
         }
        ],
        "endline" : 283,
        "endchar" : 5
       },
       {
        "name" : "~this",
        "kind" : "destructor",
        "line" : 285,
        "char" : 5,
        "endline" : 295,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Print JSON log entries upon entering and leaving the function reporting\nthe execution time.\n\nExample:\n---\nvoid foo()\n{\nmixin(traceExecution);\n\nlogJsonInfo(\"info\", \"working on foo()\")\n}\n\nvoid main()\n{\nfoo();\n// --> (real output is compressed in a single line)\n// {\n//     \"function\": \"foo\",\n//     \"state\": \"enter\",\n//     \"thread\": 123467890,\n//     \"timestamp\", 123467890\n//     \"logLevel\", \"info\"\n// }\n// {\n//     \"info\": \"working on foo()\",\n//     \"thread\": 123467890,\n//     \"timestamp\", 123467890\n//     \"logLevel\", \"info\"\n// }\n// {\n//     \"function\": \"foo\",\n//     \"state\": \"exit\",\n//     \"timeElapsed\": 1234567890,\n//     \"thread\": 123467890,\n//     \"timestamp\", 123467890\n//     \"logLevel\", \"info\"\n// }\n}\n---\n",
    "line" : 338,
    "char" : 8,
    "name" : "traceExecution",
    "parameters" : [
     {
      "name" : "logLevel",
      "kind" : "value",
      "deco" : "E7dentist4util3log8LogLevel",
      "defaultValue" : "LogLevel.diagnostic"
     }
    ],
    "members" : [
     {
      "name" : "traceExecution",
      "kind" : "function",
      "line" : 338,
      "char" : 8,
      "type" : "string()",
      "endline" : 351,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L353_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 353,
    "char" : 1,
    "endline" : 401,
    "endchar" : 1
   },
   {
    "name" : "ProgressMeter",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "Tracks progress and outputs information regularly.\n\n`ProgressMeter.Format` can be used to choose a format suitable for\nterminals (`ProgressMeter.Format.human`) or for log files\n(`ProgressMeter.Format.json`).\n",
    "line" : 401,
    "char" : 1,
    "members" : [
     {
      "name" : "std.datetime.stopwatch",
      "kind" : "import",
      "line" : 403,
      "char" : 12,
      "protection" : "private",
      "selective" : [
       "StopWatch"
      ]
     },
     {
      "name" : "std.algorithm",
      "kind" : "import",
      "line" : 404,
      "char" : 12,
      "protection" : "private",
      "selective" : [
       "max"
      ]
     },
     {
      "name" : "std.stdio",
      "kind" : "import",
      "line" : 405,
      "char" : 12,
      "protection" : "private",
      "selective" : [
       "File",
       "stderr"
      ]
     },
     {
      "name" : "std.typecons",
      "kind" : "import",
      "line" : 408,
      "char" : 12,
      "protection" : "private",
      "selective" : [
       "Flag",
       "No",
       "Tuple",
       "Yes"
      ]
     },
     {
      "name" : "UnitSpec",
      "kind" : "alias",
      "protection" : "private",
      "line" : 414,
      "char" : 13,
      "deco" : "S3std8typecons__T5TupleTmVAyaa10_6d756c7469706c696572TaVQBea4_6e616d65ZQCc",
      "originalType" : "Tuple!(size_t, \"multiplier\", char, \"name\")"
     },
     {
      "name" : "Unit",
      "kind" : "enum",
      "protection" : "public",
      "comment" : "Available display units for the progress meter.\n",
      "line" : 418,
      "char" : 5,
      "baseDeco" : "S3std8typecons__T5TupleTmVAyaa10_6d756c7469706c696572TaVQBea4_6e616d65ZQCc",
      "members" : [
       {
        "name" : "auto_",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "Tuple(0LU, '\\x00')",
        "line" : 420,
        "char" : 9
       },
       {
        "name" : "one",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "Tuple(1LU, ' ')",
        "line" : 421,
        "char" : 9
       },
       {
        "name" : "kilo",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "Tuple(1000LU, 'k')",
        "line" : 422,
        "char" : 9
       },
       {
        "name" : "mega",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "Tuple(1000000LU, 'M')",
        "line" : 423,
        "char" : 9
       },
       {
        "name" : "giga",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "Tuple(1000000000LU, 'G')",
        "line" : 424,
        "char" : 9
       },
       {
        "name" : "peta",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "Tuple(18446744072982171648LU, 'P')",
        "line" : 425,
        "char" : 9
       },
       {
        "name" : "min",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "Tuple(1LU, ' ')",
        "line" : 426,
        "char" : 9
       },
       {
        "name" : "max",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "Tuple(18446744072982171648LU, 'P')",
        "line" : 427,
        "char" : 9
       }
      ]
     },
     {
      "name" : "Format",
      "kind" : "enum",
      "protection" : "public",
      "comment" : "Display format of the progress meter.\n",
      "line" : 432,
      "char" : 5,
      "baseDeco" : "h",
      "members" : [
       {
        "name" : "human",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "cast(ubyte)0u",
        "comment" : "Displays a single line that is updated regularly. This is suitable\nfor terminal output.\n",
        "line" : 436,
        "char" : 9
       },
       {
        "name" : "json",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "1",
        "comment" : "Produces a series of compressed, single-line JSON object\ndescribing the progress. This is suitable for output to a regular\nfile.\n",
        "line" : 441,
        "char" : 9
       }
      ]
     },
     {
      "name" : "printEveryMsecs",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Wait at least the amount of milliseconds before updating the status.\n",
      "line" : 446,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "init" : "500LU",
      "offset" : 0
     },
     {
      "name" : "unit",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Display ticks in this unit.\n",
      "line" : 449,
      "char" : 10,
      "deco" : "E7dentist4util3log13ProgressMeter4Unit",
      "offset" : 8
     },
     {
      "name" : "precision",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Use `precision` digits after the decimal point.\n",
      "line" : 452,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "init" : "3LU",
      "offset" : 24
     },
     {
      "name" : "totalTicks",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Specifies the 100% mark if given. No percentage is displayed if this\nis zero.\n",
      "line" : 456,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 32
     },
     {
      "name" : "numTicks",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Number of ticks until now.\n",
      "line" : 459,
      "char" : 12,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 40
     },
     {
      "name" : "silent",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Suppress output but still track the progress.\n",
      "line" : 462,
      "char" : 19,
      "deco" : "E3std8typecons__T4FlagVAyaa6_73696c656e74ZQz",
      "originalType" : "Flag!\"silent\"",
      "offset" : 48
     },
     {
      "name" : "format",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Choose display format.\n",
      "line" : 465,
      "char" : 12,
      "deco" : "E7dentist4util3log13ProgressMeter6Format",
      "offset" : 49
     },
     {
      "name" : "_output",
      "kind" : "variable",
      "protection" : "private",
      "line" : 467,
      "char" : 18,
      "deco" : "S3std5stdio4File",
      "offset" : 56
     },
     {
      "name" : "hasOutput",
      "kind" : "variable",
      "protection" : "private",
      "line" : 468,
      "char" : 18,
      "deco" : "b",
      "offset" : 80
     },
     {
      "name" : "timer",
      "kind" : "variable",
      "protection" : "private",
      "line" : 469,
      "char" : 23,
      "deco" : "S3std8datetime9stopwatch9StopWatch",
      "offset" : 88
     },
     {
      "name" : "lastPrint",
      "kind" : "variable",
      "protection" : "private",
      "line" : 470,
      "char" : 23,
      "deco" : "S3std8datetime9stopwatch9StopWatch",
      "offset" : 112
     },
     {
      "name" : "output",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Set the output file to write status updates to. Default it to use\n`std.stdio.stderr`.\n",
      "line" : 475,
      "char" : 20,
      "deco" : "FNdS3std5stdio4FileZv",
      "parameters" : [
       {
        "name" : "output",
        "deco" : "S3std5stdio4File"
       }
      ],
      "endline" : 479,
      "endchar" : 5
     },
     {
      "name" : "output",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Get a reference to the output file.\n",
      "line" : 483,
      "char" : 29,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FNcNdZS3std5stdio4File",
      "originalType" : "@property ref File()",
      "endline" : 489,
      "endchar" : 5
     },
     {
      "name" : "start",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Start the timer.\n\nThis implicitly resets the timer and tick count.\n",
      "line" : 495,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 506,
      "endchar" : 5
     },
     {
      "name" : "tick",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Add a single tick.\n",
      "line" : 510,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 516,
      "endchar" : 5
     },
     {
      "name" : "stop",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Stop the timer and print a last status update.\n",
      "line" : 520,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 526,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Check if `timeUnit` is allowed by `std.datetime.stopwatch.StopWatch.peek.total`.\n",
      "line" : 530,
      "char" : 17,
      "name" : "isValidTimeUnit",
      "parameters" : [
       {
        "name" : "timeUnit",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "members" : [
       {
        "name" : "isValidTimeUnit",
        "kind" : "variable",
        "line" : 530,
        "char" : 17,
        "storageClass" : [
         "enum"
        ],
        "init" : "is(typeof(timer.peek.total!timeUnit))"
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Get the number of elapsed `timeUnit`s.\n",
      "line" : 535,
      "char" : 20,
      "name" : "elapsed",
      "parameters" : [
       {
        "name" : "timeUnit",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "constraint" : "isValidTimeUnit!timeUnit",
      "members" : [
       {
        "name" : "elapsed",
        "kind" : "function",
        "line" : 535,
        "char" : 20,
        "storageClass" : [
         "auto"
        ],
        "type" : "const nothrow @property @safe ()",
        "endline" : 538,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Get the average throughput in ticks per `timeUnit`.\n\nBugs: this will cause an arithmetic error if no time has elapsed.\n",
      "line" : 544,
      "char" : 20,
      "name" : "ticksPer",
      "parameters" : [
       {
        "name" : "timeUnit",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "constraint" : "isValidTimeUnit!timeUnit",
      "members" : [
       {
        "name" : "ticksPer",
        "kind" : "function",
        "line" : 544,
        "char" : 20,
        "storageClass" : [
         "auto"
        ],
        "type" : "const nothrow @property @safe ()",
        "endline" : 547,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "hasETA",
      "kind" : "function",
      "protection" : "public",
      "comment" : "True if the estimated time of arrival (ETA) can be calculated.\n",
      "line" : 551,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNaNbNdNiNfZb",
      "originalType" : "const nothrow @property @safe ()",
      "endline" : 554,
      "endchar" : 5
     },
     {
      "name" : "hasEstimatedTimeOfArrival",
      "kind" : "alias",
      "protection" : "public",
      "line" : 556,
      "char" : 5,
      "originalType" : "hasETA"
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Calculate the estimated time of arrival (ETA).\n\nThis simply assumes that the current average throughput\n(`ticksPer!timeUnit`) will not change.\n",
      "line" : 563,
      "char" : 20,
      "name" : "eta",
      "parameters" : [
       {
        "name" : "timeUnit",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "constraint" : "isValidTimeUnit!timeUnit",
      "members" : [
       {
        "name" : "eta",
        "kind" : "function",
        "line" : 563,
        "char" : 20,
        "storageClass" : [
         "auto"
        ],
        "type" : "const nothrow @property @safe ()",
        "endline" : 566,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "estimatedTimeOfArrival",
      "kind" : "alias",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 569,
      "char" : 5,
      "originalType" : "eta"
     },
     {
      "name" : "selectUnitFor",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Select the smallest unit such that the number of decimal digits\nis up to three.\n",
      "line" : 574,
      "char" : 17,
      "storageClass" : [
       "static"
      ],
      "deco" : "FNaNbNfmZE7dentist4util3log13ProgressMeter4Unit",
      "originalType" : "pure nothrow @safe Unit(size_t number)",
      "parameters" : [
       {
        "name" : "number",
        "deco" : "m"
       }
      ],
      "endline" : 582,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L585_C5",
      "kind" : "function",
      "protection" : "public",
      "comment" : "\n",
      "line" : 585,
      "char" : 5,
      "endline" : 593,
      "endchar" : 1
     },
     {
      "name" : "LineLocation",
      "kind" : "enum",
      "protection" : "private",
      "line" : 596,
      "char" : 5,
      "baseDeco" : "h",
      "members" : [
       {
        "name" : "first",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "cast(ubyte)0u",
        "line" : 598,
        "char" : 9
       },
       {
        "name" : "middle",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "1",
        "line" : 599,
        "char" : 9
       },
       {
        "name" : "last",
        "kind" : "enum member",
        "protection" : "public",
        "value" : "2",
        "line" : 600,
        "char" : 9
       }
      ]
     },
     {
      "name" : "printProgressLine",
      "kind" : "function",
      "protection" : "private",
      "line" : 604,
      "char" : 10,
      "deco" : "FE7dentist4util3log13ProgressMeter12LineLocationZv",
      "parameters" : [
       {
        "name" : "lineLocation",
        "deco" : "E7dentist4util3log13ProgressMeter12LineLocation"
       }
      ],
      "endline" : 617,
      "endchar" : 5
     },
     {
      "name" : "printHumanProgressLine",
      "kind" : "function",
      "protection" : "private",
      "line" : 620,
      "char" : 10,
      "deco" : "FE7dentist4util3log13ProgressMeter12LineLocationZv",
      "parameters" : [
       {
        "name" : "lineLocation",
        "deco" : "E7dentist4util3log13ProgressMeter12LineLocation"
       }
      ],
      "endline" : 666,
      "endchar" : 5
     },
     {
      "name" : "printJsonProgressLine",
      "kind" : "function",
      "protection" : "private",
      "line" : 669,
      "char" : 10,
      "deco" : "FE7dentist4util3log13ProgressMeter12LineLocationZv",
      "parameters" : [
       {
        "name" : "lineLocation",
        "deco" : "E7dentist4util3log13ProgressMeter12LineLocation"
       }
      ],
      "endline" : 690,
      "endchar" : 5
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 401,
      "char" : 1,
      "deco" : "FNeZv"
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 401,
      "char" : 1,
      "deco" : "FNcNjS7dentist4util3log13ProgressMeterZQBi",
      "originalType" : "ref ProgressMeter(ProgressMeter p) return",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S7dentist4util3log13ProgressMeter"
       }
      ]
     }
    ]
   }
  ]
 },
 {
  "name" : "dentist.util.math",
  "kind" : "module",
  "file" : "source/dentist/util/math.d",
  "comment" : "    Some additional mathematical functions.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.util.algorithm",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "cmpLexicographically",
     "sliceBy",
     "uniqInPlace"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 15,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "all",
     "among",
     "copy",
     "countUntil",
     "cumulativeFold",
     "filter",
     "map",
     "max",
     "min",
     "maxElement",
     "sort",
     "sum",
     "swap",
     "uniq"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 30,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "appender",
     "Appender",
     "array"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 31,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 32,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assertThrown"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 33,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.functional",
    "kind" : "import",
    "line" : 34,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "binaryFun",
     "unaryFun"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 35,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assumeSorted",
     "chain",
     "ElementType",
     "enumerate",
     "isForwardRange",
     "isInputRange",
     "isRandomAccessRange",
     "retro",
     "save",
     "slide",
     "StoppingPolicy",
     "walkLength",
     "zip"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 49,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isCallable",
     "isIntegral",
     "isNumeric"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 53,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Flag",
     "No",
     "Yes"
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Calculate the mean of `values`.\n",
    "line" : 62,
    "char" : 19,
    "name" : "mean",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isForwardRange!Range",
    "members" : [
     {
      "name" : "mean",
      "kind" : "function",
      "line" : 62,
      "char" : 19,
      "type" : "ElementType!Range(Range values)",
      "parameters" : [
       {
        "name" : "values",
        "type" : "Range"
       }
      ],
      "endline" : 68,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L71_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 71,
    "char" : 1,
    "endline" : 85,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Calculate the weighted mean of `values`.\n",
    "line" : 85,
    "char" : 8,
    "name" : "mean",
    "parameters" : [
     {
      "name" : "Values",
      "kind" : "type"
     },
     {
      "name" : "Weights",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!Values && isForwardRange!Weights",
    "members" : [
     {
      "name" : "mean",
      "kind" : "function",
      "line" : 85,
      "char" : 8,
      "type" : "double(Values values, Weights weights)",
      "parameters" : [
       {
        "name" : "values",
        "type" : "Values"
       },
       {
        "name" : "weights",
        "type" : "Weights"
       }
      ],
      "endline" : 96,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L99_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 99,
    "char" : 1,
    "endline" : 119,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Calculate the median of `values`.\n",
    "line" : 119,
    "char" : 19,
    "name" : "median",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "__traits(compiles, sort(values))",
    "members" : [
     {
      "name" : "median",
      "kind" : "function",
      "line" : 119,
      "char" : 19,
      "type" : "ElementType!Range(Range values)",
      "parameters" : [
       {
        "name" : "values",
        "type" : "Range"
       }
      ],
      "endline" : 130,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L133_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 133,
    "char" : 1,
    "endline" : 163,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Calculate the N`xx` (e.g. N50) of `values`.\n",
    "line" : 163,
    "char" : 19,
    "name" : "N",
    "parameters" : [
     {
      "name" : "xx",
      "kind" : "value",
      "deco" : "e"
     },
     {
      "name" : "Range",
      "kind" : "type"
     },
     {
      "name" : "Num",
      "kind" : "type"
     }
    ],
    "constraint" : "__traits(compiles, sort(values))",
    "members" : [
     {
      "name" : "N",
      "kind" : "function",
      "line" : 163,
      "char" : 19,
      "type" : "ElementType!Range(Range values, Num totalSize)",
      "parameters" : [
       {
        "name" : "values",
        "type" : "Range"
       },
       {
        "name" : "totalSize",
        "type" : "Num"
       }
      ],
      "endline" : 178,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L181_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 181,
    "char" : 1,
    "endline" : 203,
    "endchar" : 1
   },
   {
    "name" : "RoundingMode",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Specify a rounding mode.\n",
    "line" : 203,
    "char" : 1,
    "baseDeco" : "g",
    "members" : [
     {
      "name" : "floor",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(byte)0",
      "comment" : "Round towards `-inf`.\n",
      "line" : 206,
      "char" : 5
     },
     {
      "name" : "round",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "Round towards the nearest integer; `0.5` is rounded up.\n",
      "line" : 208,
      "char" : 5
     },
     {
      "name" : "ceil",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "comment" : "Round towards `+inf`.\n",
      "line" : 210,
      "char" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Round `x` towards `+inf` according to `base`, i.e. returns the next\n    integer larger or equal to `x` which is divisible by `base`.\n\n    Returns: `x` rounded towards `+inf` according to `base`.\n",
    "line" : 220,
    "char" : 9,
    "name" : "ceil",
    "parameters" : [
     {
      "name" : "Integer",
      "kind" : "type"
     }
    ],
    "constraint" : "isIntegral!Integer",
    "members" : [
     {
      "name" : "ceil",
      "kind" : "function",
      "line" : 220,
      "char" : 9,
      "type" : "pure nothrow Integer(in Integer x, in Integer base)",
      "parameters" : [
       {
        "name" : "x",
        "type" : "Integer",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "base",
        "type" : "Integer",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 226,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L229_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 229,
    "char" : 1,
    "endline" : 243,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Round `x` towards `-inf` according to `base`, i.e. returns the next\n    integer smaller or equal to `x` which is divisible by `base`.\n\n    Returns: `x` rounded towards `-inf` according to `base`.\n",
    "line" : 243,
    "char" : 9,
    "name" : "floor",
    "parameters" : [
     {
      "name" : "Integer",
      "kind" : "type"
     }
    ],
    "constraint" : "isIntegral!Integer",
    "members" : [
     {
      "name" : "floor",
      "kind" : "function",
      "line" : 243,
      "char" : 9,
      "type" : "pure nothrow Integer(in Integer x, in Integer base)",
      "parameters" : [
       {
        "name" : "x",
        "type" : "Integer",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "base",
        "type" : "Integer",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 247,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L250_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 250,
    "char" : 1,
    "endline" : 259,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns the absolute difference between two numbers.\n",
    "line" : 259,
    "char" : 5,
    "name" : "absdiff",
    "parameters" : [
     {
      "name" : "Num",
      "kind" : "type"
     }
    ],
    "constraint" : "isNumeric!Num",
    "members" : [
     {
      "name" : "absdiff",
      "kind" : "function",
      "line" : 259,
      "char" : 5,
      "type" : "pure nothrow Num(in Num a, in Num b)",
      "parameters" : [
       {
        "name" : "a",
        "type" : "Num",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "b",
        "type" : "Num",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 264,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L267_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 267,
    "char" : 1,
    "endline" : 276,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns the result of `ceil(a / b)` but uses integer arithmetic only.\n",
    "line" : 276,
    "char" : 9,
    "name" : "ceildiv",
    "parameters" : [
     {
      "name" : "Integer",
      "kind" : "type"
     }
    ],
    "constraint" : "isIntegral!Integer",
    "members" : [
     {
      "name" : "ceildiv",
      "kind" : "function",
      "line" : 276,
      "char" : 9,
      "type" : "pure nothrow Integer(in Integer a, in Integer b)",
      "parameters" : [
       {
        "name" : "a",
        "type" : "Integer",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "b",
        "type" : "Integer",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 283,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L286_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 286,
    "char" : 1,
    "endline" : 299,
    "endchar" : 1
   },
   {
    "name" : "EdgeExistsException",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Thrown if attempting to insert an edge into a `Graph` that already exists.\n",
    "line" : 299,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 301,
      "char" : 30,
      "deco" : "FNaNbNiNfAyamC6object9ThrowableZC7dentist4util4math19EdgeExistsException",
      "originalType" : "pure nothrow @nogc @safe (string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "m",
        "default" : "cast(ulong)__LINE__"
       },
       {
        "name" : "nextInChain",
        "deco" : "C6object9Throwable",
        "default" : "null"
       }
      ],
      "endline" : 308,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "MissingEdgeException",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Thrown if attempting to access an edge from a `Graph` that does not exist.\n",
    "line" : 313,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 315,
      "char" : 30,
      "deco" : "FNaNbNiNfAyamC6object9ThrowableZC7dentist4util4math20MissingEdgeException",
      "originalType" : "pure nothrow @nogc @safe (string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "m",
        "default" : "cast(ulong)__LINE__"
       },
       {
        "name" : "nextInChain",
        "deco" : "C6object9Throwable",
        "default" : "null"
       }
      ],
      "endline" : 322,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "MissingNodeException",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Thrown if attempting to access a node from a `Graph` that does not exist.\n",
    "line" : 327,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 329,
      "char" : 30,
      "deco" : "FNaNbNiNfAyamC6object9ThrowableZC7dentist4util4math20MissingNodeException",
      "originalType" : "pure nothrow @nogc @safe (string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "m",
        "default" : "cast(ulong)__LINE__"
       },
       {
        "name" : "nextInChain",
        "deco" : "C6object9Throwable",
        "default" : "null"
       }
      ],
      "endline" : 336,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "This structure represents a graph with optional edge payloads. The graph\nis represented as a list of edges which is particularly suited for sparse\ngraphs. While the set of nodes is fixed the set of edges is mutable.\n\nA graph may have directed or undirected edges. The edges may have weight\nand/or payloads associated with them. This difference between the two is\nthat weights are considered in comparisons whereas payloads are not.\n",
    "line" : 347,
    "char" : 1,
    "name" : "Graph",
    "parameters" : [
     {
      "name" : "Node",
      "kind" : "type"
     },
     {
      "name" : "Weight",
      "kind" : "type",
      "defaultDeco" : "v"
     },
     {
      "name" : "isDirected",
      "kind" : "value",
      "deco" : "E3std8typecons__T4FlagVAyaa10_69734469726563746564ZQBi",
      "defaultValue" : "No.isDirected"
     },
     {
      "name" : "EdgePayload",
      "kind" : "type",
      "defaultDeco" : "v"
     }
    ],
    "members" : [
     {
      "name" : "Graph",
      "kind" : "struct",
      "protection" : "public",
      "line" : 347,
      "char" : 1,
      "members" : [
       {
        "name" : "isWeighted",
        "kind" : "variable",
        "comment" : "True if edges have weights.\n",
        "line" : 355,
        "char" : 17,
        "storageClass" : [
         "enum"
        ],
        "init" : "!is(Weight == void)"
       },
       {
        "name" : "hasEdgePayload",
        "kind" : "variable",
        "comment" : "True if edges have payloads.\n",
        "line" : 358,
        "char" : 17,
        "storageClass" : [
         "enum"
        ],
        "init" : "!is(EdgePayload == void)"
       },
       {
        "name" : "Edge",
        "kind" : "struct",
        "protection" : "public",
        "comment" : "An edge in the graph.\n\nEdges may be directed or undirected, weighted or unweighted and have\nan additional payload or not.\n",
        "line" : 365,
        "char" : 12,
        "members" : [
         {
          "name" : "_start",
          "kind" : "variable",
          "line" : 367,
          "char" : 24,
          "type" : "Node"
         },
         {
          "name" : "_end",
          "kind" : "variable",
          "line" : 368,
          "char" : 24,
          "type" : "Node"
         },
         {
          "name" : "weight",
          "kind" : "variable",
          "comment" : "Weight associated with this edge. This is taken into account\nin comparisons between edges.\n",
          "line" : 373,
          "char" : 20,
          "type" : "Weight"
         },
         {
          "name" : "payload",
          "kind" : "variable",
          "comment" : "Payload associated with this edge. This is NOT taken into\naccount in comparisons between edges.\n",
          "line" : 378,
          "char" : 25,
          "type" : "EdgePayload"
         },
         {
          "name" : "this",
          "kind" : "constructor",
          "comment" : "Construct an edge.\n\n`start` and `end` will be stored such that `start <= end` for\nundirected edges.\n",
          "line" : 385,
          "char" : 9,
          "type" : "(Node start, Node end)",
          "parameters" : [
           {
            "name" : "start",
            "type" : "Node"
           },
           {
            "name" : "end",
            "type" : "Node"
           }
          ],
          "endline" : 397,
          "endchar" : 9
         },
         {
          "name" : "this",
          "kind" : "constructor",
          "comment" : "ditto\n",
          "line" : 402,
          "char" : 13,
          "type" : "(Node start, Node end, Weight weight)",
          "parameters" : [
           {
            "name" : "start",
            "type" : "Node"
           },
           {
            "name" : "end",
            "type" : "Node"
           },
           {
            "name" : "weight",
            "type" : "Weight"
           }
          ],
          "endline" : 406,
          "endchar" : 13
         },
         {
          "name" : "this",
          "kind" : "constructor",
          "comment" : "ditto\n",
          "line" : 412,
          "char" : 13,
          "type" : "(Node start, Node end, EdgePayload payload)",
          "parameters" : [
           {
            "name" : "start",
            "type" : "Node"
           },
           {
            "name" : "end",
            "type" : "Node"
           },
           {
            "name" : "payload",
            "type" : "EdgePayload"
           }
          ],
          "endline" : 416,
          "endchar" : 13
         },
         {
          "name" : "this",
          "kind" : "constructor",
          "comment" : "ditto\n",
          "line" : 422,
          "char" : 13,
          "type" : "(Node start, Node end, Weight weight, EdgePayload payload)",
          "parameters" : [
           {
            "name" : "start",
            "type" : "Node"
           },
           {
            "name" : "end",
            "type" : "Node"
           },
           {
            "name" : "weight",
            "type" : "Weight"
           },
           {
            "name" : "payload",
            "type" : "EdgePayload"
           }
          ],
          "endline" : 427,
          "endchar" : 13
         },
         {
          "name" : "start",
          "kind" : "function",
          "comment" : "Get the start of this edge. For undirected graphs this is the\nsmaller of both incident nodes.\n",
          "line" : 433,
          "char" : 24,
          "type" : "const pure nothrow @property Node()",
          "endline" : 436,
          "endchar" : 9
         },
         {
          "name" : "end",
          "kind" : "function",
          "comment" : "Get the end of this edge. For undirected graphs this is the\nlarger of both incident nodes.\n",
          "line" : 440,
          "char" : 24,
          "type" : "const pure nothrow @property Node()",
          "endline" : 443,
          "endchar" : 9
         },
         {
          "name" : "target",
          "kind" : "function",
          "comment" : "            Get target of this edge beginning at node `from`. For undirected\n            graphs returns the other node of this edge.\n\n            Throws: `MissingNodeException` if this edge does not start in\n                node `from`.\n",
          "line" : 452,
          "char" : 14,
          "type" : "const Node(Node from)",
          "parameters" : [
           {
            "name" : "from",
            "type" : "Node"
           }
          ],
          "endline" : 480,
          "endchar" : 9
         },
         {
          "name" : "source",
          "kind" : "function",
          "comment" : "            Get source of this edge beginning at node `from`. For undirected\n            graphs returns the other node of this edge.\n\n            Throws: `MissingNodeException` if this edge does not end in\n                node `from`.\n",
          "line" : 492,
          "char" : 18,
          "type" : "const Node(Node from)",
          "parameters" : [
           {
            "name" : "from",
            "type" : "Node"
           }
          ],
          "endline" : 502,
          "endchar" : 13
         },
         {
          "name" : "opEquals",
          "kind" : "function",
          "comment" : "Two edges are equal iff their incident nodes (and weight) are the\nsame.\n",
          "line" : 512,
          "char" : 14,
          "type" : "const pure nothrow bool(in Edge other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "Edge",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 523,
          "endchar" : 9
         },
         {
          "name" : "opCmp",
          "kind" : "function",
          "comment" : "Orders edge lexicographically by `start`, `end`(, `weight`).\n",
          "line" : 527,
          "char" : 13,
          "type" : "const pure nothrow int(in Edge other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "Edge",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 546,
          "endchar" : 9
         },
         {
          "name" : "compareNodes",
          "kind" : "function",
          "line" : 549,
          "char" : 21,
          "type" : "const pure nothrow int(in Edge other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "Edge",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 556,
          "endchar" : 9
         },
         {
          "name" : "getConnectingNode",
          "kind" : "function",
          "comment" : "            Returns the node that connects `this` edge with `other` edge. In\n            case of undirected graphs this is just the common node of both\n            edges; in directed case this is the end node of `this` edge if it\n            matches the start node of `other` edge.\n\n            Throws: `MissingNodeException` if the connecting node is undefined.\n",
          "line" : 567,
          "char" : 14,
          "type" : "const Node(in Edge other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "Edge",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 589,
          "endchar" : 9
         }
        ]
       },
       {
        "name" : "orderByNodes",
        "kind" : "function",
        "comment" : "Same as `a < b` but disregards the weight in weighted graphs.\n",
        "line" : 594,
        "char" : 17,
        "storageClass" : [
         "static"
        ],
        "type" : "pure nothrow bool(in Edge a, in Edge b)",
        "parameters" : [
         {
          "name" : "a",
          "type" : "Edge",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "b",
          "type" : "Edge",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 597,
        "endchar" : 5
       },
       {
        "name" : "groupByNodes",
        "kind" : "function",
        "comment" : "Same as `a == b` but disregards the weight in weighted graphs.\n",
        "line" : 601,
        "char" : 17,
        "storageClass" : [
         "static"
        ],
        "type" : "pure nothrow bool(in Edge a, in Edge b)",
        "parameters" : [
         {
          "name" : "a",
          "type" : "Edge",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "b",
          "type" : "Edge",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 604,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "Construct an edge for this graph.\n",
        "line" : 608,
        "char" : 17,
        "name" : "edge",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "tuple"
         }
        ],
        "members" : [
         {
          "name" : "edge",
          "kind" : "function",
          "line" : 608,
          "char" : 17,
          "type" : "Edge(T args)",
          "parameters" : [
           {
            "name" : "args",
            "type" : "T"
           }
          ],
          "endline" : 611,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "_nodes",
        "kind" : "variable",
        "line" : 614,
        "char" : 22,
        "type" : "Node[]"
       },
       {
        "name" : "_edges",
        "kind" : "variable",
        "line" : 615,
        "char" : 33,
        "type" : "Appender!(Edge[])"
       },
       {
        "name" : "nodes",
        "kind" : "function",
        "comment" : "The set (ordered list) of nodes.\n",
        "line" : 619,
        "char" : 29,
        "type" : "const pure nothrow @property const(Node[])()",
        "endline" : 622,
        "endchar" : 5
       },
       {
        "name" : "nodes",
        "kind" : "function",
        "line" : 624,
        "char" : 28,
        "type" : "@property void(Node[] nodes)",
        "parameters" : [
         {
          "name" : "nodes",
          "type" : "Node[]"
         }
        ],
        "endline" : 629,
        "endchar" : 5
       },
       {
        "name" : "edges",
        "kind" : "function",
        "comment" : "Get the set (ordered list) of edges in this graph.\n",
        "line" : 633,
        "char" : 20,
        "storageClass" : [
         "auto"
        ],
        "type" : "pure nothrow @property ()",
        "endline" : 637,
        "endchar" : 5
       },
       {
        "name" : "edges",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 640,
        "char" : 20,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure nothrow @property ()",
        "endline" : 644,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : "        Construct a graph from a set of nodes (and edges). Makes a copy\n        `nodes` and removes duplicates.\n\n        Throws: `MissingNodeException` if an edge has a node that is not\n            present in this graph .\n        Throws: `EdgeExistsException` if an edge already exists when trying\n            inserting it, i.e. an edge occurs twice or more in `edges`.\n",
        "line" : 656,
        "char" : 5,
        "type" : "(Node[] nodes)",
        "parameters" : [
         {
          "name" : "nodes",
          "type" : "Node[]"
         }
        ],
        "endline" : 659,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : "ditto\n",
        "line" : 662,
        "char" : 5,
        "type" : "(Node[] nodes, Edge[] edges)",
        "parameters" : [
         {
          "name" : "nodes",
          "type" : "Node[]"
         },
         {
          "name" : "edges",
          "type" : "Edge[]"
         }
        ],
        "endline" : 671,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "Add a set of edges to this graph without any checks.\n\nThis is intended to speed up construction of the graph if it is known\nthat `edges` does not contain duplicates. Results in  undefined\nbehavior if `edges` contains duplicate edges.\n",
        "line" : 684,
        "char" : 10,
        "name" : "bulkAddForce",
        "parameters" : [
         {
          "name" : "R",
          "kind" : "type"
         }
        ],
        "constraint" : "isInputRange!R && is(ElementType!R == Edge)",
        "members" : [
         {
          "name" : "bulkAddForce",
          "kind" : "function",
          "line" : 684,
          "char" : 10,
          "type" : "void(R edges)",
          "parameters" : [
           {
            "name" : "edges",
            "type" : "R"
           }
          ],
          "endline" : 688,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : "Add an `edge` to this graph.\n\nSee_Also: `add`\n",
        "line" : 694,
        "char" : 10,
        "name" : "opOpAssign",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "constraint" : "op == \"~\"",
        "members" : [
         {
          "name" : "opOpAssign",
          "kind" : "function",
          "line" : 694,
          "char" : 10,
          "type" : "void(Edge edge)",
          "parameters" : [
           {
            "name" : "edge",
            "type" : "Edge"
           }
          ],
          "endline" : 697,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "ConflictStrategy",
        "kind" : "struct",
        "protection" : "public",
        "comment" : "Some pre-defined conflict handlers for `add`.\n",
        "line" : 701,
        "char" : 12,
        "members" : [
         {
          "name" : "sumWeights",
          "kind" : "function",
          "comment" : "Return an edge with sum of both weights. If given payload will be\nkept from existingEdge .\n",
          "line" : 707,
          "char" : 25,
          "storageClass" : [
           "static"
          ],
          "type" : "Edge(Edge existingEdge, Edge newEdge)",
          "parameters" : [
           {
            "name" : "existingEdge",
            "type" : "Edge"
           },
           {
            "name" : "newEdge",
            "type" : "Edge"
           }
          ],
          "endline" : 712,
          "endchar" : 13
         },
         {
          "name" : "__unittest_L715_C13",
          "kind" : "function",
          "comment" : "\n",
          "line" : 715,
          "char" : 13,
          "endline" : 726,
          "endchar" : 9
         },
         {
          "name" : "error",
          "kind" : "function",
          "comment" : "Throw `EdgeExistsException`.\n",
          "line" : 729,
          "char" : 28,
          "storageClass" : [
           "static"
          ],
          "type" : "inout(Edge)(inout(Edge) existingEdge, inout(Edge) newEdge)",
          "parameters" : [
           {
            "name" : "existingEdge",
            "type" : "inout(Edge)"
           },
           {
            "name" : "newEdge",
            "type" : "inout(Edge)"
           }
          ],
          "endline" : 732,
          "endchar" : 9
         },
         {
          "name" : "__unittest_L735_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 735,
          "char" : 9,
          "endline" : 746,
          "endchar" : 9
         },
         {
          "name" : "replace",
          "kind" : "function",
          "comment" : "Replace the `existingEdge` by `newEdge`.\n",
          "line" : 746,
          "char" : 28,
          "storageClass" : [
           "static"
          ],
          "type" : "inout(Edge)(inout(Edge) existingEdge, inout(Edge) newEdge)",
          "parameters" : [
           {
            "name" : "existingEdge",
            "type" : "inout(Edge)"
           },
           {
            "name" : "newEdge",
            "type" : "inout(Edge)"
           }
          ],
          "endline" : 749,
          "endchar" : 9
         },
         {
          "name" : "__unittest_L752_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 752,
          "char" : 9,
          "endline" : 766,
          "endchar" : 9
         },
         {
          "name" : "keep",
          "kind" : "function",
          "comment" : "Keep `existingEdge` – discard `newEdge`.\n",
          "line" : 766,
          "char" : 28,
          "storageClass" : [
           "static"
          ],
          "type" : "inout(Edge)(inout(Edge) existingEdge, inout(Edge) newEdge)",
          "parameters" : [
           {
            "name" : "existingEdge",
            "type" : "inout(Edge)"
           },
           {
            "name" : "newEdge",
            "type" : "inout(Edge)"
           }
          ],
          "endline" : 769,
          "endchar" : 9
         },
         {
          "name" : "__unittest_L772_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 772,
          "char" : 9,
          "endline" : 783,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "forceAdd",
        "kind" : "function",
        "comment" : "Forcibly add `edge` to this graph.\n\nThis is intended to speed up construction of a graph. Results in\nundefined behavior if `edge` is already contained in this graph.\n",
        "line" : 790,
        "char" : 20,
        "type" : "Edge(Edge edge)",
        "parameters" : [
         {
          "name" : "edge",
          "type" : "Edge"
         }
        ],
        "endline" : 796,
        "endchar" : 5
       },
       {
        "name" : "replaceEdge",
        "kind" : "function",
        "comment" : "Replace an edge in this graph.\n",
        "line" : 800,
        "char" : 20,
        "type" : "Edge(in size_t edgeIdx, Edge newEdge)",
        "parameters" : [
         {
          "name" : "edgeIdx",
          "type" : "size_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "newEdge",
          "type" : "Edge"
         }
        ],
        "endline" : 812,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "Check if edge/node exists in this graph. Ignores the edge weight\nif weighted.\n",
        "line" : 817,
        "char" : 10,
        "name" : "opBinaryRight",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "constraint" : "op == \"in\"",
        "members" : [
         {
          "name" : "opBinaryRight",
          "kind" : "function",
          "line" : 817,
          "char" : 10,
          "type" : "const pure nothrow bool(in Node node)",
          "parameters" : [
           {
            "name" : "node",
            "type" : "Node",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 822,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "has",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 825,
        "char" : 10,
        "type" : "const pure nothrow bool(in Node node)",
        "parameters" : [
         {
          "name" : "node",
          "type" : "Node",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 828,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "ditto\n",
        "line" : 831,
        "char" : 10,
        "name" : "opBinaryRight",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "constraint" : "op == \"in\"",
        "members" : [
         {
          "name" : "opBinaryRight",
          "kind" : "function",
          "line" : 831,
          "char" : 10,
          "type" : "const pure nothrow bool(in Edge edge)",
          "parameters" : [
           {
            "name" : "edge",
            "type" : "Edge",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 836,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "has",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 839,
        "char" : 10,
        "type" : "const pure nothrow bool(in Edge edge)",
        "parameters" : [
         {
          "name" : "edge",
          "type" : "Edge",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 842,
        "endchar" : 5
       },
       {
        "name" : "get",
        "kind" : "function",
        "comment" : "Get the designated `edge` from this graph. Only the `start` and `end`\nnode will be compared.\n",
        "line" : 847,
        "char" : 14,
        "storageClass" : [
         "auto"
        ],
        "type" : "ref (in Edge edge)",
        "parameters" : [
         {
          "name" : "edge",
          "type" : "Edge",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 860,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L863_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 863,
        "char" : 5,
        "endline" : 880,
        "endchar" : 5
       },
       {
        "name" : "indexOf",
        "kind" : "function",
        "comment" : "Returns the index of node `n` in the list of nodes.\n\nUses `std.range.SortedRange.trisect`to locate `n` in the list of\nnodes.\n",
        "line" : 880,
        "char" : 12,
        "type" : "const size_t(in Node n)",
        "parameters" : [
         {
          "name" : "n",
          "type" : "Node",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 891,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L894_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 894,
        "char" : 5,
        "endline" : 908,
        "endchar" : 5
       },
       {
        "name" : "indexOf",
        "kind" : "function",
        "comment" : "Returns the index of edge `n` in the list of edges.\n\nUses `std.range.SortedRange.trisect`to locate `n` in the list of\nnodes.\n",
        "line" : 908,
        "char" : 12,
        "type" : "const size_t(in Edge edge)",
        "parameters" : [
         {
          "name" : "edge",
          "type" : "Edge",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 919,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L922_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 922,
        "char" : 5,
        "endline" : 935,
        "endchar" : 5
       },
       {
        "name" : "inEdges",
        "kind" : "function",
        "comment" : "Returns a range of in/outgoing edges of node `n`.\n",
        "line" : 938,
        "char" : 14,
        "storageClass" : [
         "auto"
        ],
        "type" : "pure nothrow (Node n)",
        "parameters" : [
         {
          "name" : "n",
          "type" : "Node"
         }
        ],
        "endline" : 941,
        "endchar" : 9
       },
       {
        "name" : "inEdges",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 944,
        "char" : 14,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure nothrow (Node n)",
        "parameters" : [
         {
          "name" : "n",
          "type" : "Node"
         }
        ],
        "endline" : 947,
        "endchar" : 9
       },
       {
        "name" : "outEdges",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 950,
        "char" : 14,
        "storageClass" : [
         "auto"
        ],
        "type" : "pure nothrow (Node n)",
        "parameters" : [
         {
          "name" : "n",
          "type" : "Node"
         }
        ],
        "endline" : 953,
        "endchar" : 9
       },
       {
        "name" : "outEdges",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 956,
        "char" : 14,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure nothrow (Node n)",
        "parameters" : [
         {
          "name" : "n",
          "type" : "Node"
         }
        ],
        "endline" : 959,
        "endchar" : 9
       },
       {
        "name" : "__unittest_L962_C9",
        "kind" : "function",
        "comment" : "\n",
        "line" : 962,
        "char" : 9,
        "endline" : 995,
        "endchar" : 9
       },
       {
        "name" : "inDegree",
        "kind" : "function",
        "comment" : "Get the in/out degree of node `n`.\n",
        "line" : 995,
        "char" : 16,
        "type" : "const pure nothrow size_t(Node n)",
        "parameters" : [
         {
          "name" : "n",
          "type" : "Node"
         }
        ],
        "endline" : 998,
        "endchar" : 9
       },
       {
        "name" : "outDegree",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 1001,
        "char" : 16,
        "type" : "const pure nothrow size_t(Node n)",
        "parameters" : [
         {
          "name" : "n",
          "type" : "Node"
         }
        ],
        "endline" : 1004,
        "endchar" : 9
       },
       {
        "name" : "__unittest_L1007_C9",
        "kind" : "function",
        "comment" : "\n",
        "line" : 1007,
        "char" : 9,
        "endline" : 1023,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L1339_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 1339,
    "char" : 1,
    "endline" : 1440,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L1440_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 1440,
    "char" : 1,
    "endline" : 1467,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Add a set of edges to this graph and merge mutli-edges using `merge`.\n",
    "line" : 1467,
    "char" : 6,
    "name" : "bulkAdd",
    "parameters" : [
     {
      "name" : "merge",
      "kind" : "alias"
     },
     {
      "name" : "G",
      "kind" : "type"
     },
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "is(G : Graph!Params, Params...) && isInputRange!R && is(ElementType!R == G.Edge)",
    "members" : [
     {
      "name" : "bulkAdd",
      "kind" : "function",
      "line" : 1467,
      "char" : 6,
      "type" : "void(ref G graph, R edges)",
      "parameters" : [
       {
        "name" : "graph",
        "type" : "G",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "edges",
        "type" : "R"
       }
      ],
      "endline" : 1483,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L1486_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 1486,
    "char" : 1,
    "endline" : 1521,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Add `edge` to `graph` and handle existing edges with `handleConflict`.\n\nThe handler must have this signature `Edge handleConflict(Edge, Edge)`.\n\nSee_also: `Graph.ConflictStrategy`\n",
    "line" : 1521,
    "char" : 8,
    "name" : "add",
    "parameters" : [
     {
      "name" : "handleConflict",
      "kind" : "alias",
      "defaultAlias" : "1337"
     },
     {
      "name" : "G",
      "kind" : "type"
     }
    ],
    "constraint" : "is(G : Graph!Params, Params...)",
    "members" : [
     {
      "name" : "add",
      "kind" : "function",
      "line" : 1521,
      "char" : 8,
      "type" : "G.Edge(ref G graph, G.Edge edge)",
      "parameters" : [
       {
        "name" : "graph",
        "type" : "G",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "edge",
        "type" : "G.Edge"
       }
      ],
      "endline" : 1549,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L1552_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 1552,
    "char" : 1,
    "endline" : 1581,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Filter edges of `graph` by `pred` in-place.\n",
    "line" : 1581,
    "char" : 6,
    "name" : "filterEdges",
    "parameters" : [
     {
      "name" : "pred",
      "kind" : "alias"
     },
     {
      "name" : "G",
      "kind" : "type"
     }
    ],
    "constraint" : "is(G : Graph!Params, Params...)",
    "members" : [
     {
      "name" : "filterEdges",
      "kind" : "function",
      "line" : 1581,
      "char" : 6,
      "type" : "void(ref G graph)",
      "parameters" : [
       {
        "name" : "graph",
        "type" : "G",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 1589,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Modify edges of `graph` with `fun` in-place.\n\nThe resulting list of edges will be sorted but not checked for duplicates.\nIntroducing duplicate edges results in undefined behavior.\n",
    "line" : 1596,
    "char" : 6,
    "name" : "mapEdges",
    "parameters" : [
     {
      "name" : "fun",
      "kind" : "alias"
     },
     {
      "name" : "G",
      "kind" : "type"
     }
    ],
    "constraint" : "is(G : Graph!Params, Params...)",
    "members" : [
     {
      "name" : "mapEdges",
      "kind" : "function",
      "line" : 1596,
      "char" : 6,
      "type" : "void(ref G graph)",
      "parameters" : [
       {
        "name" : "graph",
        "type" : "G",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 1602,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "EmptySetException",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Thrown if set operations the require elements are called.\n\nSee_also: `NaturalNumberSet.minElement`, `NaturalNumberSet.maxElement`\n",
    "line" : 1608,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 1610,
      "char" : 5,
      "deco" : "FAyaZC7dentist4util4math17EmptySetException",
      "originalType" : "(string msg)",
      "parameters" : [
       {
        "name" : "msg",
        "deco" : "Aya"
       }
      ],
      "endline" : 1613,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "NaturalNumberSet",
    "kind" : "struct",
    "protection" : "public",
    "comment" : "A set of natural numbers represented as a variable-length bit vector.\n\nAdditional space is allocated as required.\n",
    "line" : 1620,
    "char" : 1,
    "members" : [
     {
      "name" : "partSize",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1622,
      "char" : 25,
      "storageClass" : [
       "static",
       "enum"
      ],
      "deco" : "m",
      "init" : "64LU"
     },
     {
      "name" : "firstBit",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1623,
      "char" : 32,
      "storageClass" : [
       "static",
       "enum"
      ],
      "deco" : "m",
      "originalType" : "size_t",
      "init" : "1LU"
     },
     {
      "name" : "lastBit",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1624,
      "char" : 32,
      "storageClass" : [
       "static",
       "enum"
      ],
      "deco" : "m",
      "originalType" : "size_t",
      "init" : "9223372036854775808LU"
     },
     {
      "name" : "emptyPart",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1625,
      "char" : 32,
      "storageClass" : [
       "static",
       "enum"
      ],
      "deco" : "m",
      "originalType" : "size_t",
      "init" : "0LU"
     },
     {
      "name" : "fullPart",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1626,
      "char" : 32,
      "storageClass" : [
       "static",
       "enum"
      ],
      "deco" : "m",
      "originalType" : "size_t",
      "init" : "18446744073709551615LU"
     },
     {
      "name" : "parts",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1628,
      "char" : 22,
      "deco" : "Am",
      "originalType" : "size_t[]",
      "offset" : 0
     },
     {
      "name" : "nMax",
      "kind" : "variable",
      "protection" : "private",
      "line" : 1629,
      "char" : 20,
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 16
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "comment" : "Create a new set that can hold `initialNumElements` without resizing.\n\nIf `addAll` is given the first `initialNumElements` will be\nefficiently inserted into the set.\n",
      "line" : 1636,
      "char" : 5,
      "deco" : "FNcmE3std8typecons__T4FlagVAyaa6_616464416c6cZQzZS7dentist4util4math16NaturalNumberSet",
      "originalType" : "ref (size_t initialNumElements, Flag!\"addAll\" addAll = No.addAll)",
      "parameters" : [
       {
        "name" : "initialNumElements",
        "deco" : "m"
       },
       {
        "name" : "addAll",
        "deco" : "E3std8typecons__T4FlagVAyaa6_616464416c6cZQz",
        "default" : "Flag.no"
       }
      ],
      "endline" : 1647,
      "endchar" : 5
     },
     {
      "name" : "create",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Efficiently create a new set from `initialElements`.\n",
      "line" : 1651,
      "char" : 29,
      "storageClass" : [
       "static"
      ],
      "deco" : "FAmXS7dentist4util4math16NaturalNumberSet",
      "originalType" : "NaturalNumberSet(size_t[] initialElements...)",
      "parameters" : [
       {
        "name" : "initialElements",
        "deco" : "Am"
       }
      ],
      "endline" : 1662,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "private",
      "line" : 1671,
      "char" : 13,
      "deco" : "FNcAmZS7dentist4util4math16NaturalNumberSet",
      "originalType" : "ref (size_t[] parts)",
      "parameters" : [
       {
        "name" : "parts",
        "deco" : "Am"
       }
      ],
      "endline" : 1674,
      "endchar" : 5
     },
     {
      "name" : "inBounds",
      "kind" : "function",
      "protection" : "private",
      "line" : 1677,
      "char" : 18,
      "deco" : "xFNaNbImZb",
      "originalType" : "const pure nothrow bool(in size_t n)",
      "parameters" : [
       {
        "name" : "n",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1680,
      "endchar" : 5
     },
     {
      "name" : "reserveFor",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Make sure the set can hold `n` without resizing.\n",
      "line" : 1684,
      "char" : 10,
      "deco" : "FImZv",
      "originalType" : "void(in size_t n)",
      "parameters" : [
       {
        "name" : "n",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1697,
      "endchar" : 5
     },
     {
      "name" : "capacity",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return the largest integer that can be inserted without resizing.\n",
      "line" : 1701,
      "char" : 22,
      "deco" : "xFNaNbNdZm",
      "originalType" : "const pure nothrow @property size_t()",
      "endline" : 1704,
      "endchar" : 5
     },
     {
      "name" : "partIdx",
      "kind" : "function",
      "protection" : "private",
      "line" : 1707,
      "char" : 20,
      "deco" : "xFNaNbImZm",
      "originalType" : "const pure nothrow size_t(in size_t n)",
      "parameters" : [
       {
        "name" : "n",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1710,
      "endchar" : 5
     },
     {
      "name" : "idxInPart",
      "kind" : "function",
      "protection" : "private",
      "line" : 1713,
      "char" : 20,
      "deco" : "xFNaNbImZm",
      "originalType" : "const pure nothrow size_t(in size_t n)",
      "parameters" : [
       {
        "name" : "n",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1716,
      "endchar" : 5
     },
     {
      "name" : "itemMask",
      "kind" : "function",
      "protection" : "private",
      "line" : 1719,
      "char" : 20,
      "deco" : "xFNaNbImZm",
      "originalType" : "const pure nothrow size_t(in size_t n)",
      "parameters" : [
       {
        "name" : "n",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1722,
      "endchar" : 5
     },
     {
      "name" : "inverse",
      "kind" : "function",
      "protection" : "private",
      "line" : 1726,
      "char" : 27,
      "storageClass" : [
       "static"
      ],
      "deco" : "FNaNbImZm",
      "originalType" : "pure nothrow size_t(in size_t n)",
      "parameters" : [
       {
        "name" : "n",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1729,
      "endchar" : 5
     },
     {
      "name" : "add",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Add `n` to this set regardless whether it was present or not.\n\nAdditional memory will be allocated if the set is not large enough to\nhold `n`;\n",
      "line" : 1736,
      "char" : 10,
      "deco" : "FImZv",
      "originalType" : "void(in size_t n)",
      "parameters" : [
       {
        "name" : "n",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1741,
      "endchar" : 5
     },
     {
      "name" : "remove",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Remove `n` from this set regardless whether it was present or not.\n",
      "line" : 1745,
      "char" : 10,
      "deco" : "FImZv",
      "originalType" : "void(in size_t n)",
      "parameters" : [
       {
        "name" : "n",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1753,
      "endchar" : 5
     },
     {
      "name" : "has",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return whether `n` is in this set.\n",
      "line" : 1757,
      "char" : 10,
      "deco" : "xFNaNbImZb",
      "originalType" : "const pure nothrow bool(in size_t n)",
      "parameters" : [
       {
        "name" : "n",
        "deco" : "xm",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1765,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 1768,
      "char" : 10,
      "name" : "opBinaryRight",
      "parameters" : [
       {
        "name" : "op",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "constraint" : "op == \"in\"",
      "members" : [
       {
        "name" : "opBinaryRight",
        "kind" : "function",
        "line" : 1768,
        "char" : 10,
        "type" : "const pure nothrow bool(in size_t n)",
        "parameters" : [
         {
          "name" : "n",
          "type" : "size_t",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 1771,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "empty",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Returns true if this set is empty.\n",
      "line" : 1775,
      "char" : 10,
      "deco" : "xFNaNbZb",
      "endline" : 1778,
      "endchar" : 5
     },
     {
      "name" : "clear",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Remove all elements from this set.\n",
      "line" : 1782,
      "char" : 10,
      "deco" : "FNaNbZv",
      "endline" : 1786,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Compare sets for equality.\n\nTwo sets are equal if they contain the same elements. The length of\nthe underlying bit vector is ignored.\n",
      "line" : 1793,
      "char" : 10,
      "name" : "opBinary",
      "parameters" : [
       {
        "name" : "op",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "constraint" : "op == \"==\"",
      "members" : [
       {
        "name" : "opBinary",
        "kind" : "function",
        "line" : 1793,
        "char" : 10,
        "type" : "const pure nothrow bool(in NaturalNumberSet other)",
        "parameters" : [
         {
          "name" : "other",
          "type" : "NaturalNumberSet",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 1818,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Compare sets for containment.\n\nThis set is contained in `other` if `other` contains every element\nfrom this set. The length of the underlying bit vector is ignored.\n",
      "line" : 1825,
      "char" : 10,
      "name" : "opBinary",
      "parameters" : [
       {
        "name" : "op",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "constraint" : "op == \"in\"",
      "members" : [
       {
        "name" : "opBinary",
        "kind" : "function",
        "line" : 1825,
        "char" : 10,
        "type" : "const pure nothrow bool(in NaturalNumberSet other)",
        "parameters" : [
         {
          "name" : "other",
          "type" : "NaturalNumberSet",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 1846,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "Perform set operation.\n\nOperations: $(UL\n$(LI `|` – set union)\n$(LI `&` – set intersection)\n$(LI `-` – set difference)\n$(LI `^` – symmetric set difference)\n)\n",
      "line" : 1857,
      "char" : 22,
      "name" : "opBinary",
      "parameters" : [
       {
        "name" : "op",
        "kind" : "value",
        "deco" : "Aya"
       }
      ],
      "constraint" : "op.among(\"|\", \"^\", \"&\", \"-\")",
      "members" : [
       {
        "name" : "opBinary",
        "kind" : "function",
        "line" : 1857,
        "char" : 22,
        "type" : "const pure nothrow NaturalNumberSet(in NaturalNumberSet other)",
        "parameters" : [
         {
          "name" : "other",
          "type" : "NaturalNumberSet",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 1890,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "intersects",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return true if `this` and `other` share at least one element.\n",
      "line" : 1894,
      "char" : 10,
      "deco" : "xFNaNbIS7dentist4util4math16NaturalNumberSetZb",
      "parameters" : [
       {
        "name" : "other",
        "deco" : "xS7dentist4util4math16NaturalNumberSet",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1905,
      "endchar" : 5
     },
     {
      "name" : "size",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return the number of elements in this set.\n",
      "line" : 1909,
      "char" : 22,
      "deco" : "xFNaNbNdZm",
      "originalType" : "const pure nothrow @property size_t()",
      "endline" : 1927,
      "endchar" : 5
     },
     {
      "name" : "minElement",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return the smallest element in this set.\n\nThrows: `EmptySetException` if set is empty.\n",
      "line" : 1933,
      "char" : 12,
      "deco" : "xFZm",
      "originalType" : "const size_t()",
      "endline" : 1951,
      "endchar" : 5
     },
     {
      "name" : "maxElement",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Return the largest element in this set.\n\nThrows: `EmptySetException` if set is empty.\n",
      "line" : 1957,
      "char" : 12,
      "deco" : "xFZm",
      "originalType" : "const size_t()",
      "endline" : 1975,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L1977_C5",
      "kind" : "function",
      "protection" : "public",
      "line" : 1977,
      "char" : 5,
      "endline" : 1992,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "protection" : "private",
      "line" : 1992,
      "char" : 20,
      "name" : "ElementsRange",
      "parameters" : [
       {
        "name" : "Set",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "ElementsRange",
        "kind" : "struct",
        "protection" : "public",
        "line" : 1992,
        "char" : 20,
        "members" : [
         {
          "name" : "set",
          "kind" : "variable",
          "line" : 1994,
          "char" : 14,
          "type" : "Set*"
         },
         {
          "name" : "i",
          "kind" : "variable",
          "line" : 1995,
          "char" : 16,
          "type" : "size_t",
          "init" : "0"
         },
         {
          "name" : "j",
          "kind" : "variable",
          "line" : 1996,
          "char" : 16,
          "type" : "size_t",
          "init" : "0"
         },
         {
          "name" : "fromElement",
          "kind" : "variable",
          "line" : 1997,
          "char" : 16,
          "type" : "size_t"
         },
         {
          "name" : "toElement",
          "kind" : "variable",
          "line" : 1998,
          "char" : 16,
          "type" : "size_t"
         },
         {
          "name" : "this",
          "kind" : "constructor",
          "line" : 2000,
          "char" : 9,
          "type" : "pure nothrow (Set* set, size_t fromElement, size_t toElement)",
          "parameters" : [
           {
            "name" : "set",
            "type" : "Set*"
           },
           {
            "name" : "fromElement",
            "type" : "size_t"
           },
           {
            "name" : "toElement",
            "type" : "size_t"
           }
          ],
          "endline" : 2016,
          "endchar" : 9
         },
         {
          "name" : "save",
          "kind" : "function",
          "line" : 2018,
          "char" : 33,
          "type" : "const pure nothrow @property ElementsRange()",
          "endline" : 2021,
          "endchar" : 9
         },
         {
          "name" : "popFront",
          "kind" : "function",
          "line" : 2023,
          "char" : 14,
          "type" : "pure nothrow void()",
          "endline" : 2047,
          "endchar" : 9
         },
         {
          "name" : "front",
          "kind" : "function",
          "line" : 2049,
          "char" : 26,
          "type" : "const pure nothrow @property size_t()",
          "endline" : 2054,
          "endchar" : 9
         },
         {
          "name" : "empty",
          "kind" : "function",
          "line" : 2056,
          "char" : 24,
          "type" : "const pure nothrow @property bool()",
          "endline" : 2059,
          "endchar" : 9
         },
         {
          "name" : "currentElement",
          "kind" : "function",
          "line" : 2061,
          "char" : 34,
          "type" : "const pure nothrow @property size_t()",
          "endline" : 2064,
          "endchar" : 9
         },
         {
          "name" : "forceEmpty",
          "kind" : "function",
          "line" : 2066,
          "char" : 22,
          "type" : "pure nothrow void()",
          "endline" : 2069,
          "endchar" : 9
         },
         {
          "name" : "part",
          "kind" : "function",
          "line" : 2071,
          "char" : 32,
          "storageClass" : [
           "auto"
          ],
          "type" : "const pure nothrow @property ()",
          "endline" : 2074,
          "endchar" : 9
         },
         {
          "name" : "shiftedPartEmpty",
          "kind" : "function",
          "line" : 2076,
          "char" : 32,
          "type" : "const pure nothrow @property bool()",
          "endline" : 2079,
          "endchar" : 9
         },
         {
          "name" : "nextPart",
          "kind" : "function",
          "line" : 2081,
          "char" : 22,
          "type" : "pure nothrow void()",
          "endline" : 2086,
          "endchar" : 9
         },
         {
          "name" : "moveTo",
          "kind" : "function",
          "line" : 2088,
          "char" : 22,
          "type" : "pure nothrow void(size_t element)",
          "parameters" : [
           {
            "name" : "element",
            "type" : "size_t"
           }
          ],
          "endline" : 2093,
          "endchar" : 9
         }
        ]
       }
      ]
     },
     {
      "name" : "elements",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Returns a range of the elements in this set.\n\nThe elements are ordered ascending. The elements are guaranteed to\nfulfill `fromElement <= front` and `front < toElement`.\n",
      "line" : 2101,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "xFNaNbNdmmZS7dentist4util4math16NaturalNumberSet__T13ElementsRangeTxSQCfQCaQByQBwZQBf",
      "originalType" : "const pure nothrow @property (size_t fromElement = 0, size_t toElement = size_t.max)",
      "parameters" : [
       {
        "name" : "fromElement",
        "deco" : "m",
        "default" : "0LU"
       },
       {
        "name" : "toElement",
        "deco" : "m",
        "default" : "18446744073709551615LU"
       }
      ],
      "endline" : 2105,
      "endchar" : 5
     },
     {
      "name" : "elements",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 2108,
      "char" : 20,
      "storageClass" : [
       "auto"
      ],
      "deco" : "FNaNbNdmmZS7dentist4util4math16NaturalNumberSet__T13ElementsRangeTSQCeQBzQBxQBvZQBe",
      "originalType" : "pure nothrow @property (size_t fromElement = 0, size_t toElement = size_t.max)",
      "parameters" : [
       {
        "name" : "fromElement",
        "deco" : "m",
        "default" : "0LU"
       },
       {
        "name" : "toElement",
        "deco" : "m",
        "default" : "18446744073709551615LU"
       }
      ],
      "endline" : 2112,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2115_C5",
      "kind" : "function",
      "protection" : "public",
      "comment" : "\n",
      "line" : 2115,
      "char" : 5,
      "endline" : 2132,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2132_C5",
      "kind" : "function",
      "protection" : "public",
      "comment" : "The set may be modified while iterating:\n",
      "line" : 2132,
      "char" : 5,
      "endline" : 2151,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2151_C5",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Limits `fromElement .. toElement` may be given\n",
      "line" : 2151,
      "char" : 5,
      "endline" : 2174,
      "endchar" : 5
     },
     {
      "name" : "toString",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Generate a string representation of this set.\n",
      "line" : 2174,
      "char" : 12,
      "deco" : "xFNaZAya",
      "endline" : 2177,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2180_C5",
      "kind" : "function",
      "protection" : "public",
      "comment" : "\n",
      "line" : 2180,
      "char" : 5,
      "endline" : 2186,
      "endchar" : 1
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 1620,
      "char" : 1,
      "deco" : "FNaNbNcNiNjNeS7dentist4util4math16NaturalNumberSetZQBm",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S7dentist4util4math16NaturalNumberSet"
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L2188_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 2188,
    "char" : 1,
    "endline" : 2243,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Find all maximally connected components of a graph. The predicate\n    `isConnected` will be evaluated `O(n^^2)` times in the worst-case\n    and `Ω(n)` in the best case. In expectation it will be evaluated\n    `θ(n*log(n))`.\n\n    Returns: lazy range of maximally connected components represented as\n        `NaturalNumberSet`s\n    Params:\n        isConnected =   binary predicate that evaluates to true iff two nodes,\n                        represented as indices, are connected\n        numNodes    =   total number of nodes in the graph\n\n",
    "line" : 2243,
    "char" : 6,
    "name" : "findMaximallyConnectedComponents",
    "parameters" : [
     {
      "name" : "isConnected",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "findMaximallyConnectedComponents",
      "kind" : "function",
      "line" : 2243,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(in size_t numNodes)",
      "parameters" : [
       {
        "name" : "numNodes",
        "type" : "size_t",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 2246,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L2249_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 2249,
    "char" : 1,
    "endline" : 2285,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L2285_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 2285,
    "char" : 1,
    "endline" : 2308,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 2308,
    "char" : 9,
    "name" : "MaximalConnectedComponents",
    "parameters" : [
     {
      "name" : "isConnected",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "MaximalConnectedComponents",
      "kind" : "struct",
      "protection" : "public",
      "line" : 2308,
      "char" : 9,
      "members" : [
       {
        "name" : "numNodes",
        "kind" : "variable",
        "line" : 2311,
        "char" : 19,
        "type" : "const(size_t)"
       },
       {
        "name" : "unvisited",
        "kind" : "variable",
        "line" : 2312,
        "char" : 22,
        "type" : "NaturalNumberSet"
       },
       {
        "name" : "currentComponent",
        "kind" : "variable",
        "line" : 2313,
        "char" : 22,
        "type" : "NaturalNumberSet"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 2315,
        "char" : 5,
        "type" : "(in size_t numNodes)",
        "parameters" : [
         {
          "name" : "numNodes",
          "type" : "size_t",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 2323,
        "endchar" : 5
       },
       {
        "name" : "popFront",
        "kind" : "function",
        "line" : 2325,
        "char" : 10,
        "type" : "void()",
        "endline" : 2337,
        "endchar" : 5
       },
       {
        "name" : "maximizeConnectedComponent",
        "kind" : "function",
        "line" : 2339,
        "char" : 18,
        "type" : "void(size_t node)",
        "parameters" : [
         {
          "name" : "node",
          "type" : "size_t"
         }
        ],
        "endline" : 2347,
        "endchar" : 5
       },
       {
        "name" : "front",
        "kind" : "function",
        "line" : 2349,
        "char" : 32,
        "type" : "@property NaturalNumberSet()",
        "endline" : 2354,
        "endchar" : 5
       },
       {
        "name" : "empty",
        "kind" : "function",
        "line" : 2356,
        "char" : 20,
        "type" : "const pure nothrow @property bool()",
        "endline" : 2359,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Find a cycle base of an undirected graph using the Paton's\n    algorithm.\n\n    The algorithm is described in\n\n    $(I K. Paton, An algorithm for finding a fundamental set of cycles\n    for an undirected linear graph, Comm. ACM 12 (1969), pp. 514-518.)\n\n    and the implementation is adapted from the Java implementation of\n    K. Paton [1] originally licensed under Apache License 2.0 [2].\n\n    [1]: $(LINK https://code.google.com/archive/p/niographs/)$(BR)\n    [2]: $(LINK http://www.apache.org/licenses/LICENSE-2.0)\n\n    Returns: range of cycles in the graph represented as arrays of node indices\n",
    "line" : 2380,
    "char" : 6,
    "name" : "findCyclicSubgraphs",
    "parameters" : [
     {
      "name" : "G",
      "kind" : "type"
     }
    ],
    "constraint" : "is(G : Graph!Params, Params...)",
    "members" : [
     {
      "name" : "findCyclicSubgraphs",
      "kind" : "function",
      "line" : 2380,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(G graph, G.IncidentEdgesCache incidentEdgesCache = G.IncidentEdgesCache.init)",
      "parameters" : [
       {
        "name" : "graph",
        "type" : "G"
       },
       {
        "name" : "incidentEdgesCache",
        "type" : "G.IncidentEdgesCache",
        "default" : "G.IncidentEdgesCache.init"
       }
      ],
      "endline" : 2488,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L2491_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 2491,
    "char" : 1,
    "endline" : 2535,
    "endchar" : 1
   },
   {
    "name" : "findAllCliques",
    "kind" : "function",
    "protection" : "public",
    "comment" : "    Find all maximal cliques in a graph represented by `adjacencyList`.\n    The implementation is based on version 1 of the Bron-Kerbosch algorithm [1].\n\n    [1]: $(I Bron, C.; Kerbosch, J. (1973), \"Algorithm 457: finding all cliques\n         of an undirected graph\", Communications of the ACM, 16 (9): 575–577,\n         doi:10.1145/362342.362367.)\n\n    Returns: list of sets of nodes each representing a maximal clique\n",
    "line" : 2535,
    "char" : 6,
    "storageClass" : [
     "auto"
    ],
    "deco" : "FNaNbNiNfIAAmZS7dentist4util4math20BronKerboschVersion1",
    "originalType" : "(in size_t[][] adjacencyList)",
    "parameters" : [
     {
      "name" : "adjacencyList",
      "deco" : "xAAm",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 2538,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L2541_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 2541,
    "char" : 1,
    "endline" : 2572,
    "endchar" : 1
   },
   {
    "name" : "BronKerboschVersion1",
    "kind" : "struct",
    "protection" : "private",
    "line" : 2572,
    "char" : 9,
    "members" : [
     {
      "name" : "adjacencyList",
      "kind" : "variable",
      "protection" : "public",
      "line" : 2574,
      "char" : 22,
      "storageClass" : [
       "const"
      ],
      "deco" : "xAAm",
      "originalType" : "size_t[][]",
      "offset" : 0
     },
     {
      "name" : "opApply",
      "kind" : "function",
      "protection" : "public",
      "line" : 2576,
      "char" : 9,
      "deco" : "FMDFAmZiZi",
      "originalType" : "int(scope int delegate(size_t[]) yield)",
      "parameters" : [
       {
        "name" : "yield",
        "deco" : "DFAmZi",
        "storageClass" : [
         "scope"
        ]
       }
      ],
      "endline" : 2585,
      "endchar" : 5
     },
     {
      "name" : "extendClique",
      "kind" : "function",
      "protection" : "private",
      "line" : 2587,
      "char" : 17,
      "deco" : "FAmS7dentist4util4math16NaturalNumberSetQBlMDFQBtZiZi",
      "originalType" : "int(size_t[] clique, NaturalNumberSet candidates, NaturalNumberSet not, scope int delegate(size_t[]) yield)",
      "parameters" : [
       {
        "name" : "clique",
        "deco" : "Am"
       },
       {
        "name" : "candidates",
        "deco" : "S7dentist4util4math16NaturalNumberSet"
       },
       {
        "name" : "not",
        "deco" : "S7dentist4util4math16NaturalNumberSet"
       },
       {
        "name" : "yield",
        "deco" : "DFAmZi",
        "storageClass" : [
         "scope"
        ]
       }
      ],
      "endline" : 2627,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Calculate a longest increasing subsequence of `sequence`. This subsequence\n    is not necessarily contiguous, or unique. Given a `sequence` of `n`\n    elements the algorithm uses `O(n log n)` evaluation of `pred`.\n\n    See_Also: $(LINK https://en.wikipedia.org/wiki/Longest_increasing_subsequence)\n",
    "line" : 2638,
    "char" : 6,
    "name" : "longestIncreasingSubsequence",
    "parameters" : [
     {
      "name" : "pred",
      "kind" : "alias",
      "defaultAlias" : "\"a < b\""
     },
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isRandomAccessRange!Range",
    "members" : [
     {
      "name" : "longestIncreasingSubsequence",
      "kind" : "function",
      "line" : 2638,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(Range sequence)",
      "parameters" : [
       {
        "name" : "sequence",
        "type" : "Range"
       }
      ],
      "endline" : 2699,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L2702_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Example from Wikipedia\n",
    "line" : 2702,
    "char" : 1,
    "endline" : 2713,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L2713_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Example using a different `pred`\n",
    "line" : 2713,
    "char" : 1,
    "endline" : 2724,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L2724_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 2724,
    "char" : 1,
    "endline" : 2734,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L2734_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 2734,
    "char" : 1,
    "endline" : 2744,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L2744_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 2744,
    "char" : 1,
    "endline" : 2754,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L2754_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 2754,
    "char" : 1,
    "endline" : 2763,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.util.process",
  "kind" : "module",
  "file" : "source/dentist/util/process.d",
  "comment" : "    Convenience wrappers for executing subprocesses.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "dentist.util.log",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "endsWith",
     "filter"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 16,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "array"
    ]
   },
   {
    "name" : "std.process",
    "kind" : "import",
    "line" : 17,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "kill",
     "Redirect",
     "Config",
     "pipeProcess",
     "pipeShell",
     "ProcessPipes",
     "wait"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 26,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isSomeString"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 27,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Flag",
     "No",
     "Yes"
    ]
   },
   {
    "name" : "vibe.data.json",
    "kind" : "import",
    "line" : 28,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "toJson" : "serializeToJson"
    }
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Execute `command` and return a range of output lines.\n\nParams:\ncommand = range of `string`s that is executed directly. `null` values\nare automatically removed before execution.\nworkdir = change working directory for `command`\nisBuffered = allocate memory for each line or use a single buffer\nSee_also: `LinesPipe`\n",
    "line" : 39,
    "char" : 6,
    "name" : "pipeLines",
    "parameters" : [
     {
      "name" : "isBuffered",
      "kind" : "value",
      "deco" : "E3std8typecons__T4FlagVAyaa10_69734275666665726564ZQBi",
      "defaultValue" : "No.isBuffered"
     },
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!Range && isSomeString!(ElementType!Range)",
    "members" : [
     {
      "name" : "pipeLines",
      "kind" : "function",
      "line" : 39,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(Range command, in string workdir = null)",
      "parameters" : [
       {
        "name" : "command",
        "type" : "Range"
       },
       {
        "name" : "workdir",
        "type" : "string",
        "storageClass" : [
         "in"
        ],
        "default" : "null"
       }
      ],
      "endline" : 48,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 51,
    "char" : 6,
    "name" : "pipeLines",
    "parameters" : [
     {
      "name" : "isBuffered",
      "kind" : "value",
      "deco" : "E3std8typecons__T4FlagVAyaa10_69734275666665726564ZQBi",
      "defaultValue" : "No.isBuffered"
     }
    ],
    "members" : [
     {
      "name" : "pipeLines",
      "kind" : "function",
      "line" : 51,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(in string shellCommand, in string workdir = null)",
      "parameters" : [
       {
        "name" : "shellCommand",
        "type" : "string",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "workdir",
        "type" : "string",
        "storageClass" : [
         "in"
        ],
        "default" : "null"
       }
      ],
      "endline" : 54,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L57_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 57,
    "char" : 1,
    "endline" : 75,
    "endchar" : 1
   },
   {
    "name" : "ProcessInfo",
    "kind" : "struct",
    "protection" : "private",
    "line" : 75,
    "char" : 9,
    "members" : [
     {
      "name" : "command",
      "kind" : "variable",
      "protection" : "public",
      "line" : 77,
      "char" : 21,
      "storageClass" : [
       "const"
      ],
      "deco" : "xAAya",
      "offset" : 0
     },
     {
      "name" : "workdir",
      "kind" : "variable",
      "protection" : "public",
      "line" : 78,
      "char" : 19,
      "storageClass" : [
       "const"
      ],
      "deco" : "xAya",
      "offset" : 16
     }
    ]
   },
   {
    "name" : "ShellInfo",
    "kind" : "struct",
    "protection" : "private",
    "line" : 81,
    "char" : 9,
    "members" : [
     {
      "name" : "command",
      "kind" : "variable",
      "protection" : "public",
      "line" : 83,
      "char" : 19,
      "storageClass" : [
       "const"
      ],
      "deco" : "xAya",
      "offset" : 0
     },
     {
      "name" : "workdir",
      "kind" : "variable",
      "protection" : "public",
      "line" : 84,
      "char" : 19,
      "storageClass" : [
       "const"
      ],
      "deco" : "xAya",
      "offset" : 16
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Range of output lines from an external command. Construct using\n`pipeLines`.\n",
    "line" : 90,
    "char" : 7,
    "name" : "LinesPipe",
    "parameters" : [
     {
      "name" : "CommandInfo",
      "kind" : "type"
     },
     {
      "name" : "isBuffered",
      "kind" : "value",
      "deco" : "E3std8typecons__T4FlagVAyaa10_69734275666665726564ZQBi"
     }
    ],
    "members" : [
     {
      "name" : "LinesPipe",
      "kind" : "class",
      "protection" : "public",
      "line" : 90,
      "char" : 7,
      "members" : [
       {
        "name" : "lineTerminator",
        "kind" : "variable",
        "comment" : "Only Linux-line endings supported.\n",
        "line" : 93,
        "char" : 17,
        "storageClass" : [
         "enum"
        ],
        "init" : "\"\\x0a\""
       },
       {
        "name" : "line_t",
        "kind" : "alias",
        "comment" : "Type of lines. Depends on `isBuffered`.\n",
        "line" : 97,
        "char" : 9,
        "type" : "char[]"
       },
       {
        "name" : "processInfo",
        "kind" : "variable",
        "line" : 101,
        "char" : 25,
        "type" : "CommandInfo"
       },
       {
        "name" : "process",
        "kind" : "variable",
        "line" : 102,
        "char" : 26,
        "type" : "ProcessPipes"
       },
       {
        "name" : "currentLine",
        "kind" : "variable",
        "line" : 103,
        "char" : 20,
        "type" : "line_t"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 106,
        "char" : 13,
        "type" : "(CommandInfo processInfo)",
        "parameters" : [
         {
          "name" : "processInfo",
          "type" : "CommandInfo"
         }
        ],
        "endline" : 109,
        "endchar" : 5
       },
       {
        "name" : "~this",
        "kind" : "destructor",
        "line" : 111,
        "char" : 5,
        "endline" : 115,
        "endchar" : 5
       },
       {
        "name" : "releaseProcess",
        "kind" : "function",
        "comment" : "Close pipe and kill process.\n\nBlocks until the process is killed.\n",
        "line" : 121,
        "char" : 10,
        "type" : "void()",
        "endline" : 140,
        "endchar" : 5
       },
       {
        "name" : "ensureInitialized",
        "kind" : "function",
        "line" : 143,
        "char" : 18,
        "type" : "void()",
        "endline" : 159,
        "endchar" : 5
       },
       {
        "name" : "launchProcess",
        "kind" : "function",
        "line" : 163,
        "char" : 30,
        "type" : "ProcessPipes()",
        "endline" : 172,
        "endchar" : 9
       },
       {
        "name" : "popFront",
        "kind" : "function",
        "comment" : "Range interface.\n",
        "line" : 187,
        "char" : 10,
        "type" : "void()",
        "endline" : 209,
        "endchar" : 5
       },
       {
        "name" : "front",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 212,
        "char" : 22,
        "type" : "@property line_t()",
        "endline" : 218,
        "endchar" : 5
       },
       {
        "name" : "empty",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 221,
        "char" : 20,
        "type" : "@property bool()",
        "endline" : 235,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "isExecutable",
    "kind" : "function",
    "protection" : "public",
    "comment" : "    Returns true iff `name` can be executed via the process function in\n    `std.process`. By default, `PATH` will be searched if `name` does not\n    contain directory separators.\n\n    Params:\n        name       = Path to file or name of executable\n        searchPath = Determines wether or not the path should be searched.\n",
    "line" : 248,
    "char" : 22,
    "deco" : "FMAyaE3std8typecons__T4FlagVQBaa10_73656172636850617468ZQBiZb",
    "originalType" : "bool(scope string name, Flag!\"searchPath\" searchPath = Yes.searchPath)",
    "parameters" : [
     {
      "name" : "name",
      "deco" : "Aya",
      "storageClass" : [
       "scope"
      ]
     },
     {
      "name" : "searchPath",
      "deco" : "E3std8typecons__T4FlagVAyaa10_73656172636850617468ZQBi",
      "default" : "Flag.yes"
     }
    ],
    "endline" : 258,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L261_C17",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 261,
    "char" : 17,
    "endline" : 270,
    "endchar" : 1
   },
   {
    "name" : "isExecutableFile",
    "kind" : "function",
    "protection" : "private",
    "line" : 270,
    "char" : 30,
    "deco" : "FNbMAyaZb",
    "parameters" : [
     {
      "name" : "path",
      "deco" : "Aya",
      "storageClass" : [
       "scope"
      ]
     }
    ],
    "endline" : 277,
    "endchar" : 1
   },
   {
    "name" : "searchPathFor",
    "kind" : "function",
    "protection" : "private",
    "line" : 280,
    "char" : 32,
    "deco" : "FMAyaZQe",
    "parameters" : [
     {
      "name" : "executable",
      "deco" : "Aya",
      "storageClass" : [
       "scope"
      ]
     }
    ],
    "endline" : 300,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.util.range",
  "kind" : "module",
  "file" : "source/dentist/util/range.d",
  "comment" : "    Some additional range functions.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "std.functional",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "unaryFun"
    ]
   },
   {
    "name" : "std.meta",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "AliasSeq",
     "staticMap"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ElementType",
     "isInputRange"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 14,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 15,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "rvalueOf"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 16,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "tuple",
     "Tuple"
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    This range iterates over fixed-sized chunks of size `chunkSize` of a\n    source `range`.\n\n    Params:\n        range = input range\n        chunkSize = integer greater than zero.\n    See Also: `std.range.chunks`\n    Returns: Range of chunk arrays, ie. `ElementType!Source[]`.\n",
    "line" : 29,
    "char" : 6,
    "name" : "arrayChunks",
    "parameters" : [
     {
      "name" : "Source",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!Source",
    "members" : [
     {
      "name" : "arrayChunks",
      "kind" : "function",
      "line" : 29,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(Source range, in size_t chunkSize)",
      "parameters" : [
       {
        "name" : "range",
        "type" : "Source"
       },
       {
        "name" : "chunkSize",
        "type" : "size_t",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 87,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L90_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 90,
    "char" : 1,
    "endline" : 101,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Generate a tuple of tuples of `chunkSize`.\n",
    "line" : 101,
    "char" : 1,
    "name" : "chunks",
    "parameters" : [
     {
      "name" : "chunkSize",
      "kind" : "value",
      "deco" : "m"
     }
    ],
    "members" : [
     {
      "kind" : "template",
      "line" : 103,
      "char" : 10,
      "name" : "chunks",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "tuple"
       }
      ],
      "constraint" : "args.length >= chunkSize",
      "members" : [
       {
        "name" : "chunks",
        "kind" : "function",
        "line" : 103,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "pure nothrow @safe (T args)",
        "parameters" : [
         {
          "name" : "args",
          "type" : "T"
         }
        ],
        "endline" : 106,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "line" : 108,
      "char" : 10,
      "name" : "chunks",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "tuple"
       }
      ],
      "constraint" : "0 < args.length && (args.length < chunkSize)",
      "members" : [
       {
        "name" : "chunks",
        "kind" : "function",
        "line" : 108,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "pure nothrow @safe (T args)",
        "parameters" : [
         {
          "name" : "args",
          "type" : "T"
         }
        ],
        "endline" : 112,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "line" : 114,
      "char" : 10,
      "name" : "chunks",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "tuple"
       }
      ],
      "constraint" : "args.length == 0",
      "members" : [
       {
        "name" : "chunks",
        "kind" : "function",
        "line" : 114,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "pure nothrow @safe (T args)",
        "parameters" : [
         {
          "name" : "args",
          "type" : "T"
         }
        ],
        "endline" : 117,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L121_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 121,
    "char" : 1,
    "endline" : 138,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Split a list of aliases into chunks of `chunkSize`.\n",
    "line" : 138,
    "char" : 1,
    "name" : "Chunks",
    "parameters" : [
     {
      "name" : "chunkSize",
      "kind" : "value",
      "deco" : "m"
     },
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "Chunks",
      "kind" : "alias",
      "line" : 142,
      "char" : 9,
      "type" : "AliasSeq!(Chunk!(T[0 .. chunkSize]), Chunks!(chunkSize, T[chunkSize .. __dollar]))"
     }
    ]
   },
   {
    "name" : "__unittest_L159_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 159,
    "char" : 1,
    "endline" : 174,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 174,
    "char" : 9,
    "name" : "Chunk",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "Chunk",
      "kind" : "struct",
      "protection" : "public",
      "line" : 176,
      "char" : 5,
      "members" : [
       {
        "name" : "chunks",
        "kind" : "alias",
        "line" : 178,
        "char" : 9,
        "type" : "T"
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Build a comparator according to `pred`.\n",
    "line" : 184,
    "char" : 1,
    "name" : "Comparator",
    "parameters" : [
     {
      "name" : "pred",
      "kind" : "tuple"
     }
    ],
    "constraint" : "pred.length == 1",
    "members" : [
     {
      "kind" : "template",
      "comment" : "Return comparison value akin to `opCmp`.\n",
      "line" : 187,
      "char" : 9,
      "name" : "compare",
      "parameters" : [
       {
        "name" : "S",
        "kind" : "type"
       },
       {
        "name" : "T",
        "kind" : "type",
        "default" : "S"
       }
      ],
      "members" : [
       {
        "name" : "compare",
        "kind" : "function",
        "line" : 187,
        "char" : 9,
        "type" : "int(in S a, in T b)",
        "parameters" : [
         {
          "name" : "a",
          "type" : "S",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "b",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 199,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "Return `true` iff `a < b`.\n",
      "line" : 202,
      "char" : 10,
      "name" : "lt",
      "parameters" : [
       {
        "name" : "S",
        "kind" : "type"
       },
       {
        "name" : "T",
        "kind" : "type",
        "default" : "S"
       }
      ],
      "members" : [
       {
        "name" : "lt",
        "kind" : "function",
        "line" : 202,
        "char" : 10,
        "type" : "bool(in S a, in T b)",
        "parameters" : [
         {
          "name" : "a",
          "type" : "S",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "b",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 205,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "Return `true` iff `a <= b`.\n",
      "line" : 208,
      "char" : 10,
      "name" : "le",
      "parameters" : [
       {
        "name" : "S",
        "kind" : "type"
       },
       {
        "name" : "T",
        "kind" : "type",
        "default" : "S"
       }
      ],
      "members" : [
       {
        "name" : "le",
        "kind" : "function",
        "line" : 208,
        "char" : 10,
        "type" : "bool(in S a, in T b)",
        "parameters" : [
         {
          "name" : "a",
          "type" : "S",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "b",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 211,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "Return `true` iff `a == b`.\n",
      "line" : 214,
      "char" : 10,
      "name" : "eq",
      "parameters" : [
       {
        "name" : "S",
        "kind" : "type"
       },
       {
        "name" : "T",
        "kind" : "type",
        "default" : "S"
       }
      ],
      "members" : [
       {
        "name" : "eq",
        "kind" : "function",
        "line" : 214,
        "char" : 10,
        "type" : "bool(in S a, in T b)",
        "parameters" : [
         {
          "name" : "a",
          "type" : "S",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "b",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 217,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "Return `true` iff `a >= b`.\n",
      "line" : 220,
      "char" : 10,
      "name" : "ge",
      "parameters" : [
       {
        "name" : "S",
        "kind" : "type"
       },
       {
        "name" : "T",
        "kind" : "type",
        "default" : "S"
       }
      ],
      "members" : [
       {
        "name" : "ge",
        "kind" : "function",
        "line" : 220,
        "char" : 10,
        "type" : "bool(in S a, in T b)",
        "parameters" : [
         {
          "name" : "a",
          "type" : "S",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "b",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 223,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "Return `true` iff `a > b`.\n",
      "line" : 226,
      "char" : 10,
      "name" : "gt",
      "parameters" : [
       {
        "name" : "S",
        "kind" : "type"
       },
       {
        "name" : "T",
        "kind" : "type",
        "default" : "S"
       }
      ],
      "members" : [
       {
        "name" : "gt",
        "kind" : "function",
        "line" : 226,
        "char" : 10,
        "type" : "bool(in S a, in T b)",
        "parameters" : [
         {
          "name" : "a",
          "type" : "S",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "b",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 229,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L233_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 233,
    "char" : 1,
    "endline" : 276,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Take exactly `n` element from range. Throws an exception if range has not\nenough elements.\n\nThis works without allocating heap memory.\n\nThrows: `Exception` if range has less than `n` elements.\n",
    "line" : 276,
    "char" : 18,
    "name" : "takeExactly",
    "parameters" : [
     {
      "name" : "n",
      "kind" : "value",
      "deco" : "m"
     },
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!R",
    "members" : [
     {
      "name" : "takeExactly",
      "kind" : "function",
      "line" : 276,
      "char" : 18,
      "type" : "ElementType!R[n](R range)",
      "parameters" : [
       {
        "name" : "range",
        "type" : "R"
       }
      ],
      "endline" : 292,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L295_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 295,
    "char" : 1,
    "endline" : 307,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 307,
    "char" : 9,
    "name" : "WrapLinesImpl",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "WrapLinesImpl",
      "kind" : "class",
      "protection" : "public",
      "line" : 307,
      "char" : 9,
      "members" : [
       {
        "name" : "output",
        "kind" : "variable",
        "line" : 309,
        "char" : 7,
        "type" : "R"
       },
       {
        "name" : "lineWidth",
        "kind" : "variable",
        "line" : 310,
        "char" : 12,
        "type" : "size_t"
       },
       {
        "name" : "column",
        "kind" : "variable",
        "line" : 311,
        "char" : 12,
        "type" : "size_t"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 313,
        "char" : 5,
        "type" : "(R output, size_t lineWidth)",
        "parameters" : [
         {
          "name" : "output",
          "type" : "R"
         },
         {
          "name" : "lineWidth",
          "type" : "size_t"
         }
        ],
        "endline" : 317,
        "endchar" : 5
       },
       {
        "name" : "put",
        "kind" : "function",
        "line" : 319,
        "char" : 10,
        "type" : "void(inout(char) c)",
        "parameters" : [
         {
          "name" : "c",
          "type" : "inout(char)"
         }
        ],
        "endline" : 337,
        "endchar" : 5
       },
       {
        "name" : "put",
        "kind" : "function",
        "line" : 339,
        "char" : 10,
        "type" : "void(string chunk)",
        "parameters" : [
         {
          "name" : "chunk",
          "type" : "string"
         }
        ],
        "endline" : 345,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Wrap an output range `output` wrapping lines at `lineWidth`.\n",
    "line" : 350,
    "char" : 6,
    "name" : "wrapLines",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "wrapLines",
      "kind" : "function",
      "line" : 350,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(R output, size_t lineWidth)",
      "parameters" : [
       {
        "name" : "output",
        "type" : "R"
       },
       {
        "name" : "lineWidth",
        "type" : "size_t"
       }
      ],
      "endline" : 353,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L355_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 355,
    "char" : 1,
    "endline" : 369,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Return a tuple of `fun` applied to each value of `tuple`.\n",
    "line" : 369,
    "char" : 6,
    "name" : "tupleMap",
    "parameters" : [
     {
      "name" : "fun",
      "kind" : "alias"
     },
     {
      "name" : "Types",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "tupleMap",
      "kind" : "function",
      "line" : 369,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(in Types values)",
      "parameters" : [
       {
        "name" : "values",
        "type" : "Types",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 383,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L386_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 386,
    "char" : 1,
    "endline" : 400,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.util.region",
  "kind" : "module",
  "file" : "source/dentist/util/region.d",
  "comment" : "    Defines `Region` and common operation with these. A `Region` is a set of\n    tagged intervals where differently tagged intervals are distinct.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "all",
     "cmp",
     "filter",
     "map",
     "max",
     "min",
     "sort",
     "sum"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "appender",
     "array",
     "join"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 14,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assertThrown"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 15,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "std.functional",
    "kind" : "import",
    "line" : 16,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "unaryFun"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 17,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assumeSorted",
     "dropExactly",
     "ElementType",
     "isInputRange",
     "only",
     "retro"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 18,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isNumeric",
     "Unqual"
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns the type of the property `tag` of `T`.\n",
    "line" : 22,
    "char" : 1,
    "name" : "TagType",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "instance",
      "kind" : "variable",
      "line" : 24,
      "char" : 15,
      "type" : "T"
     },
     {
      "name" : "TagType",
      "kind" : "alias",
      "line" : 26,
      "char" : 5,
      "type" : "typeof(instance.tag)"
     }
    ]
   },
   {
    "name" : "__unittest_L30_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 30,
    "char" : 1,
    "endline" : 42,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Checks if T has a property `tag` implicitly convertible to `Tag` – if given.\n",
    "line" : 42,
    "char" : 1,
    "name" : "isTaggable",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "isTaggable",
      "kind" : "variable",
      "line" : 44,
      "char" : 10,
      "storageClass" : [
       "enum"
      ],
      "init" : "is(TagType!T)"
     }
    ]
   },
   {
    "name" : "__unittest_L48_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 48,
    "char" : 1,
    "endline" : 61,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Thrown if two operands require the same tag but different were provided.\n",
    "line" : 61,
    "char" : 8,
    "name" : "MismatchingTagsException",
    "parameters" : [
     {
      "name" : "Tag",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "MismatchingTagsException",
      "kind" : "class",
      "protection" : "public",
      "line" : 61,
      "char" : 8,
      "members" : [
       {
        "name" : "tags",
        "kind" : "variable",
        "line" : 63,
        "char" : 19,
        "type" : "const(Tag[2])"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 65,
        "char" : 5,
        "type" : "(in Tag tagA, in Tag tagB)",
        "parameters" : [
         {
          "name" : "tagA",
          "type" : "Tag",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "tagB",
          "type" : "Tag",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 70,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 79,
    "char" : 6,
    "name" : "enforceMatchingTags",
    "parameters" : [
     {
      "name" : "Taggable",
      "kind" : "type"
     }
    ],
    "constraint" : "isTaggable!Taggable",
    "members" : [
     {
      "name" : "enforceMatchingTags",
      "kind" : "function",
      "line" : 79,
      "char" : 6,
      "type" : "pure void(in Taggable taggableA, in Taggable taggableB)",
      "parameters" : [
       {
        "name" : "taggableA",
        "type" : "Taggable",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "taggableB",
        "type" : "Taggable",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 86,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "EmptyRegionException",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Thrown if regions is unexpectedly empty.\n",
    "line" : 90,
    "char" : 8,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 92,
      "char" : 5,
      "deco" : "FZC7dentist4util6region20EmptyRegionException",
      "originalType" : "()",
      "endline" : 95,
      "endchar" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 104,
    "char" : 6,
    "name" : "enforceNonEmpty",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "is(R : Region!Args, Args...)",
    "members" : [
     {
      "name" : "enforceNonEmpty",
      "kind" : "function",
      "line" : 104,
      "char" : 6,
      "type" : "void(in R region)",
      "parameters" : [
       {
        "name" : "region",
        "type" : "R",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 108,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    A Region is a set of tagged intervals where differently tagged intervals are distinct.\n",
    "line" : 114,
    "char" : 1,
    "name" : "Region",
    "parameters" : [
     {
      "name" : "Number",
      "kind" : "type"
     },
     {
      "name" : "Tag",
      "kind" : "type"
     },
     {
      "name" : "tagAlias",
      "kind" : "value",
      "deco" : "Aya",
      "defaultValue" : "null"
     },
     {
      "name" : "emptyTag",
      "kind" : "value",
      "type" : "Tag",
      "defaultValue" : "Tag.init"
     }
    ],
    "members" : [
     {
      "name" : "Region",
      "kind" : "struct",
      "protection" : "public",
      "line" : 114,
      "char" : 1,
      "members" : [
       {
        "name" : "numberSup",
        "kind" : "variable",
        "comment" : "Supremum of `Number` values.\n",
        "line" : 120,
        "char" : 21,
        "storageClass" : [
         "enum"
        ],
        "init" : "Number.infinity"
       },
       {
        "name" : "TaggedPoint",
        "kind" : "struct",
        "protection" : "public",
        "comment" : "        This represents a single tagged point.\n",
        "line" : 127,
        "char" : 12,
        "members" : [
         {
          "name" : "tag",
          "kind" : "variable",
          "comment" : "Tag of this point.\n",
          "line" : 130,
          "char" : 13,
          "type" : "Tag",
          "init" : "emptyTag"
         },
         {
          "name" : "value",
          "kind" : "variable",
          "comment" : "Value of this point.\n",
          "line" : 137,
          "char" : 16,
          "type" : "Number"
         },
         {
          "kind" : "template",
          "comment" : "True if both points have the same `tag` and `value`.\n",
          "line" : 141,
          "char" : 14,
          "name" : "opBinary",
          "parameters" : [
           {
            "name" : "op",
            "kind" : "value",
            "type" : "string"
           }
          ],
          "constraint" : "op == \"==\"",
          "members" : [
           {
            "name" : "opBinary",
            "kind" : "function",
            "line" : 141,
            "char" : 14,
            "type" : "const pure nothrow bool(auto const ref TaggedPoint other)",
            "parameters" : [
             {
              "name" : "other",
              "type" : "TaggedPoint",
              "storageClass" : [
               "auto",
               "const",
               "ref"
              ]
             }
            ],
            "endline" : 146,
            "endchar" : 9
           }
          ]
         },
         {
          "name" : "opCmp",
          "kind" : "function",
          "comment" : "Compare two points by `tag` and `value`.\n",
          "line" : 150,
          "char" : 13,
          "type" : "const pure nothrow int(in TaggedPoint other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "TaggedPoint",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 156,
          "endchar" : 9
         },
         {
          "name" : "__unittest_L159_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 159,
          "char" : 9,
          "endline" : 175,
          "endchar" : 9
         },
         {
          "kind" : "template",
          "comment" : "Returns true iff `this` is in `interval`.\n",
          "line" : 175,
          "char" : 14,
          "name" : "opBinary",
          "parameters" : [
           {
            "name" : "op",
            "kind" : "value",
            "type" : "string"
           }
          ],
          "constraint" : "op == \"in\"",
          "members" : [
           {
            "name" : "opBinary",
            "kind" : "function",
            "line" : 175,
            "char" : 14,
            "type" : "const pure nothrow bool(in TaggedInterval interval)",
            "parameters" : [
             {
              "name" : "interval",
              "type" : "TaggedInterval",
              "storageClass" : [
               "in"
              ]
             }
            ],
            "endline" : 180,
            "endchar" : 9
           }
          ]
         },
         {
          "name" : "__unittest_L183_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 183,
          "char" : 9,
          "endline" : 196,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "TaggedInterval",
        "kind" : "struct",
        "protection" : "public",
        "comment" : "        This is a right-open interval `[begin, end)` tagged with `tag`.\n        If `tagAlias` is given then the tag may be access as a property of\n        that name.\n",
        "line" : 204,
        "char" : 12,
        "members" : [
         {
          "name" : "tag",
          "kind" : "variable",
          "comment" : "Tag of this interval.\n",
          "line" : 207,
          "char" : 13,
          "type" : "Tag",
          "init" : "emptyTag"
         },
         {
          "name" : "begin",
          "kind" : "variable",
          "comment" : "Begin of this interval (inclusive).\n",
          "line" : 214,
          "char" : 16,
          "type" : "Number"
         },
         {
          "name" : "end",
          "kind" : "variable",
          "comment" : "End of this interval (exclusive).\n",
          "line" : 217,
          "char" : 16,
          "type" : "Number"
         },
         {
          "name" : "__invariant505",
          "kind" : "function",
          "line" : 220,
          "char" : 9,
          "endline" : 227,
          "endchar" : 9
         },
         {
          "name" : "size",
          "kind" : "function",
          "comment" : "Returns the size of this interval.\n",
          "line" : 227,
          "char" : 26,
          "type" : "const pure nothrow @property Number()",
          "endline" : 230,
          "endchar" : 9
         },
         {
          "name" : "__unittest_L233_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 233,
          "char" : 9,
          "endline" : 244,
          "endchar" : 9
         },
         {
          "name" : "empty",
          "kind" : "function",
          "comment" : "Returns true iff the interval is empty. An interval is empty iff\n`begin == end`.\n",
          "line" : 244,
          "char" : 24,
          "type" : "const pure nothrow @property bool()",
          "endline" : 247,
          "endchar" : 9
         },
         {
          "name" : "__unittest_L250_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 250,
          "char" : 9,
          "endline" : 260,
          "endchar" : 9
         },
         {
          "kind" : "template",
          "comment" : "True if `tag`, `begin` and `end` of both intervals are equal.\n",
          "line" : 260,
          "char" : 14,
          "name" : "opBinary",
          "parameters" : [
           {
            "name" : "op",
            "kind" : "value",
            "type" : "string"
           }
          ],
          "constraint" : "op == \"==\"",
          "members" : [
           {
            "name" : "opBinary",
            "kind" : "function",
            "line" : 260,
            "char" : 14,
            "type" : "const pure nothrow bool(auto const ref TaggedInterval other)",
            "parameters" : [
             {
              "name" : "other",
              "type" : "TaggedInterval",
              "storageClass" : [
               "auto",
               "const",
               "ref"
              ]
             }
            ],
            "endline" : 268,
            "endchar" : 9
           }
          ]
         },
         {
          "name" : "convexHull",
          "kind" : "function",
          "comment" : "            Returns the convex hull of the intervals.\n\n            Throws: `MismatchingTagsException` if `tag`s differ.\n",
          "line" : 276,
          "char" : 31,
          "storageClass" : [
           "static"
          ],
          "type" : "pure TaggedInterval(in TaggedInterval[] intervals...)",
          "parameters" : [
           {
            "name" : "intervals",
            "type" : "TaggedInterval[]",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 307,
          "endchar" : 9
         },
         {
          "name" : "__unittest_L310_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 310,
          "char" : 9,
          "endline" : 326,
          "endchar" : 9
         },
         {
          "kind" : "template",
          "comment" : "Returns the intersection of both intervals; empty if `tag`s differ.\n",
          "line" : 326,
          "char" : 24,
          "name" : "opBinary",
          "parameters" : [
           {
            "name" : "op",
            "kind" : "value",
            "type" : "string"
           }
          ],
          "constraint" : "op == \"&\"",
          "members" : [
           {
            "name" : "opBinary",
            "kind" : "function",
            "line" : 326,
            "char" : 24,
            "type" : "const pure nothrow TaggedInterval(in TaggedInterval other)",
            "parameters" : [
             {
              "name" : "other",
              "type" : "TaggedInterval",
              "storageClass" : [
               "in"
              ]
             }
            ],
            "endline" : 347,
            "endchar" : 9
           }
          ]
         },
         {
          "kind" : "template",
          "comment" : "ditto\n",
          "line" : 350,
          "char" : 24,
          "name" : "opOpAssign",
          "parameters" : [
           {
            "name" : "op",
            "kind" : "value",
            "type" : "string"
           }
          ],
          "constraint" : "op == \"&\"",
          "members" : [
           {
            "name" : "opOpAssign",
            "kind" : "function",
            "line" : 350,
            "char" : 24,
            "type" : "TaggedInterval(in TaggedInterval other)",
            "parameters" : [
             {
              "name" : "other",
              "type" : "TaggedInterval",
              "storageClass" : [
               "in"
              ]
             }
            ],
            "endline" : 361,
            "endchar" : 9
           }
          ]
         },
         {
          "name" : "__unittest_L364_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 364,
          "char" : 9,
          "endline" : 380,
          "endchar" : 9
         },
         {
          "kind" : "template",
          "comment" : "Returns the difference of both intervals.\n",
          "line" : 380,
          "char" : 16,
          "name" : "opBinary",
          "parameters" : [
           {
            "name" : "op",
            "kind" : "value",
            "type" : "string"
           }
          ],
          "constraint" : "op == \"-\"",
          "members" : [
           {
            "name" : "opBinary",
            "kind" : "function",
            "line" : 380,
            "char" : 16,
            "type" : "const Region(in TaggedInterval other)",
            "parameters" : [
             {
              "name" : "other",
              "type" : "TaggedInterval",
              "storageClass" : [
               "in"
              ]
             }
            ],
            "endline" : 403,
            "endchar" : 9
           }
          ]
         },
         {
          "name" : "__unittest_L406_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 406,
          "char" : 9,
          "endline" : 422,
          "endchar" : 9
         },
         {
          "kind" : "template",
          "comment" : "Returns the symmetric difference of both intervals.\n",
          "line" : 422,
          "char" : 16,
          "name" : "opBinary",
          "parameters" : [
           {
            "name" : "op",
            "kind" : "value",
            "type" : "string"
           }
          ],
          "constraint" : "op == \"^\"",
          "members" : [
           {
            "name" : "opBinary",
            "kind" : "function",
            "line" : 422,
            "char" : 16,
            "type" : "const Region(in TaggedInterval other)",
            "parameters" : [
             {
              "name" : "other",
              "type" : "TaggedInterval",
              "storageClass" : [
               "in"
              ]
             }
            ],
            "endline" : 430,
            "endchar" : 9
           }
          ]
         },
         {
          "name" : "__unittest_L433_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 433,
          "char" : 9,
          "endline" : 449,
          "endchar" : 9
         },
         {
          "name" : "opCmp",
          "kind" : "function",
          "comment" : "Compare both intervals by `tag`, `begin` and `end`.\n",
          "line" : 449,
          "char" : 13,
          "type" : "const pure nothrow int(in TaggedInterval other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "TaggedInterval",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 455,
          "endchar" : 9
         },
         {
          "name" : "__unittest_L458_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 458,
          "char" : 9,
          "endline" : 474,
          "endchar" : 9
         },
         {
          "name" : "intersects",
          "kind" : "function",
          "comment" : "Returns true iff the tagged intervals intersect.\n",
          "line" : 474,
          "char" : 14,
          "type" : "const pure nothrow bool(in TaggedInterval other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "TaggedInterval",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 477,
          "endchar" : 9
         },
         {
          "name" : "__unittest_L480_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 480,
          "char" : 9,
          "endline" : 496,
          "endchar" : 9
         },
         {
          "name" : "contains",
          "kind" : "function",
          "comment" : "Returns true iff this interval contains other.\n",
          "line" : 496,
          "char" : 14,
          "type" : "const pure nothrow bool(in TaggedInterval other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "TaggedInterval",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 499,
          "endchar" : 9
         },
         {
          "name" : "__unittest_L502_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 502,
          "char" : 9,
          "endline" : 518,
          "endchar" : 9
         },
         {
          "kind" : "template",
          "comment" : "Returns true iff `this` is a subset of `other`, ie. fully included _in_.\n",
          "line" : 518,
          "char" : 14,
          "name" : "opBinary",
          "parameters" : [
           {
            "name" : "op",
            "kind" : "value",
            "type" : "string"
           }
          ],
          "constraint" : "op == \"in\"",
          "members" : [
           {
            "name" : "opBinary",
            "kind" : "function",
            "line" : 518,
            "char" : 14,
            "type" : "const pure nothrow bool(in TaggedInterval other)",
            "parameters" : [
             {
              "name" : "other",
              "type" : "TaggedInterval",
              "storageClass" : [
               "in"
              ]
             }
            ],
            "endline" : 521,
            "endchar" : 9
           }
          ]
         },
         {
          "name" : "__unittest_L524_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 524,
          "char" : 9,
          "endline" : 540,
          "endchar" : 9
         },
         {
          "name" : "isStrictlyBefore",
          "kind" : "function",
          "comment" : "Returns true iff the tagged intervals do not intersect and `this < other`.\n",
          "line" : 540,
          "char" : 14,
          "type" : "const pure nothrow bool(in TaggedInterval other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "TaggedInterval",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 543,
          "endchar" : 9
         },
         {
          "name" : "__unittest_L546_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 546,
          "char" : 9,
          "endline" : 562,
          "endchar" : 9
         },
         {
          "name" : "isStrictlyAfter",
          "kind" : "function",
          "comment" : "Returns true iff the tagged intervals do not intersect and `this > other`.\n",
          "line" : 562,
          "char" : 14,
          "type" : "const pure nothrow bool(in TaggedInterval other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "TaggedInterval",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 565,
          "endchar" : 9
         },
         {
          "name" : "__unittest_L568_C9",
          "kind" : "function",
          "comment" : "\n",
          "line" : 568,
          "char" : 9,
          "endline" : 581,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "__unittest_L584_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 584,
        "char" : 5,
        "endline" : 613,
        "endchar" : 5
       },
       {
        "name" : "_intervals",
        "kind" : "variable",
        "line" : 613,
        "char" : 30,
        "type" : "TaggedInterval[]"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : "Construct a region from `intervals`.\n\nThe newly constructed `Region` assumes ownership over `intervals`.\nModifying them outside of the struct leads to undefined behavior.\n",
        "line" : 620,
        "char" : 5,
        "type" : "(TaggedInterval[] intervals)",
        "parameters" : [
         {
          "name" : "intervals",
          "type" : "TaggedInterval[]"
         }
        ],
        "endline" : 624,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L627_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 627,
        "char" : 5,
        "endline" : 640,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : "Construct a region from a single `interval`.\n",
        "line" : 640,
        "char" : 5,
        "type" : "(TaggedInterval interval)",
        "parameters" : [
         {
          "name" : "interval",
          "type" : "TaggedInterval"
         }
        ],
        "endline" : 643,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L646_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 646,
        "char" : 5,
        "endline" : 657,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : "ditto\n",
        "line" : 657,
        "char" : 5,
        "type" : "(Tag tag, Number begin, Number end)",
        "parameters" : [
         {
          "name" : "tag",
          "type" : "Tag"
         },
         {
          "name" : "begin",
          "type" : "Number"
         },
         {
          "name" : "end",
          "type" : "Number"
         }
        ],
        "endline" : 660,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L663_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 663,
        "char" : 5,
        "endline" : 673,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L673_C5",
        "kind" : "function",
        "line" : 673,
        "char" : 5,
        "endline" : 692,
        "endchar" : 5
       },
       {
        "name" : "intervals",
        "kind" : "function",
        "comment" : "Return a list of the tagged intervals in this region.\n",
        "line" : 692,
        "char" : 39,
        "type" : "const pure nothrow @property const(TaggedInterval)[]()",
        "endline" : 695,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L698_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 698,
        "char" : 5,
        "endline" : 717,
        "endchar" : 5
       },
       {
        "name" : "releaseIntervals",
        "kind" : "function",
        "comment" : "Release the list of the tagged intervals in this region.\n\nThis returns the internal intervals array and removes all references\nto it.\n",
        "line" : 717,
        "char" : 22,
        "type" : "pure nothrow TaggedInterval[]()",
        "endline" : 724,
        "endchar" : 5
       },
       {
        "name" : "size",
        "kind" : "function",
        "comment" : "Returns the size of this region.\n",
        "line" : 728,
        "char" : 12,
        "type" : "const pure nothrow Number()",
        "endline" : 731,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L734_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 734,
        "char" : 5,
        "endline" : 752,
        "endchar" : 5
       },
       {
        "name" : "empty",
        "kind" : "function",
        "comment" : "Returns true iff the region is empty.\n",
        "line" : 752,
        "char" : 10,
        "type" : "const pure nothrow bool()",
        "endline" : 755,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L758_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 758,
        "char" : 5,
        "endline" : 776,
        "endchar" : 5
       },
       {
        "name" : "normalize",
        "kind" : "function",
        "comment" : "Merge overlapping or touching intervals.\n",
        "line" : 776,
        "char" : 20,
        "type" : "void()",
        "endline" : 816,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L818_C5",
        "kind" : "function",
        "line" : 818,
        "char" : 5,
        "endline" : 858,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "Computes the union of all tagged intervals.\n",
        "line" : 858,
        "char" : 12,
        "name" : "opBinary",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "constraint" : "op == \"|\"",
        "members" : [
         {
          "name" : "opBinary",
          "kind" : "function",
          "line" : 858,
          "char" : 12,
          "type" : "const Region(in Region other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "Region",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 861,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : "ditto\n",
        "line" : 864,
        "char" : 12,
        "name" : "opBinary",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "constraint" : "op == \"|\"",
        "members" : [
         {
          "name" : "opBinary",
          "kind" : "function",
          "line" : 864,
          "char" : 12,
          "type" : "const Region(in TaggedInterval other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "TaggedInterval",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 867,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "__unittest_L870_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 870,
        "char" : 5,
        "endline" : 886,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "Computes the intersection of the two regions.\n",
        "line" : 886,
        "char" : 12,
        "name" : "opBinary",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "constraint" : "op == \"&\"",
        "members" : [
         {
          "name" : "opBinary",
          "kind" : "function",
          "line" : 886,
          "char" : 12,
          "type" : "const Region(in Region other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "Region",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 945,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : "ditto\n",
        "line" : 948,
        "char" : 12,
        "name" : "opBinary",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "constraint" : "op == \"&\"",
        "members" : [
         {
          "name" : "opBinary",
          "kind" : "function",
          "line" : 948,
          "char" : 12,
          "type" : "const Region(in TaggedInterval other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "TaggedInterval",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 951,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "__unittest_L954_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 954,
        "char" : 5,
        "endline" : 988,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "Computes the difference of the two regions.\n",
        "line" : 988,
        "char" : 12,
        "name" : "opBinary",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "constraint" : "op == \"-\"",
        "members" : [
         {
          "name" : "opBinary",
          "kind" : "function",
          "line" : 988,
          "char" : 12,
          "type" : "const Region(in TaggedInterval interval)",
          "parameters" : [
           {
            "name" : "interval",
            "type" : "TaggedInterval",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 1015,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : "ditto\n",
        "line" : 1018,
        "char" : 12,
        "name" : "opBinary",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "constraint" : "op == \"-\"",
        "members" : [
         {
          "name" : "opBinary",
          "kind" : "function",
          "line" : 1018,
          "char" : 12,
          "type" : "const Region(in Region other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "Region",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 1053,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "__unittest_L1056_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 1056,
        "char" : 5,
        "endline" : 1071,
        "endchar" : 5
       },
       {
        "name" : "getDifferenceCandidates",
        "kind" : "function",
        "line" : 1071,
        "char" : 18,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure nothrow (in Region other)",
        "parameters" : [
         {
          "name" : "other",
          "type" : "Region",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 1085,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "Compute the operation and place the result in this region.\n\nSee_also: `opBinary!\"|\"`, `opBinary!\"&\"`, `opBinary!\"-\"`\n",
        "line" : 1091,
        "char" : 12,
        "name" : "opOpAssign",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         },
         {
          "name" : "T",
          "kind" : "type"
         }
        ],
        "constraint" : "is(T : Region) || is(T : TaggedInterval)",
        "members" : [
         {
          "name" : "opOpAssign",
          "kind" : "function",
          "line" : 1091,
          "char" : 12,
          "type" : "Region(in T other)",
          "parameters" : [
           {
            "name" : "other",
            "type" : "T",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 1106,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "__unittest_L1108_C5",
        "kind" : "function",
        "line" : 1108,
        "char" : 5,
        "endline" : 1154,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "Returns true iff point is in this region.\n",
        "line" : 1154,
        "char" : 10,
        "name" : "opBinaryRight",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "constraint" : "op == \"in\"",
        "members" : [
         {
          "name" : "opBinaryRight",
          "kind" : "function",
          "line" : 1154,
          "char" : 10,
          "type" : "const pure nothrow bool(in TaggedPoint point)",
          "parameters" : [
           {
            "name" : "point",
            "type" : "TaggedPoint",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 1174,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "includes",
        "kind" : "alias",
        "comment" : "ditto\n",
        "line" : 1177,
        "char" : 5,
        "type" : "opBinaryRight!\"in\""
       },
       {
        "name" : "__unittest_L1180_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 1180,
        "char" : 5,
        "endline" : 1204,
        "endchar" : 5
       },
       {
        "name" : "vibe.data.json",
        "kind" : "import",
        "line" : 1204,
        "char" : 12,
        "protection" : "private",
        "selective" : [
         "Json"
        ]
       },
       {
        "name" : "toJson",
        "kind" : "function",
        "comment" : "Convert to/from `vibed.data.json.Json`.\n",
        "line" : 1207,
        "char" : 10,
        "type" : "const @safe Json()",
        "endline" : 1212,
        "endchar" : 5
       },
       {
        "name" : "fromJson",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 1215,
        "char" : 25,
        "storageClass" : [
         "static"
        ],
        "type" : "@safe typeof(this)(Json json)",
        "parameters" : [
         {
          "name" : "json",
          "type" : "Json"
         }
        ],
        "endline" : 1220,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L1225_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 1225,
    "char" : 1,
    "endline" : 1236,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Returns true iff `thing` is empty.\n\n    See_Also: `Region.empty`, `Region.TaggedInterval.empty`\n",
    "line" : 1236,
    "char" : 6,
    "name" : "empty",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "is(T : Region!Args, Args...) || is(T : Region!Args.TaggedInterval, Args...)",
    "members" : [
     {
      "name" : "empty",
      "kind" : "function",
      "line" : 1236,
      "char" : 6,
      "type" : "pure nothrow bool(in T thing)",
      "parameters" : [
       {
        "name" : "thing",
        "type" : "T",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1240,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L1243_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 1243,
    "char" : 1,
    "endline" : 1265,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Returns the union of all elements.\n\n    See_Also: `Region.opBinary!\"|\"`, `Region.TaggedInterval.opBinary!\"|\"`\n",
    "line" : 1265,
    "char" : 6,
    "name" : "union_",
    "parameters" : [
     {
      "name" : "Range",
      "kind" : "type"
     }
    ],
    "constraint" : "isInputRange!Range && is(ElementType!Range : Region!Args, Args...)",
    "members" : [
     {
      "name" : "union_",
      "kind" : "function",
      "line" : 1265,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(Range regions)",
      "parameters" : [
       {
        "name" : "regions",
        "type" : "Range"
       }
      ],
      "endline" : 1273,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L1276_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 1276,
    "char" : 1,
    "endline" : 1300,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Returns the minimum/supremum point of the region. Both minimum and\n    supremum are undefined for empty regions.\n\n    Throws: `MismatchingTagsException` if `tag`s differ.\n    Throws: `EmptyRegionException` if `region` is empty.\n",
    "line" : 1300,
    "char" : 6,
    "name" : "min",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "is(R : Region!Args, Args...)",
    "members" : [
     {
      "name" : "min",
      "kind" : "function",
      "line" : 1300,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(R region)",
      "parameters" : [
       {
        "name" : "region",
        "type" : "R"
       }
      ],
      "endline" : 1306,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 1309,
    "char" : 6,
    "name" : "sup",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "is(R : Region!Args, Args...)",
    "members" : [
     {
      "name" : "sup",
      "kind" : "function",
      "line" : 1309,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(R region)",
      "parameters" : [
       {
        "name" : "region",
        "type" : "R"
       }
      ],
      "endline" : 1315,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L1318_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 1318,
    "char" : 1,
    "endline" : 1341,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Returns convex hull of the region.\n\n    Throws: `MismatchingTagsException` if `tag`s differ.\n",
    "line" : 1341,
    "char" : 18,
    "name" : "convexHull",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     }
    ],
    "constraint" : "is(R : Region!Args, Args...)",
    "members" : [
     {
      "name" : "convexHull",
      "kind" : "function",
      "line" : 1341,
      "char" : 18,
      "type" : "R.TaggedInterval(R region)",
      "parameters" : [
       {
        "name" : "region",
        "type" : "R"
       }
      ],
      "endline" : 1351,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L1354_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 1354,
    "char" : 1,
    "endline" : 1372,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Tiling solution.\n\nSee_also: `findTilings`\n",
    "line" : 1372,
    "char" : 1,
    "name" : "Tiling",
    "parameters" : [
     {
      "name" : "R",
      "kind" : "type"
     },
     {
      "name" : "N",
      "kind" : "type"
     },
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "Tiling",
      "kind" : "struct",
      "protection" : "public",
      "line" : 1372,
      "char" : 1,
      "members" : [
       {
        "name" : "region",
        "kind" : "variable",
        "comment" : "Region covered by the tiling.\n",
        "line" : 1375,
        "char" : 7,
        "type" : "R"
       },
       {
        "name" : "totalOverlap",
        "kind" : "variable",
        "comment" : "Sum of all overlaps.\n",
        "line" : 1378,
        "char" : 7,
        "type" : "N"
       },
       {
        "name" : "elements",
        "kind" : "variable",
        "comment" : "Elements included in the tiling.\n",
        "line" : 1381,
        "char" : 9,
        "type" : "T[]"
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Find all valid tilings of elements.\n\nA tiling of `elements` is a sub-sequence of `elements` such that the\npair-wise overlap is no more than `maxLocalOverlap` and the sum of\noverlaps is no more than `maxGlobalOverlap`.\n\nThis uses a depth-first search of the solution space pruning (greedily)\nif one of the tiling conditions is violated. `elements` are translated\nto intervals by `toInterval` which is potentially called `O(n!)` times\nwhere `n = elements.length` .\n\nReturns: `Tiling[]` of all valid tilings.\n",
    "line" : 1397,
    "char" : 6,
    "name" : "findTilings",
    "parameters" : [
     {
      "name" : "toInterval",
      "kind" : "alias"
     },
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "N",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "findTilings",
      "kind" : "function",
      "line" : 1397,
      "char" : 6,
      "storageClass" : [
       "auto"
      ],
      "type" : "(T[] elements, in N maxLocalOverlap, in N maxGlobalOverlap = N.max)",
      "parameters" : [
       {
        "name" : "elements",
        "type" : "T[]"
       },
       {
        "name" : "maxLocalOverlap",
        "type" : "N",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "maxGlobalOverlap",
        "type" : "N",
        "storageClass" : [
         "in"
        ],
        "default" : "N.max"
       }
      ],
      "endline" : 1447,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L1450_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 1450,
    "char" : 1,
    "endline" : 1518,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.util.saturationmath",
  "kind" : "module",
  "file" : "source/dentist/util/saturationmath.d",
  "comment" : "    Efficient implementation of saturation math.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private"
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Defines +/-infinity as interpreted by this module.\n",
    "line" : 15,
    "char" : 1,
    "name" : "saturatedInfinity",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "isNumeric!T",
    "members" : [
     {
      "name" : "saturatedInfinity",
      "kind" : "variable",
      "line" : 18,
      "char" : 14,
      "storageClass" : [
       "enum"
      ],
      "init" : "T.infinity"
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 24,
    "char" : 1,
    "name" : "saturatedMinusInfinity",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "isNumeric!T",
    "members" : [
     {
      "name" : "saturatedInfinty",
      "kind" : "variable",
      "line" : 27,
      "char" : 14,
      "storageClass" : [
       "enum"
      ],
      "init" : "-T.infinity"
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Computes the result of `a + b` limited to the natural min/max value of `T`.\nAdditionally the min/max value of `T` are treated as -/+infinity,\nrespectively.\n",
    "line" : 36,
    "char" : 3,
    "name" : "saturatedAdd",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "isFloatingPoint!T",
    "members" : [
     {
      "name" : "saturatedAdd",
      "kind" : "function",
      "line" : 36,
      "char" : 3,
      "type" : "T(T a, T b)",
      "parameters" : [
       {
        "name" : "a",
        "type" : "T"
       },
       {
        "name" : "b",
        "type" : "T"
       }
      ],
      "endline" : 39,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 42,
    "char" : 3,
    "name" : "saturatedAdd",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "isIntegral!T && isUnsigned!T",
    "members" : [
     {
      "name" : "saturatedAdd",
      "kind" : "function",
      "line" : 42,
      "char" : 3,
      "type" : "T(T a, T b)",
      "parameters" : [
       {
        "name" : "a",
        "type" : "T"
       },
       {
        "name" : "b",
        "type" : "T"
       }
      ],
      "endline" : 54,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L56_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 56,
    "char" : 1,
    "endline" : 65,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 65,
    "char" : 3,
    "name" : "saturatedAdd",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "isIntegral!T && isSigned!T",
    "members" : [
     {
      "name" : "saturatedAdd",
      "kind" : "function",
      "line" : 65,
      "char" : 3,
      "type" : "T(T a, T b)",
      "parameters" : [
       {
        "name" : "a",
        "type" : "T"
       },
       {
        "name" : "b",
        "type" : "T"
       }
      ],
      "endline" : 105,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L108_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 108,
    "char" : 1,
    "endline" : 128,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L128_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 128,
    "char" : 1,
    "endline" : 205,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.util.string",
  "kind" : "module",
  "file" : "source/dentist/util/string.d",
  "comment" : "    Some additional string functions.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "countUntil",
     "joiner",
     "min",
     "map"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 16,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "appender",
     "array",
     "minimallyInitializedArray"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 20,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 21,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "basicExceptionCtors",
     "enforce"
    ]
   },
   {
    "name" : "std.functional",
    "kind" : "import",
    "line" : 22,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "binaryFun"
    ]
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ceil",
     "floor",
     "isInfinity",
     "isNaN",
     "round",
     "sgn",
     "sqrt"
    ]
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 31,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "chain",
     "chunks",
     "cycle",
     "only",
     "take",
     "zip"
    ]
   },
   {
    "name" : "std.range.primitives",
    "kind" : "import",
    "line" : 38,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "hasSlicing"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 39,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "lineSplitter",
     "tr"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 40,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isFloatingPoint",
     "isSomeString"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 43,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Flag",
     "No",
     "tuple",
     "Yes"
    ]
   },
   {
    "name" : "transforms",
    "kind" : "import",
    "line" : 48,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "snakeCaseCT"
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Convert a string to `dash-case` at compile time.\n",
    "line" : 52,
    "char" : 6,
    "name" : "dashCaseCT",
    "parameters" : [
     {
      "name" : "camelCase",
      "kind" : "value",
      "deco" : "Aya"
     }
    ],
    "members" : [
     {
      "name" : "dashCaseCT",
      "kind" : "variable",
      "line" : 52,
      "char" : 6,
      "storageClass" : [
       "enum"
      ],
      "init" : "camelCase.snakeCaseCT.tr(\"_\", \"-\")"
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Adds one level of indentation for a multi-line string. Adds `indentSize`\n    spaces to each non-empty line.\n\n    Returns: indented string\n",
    "line" : 61,
    "char" : 3,
    "name" : "indent",
    "parameters" : [
     {
      "name" : "S",
      "kind" : "type"
     }
    ],
    "constraint" : "isSomeString!S",
    "members" : [
     {
      "name" : "indent",
      "kind" : "function",
      "line" : 61,
      "char" : 3,
      "type" : "S(S str, in size_t indentSize = 4)",
      "parameters" : [
       {
        "name" : "str",
        "type" : "S"
       },
       {
        "name" : "indentSize",
        "type" : "size_t",
        "storageClass" : [
         "in"
        ],
        "default" : "4"
       }
      ],
      "endline" : 73,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L76_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 76,
    "char" : 1,
    "endline" : 87,
    "endchar" : 1
   },
   {
    "name" : "AlignmentException",
    "kind" : "class",
    "protection" : "public",
    "comment" : "Thrown on errors during sequence alignment.\n\nSee_also: `findAlignment`, `SequenceAlignment`\n",
    "line" : 87,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "protection" : "public",
      "comment" : "\n",
      "line" : 90,
      "char" : 5
     }
    ]
   },
   {
    "name" : "EditOp",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "One edit operation of the Needleman-Wunsch algorithm.\n\nSee_also: `findAlignment`, `SequenceAlignment`\n",
    "line" : 97,
    "char" : 1,
    "baseDeco" : "g",
    "members" : [
     {
      "name" : "substitution",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(byte)0",
      "line" : 99,
      "char" : 5
     },
     {
      "name" : "deletetion",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 100,
      "char" : 5
     },
     {
      "name" : "insertion",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 101,
      "char" : 5
     }
    ]
   },
   {
    "name" : "score_t",
    "kind" : "alias",
    "protection" : "public",
    "comment" : "Type used for alignment scores.\n",
    "line" : 106,
    "char" : 1,
    "deco" : "k"
   },
   {
    "name" : "Strip",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "Used for partial alignments.\n\nSee_also: `SequenceAlignment.partial`\n",
    "line" : 112,
    "char" : 8,
    "baseDeco" : "g",
    "members" : [
     {
      "name" : "none",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(byte)0",
      "comment" : "Do not strip anything.\n",
      "line" : 115,
      "char" : 5
     },
     {
      "name" : "back",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(byte)1",
      "comment" : "Strip insertions at the end of the alignment.\n",
      "line" : 118,
      "char" : 5
     },
     {
      "name" : "front",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(byte)2",
      "comment" : "Strip insertions at the beginning of the alignment.\n",
      "line" : 121,
      "char" : 5
     },
     {
      "name" : "both",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "cast(byte)3",
      "comment" : "Strip insertions at the beginning and end of the alignment.\n",
      "line" : 124,
      "char" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Represents an alignment of two sequences.\n",
    "line" : 129,
    "char" : 1,
    "name" : "SequenceAlignment",
    "parameters" : [
     {
      "name" : "S",
      "kind" : "type"
     },
     {
      "name" : "scoreFun",
      "kind" : "alias",
      "defaultAlias" : "\"a == b ? 0 : 1\""
     }
    ],
    "members" : [
     {
      "name" : "SequenceAlignment",
      "kind" : "struct",
      "protection" : "public",
      "line" : 129,
      "char" : 1,
      "members" : [
       {
        "name" : "getScore",
        "kind" : "alias",
        "line" : 131,
        "char" : 13,
        "type" : "binaryFun!scoreFun"
       },
       {
        "name" : "score",
        "kind" : "variable",
        "comment" : "Total score of this alignment.\n",
        "line" : 134,
        "char" : 13,
        "type" : "score_t"
       },
       {
        "name" : "editPath",
        "kind" : "variable",
        "comment" : "Edit path.\n",
        "line" : 137,
        "char" : 14,
        "type" : "EditOp[]"
       },
       {
        "name" : "reference",
        "kind" : "variable",
        "comment" : "Reference sequence.\n",
        "line" : 140,
        "char" : 7,
        "type" : "S"
       },
       {
        "name" : "query",
        "kind" : "variable",
        "comment" : "Query sequence.\n",
        "line" : 143,
        "char" : 7,
        "type" : "S"
       },
       {
        "name" : "indelPenalty",
        "kind" : "variable",
        "comment" : "Penalty score for insertions and deletions.\n",
        "line" : 146,
        "char" : 13,
        "type" : "score_t"
       },
       {
        "name" : "freeShift",
        "kind" : "variable",
        "comment" : "Whether this is a free shift alignment. Indels at the boundaries\nare scored neutrally if true.\n",
        "line" : 150,
        "char" : 22,
        "type" : "Flag!\"freeShift\""
       },
       {
        "name" : "computeScore",
        "kind" : "function",
        "comment" : "Compute alignment score.\n",
        "line" : 154,
        "char" : 13,
        "type" : "const pure score_t()",
        "endline" : 163,
        "endchar" : 5
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "comment" : "Check if the edit ops, score and sequences match with each other.\n",
        "line" : 167,
        "char" : 10,
        "type" : "const pure nothrow bool()",
        "endline" : 172,
        "endchar" : 5
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 175,
        "char" : 18,
        "type" : "const pure nothrow bool(in WalkResult walkResult)",
        "parameters" : [
         {
          "name" : "walkResult",
          "type" : "WalkResult",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 180,
        "endchar" : 5
       },
       {
        "name" : "WalkResult",
        "kind" : "struct",
        "protection" : "public",
        "line" : 183,
        "char" : 20,
        "members" : [
         {
          "name" : "computedScore",
          "kind" : "variable",
          "line" : 185,
          "char" : 17,
          "type" : "score_t"
         },
         {
          "name" : "i",
          "kind" : "variable",
          "line" : 186,
          "char" : 16,
          "type" : "size_t"
         },
         {
          "name" : "j",
          "kind" : "variable",
          "line" : 186,
          "char" : 19,
          "type" : "size_t"
         }
        ]
       },
       {
        "name" : "walkEditOps",
        "kind" : "function",
        "line" : 190,
        "char" : 18,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure nothrow ()",
        "endline" : 230,
        "endchar" : 5
       },
       {
        "name" : "stripInsertions",
        "kind" : "function",
        "comment" : "Strip leading/trailing insertions.\n",
        "line" : 233,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "inout pure nothrow (Strip strip)",
        "parameters" : [
         {
          "name" : "strip",
          "type" : "Strip"
         }
        ],
        "endline" : 236,
        "endchar" : 5
       },
       {
        "name" : "partial",
        "kind" : "function",
        "comment" : "Get a partial alignment with respect to `reference`.\n",
        "line" : 239,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "inout pure nothrow (in size_t begin, in size_t end, Strip stripInsertions = Strip.none)",
        "parameters" : [
         {
          "name" : "begin",
          "type" : "size_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "end",
          "type" : "size_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "stripInsertions",
          "type" : "Strip",
          "default" : "Strip.none"
         }
        ],
        "endline" : 320,
        "endchar" : 5
       },
       {
        "name" : "opIndex",
        "kind" : "function",
        "comment" : "ditto\n",
        "line" : 323,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "inout pure nothrow (in size_t[2] slice)",
        "parameters" : [
         {
          "name" : "slice",
          "type" : "size_t[2]",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 326,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L329_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 329,
        "char" : 5,
        "endline" : 350,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "line" : 350,
        "char" : 15,
        "name" : "opSlice",
        "parameters" : [
         {
          "name" : "dim",
          "kind" : "value",
          "type" : "size_t"
         }
        ],
        "members" : [
         {
          "name" : "opSlice",
          "kind" : "function",
          "line" : 350,
          "char" : 15,
          "type" : "const pure nothrow size_t[2](in size_t begin, in size_t end)",
          "parameters" : [
           {
            "name" : "begin",
            "type" : "size_t",
            "storageClass" : [
             "in"
            ]
           },
           {
            "name" : "end",
            "type" : "size_t",
            "storageClass" : [
             "in"
            ]
           }
          ],
          "endline" : 353,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "opDollar",
        "kind" : "function",
        "comment" : "Returns `reference.length` for use with slicing operator.\n",
        "line" : 357,
        "char" : 10,
        "storageClass" : [
         "auto"
        ],
        "type" : "const pure nothrow ()",
        "endline" : 360,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "Get a string representation of this alignment. Visual alignment breaks\nunless elements of the sequences convert to single chars via `to!string`.\n",
        "line" : 365,
        "char" : 12,
        "name" : "toString",
        "parameters" : [
         {
          "name" : "matchSymbol",
          "kind" : "alias",
          "defaultAlias" : "'|'"
         },
         {
          "name" : "substitutionSymbol",
          "kind" : "alias",
          "defaultAlias" : "'*'"
         },
         {
          "name" : "indelSymbol",
          "kind" : "alias",
          "defaultAlias" : "' '"
         },
         {
          "name" : "gapSymbol",
          "kind" : "alias",
          "defaultAlias" : "'-'"
         }
        ],
        "members" : [
         {
          "name" : "toString",
          "kind" : "function",
          "line" : 365,
          "char" : 12,
          "type" : "const pure string(in size_t width = 0)",
          "parameters" : [
           {
            "name" : "width",
            "type" : "size_t",
            "storageClass" : [
             "in"
            ],
            "default" : "0"
           }
          ],
          "endline" : 426,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "__unittest_L429_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 429,
        "char" : 5,
        "endline" : 439,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L439_C5",
        "kind" : "function",
        "comment" : "\n",
        "line" : 439,
        "char" : 5,
        "endline" : 448,
        "endchar" : 1
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "    Compute an alignment of `query` against `reference` using the\n    Needleman-Wunsch algorithm with non-negative scores and constant\n    indel penalty. Optionally, the `freeShift` mode may be activated\n    as to allow large indels at the beginning and end of the alignment.\n\n*Implementation Notes:** The current implementation needs\n    `O(reference.length * query.length)` in time and memory. As the\n    memory requirement easily exceeds available memory it can be\n    limited for now. This may change in future and an implementation\n    using `O(max(reference.length, query.length))` memory will be\n    silently selected for large inputs.\n\n    Params:\n        scoreFun =     calculate score for a 'substitution' at `i, j` using\n                       `scoreFun(reference[i], reference[j])`\n        reference =    Sequence to compare `query` against\n        query =        Sequence to compare against `reference`\n        indelPenalty = Penalize each indel with this value\n        freeShift =    Allow indels at the beginning and end of the alignment\n        memoryLimit =  throw an error if the calculation would require more\n                       than `memoryLimit` bytes.\n    Throws: AlignmentException if the calculation would require more than\n            `memoryLimit` bytes.\n\n    See_Also: $(LINK http://en.wikipedia.org/wiki/Needleman-Wunsch_algorithm)\n",
    "line" : 478,
    "char" : 40,
    "name" : "findAlignment",
    "parameters" : [
     {
      "name" : "scoreFun",
      "kind" : "alias",
      "defaultAlias" : "\"a == b ? 0 : 1\""
     },
     {
      "name" : "S",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "findAlignment",
      "kind" : "function",
      "line" : 478,
      "char" : 40,
      "type" : "SequenceAlignment!(const(S), scoreFun)(in S reference, in S query, in score_t indelPenalty, Flag!\"freeShift\" freeShift = No.freeShift, size_t memoryLimit = 2 ^^ 20)",
      "parameters" : [
       {
        "name" : "reference",
        "type" : "S",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "query",
        "type" : "S",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "indelPenalty",
        "type" : "score_t",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "freeShift",
        "type" : "Flag!\"freeShift\"",
        "default" : "No.freeShift"
       },
       {
        "name" : "memoryLimit",
        "type" : "size_t",
        "default" : "2 ^^ 20"
       }
      ],
      "endline" : 520,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L523_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 523,
    "char" : 1,
    "endline" : 550,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L550_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 550,
    "char" : 1,
    "endline" : 581,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L581_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 581,
    "char" : 1,
    "endline" : 602,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L602_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 602,
    "char" : 1,
    "endline" : 624,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L624_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 624,
    "char" : 1,
    "endline" : 645,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L645_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 645,
    "char" : 1,
    "endline" : 691,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L691_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 691,
    "char" : 1,
    "endline" : 708,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L708_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 708,
    "char" : 1,
    "endline" : 756,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "Returns the amount of memory required to compute an alignment between\n`reference` and `query`.\n",
    "line" : 756,
    "char" : 8,
    "name" : "memoryRequired",
    "parameters" : [
     {
      "name" : "S",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "memoryRequired",
      "kind" : "function",
      "line" : 756,
      "char" : 8,
      "type" : "size_t(in S reference, in S query)",
      "parameters" : [
       {
        "name" : "reference",
        "type" : "S",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "query",
        "type" : "S",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 764,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "longestInputsLength",
    "kind" : "function",
    "protection" : "public",
    "comment" : "Returns longest `query` and `reference` length possible with `memoryLimit`.\n",
    "line" : 768,
    "char" : 8,
    "deco" : "FNamZm",
    "originalType" : "pure size_t(size_t memoryLimit)",
    "parameters" : [
     {
      "name" : "memoryLimit",
      "deco" : "m"
     }
    ],
    "endline" : 771,
    "endchar" : 1
   },
   {
    "name" : "tracebackScoringMatrix",
    "kind" : "function",
    "protection" : "private",
    "comment" : "Find edit path of the best alignment\n",
    "line" : 775,
    "char" : 18,
    "deco" : "FIS7dentist4util6string__T8DPMatrixTkZQmZAEQBoQBjQBh6EditOp",
    "originalType" : "EditOp[](in DPMatrix!score_t F)",
    "parameters" : [
     {
      "name" : "F",
      "deco" : "xS7dentist4util6string__T8DPMatrixTkZQm",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 831,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L833_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 833,
    "char" : 1,
    "endline" : 856,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 856,
    "char" : 9,
    "name" : "DPMatrix",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "DPMatrix",
      "kind" : "struct",
      "protection" : "public",
      "line" : 856,
      "char" : 9,
      "members" : [
       {
        "name" : "size",
        "kind" : "variable",
        "line" : 858,
        "char" : 15,
        "type" : "size_t[2]"
       },
       {
        "name" : "elements",
        "kind" : "variable",
        "line" : 859,
        "char" : 9,
        "type" : "T[]"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 861,
        "char" : 5,
        "type" : "(in size_t n, in size_t m)",
        "parameters" : [
         {
          "name" : "n",
          "type" : "size_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "m",
          "type" : "size_t",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 866,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 868,
        "char" : 5,
        "type" : "(in size_t n, in size_t m, ref T[] buffer)",
        "parameters" : [
         {
          "name" : "n",
          "type" : "size_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "m",
          "type" : "size_t",
          "storageClass" : [
           "in"
          ]
         },
         {
          "name" : "buffer",
          "type" : "T[]",
          "storageClass" : [
           "ref"
          ]
         }
        ],
        "endline" : 875,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L877_C5",
        "kind" : "function",
        "line" : 877,
        "char" : 5,
        "endline" : 894,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "line" : 894,
        "char" : 12,
        "name" : "opDollar",
        "parameters" : [
         {
          "name" : "dim",
          "kind" : "value",
          "type" : "size_t"
         }
        ],
        "constraint" : "dim < 2",
        "members" : [
         {
          "name" : "opDollar",
          "kind" : "function",
          "line" : 894,
          "char" : 12,
          "type" : "const pure nothrow size_t()",
          "endline" : 897,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "opIndex",
        "kind" : "function",
        "line" : 899,
        "char" : 16,
        "storageClass" : [
         "auto"
        ],
        "type" : "pure nothrow ref T(size_t i, size_t j)",
        "parameters" : [
         {
          "name" : "i",
          "type" : "size_t"
         },
         {
          "name" : "j",
          "type" : "size_t"
         }
        ],
        "endline" : 904,
        "endchar" : 5
       },
       {
        "name" : "opIndex",
        "kind" : "function",
        "line" : 906,
        "char" : 14,
        "type" : "const pure nothrow const(T)(size_t i, size_t j)",
        "parameters" : [
         {
          "name" : "i",
          "type" : "size_t"
         },
         {
          "name" : "j",
          "type" : "size_t"
         }
        ],
        "endline" : 911,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L913_C5",
        "kind" : "function",
        "line" : 913,
        "char" : 5,
        "endline" : 929,
        "endchar" : 5
       },
       {
        "name" : "opApply",
        "kind" : "function",
        "line" : 929,
        "char" : 9,
        "type" : "int(scope int delegate(size_t i, size_t j, ref T) yield)",
        "parameters" : [
         {
          "name" : "yield",
          "type" : "int delegate(size_t i, size_t j, ref T)",
          "storageClass" : [
           "scope"
          ]
         }
        ],
        "endline" : 932,
        "endchar" : 5
       },
       {
        "name" : "opApplyReverse",
        "kind" : "function",
        "line" : 934,
        "char" : 9,
        "type" : "int(scope int delegate(size_t i, size_t j, ref T) yield)",
        "parameters" : [
         {
          "name" : "yield",
          "type" : "int delegate(size_t i, size_t j, ref T)",
          "storageClass" : [
           "scope"
          ]
         }
        ],
        "endline" : 937,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L939_C5",
        "kind" : "function",
        "line" : 939,
        "char" : 5,
        "endline" : 952,
        "endchar" : 5
       },
       {
        "name" : "opApply",
        "kind" : "function",
        "line" : 952,
        "char" : 9,
        "type" : "const int(scope int delegate(size_t i, size_t j, in T) yield)",
        "parameters" : [
         {
          "name" : "yield",
          "type" : "int delegate(size_t i, size_t j, in T)",
          "storageClass" : [
           "scope"
          ]
         }
        ],
        "endline" : 955,
        "endchar" : 5
       },
       {
        "name" : "opApplyReverse",
        "kind" : "function",
        "line" : 957,
        "char" : 9,
        "type" : "const int(scope int delegate(size_t i, size_t j, in T) yield)",
        "parameters" : [
         {
          "name" : "yield",
          "type" : "int delegate(size_t i, size_t j, in T)",
          "storageClass" : [
           "scope"
          ]
         }
        ],
        "endline" : 960,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L962_C5",
        "kind" : "function",
        "line" : 962,
        "char" : 5,
        "endline" : 977,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "line" : 977,
        "char" : 25,
        "name" : "opApplyImpl",
        "parameters" : [
         {
          "name" : "reverse",
          "kind" : "value",
          "type" : "Flag!\"reverse\""
         }
        ],
        "members" : [
         {
          "name" : "opApplyImpl",
          "kind" : "variable",
          "line" : 977,
          "char" : 25,
          "storageClass" : [
           "enum"
          ],
          "init" : "\"\\x0a        int result = 0;\\x0a\\x0a        foreach\" ~ (reverse ? \"_reverse\" : \"\") ~ \" (i, ref element; elements)\\x0a        {\\x0a            result = yield(i / size[1], i % size[1], element);\\x0a\\x0a            if (result)\\x0a                break;\\x0a        }\\x0a\\x0a        return result;\\x0a    \""
         }
        ]
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "$(B Experimental!) Convert a floating point number to a base-10 string at\ncompile time. This function is very crude and will not always work!\n",
    "line" : 995,
    "char" : 8,
    "name" : "toString",
    "parameters" : [
     {
      "name" : "Float",
      "kind" : "type"
     }
    ],
    "constraint" : "isFloatingPoint!Float",
    "members" : [
     {
      "name" : "toString",
      "kind" : "function",
      "line" : 995,
      "char" : 8,
      "type" : "pure nothrow string(in Float value, in uint precision)",
      "parameters" : [
       {
        "name" : "value",
        "type" : "Float",
        "storageClass" : [
         "in"
        ]
       },
       {
        "name" : "precision",
        "deco" : "k",
        "storageClass" : [
         "in"
        ]
       }
      ],
      "endline" : 1018,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L1021_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 1021,
    "char" : 1,
    "endline" : 1038,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "dentist.util.tempfile",
  "kind" : "module",
  "file" : "source/dentist/util/tempfile.d",
  "comment" : "    Create temporary files and folders. These are wrappers around the\n    corresponding functions in `core.sys.posix.stdlib`.\n\n    Copyright: © 2018 Arne Ludwig <arne.ludwig@posteo.de>\n    License: Subject to the terms of the MIT license, as written in the\n             included LICENSE file.\n    Authors: Arne Ludwig <arne.ludwig@posteo.de>\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 14,
    "char" : 12,
    "protection" : "private",
    "selective" : [
     "endsWith"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 15,
    "char" : 12,
    "protection" : "private",
    "selective" : [
     "to"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 16,
    "char" : 12,
    "protection" : "private",
    "selective" : [
     "errnoEnforce"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 17,
    "char" : 12,
    "protection" : "private",
    "selective" : [
     "File"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 18,
    "char" : 12,
    "protection" : "private",
    "selective" : [
     "fromStringz"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 19,
    "char" : 12,
    "protection" : "private",
    "selective" : [
     "Tuple",
     "tuple"
    ]
   },
   {
    "name" : "mkdtemp",
    "kind" : "function",
    "protection" : "public",
    "comment" : "        Generates a uniquely named temporary directory from `templateString`.\n\n        The last six characters of template must be XXXXXX and these are\n        replaced with a string that makes the directory name unique. The\n        directory is then created with permissions 0700.\n\n        Returns: The generated directory name.\n",
    "line" : 30,
    "char" : 12,
    "deco" : "FNeIAyaZAya",
    "parameters" : [
     {
      "name" : "templateString",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 45,
    "endchar" : 5
   },
   {
    "name" : "__unittest_L48_C5",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 48,
    "char" : 5,
    "endline" : 68,
    "endchar" : 5
   },
   {
    "name" : "mkstemps",
    "kind" : "function",
    "protection" : "private",
    "line" : 68,
    "char" : 28,
    "linkage" : "c",
    "deco" : "UPaiZi",
    "parameters" : [
     {
      "deco" : "Pa"
     },
     {
      "deco" : "i"
     }
    ]
   },
   {
    "name" : "mkstemp",
    "kind" : "function",
    "protection" : "public",
    "comment" : "        Generates a unique temporary filename from `templateString`, creates\n        and opens the file, and returns the open file and generated name.\n\n        The last six characters of template must be \"XXXXXX\" and these are\n        replaced with a string that makes the filename unique.\n\n        The optional `templateSuffix` will be appended to the file name.\n\n        Returns: The open file and generated name.\n",
    "line" : 82,
    "char" : 42,
    "deco" : "FNeIAyaZS3std8typecons__T5TupleTSQy5stdio4FileVAyaa4_66696c65TQpVQsa4_6e616d65ZQCc",
    "parameters" : [
     {
      "name" : "templateString",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 102,
    "endchar" : 5
   },
   {
    "name" : "__unittest_L105_C5",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 105,
    "char" : 5,
    "endline" : 124,
    "endchar" : 5
   },
   {
    "name" : "mkstemp",
    "kind" : "function",
    "protection" : "public",
    "comment" : "ditto\n",
    "line" : 124,
    "char" : 42,
    "deco" : "FNeIAyaIQeZS3std8typecons__T5TupleTSQy5stdio4FileVAyaa4_66696c65TQpVQsa4_6e616d65ZQCc",
    "parameters" : [
     {
      "name" : "templateString",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     },
     {
      "name" : "templateSuffix",
      "deco" : "xAya",
      "storageClass" : [
       "in"
      ]
     }
    ],
    "endline" : 142,
    "endchar" : 5
   },
   {
    "name" : "__unittest_L145_C5",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 145,
    "char" : 5,
    "endline" : 163,
    "endchar" : 1
   }
  ]
 }
]
